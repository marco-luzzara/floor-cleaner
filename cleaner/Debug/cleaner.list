
cleaner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002298  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002544  08002544  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800254c  0800254c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080025c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080025c4  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d94f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bd  00000000  00000000  0002d9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0002faa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002038  00000000  00000000  00030c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbfd  00000000  00000000  00032c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077466  00000000  00000000  0003f865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b6ccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001620  00000000  00000000  000b6d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00006009  00000000  00000000  000b8340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002340 	.word	0x08002340

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002340 	.word	0x08002340

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8d8 	bl	8000484 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8d3 	bl	8000484 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	; (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <__clzdi2>:
 8000484:	b510      	push	{r4, lr}
 8000486:	2900      	cmp	r1, #0
 8000488:	d103      	bne.n	8000492 <__clzdi2+0xe>
 800048a:	f7ff ffdd 	bl	8000448 <__clzsi2>
 800048e:	3020      	adds	r0, #32
 8000490:	e002      	b.n	8000498 <__clzdi2+0x14>
 8000492:	1c08      	adds	r0, r1, #0
 8000494:	f7ff ffd8 	bl	8000448 <__clzsi2>
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b500      	push	{lr}
 800049e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a0:	2234      	movs	r2, #52	; 0x34
 80004a2:	2100      	movs	r1, #0
 80004a4:	a80f      	add	r0, sp, #60	; 0x3c
 80004a6:	f001 fddd 	bl	8002064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004aa:	2214      	movs	r2, #20
 80004ac:	2100      	movs	r1, #0
 80004ae:	4668      	mov	r0, sp
 80004b0:	f001 fdd8 	bl	8002064 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b4:	2224      	movs	r2, #36	; 0x24
 80004b6:	2100      	movs	r1, #0
 80004b8:	a805      	add	r0, sp, #20
 80004ba:	f001 fdd3 	bl	8002064 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004be:	4919      	ldr	r1, [pc, #100]	; (8000524 <SystemClock_Config+0x88>)
 80004c0:	4a19      	ldr	r2, [pc, #100]	; (8000528 <SystemClock_Config+0x8c>)
 80004c2:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c4:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c6:	401a      	ands	r2, r3
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	4313      	orrs	r3, r2
 80004ce:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004d0:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004d2:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004d4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004d6:	3b0f      	subs	r3, #15
 80004d8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004da:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004dc:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004de:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004e0:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e2:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f000 fc9e 	bl	8000e24 <HAL_RCC_OscConfig>
 80004e8:	2800      	cmp	r0, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ee:	e7fe      	b.n	80004ee <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004f2:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f8:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fe:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000500:	f000 ff88 	bl	8001414 <HAL_RCC_ClockConfig>
 8000504:	2800      	cmp	r0, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x70>
 8000508:	b672      	cpsid	i
  while (1)
 800050a:	e7fe      	b.n	800050a <SystemClock_Config+0x6e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800050c:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800050e:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000510:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000512:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000514:	f001 f88e 	bl	8001634 <HAL_RCCEx_PeriphCLKConfig>
 8000518:	2800      	cmp	r0, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x84>
 800051c:	b672      	cpsid	i
  while (1)
 800051e:	e7fe      	b.n	800051e <SystemClock_Config+0x82>
}
 8000520:	b01d      	add	sp, #116	; 0x74
 8000522:	bd00      	pop	{pc}
 8000524:	40007000 	.word	0x40007000
 8000528:	ffffe7ff 	.word	0xffffe7ff

0800052c <main>:
{
 800052c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2401      	movs	r4, #1
{
 8000530:	b088      	sub	sp, #32
  HAL_Init();
 8000532:	f000 f9d7 	bl	80008e4 <HAL_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000536:	2582      	movs	r5, #130	; 0x82
  SystemClock_Config();
 8000538:	f7ff ffb0 	bl	800049c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	2214      	movs	r2, #20
 800053e:	2100      	movs	r1, #0
 8000540:	a803      	add	r0, sp, #12
 8000542:	f001 fd8f 	bl	8002064 <memset>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000546:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4e24      	ldr	r6, [pc, #144]	; (80005dc <main+0xb0>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 800054a:	012d      	lsls	r5, r5, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4323      	orrs	r3, r4
 8000552:	62f3      	str	r3, [r6, #44]	; 0x2c
 8000554:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000556:	0029      	movs	r1, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4023      	ands	r3, r4
 800055a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 800055c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000560:	f000 fc14 	bl	8000d8c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11;
 8000566:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	a903      	add	r1, sp, #12
 800056c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f000 fb10 	bl	8000b98 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000578:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057c:	4323      	orrs	r3, r4
 800057e:	6333      	str	r3, [r6, #48]	; 0x30
 8000580:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000582:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000584:	401c      	ands	r4, r3
 8000586:	9401      	str	r4, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000588:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800058c:	f000 f9d0 	bl	8000930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000590:	200b      	movs	r0, #11
 8000592:	f000 f9ff 	bl	8000994 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8000596:	4c12      	ldr	r4, [pc, #72]	; (80005e0 <main+0xb4>)
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <main+0xb8>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800059a:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 800059c:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 800059e:	2396      	movs	r3, #150	; 0x96
 80005a0:	019b      	lsls	r3, r3, #6
 80005a2:	6063      	str	r3, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a4:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	60a5      	str	r5, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a8:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	6125      	str	r5, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ac:	6163      	str	r3, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	61e5      	str	r5, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b2:	6225      	str	r5, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b4:	6265      	str	r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b6:	f001 fc55 	bl	8001e64 <HAL_UART_Init>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d001      	beq.n	80005c2 <main+0x96>
 80005be:	b672      	cpsid	i
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x94>
	initialize_map(&huart2, &mapInfo);
 80005c2:	0020      	movs	r0, r4
 80005c4:	a903      	add	r1, sp, #12
 80005c6:	f000 f84d 	bl	8000664 <initialize_map>
	free(mapInfo.map[0]);
 80005ca:	9b03      	ldr	r3, [sp, #12]
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f001 fd3f 	bl	8002050 <free>
	free(mapInfo.map);
 80005d2:	9803      	ldr	r0, [sp, #12]
 80005d4:	f001 fd3c 	bl	8002050 <free>
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0xac>
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40021000 	.word	0x40021000
 80005e0:	200000e4 	.word	0x200000e4
 80005e4:	40004400 	.word	0x40004400

080005e8 <HAL_UART_RxCpltCallback>:
	is_data_arrived = true;
 80005e8:	2201      	movs	r2, #1
 80005ea:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <HAL_UART_RxCpltCallback+0x8>)
 80005ec:	701a      	strb	r2, [r3, #0]
}
 80005ee:	4770      	bx	lr
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <Error_Handler>:
 80005f4:	b672      	cpsid	i
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <Error_Handler+0x2>

080005f8 <read_number>:

/*
 * @brief read characters until '|' is found. returns the int representing
 * the sequence of chars
 */
static int read_number(UART_HandleTypeDef *huart) {
 80005f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fa:	4647      	mov	r7, r8
 80005fc:	46ce      	mov	lr, r9
 80005fe:	b580      	push	{r7, lr}
 8000600:	b085      	sub	sp, #20
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 8000602:	ab01      	add	r3, sp, #4
 8000604:	4698      	mov	r8, r3
 8000606:	4642      	mov	r2, r8
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <read_number+0x64>)
static int read_number(UART_HandleTypeDef *huart) {
 800060a:	0007      	movs	r7, r0
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 800060c:	cb03      	ldmia	r3!, {r0, r1}
 800060e:	c203      	stmia	r2!, {r0, r1}
 8000610:	8819      	ldrh	r1, [r3, #0]
	uint8_t index = 0;
 8000612:	2400      	movs	r4, #0
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 8000614:	8011      	strh	r1, [r2, #0]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	4e11      	ldr	r6, [pc, #68]	; (8000660 <read_number+0x68>)
 800061a:	7093      	strb	r3, [r2, #2]
	uint8_t index = 0;
 800061c:	466b      	mov	r3, sp
 800061e:	1cdd      	adds	r5, r3, #3
	is_data_arrived = false;
 8000620:	2300      	movs	r3, #0
 8000622:	4699      	mov	r9, r3
 8000624:	464b      	mov	r3, r9
	HAL_UART_Receive_DMA(huart, buffer, buffer_length);
 8000626:	2201      	movs	r2, #1
 8000628:	0029      	movs	r1, r5
 800062a:	0038      	movs	r0, r7
	is_data_arrived = false;
 800062c:	7033      	strb	r3, [r6, #0]
	HAL_UART_Receive_DMA(huart, buffer, buffer_length);
 800062e:	f001 fc9f 	bl	8001f70 <HAL_UART_Receive_DMA>
	while (!is_data_arrived);
 8000632:	7833      	ldrb	r3, [r6, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d100      	bne.n	800063a <read_number+0x42>
 8000638:	e7fe      	b.n	8000638 <read_number+0x40>
	return c;
 800063a:	782b      	ldrb	r3, [r5, #0]
	char token;

	do {
		token = read_char(huart);
		if (token != '|') {
 800063c:	2b7c      	cmp	r3, #124	; 0x7c
 800063e:	d004      	beq.n	800064a <read_number+0x52>
			num[index] = token;
 8000640:	4642      	mov	r2, r8
 8000642:	5513      	strb	r3, [r2, r4]
			index++;
 8000644:	3401      	adds	r4, #1
 8000646:	b2e4      	uxtb	r4, r4
		}
	} while (token != '|');
 8000648:	e7ec      	b.n	8000624 <read_number+0x2c>

	return atoi(num);
 800064a:	4640      	mov	r0, r8
 800064c:	f001 fcc6 	bl	8001fdc <atoi>
}
 8000650:	b005      	add	sp, #20
 8000652:	bcc0      	pop	{r6, r7}
 8000654:	46b9      	mov	r9, r7
 8000656:	46b0      	mov	r8, r6
 8000658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	08002358 	.word	0x08002358
 8000660:	2000008c 	.word	0x2000008c

08000664 <initialize_map>:

void initialize_map(UART_HandleTypeDef *huart, MapInfo* mapInfo) {
 8000664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000666:	464e      	mov	r6, r9
 8000668:	4657      	mov	r7, sl
 800066a:	4645      	mov	r5, r8
 800066c:	46de      	mov	lr, fp
 800066e:	4689      	mov	r9, r1
 8000670:	b5e0      	push	{r5, r6, r7, lr}
 8000672:	0006      	movs	r6, r0
	is_data_arrived = false;
 8000674:	2700      	movs	r7, #0
void initialize_map(UART_HandleTypeDef *huart, MapInfo* mapInfo) {
 8000676:	b085      	sub	sp, #20
 8000678:	ab02      	add	r3, sp, #8
 800067a:	4c29      	ldr	r4, [pc, #164]	; (8000720 <initialize_map+0xbc>)
 800067c:	1ddd      	adds	r5, r3, #7
	HAL_UART_Receive_DMA(huart, buffer, buffer_length);
 800067e:	2201      	movs	r2, #1
 8000680:	0029      	movs	r1, r5
 8000682:	0030      	movs	r0, r6
	is_data_arrived = false;
 8000684:	7027      	strb	r7, [r4, #0]
	HAL_UART_Receive_DMA(huart, buffer, buffer_length);
 8000686:	f001 fc73 	bl	8001f70 <HAL_UART_Receive_DMA>
	while (!is_data_arrived);
 800068a:	7823      	ldrb	r3, [r4, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d100      	bne.n	8000692 <initialize_map+0x2e>
 8000690:	e7fe      	b.n	8000690 <initialize_map+0x2c>
	return c;
 8000692:	782b      	ldrb	r3, [r5, #0]
	char c;
	do {
		c = read_char(huart);
	} while (c != '&');
 8000694:	2b26      	cmp	r3, #38	; 0x26
 8000696:	d1f2      	bne.n	800067e <initialize_map+0x1a>

	int row_count = read_number(huart);
 8000698:	0030      	movs	r0, r6
 800069a:	f7ff ffad 	bl	80005f8 <read_number>
 800069e:	4680      	mov	r8, r0
	int column_count = read_number(huart);
 80006a0:	0030      	movs	r0, r6
 80006a2:	f7ff ffa9 	bl	80005f8 <read_number>

	// the matrix is allocated as a single array with all the memory needed.
	// in this way the DMA can place all the received bytes directly on the matrix.
	// map_rows contains the pointer to the other rows
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 80006a6:	4643      	mov	r3, r8
 80006a8:	009b      	lsls	r3, r3, #2
	int column_count = read_number(huart);
 80006aa:	0007      	movs	r7, r0
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 80006ac:	0018      	movs	r0, r3
 80006ae:	469a      	mov	sl, r3
 80006b0:	f001 fcc4 	bl	800203c <malloc>

	int map_size = row_count * column_count;
 80006b4:	4643      	mov	r3, r8
 80006b6:	437b      	muls	r3, r7
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 80006b8:	9001      	str	r0, [sp, #4]
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 80006ba:	0018      	movs	r0, r3
	int map_size = row_count * column_count;
 80006bc:	469b      	mov	fp, r3
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 80006be:	f001 fcbd 	bl	800203c <malloc>

	for (int r = 0; r < row_count; r++) {
 80006c2:	4643      	mov	r3, r8
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 80006c4:	0001      	movs	r1, r0
	for (int r = 0; r < row_count; r++) {
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	dd07      	ble.n	80006da <initialize_map+0x76>
 80006ca:	0002      	movs	r2, r0
 80006cc:	9801      	ldr	r0, [sp, #4]
 80006ce:	0003      	movs	r3, r0
 80006d0:	4450      	add	r0, sl
		map_rows[r] = &map[r * column_count];
 80006d2:	c304      	stmia	r3!, {r2}
	for (int r = 0; r < row_count; r++) {
 80006d4:	19d2      	adds	r2, r2, r7
 80006d6:	4298      	cmp	r0, r3
 80006d8:	d1fb      	bne.n	80006d2 <initialize_map+0x6e>
	is_data_arrived = false;
 80006da:	2300      	movs	r3, #0
 80006dc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_DMA(huart, buffer, buffer_length);
 80006de:	465b      	mov	r3, fp
 80006e0:	0030      	movs	r0, r6
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f001 fc44 	bl	8001f70 <HAL_UART_Receive_DMA>
	while (!is_data_arrived);
 80006e8:	7823      	ldrb	r3, [r4, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d100      	bne.n	80006f0 <initialize_map+0x8c>
 80006ee:	e7fe      	b.n	80006ee <initialize_map+0x8a>
	is_data_arrived = false;
 80006f0:	2300      	movs	r3, #0
	HAL_UART_Receive_DMA(huart, buffer, buffer_length);
 80006f2:	2201      	movs	r2, #1
 80006f4:	0029      	movs	r1, r5
 80006f6:	0030      	movs	r0, r6
	is_data_arrived = false;
 80006f8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Receive_DMA(huart, buffer, buffer_length);
 80006fa:	f001 fc39 	bl	8001f70 <HAL_UART_Receive_DMA>
	while (!is_data_arrived);
 80006fe:	7823      	ldrb	r3, [r4, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d100      	bne.n	8000706 <initialize_map+0xa2>
 8000704:	e7fe      	b.n	8000704 <initialize_map+0xa0>
//	}

	// should read flow terminator '&'
	read_char(huart);

	mapInfo->row_count = row_count;
 8000706:	464b      	mov	r3, r9
 8000708:	4642      	mov	r2, r8
 800070a:	809a      	strh	r2, [r3, #4]
	mapInfo->column_count = column_count;
	mapInfo->map = map_rows;
 800070c:	9a01      	ldr	r2, [sp, #4]
	mapInfo->column_count = column_count;
 800070e:	80df      	strh	r7, [r3, #6]
	mapInfo->map = map_rows;
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	b005      	add	sp, #20
 8000714:	bcf0      	pop	{r4, r5, r6, r7}
 8000716:	46bb      	mov	fp, r7
 8000718:	46b2      	mov	sl, r6
 800071a:	46a9      	mov	r9, r5
 800071c:	46a0      	mov	r8, r4
 800071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000720:	2000008c 	.word	0x2000008c

08000724 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000724:	2101      	movs	r1, #1
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_MspInit+0x18>)
 8000728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072a:	430a      	orrs	r2, r1
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000732:	0552      	lsls	r2, r2, #21
 8000734:	430a      	orrs	r2, r1
 8000736:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	4770      	bx	lr
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000742:	0004      	movs	r4, r0
 8000744:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	2214      	movs	r2, #20
 8000748:	2100      	movs	r1, #0
 800074a:	a801      	add	r0, sp, #4
 800074c:	f001 fc8a 	bl	8002064 <memset>
  if(huart->Instance==USART2)
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <HAL_UART_MspInit+0x84>)
 8000752:	6822      	ldr	r2, [r4, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d001      	beq.n	800075c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000758:	b007      	add	sp, #28
 800075a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_UART_MspInit+0x88>)
 8000760:	0292      	lsls	r2, r2, #10
 8000762:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000766:	430a      	orrs	r2, r1
 8000768:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2201      	movs	r2, #1
 800076c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4311      	orrs	r1, r2
 8000772:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000776:	2704      	movs	r7, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	401a      	ands	r2, r3
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077e:	230c      	movs	r3, #12
 8000780:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	3b0a      	subs	r3, #10
 8000784:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000790:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f000 fa01 	bl	8000b98 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000796:	4d0d      	ldr	r5, [pc, #52]	; (80007cc <HAL_UART_MspInit+0x8c>)
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_UART_MspInit+0x90>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800079a:	0028      	movs	r0, r5
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800079c:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800079e:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 80007a0:	606f      	str	r7, [r5, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a2:	60ae      	str	r6, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a4:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007a6:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007a8:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007aa:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007ac:	61ee      	str	r6, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ae:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007b0:	f000 f916 	bl	80009e0 <HAL_DMA_Init>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d102      	bne.n	80007be <HAL_UART_MspInit+0x7e>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80007b8:	6725      	str	r5, [r4, #112]	; 0x70
 80007ba:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80007bc:	e7cc      	b.n	8000758 <HAL_UART_MspInit+0x18>
      Error_Handler();
 80007be:	f7ff ff19 	bl	80005f4 <Error_Handler>
 80007c2:	e7f9      	b.n	80007b8 <HAL_UART_MspInit+0x78>
 80007c4:	40004400 	.word	0x40004400
 80007c8:	40021000 	.word	0x40021000
 80007cc:	2000009c 	.word	0x2000009c
 80007d0:	40020058 	.word	0x40020058

080007d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler>
 80007d6:	46c0      	nop			; (mov r8, r8)

080007d8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <HardFault_Handler>
 80007da:	46c0      	nop			; (mov r8, r8)

080007dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007dc:	4770      	bx	lr
 80007de:	46c0      	nop			; (mov r8, r8)

080007e0 <PendSV_Handler>:
 80007e0:	4770      	bx	lr
 80007e2:	46c0      	nop			; (mov r8, r8)

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e6:	f000 f891 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ea:	bd10      	pop	{r4, pc}

080007ec <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80007ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80007ee:	4802      	ldr	r0, [pc, #8]	; (80007f8 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 80007f0:	f000 f982 	bl	8000af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80007f4:	bd10      	pop	{r4, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	2000009c 	.word	0x2000009c

080007fc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	490c      	ldr	r1, [pc, #48]	; (8000830 <_sbrk+0x34>)
 80007fe:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <_sbrk+0x38>)
{
 8000800:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000802:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <_sbrk+0x3c>)
{
 8000806:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000808:	6808      	ldr	r0, [r1, #0]
 800080a:	2800      	cmp	r0, #0
 800080c:	d004      	beq.n	8000818 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080e:	18c3      	adds	r3, r0, r3
 8000810:	4293      	cmp	r3, r2
 8000812:	d806      	bhi.n	8000822 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000814:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000816:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 800081c:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4293      	cmp	r3, r2
 8000820:	d9f8      	bls.n	8000814 <_sbrk+0x18>
    errno = ENOMEM;
 8000822:	f001 fbe1 	bl	8001fe8 <__errno>
 8000826:	230c      	movs	r3, #12
 8000828:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800082a:	2001      	movs	r0, #1
 800082c:	4240      	negs	r0, r0
 800082e:	e7f2      	b.n	8000816 <_sbrk+0x1a>
 8000830:	00000400 	.word	0x00000400
 8000834:	20002000 	.word	0x20002000
 8000838:	20000090 	.word	0x20000090
 800083c:	20000180 	.word	0x20000180

08000840 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	4770      	bx	lr
 8000842:	46c0      	nop			; (mov r8, r8)

08000844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490e      	ldr	r1, [pc, #56]	; (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0b      	ldr	r4, [pc, #44]	; (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800086e:	f7ff ffe7 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000872:	f001 fbbf 	bl	8001ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000876:	f7ff fe59 	bl	800052c <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000888:	08002554 	.word	0x08002554
  ldr r2, =_sbss
 800088c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000890:	2000017c 	.word	0x2000017c

08000894 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_COMP_IRQHandler>
	...

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b510      	push	{r4, lr}
 800089a:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	20fa      	movs	r0, #250	; 0xfa
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_InitTick+0x40>)
 80008a0:	0080      	lsls	r0, r0, #2
 80008a2:	7819      	ldrb	r1, [r3, #0]
 80008a4:	f7ff fc30 	bl	8000108 <__udivsi3>
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_InitTick+0x44>)
 80008aa:	0001      	movs	r1, r0
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	f7ff fc2b 	bl	8000108 <__udivsi3>
 80008b2:	f000 f87b 	bl	80009ac <HAL_SYSTICK_Config>
 80008b6:	2800      	cmp	r0, #0
 80008b8:	d10c      	bne.n	80008d4 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80008ba:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008bc:	2c03      	cmp	r4, #3
 80008be:	d900      	bls.n	80008c2 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80008c0:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c2:	3802      	subs	r0, #2
 80008c4:	2200      	movs	r2, #0
 80008c6:	0021      	movs	r1, r4
 80008c8:	f000 f832 	bl	8000930 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <HAL_InitTick+0x48>)
 80008ce:	2000      	movs	r0, #0
 80008d0:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80008d2:	e7f5      	b.n	80008c0 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80008d4:	2001      	movs	r0, #1
 80008d6:	e7f3      	b.n	80008c0 <HAL_InitTick+0x28>
 80008d8:	20000004 	.word	0x20000004
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008

080008e4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_Init+0x24>)
{
 80008e8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008ea:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ec:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f2:	f7ff ffd1 	bl	8000898 <HAL_InitTick>
 80008f6:	1e04      	subs	r4, r0, #0
 80008f8:	d002      	beq.n	8000900 <HAL_Init+0x1c>
    status = HAL_ERROR;
 80008fa:	2401      	movs	r4, #1
}
 80008fc:	0020      	movs	r0, r4
 80008fe:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000900:	f7ff ff10 	bl	8000724 <HAL_MspInit>
 8000904:	e7fa      	b.n	80008fc <HAL_Init+0x18>
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <HAL_IncTick+0x10>)
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_IncTick+0x14>)
 8000910:	6811      	ldr	r1, [r2, #0]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	185b      	adds	r3, r3, r1
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	4770      	bx	lr
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000168 	.word	0x20000168
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000924:	4b01      	ldr	r3, [pc, #4]	; (800092c <HAL_GetTick+0x8>)
 8000926:	6818      	ldr	r0, [r3, #0]
}
 8000928:	4770      	bx	lr
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	20000168 	.word	0x20000168

08000930 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000930:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000932:	2800      	cmp	r0, #0
 8000934:	db14      	blt.n	8000960 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_NVIC_SetPriority+0x5c>)
 8000938:	2203      	movs	r2, #3
 800093a:	469c      	mov	ip, r3
 800093c:	23ff      	movs	r3, #255	; 0xff
 800093e:	0884      	lsrs	r4, r0, #2
 8000940:	4010      	ands	r0, r2
 8000942:	001a      	movs	r2, r3
 8000944:	26c0      	movs	r6, #192	; 0xc0
 8000946:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000948:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094a:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094c:	400b      	ands	r3, r1
 800094e:	4083      	lsls	r3, r0
 8000950:	00a4      	lsls	r4, r4, #2
 8000952:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000954:	00b6      	lsls	r6, r6, #2
 8000956:	59a5      	ldr	r5, [r4, r6]
 8000958:	4395      	bics	r5, r2
 800095a:	432b      	orrs	r3, r5
 800095c:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800095e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <HAL_NVIC_SetPriority+0x60>)
 8000962:	230f      	movs	r3, #15
 8000964:	4694      	mov	ip, r2
 8000966:	2203      	movs	r2, #3
 8000968:	4003      	ands	r3, r0
 800096a:	4010      	ands	r0, r2
 800096c:	32fc      	adds	r2, #252	; 0xfc
 800096e:	0015      	movs	r5, r2
 8000970:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000972:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000974:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000976:	400a      	ands	r2, r1
 8000978:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097a:	3b08      	subs	r3, #8
 800097c:	089b      	lsrs	r3, r3, #2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4463      	add	r3, ip
 8000982:	69dc      	ldr	r4, [r3, #28]
 8000984:	43ac      	bics	r4, r5
 8000986:	4322      	orrs	r2, r4
 8000988:	61da      	str	r2, [r3, #28]
 800098a:	e7e8      	b.n	800095e <HAL_NVIC_SetPriority+0x2e>
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000994:	2800      	cmp	r0, #0
 8000996:	db05      	blt.n	80009a4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000998:	231f      	movs	r3, #31
 800099a:	4018      	ands	r0, r3
 800099c:	3b1e      	subs	r3, #30
 800099e:	4083      	lsls	r3, r0
 80009a0:	4a01      	ldr	r2, [pc, #4]	; (80009a8 <HAL_NVIC_EnableIRQ+0x14>)
 80009a2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009a4:	4770      	bx	lr
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	e000e100 	.word	0xe000e100

080009ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	1e43      	subs	r3, r0, #1
 80009b0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d20e      	bcs.n	80009d6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009bc:	4807      	ldr	r0, [pc, #28]	; (80009dc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009be:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	6a03      	ldr	r3, [r0, #32]
 80009c2:	0609      	lsls	r1, r1, #24
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ce:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	3307      	adds	r3, #7
 80009d4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009d6:	4770      	bx	lr
 80009d8:	e000e010 	.word	0xe000e010
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80009e4:	d038      	beq.n	8000a58 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009e6:	6805      	ldr	r5, [r0, #0]
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_DMA_Init+0x7c>)
 80009ea:	2114      	movs	r1, #20
 80009ec:	18e8      	adds	r0, r5, r3
 80009ee:	f7ff fb8b 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_DMA_Init+0x80>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009f4:	2202      	movs	r2, #2
  hdma->DmaBaseAddress = DMA1;
 80009f6:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80009f8:	2325      	movs	r3, #37	; 0x25
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009fa:	0080      	lsls	r0, r0, #2
 80009fc:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80009fe:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a00:	682b      	ldr	r3, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_DMA_Init+0x84>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a04:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a06:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000a08:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a0a:	6926      	ldr	r6, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8000a0c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a0e:	4333      	orrs	r3, r6
 8000a10:	6966      	ldr	r6, [r4, #20]
 8000a12:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a14:	69a6      	ldr	r6, [r4, #24]
 8000a16:	4333      	orrs	r3, r6
 8000a18:	69e6      	ldr	r6, [r4, #28]
 8000a1a:	4333      	orrs	r3, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a1c:	6a26      	ldr	r6, [r4, #32]
 8000a1e:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8000a20:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a22:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	01db      	lsls	r3, r3, #7
 8000a28:	4299      	cmp	r1, r3
 8000a2a:	d00c      	beq.n	8000a46 <HAL_DMA_Init+0x66>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000a2c:	231c      	movs	r3, #28
 8000a2e:	4018      	ands	r0, r3
 8000a30:	3b0d      	subs	r3, #13
 8000a32:	4083      	lsls	r3, r0
 8000a34:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <HAL_DMA_Init+0x88>)
 8000a36:	6811      	ldr	r1, [r2, #0]
 8000a38:	4399      	bics	r1, r3
 8000a3a:	6011      	str	r1, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000a3c:	6863      	ldr	r3, [r4, #4]
 8000a3e:	6811      	ldr	r1, [r2, #0]
 8000a40:	4083      	lsls	r3, r0
 8000a42:	430b      	orrs	r3, r1
 8000a44:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a46:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000a48:	2225      	movs	r2, #37	; 0x25
 8000a4a:	2101      	movs	r1, #1

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8000a4c:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a4e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8000a50:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8000a52:	3a01      	subs	r2, #1
 8000a54:	54a3      	strb	r3, [r4, r2]
}
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000a58:	2001      	movs	r0, #1
 8000a5a:	e7fc      	b.n	8000a56 <HAL_DMA_Init+0x76>
 8000a5c:	bffdfff8 	.word	0xbffdfff8
 8000a60:	40020000 	.word	0x40020000
 8000a64:	ffff800f 	.word	0xffff800f
 8000a68:	400200a8 	.word	0x400200a8

08000a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a6e:	2424      	movs	r4, #36	; 0x24
 8000a70:	5d05      	ldrb	r5, [r0, r4]
{
 8000a72:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 8000a74:	2d01      	cmp	r5, #1
 8000a76:	d03c      	beq.n	8000af2 <HAL_DMA_Start_IT+0x86>
 8000a78:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a7a:	2725      	movs	r7, #37	; 0x25
  __HAL_LOCK(hdma);
 8000a7c:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a7e:	5dc5      	ldrb	r5, [r0, r7]
 8000a80:	b2ee      	uxtb	r6, r5
 8000a82:	2d01      	cmp	r5, #1
 8000a84:	d004      	beq.n	8000a90 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a86:	2300      	movs	r3, #0
 8000a88:	5503      	strb	r3, [r0, r4]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a8a:	2002      	movs	r0, #2
  }
  return status;
}
 8000a8c:	b003      	add	sp, #12
 8000a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a90:	3c22      	subs	r4, #34	; 0x22
 8000a92:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a94:	2400      	movs	r4, #0
 8000a96:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000a98:	6804      	ldr	r4, [r0, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000a9a:	3f09      	subs	r7, #9
    __HAL_DMA_DISABLE(hdma);
 8000a9c:	6825      	ldr	r5, [r4, #0]
 8000a9e:	43b5      	bics	r5, r6
 8000aa0:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000aa2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000aa4:	9501      	str	r5, [sp, #4]
 8000aa6:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000aa8:	402f      	ands	r7, r5
 8000aaa:	40be      	lsls	r6, r7
 8000aac:	9d01      	ldr	r5, [sp, #4]
 8000aae:	606e      	str	r6, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ab0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ab2:	6883      	ldr	r3, [r0, #8]
 8000ab4:	2b10      	cmp	r3, #16
 8000ab6:	d00e      	beq.n	8000ad6 <HAL_DMA_Start_IT+0x6a>
    if(NULL != hdma->XferHalfCpltCallback )
 8000ab8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000aba:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000abc:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00e      	beq.n	8000ae0 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ac2:	220e      	movs	r2, #14
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000aca:	2201      	movs	r2, #1
 8000acc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ace:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	6023      	str	r3, [r4, #0]
 8000ad4:	e7da      	b.n	8000a8c <HAL_DMA_Start_IT+0x20>
    if(NULL != hdma->XferHalfCpltCallback )
 8000ad6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8000ad8:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ada:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1f0      	bne.n	8000ac2 <HAL_DMA_Start_IT+0x56>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	4393      	bics	r3, r2
 8000ae6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	3206      	adds	r2, #6
 8000aec:	4313      	orrs	r3, r2
 8000aee:	6023      	str	r3, [r4, #0]
 8000af0:	e7eb      	b.n	8000aca <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8000af2:	2002      	movs	r0, #2
 8000af4:	e7ca      	b.n	8000a8c <HAL_DMA_Start_IT+0x20>
 8000af6:	46c0      	nop			; (mov r8, r8)

08000af8 <HAL_DMA_IRQHandler>:
{
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000afa:	231c      	movs	r3, #28
 8000afc:	6c44      	ldr	r4, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000afe:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000b00:	4023      	ands	r3, r4
 8000b02:	2404      	movs	r4, #4
 8000b04:	0026      	movs	r6, r4
 8000b06:	409e      	lsls	r6, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b08:	682a      	ldr	r2, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b0a:	6801      	ldr	r1, [r0, #0]
 8000b0c:	680f      	ldr	r7, [r1, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000b0e:	4232      	tst	r2, r6
 8000b10:	d00d      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x36>
 8000b12:	423c      	tst	r4, r7
 8000b14:	d00b      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b16:	680b      	ldr	r3, [r1, #0]
 8000b18:	069b      	lsls	r3, r3, #26
 8000b1a:	d402      	bmi.n	8000b22 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b1c:	680b      	ldr	r3, [r1, #0]
 8000b1e:	43a3      	bics	r3, r4
 8000b20:	600b      	str	r3, [r1, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8000b22:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000b24:	606e      	str	r6, [r5, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d000      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8000b2a:	4798      	blx	r3
}
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000b2e:	2402      	movs	r4, #2
 8000b30:	0026      	movs	r6, r4
 8000b32:	409e      	lsls	r6, r3
 8000b34:	4232      	tst	r2, r6
 8000b36:	d014      	beq.n	8000b62 <HAL_DMA_IRQHandler+0x6a>
 8000b38:	423c      	tst	r4, r7
 8000b3a:	d012      	beq.n	8000b62 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b3c:	680b      	ldr	r3, [r1, #0]
 8000b3e:	069b      	lsls	r3, r3, #26
 8000b40:	d406      	bmi.n	8000b50 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000b42:	220a      	movs	r2, #10
 8000b44:	680b      	ldr	r3, [r1, #0]
 8000b46:	4393      	bics	r3, r2
 8000b48:	600b      	str	r3, [r1, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000b4a:	2325      	movs	r3, #37	; 0x25
 8000b4c:	3a09      	subs	r2, #9
 8000b4e:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000b50:	2324      	movs	r3, #36	; 0x24
 8000b52:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b54:	606e      	str	r6, [r5, #4]
    __HAL_UNLOCK(hdma);
 8000b56:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8000b58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0e6      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8000b5e:	4798      	blx	r3
  return;
 8000b60:	e7e4      	b.n	8000b2c <HAL_DMA_IRQHandler+0x34>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000b62:	2408      	movs	r4, #8
 8000b64:	0026      	movs	r6, r4
 8000b66:	409e      	lsls	r6, r3
 8000b68:	4232      	tst	r2, r6
 8000b6a:	d0df      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x34>
 8000b6c:	423c      	tst	r4, r7
 8000b6e:	d0dd      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x34>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b70:	680a      	ldr	r2, [r1, #0]
 8000b72:	3406      	adds	r4, #6
 8000b74:	43a2      	bics	r2, r4
 8000b76:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b78:	2201      	movs	r2, #1
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8000b7e:	2325      	movs	r3, #37	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000b80:	6069      	str	r1, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b82:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000b84:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8000b86:	2200      	movs	r2, #0
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000b8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0cc      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8000b92:	4798      	blx	r3
  return;
 8000b94:	e7ca      	b.n	8000b2c <HAL_DMA_IRQHandler+0x34>
 8000b96:	46c0      	nop			; (mov r8, r8)

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	46de      	mov	lr, fp
 8000b9e:	4657      	mov	r7, sl
 8000ba0:	4645      	mov	r5, r8
 8000ba2:	b5e0      	push	{r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ba4:	680a      	ldr	r2, [r1, #0]
{
 8000ba6:	4689      	mov	r9, r1
  uint32_t position = 0x00U;
 8000ba8:	2300      	movs	r3, #0
{
 8000baa:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d06c      	beq.n	8000c8a <HAL_GPIO_Init+0xf2>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	468b      	mov	fp, r1
 8000bb4:	465c      	mov	r4, fp
 8000bb6:	0015      	movs	r5, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	4025      	ands	r5, r4
 8000bbc:	46aa      	mov	sl, r5

    if (iocurrent)
 8000bbe:	4222      	tst	r2, r4
 8000bc0:	d05f      	beq.n	8000c82 <HAL_GPIO_Init+0xea>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc2:	464d      	mov	r5, r9
 8000bc4:	2703      	movs	r7, #3
 8000bc6:	686d      	ldr	r5, [r5, #4]
 8000bc8:	402f      	ands	r7, r5
 8000bca:	1e7e      	subs	r6, r7, #1
 8000bcc:	2e01      	cmp	r6, #1
 8000bce:	d963      	bls.n	8000c98 <HAL_GPIO_Init+0x100>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd0:	0059      	lsls	r1, r3, #1
 8000bd2:	468c      	mov	ip, r1
 8000bd4:	2f03      	cmp	r7, #3
 8000bd6:	d000      	beq.n	8000bda <HAL_GPIO_Init+0x42>
 8000bd8:	e0a7      	b.n	8000d2a <HAL_GPIO_Init+0x192>
 8000bda:	003c      	movs	r4, r7
 8000bdc:	408c      	lsls	r4, r1
 8000bde:	43e1      	mvns	r1, r4
 8000be0:	9100      	str	r1, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000be4:	9e00      	ldr	r6, [sp, #0]
 8000be6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be8:	4326      	orrs	r6, r4
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bea:	24c0      	movs	r4, #192	; 0xc0
 8000bec:	02a4      	lsls	r4, r4, #10
      GPIOx->MODER = temp;
 8000bee:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bf0:	4225      	tst	r5, r4
 8000bf2:	d046      	beq.n	8000c82 <HAL_GPIO_Init+0xea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf4:	465e      	mov	r6, fp
 8000bf6:	495e      	ldr	r1, [pc, #376]	; (8000d70 <HAL_GPIO_Init+0x1d8>)

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bf8:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	6b4c      	ldr	r4, [r1, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bfc:	401f      	ands	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4334      	orrs	r4, r6
 8000c00:	634c      	str	r4, [r1, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c02:	495c      	ldr	r1, [pc, #368]	; (8000d74 <HAL_GPIO_Init+0x1dc>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c04:	00bf      	lsls	r7, r7, #2
 8000c06:	468c      	mov	ip, r1
 8000c08:	210f      	movs	r1, #15
 8000c0a:	40b9      	lsls	r1, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c0c:	089c      	lsrs	r4, r3, #2
 8000c0e:	00a4      	lsls	r4, r4, #2
 8000c10:	4464      	add	r4, ip
 8000c12:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c14:	438e      	bics	r6, r1
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c16:	21a0      	movs	r1, #160	; 0xa0
 8000c18:	05c9      	lsls	r1, r1, #23
 8000c1a:	4288      	cmp	r0, r1
 8000c1c:	d012      	beq.n	8000c44 <HAL_GPIO_Init+0xac>
 8000c1e:	4956      	ldr	r1, [pc, #344]	; (8000d78 <HAL_GPIO_Init+0x1e0>)
 8000c20:	4288      	cmp	r0, r1
 8000c22:	d100      	bne.n	8000c26 <HAL_GPIO_Init+0x8e>
 8000c24:	e097      	b.n	8000d56 <HAL_GPIO_Init+0x1be>
 8000c26:	4955      	ldr	r1, [pc, #340]	; (8000d7c <HAL_GPIO_Init+0x1e4>)
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	d100      	bne.n	8000c2e <HAL_GPIO_Init+0x96>
 8000c2c:	e097      	b.n	8000d5e <HAL_GPIO_Init+0x1c6>
 8000c2e:	4954      	ldr	r1, [pc, #336]	; (8000d80 <HAL_GPIO_Init+0x1e8>)
 8000c30:	4288      	cmp	r0, r1
 8000c32:	d100      	bne.n	8000c36 <HAL_GPIO_Init+0x9e>
 8000c34:	e08b      	b.n	8000d4e <HAL_GPIO_Init+0x1b6>
 8000c36:	4953      	ldr	r1, [pc, #332]	; (8000d84 <HAL_GPIO_Init+0x1ec>)
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	d100      	bne.n	8000c3e <HAL_GPIO_Init+0xa6>
 8000c3c:	e093      	b.n	8000d66 <HAL_GPIO_Init+0x1ce>
 8000c3e:	2106      	movs	r1, #6
 8000c40:	40b9      	lsls	r1, r7
 8000c42:	430e      	orrs	r6, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c44:	4950      	ldr	r1, [pc, #320]	; (8000d88 <HAL_GPIO_Init+0x1f0>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c46:	60a6      	str	r6, [r4, #8]
        temp = EXTI->IMR;
 8000c48:	680c      	ldr	r4, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c4a:	4651      	mov	r1, sl
 8000c4c:	43cf      	mvns	r7, r1
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	0249      	lsls	r1, r1, #9
 8000c52:	420d      	tst	r5, r1
 8000c54:	d000      	beq.n	8000c58 <HAL_GPIO_Init+0xc0>
 8000c56:	e077      	b.n	8000d48 <HAL_GPIO_Init+0x1b0>
        temp &= ~((uint32_t)iocurrent);
 8000c58:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000c5a:	494b      	ldr	r1, [pc, #300]	; (8000d88 <HAL_GPIO_Init+0x1f0>)
 8000c5c:	600c      	str	r4, [r1, #0]

        temp = EXTI->EMR;
 8000c5e:	684e      	ldr	r6, [r1, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c60:	03a9      	lsls	r1, r5, #14
 8000c62:	d46e      	bmi.n	8000d42 <HAL_GPIO_Init+0x1aa>
        temp &= ~((uint32_t)iocurrent);
 8000c64:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000c66:	4948      	ldr	r1, [pc, #288]	; (8000d88 <HAL_GPIO_Init+0x1f0>)
 8000c68:	604e      	str	r6, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6a:	688e      	ldr	r6, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c6c:	02e9      	lsls	r1, r5, #11
 8000c6e:	d465      	bmi.n	8000d3c <HAL_GPIO_Init+0x1a4>
        temp &= ~((uint32_t)iocurrent);
 8000c70:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000c72:	4945      	ldr	r1, [pc, #276]	; (8000d88 <HAL_GPIO_Init+0x1f0>)
 8000c74:	608e      	str	r6, [r1, #8]

        temp = EXTI->FTSR;
 8000c76:	68cc      	ldr	r4, [r1, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c78:	02a9      	lsls	r1, r5, #10
 8000c7a:	d45b      	bmi.n	8000d34 <HAL_GPIO_Init+0x19c>
        temp &= ~((uint32_t)iocurrent);
 8000c7c:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000c7e:	4942      	ldr	r1, [pc, #264]	; (8000d88 <HAL_GPIO_Init+0x1f0>)
 8000c80:	60cc      	str	r4, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c82:	0014      	movs	r4, r2
      }
    }
    position++;
 8000c84:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	d194      	bne.n	8000bb4 <HAL_GPIO_Init+0x1c>
  }
}
 8000c8a:	b003      	add	sp, #12
 8000c8c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c8e:	46bb      	mov	fp, r7
 8000c90:	46b2      	mov	sl, r6
 8000c92:	46a9      	mov	r9, r5
 8000c94:	46a0      	mov	r8, r4
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c98:	005e      	lsls	r6, r3, #1
 8000c9a:	46b4      	mov	ip, r6
        temp = GPIOx->OSPEEDR;
 8000c9c:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c9e:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR;
 8000ca0:	9101      	str	r1, [sp, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ca2:	4661      	mov	r1, ip
 8000ca4:	408e      	lsls	r6, r1
 8000ca6:	43f1      	mvns	r1, r6
 8000ca8:	9100      	str	r1, [sp, #0]
 8000caa:	9901      	ldr	r1, [sp, #4]
 8000cac:	43b1      	bics	r1, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cae:	464e      	mov	r6, r9
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cb0:	9101      	str	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb2:	68f1      	ldr	r1, [r6, #12]
 8000cb4:	4666      	mov	r6, ip
 8000cb6:	40b1      	lsls	r1, r6
 8000cb8:	4688      	mov	r8, r1
 8000cba:	4646      	mov	r6, r8
 8000cbc:	9901      	ldr	r1, [sp, #4]
 8000cbe:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8000cc0:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cc2:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc4:	43a1      	bics	r1, r4
 8000cc6:	4688      	mov	r8, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc8:	4659      	mov	r1, fp
 8000cca:	092c      	lsrs	r4, r5, #4
 8000ccc:	400c      	ands	r4, r1
 8000cce:	409c      	lsls	r4, r3
 8000cd0:	4641      	mov	r1, r8
 8000cd2:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 8000cd4:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000cd6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cd8:	9900      	ldr	r1, [sp, #0]
 8000cda:	400c      	ands	r4, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cdc:	4649      	mov	r1, r9
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cde:	46a0      	mov	r8, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce0:	688c      	ldr	r4, [r1, #8]
 8000ce2:	4661      	mov	r1, ip
 8000ce4:	408c      	lsls	r4, r1
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	430c      	orrs	r4, r1
        GPIOx->PUPDR = temp;
 8000cea:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cec:	4661      	mov	r1, ip
 8000cee:	003c      	movs	r4, r7
 8000cf0:	408c      	lsls	r4, r1
 8000cf2:	2f02      	cmp	r7, #2
 8000cf4:	d000      	beq.n	8000cf8 <HAL_GPIO_Init+0x160>
 8000cf6:	e774      	b.n	8000be2 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8000cf8:	08df      	lsrs	r7, r3, #3
 8000cfa:	00bf      	lsls	r7, r7, #2
 8000cfc:	19c7      	adds	r7, r0, r7
 8000cfe:	6a39      	ldr	r1, [r7, #32]
 8000d00:	4688      	mov	r8, r1
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d02:	2107      	movs	r1, #7
 8000d04:	4019      	ands	r1, r3
 8000d06:	0089      	lsls	r1, r1, #2
 8000d08:	468c      	mov	ip, r1
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	4666      	mov	r6, ip
 8000d0e:	40b1      	lsls	r1, r6
 8000d10:	4646      	mov	r6, r8
 8000d12:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d14:	4649      	mov	r1, r9
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d16:	46b0      	mov	r8, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d18:	4666      	mov	r6, ip
 8000d1a:	6909      	ldr	r1, [r1, #16]
 8000d1c:	40b1      	lsls	r1, r6
 8000d1e:	468c      	mov	ip, r1
 8000d20:	4641      	mov	r1, r8
 8000d22:	4666      	mov	r6, ip
 8000d24:	4331      	orrs	r1, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000d26:	6239      	str	r1, [r7, #32]
 8000d28:	e75b      	b.n	8000be2 <HAL_GPIO_Init+0x4a>
 8000d2a:	2603      	movs	r6, #3
 8000d2c:	408e      	lsls	r6, r1
 8000d2e:	43f1      	mvns	r1, r6
 8000d30:	9100      	str	r1, [sp, #0]
 8000d32:	e7d0      	b.n	8000cd6 <HAL_GPIO_Init+0x13e>
          temp |= iocurrent;
 8000d34:	4651      	mov	r1, sl
 8000d36:	4321      	orrs	r1, r4
 8000d38:	000c      	movs	r4, r1
 8000d3a:	e7a0      	b.n	8000c7e <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 8000d3c:	4651      	mov	r1, sl
 8000d3e:	430e      	orrs	r6, r1
 8000d40:	e797      	b.n	8000c72 <HAL_GPIO_Init+0xda>
          temp |= iocurrent;
 8000d42:	4651      	mov	r1, sl
 8000d44:	430e      	orrs	r6, r1
 8000d46:	e78e      	b.n	8000c66 <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 8000d48:	4651      	mov	r1, sl
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	e785      	b.n	8000c5a <HAL_GPIO_Init+0xc2>
 8000d4e:	2103      	movs	r1, #3
 8000d50:	40b9      	lsls	r1, r7
 8000d52:	430e      	orrs	r6, r1
 8000d54:	e776      	b.n	8000c44 <HAL_GPIO_Init+0xac>
 8000d56:	4659      	mov	r1, fp
 8000d58:	40b9      	lsls	r1, r7
 8000d5a:	430e      	orrs	r6, r1
 8000d5c:	e772      	b.n	8000c44 <HAL_GPIO_Init+0xac>
 8000d5e:	2102      	movs	r1, #2
 8000d60:	40b9      	lsls	r1, r7
 8000d62:	430e      	orrs	r6, r1
 8000d64:	e76e      	b.n	8000c44 <HAL_GPIO_Init+0xac>
 8000d66:	2105      	movs	r1, #5
 8000d68:	40b9      	lsls	r1, r7
 8000d6a:	430e      	orrs	r6, r1
 8000d6c:	e76a      	b.n	8000c44 <HAL_GPIO_Init+0xac>
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000
 8000d78:	50000400 	.word	0x50000400
 8000d7c:	50000800 	.word	0x50000800
 8000d80:	50000c00 	.word	0x50000c00
 8000d84:	50001c00 	.word	0x50001c00
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d90:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d92:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000d94:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000d96:	e7fc      	b.n	8000d92 <HAL_GPIO_WritePin+0x6>

08000d98 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d98:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000d9a:	491c      	ldr	r1, [pc, #112]	; (8000e0c <HAL_RCC_GetSysClockFreq+0x74>)
{
 8000d9c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000d9e:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d00b      	beq.n	8000dbe <HAL_RCC_GetSysClockFreq+0x26>
 8000da6:	2b0c      	cmp	r3, #12
 8000da8:	d014      	beq.n	8000dd4 <HAL_RCC_GetSysClockFreq+0x3c>
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d009      	beq.n	8000dc2 <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000dae:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000db0:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000db2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000db4:	041b      	lsls	r3, r3, #16
 8000db6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000db8:	3301      	adds	r3, #1
 8000dba:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8000dbc:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <HAL_RCC_GetSysClockFreq+0x78>)
 8000dc0:	e7fc      	b.n	8000dbc <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000dc2:	6808      	ldr	r0, [r1, #0]
        sysclockfreq =  HSI_VALUE;
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000dc6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8000dc8:	17c0      	asrs	r0, r0, #31
 8000dca:	4018      	ands	r0, r3
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_RCC_GetSysClockFreq+0x80>)
 8000dce:	469c      	mov	ip, r3
 8000dd0:	4460      	add	r0, ip
 8000dd2:	e7f3      	b.n	8000dbc <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000dd4:	0293      	lsls	r3, r2, #10
 8000dd6:	4811      	ldr	r0, [pc, #68]	; (8000e1c <HAL_RCC_GetSysClockFreq+0x84>)
 8000dd8:	0f1b      	lsrs	r3, r3, #28
 8000dda:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000ddc:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000dde:	68cb      	ldr	r3, [r1, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000de0:	0f92      	lsrs	r2, r2, #30
 8000de2:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000de4:	03db      	lsls	r3, r3, #15
 8000de6:	d40c      	bmi.n	8000e02 <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000de8:	680b      	ldr	r3, [r1, #0]
 8000dea:	06db      	lsls	r3, r3, #27
 8000dec:	d50b      	bpl.n	8000e06 <HAL_RCC_GetSysClockFreq+0x6e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <HAL_RCC_GetSysClockFreq+0x88>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000df0:	2300      	movs	r3, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	f7ff fa34 	bl	8000260 <__aeabi_lmul>
 8000df8:	0022      	movs	r2, r4
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f7ff fa10 	bl	8000220 <__aeabi_uldivmod>
 8000e00:	e7dc      	b.n	8000dbc <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000e02:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_RCC_GetSysClockFreq+0x78>)
 8000e04:	e7f4      	b.n	8000df0 <HAL_RCC_GetSysClockFreq+0x58>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_RCC_GetSysClockFreq+0x80>)
 8000e08:	e7f2      	b.n	8000df0 <HAL_RCC_GetSysClockFreq+0x58>
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	007a1200 	.word	0x007a1200
 8000e14:	ff48e500 	.word	0xff48e500
 8000e18:	00f42400 	.word	0x00f42400
 8000e1c:	0800237c 	.word	0x0800237c
 8000e20:	003d0900 	.word	0x003d0900

08000e24 <HAL_RCC_OscConfig>:
{
 8000e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e26:	46d6      	mov	lr, sl
 8000e28:	464f      	mov	r7, r9
 8000e2a:	4646      	mov	r6, r8
 8000e2c:	b5c0      	push	{r6, r7, lr}
 8000e2e:	0004      	movs	r4, r0
 8000e30:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d100      	bne.n	8000e38 <HAL_RCC_OscConfig+0x14>
 8000e36:	e146      	b.n	80010c6 <HAL_RCC_OscConfig+0x2a2>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e38:	4bc8      	ldr	r3, [pc, #800]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000e3a:	250c      	movs	r5, #12
 8000e3c:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e3e:	68de      	ldr	r6, [r3, #12]
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	025b      	lsls	r3, r3, #9
 8000e44:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e48:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4a:	07da      	lsls	r2, r3, #31
 8000e4c:	d533      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4e:	2d08      	cmp	r5, #8
 8000e50:	d100      	bne.n	8000e54 <HAL_RCC_OscConfig+0x30>
 8000e52:	e12f      	b.n	80010b4 <HAL_RCC_OscConfig+0x290>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e54:	2d0c      	cmp	r5, #12
 8000e56:	d100      	bne.n	8000e5a <HAL_RCC_OscConfig+0x36>
 8000e58:	e129      	b.n	80010ae <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5a:	2080      	movs	r0, #128	; 0x80
 8000e5c:	6861      	ldr	r1, [r4, #4]
 8000e5e:	0240      	lsls	r0, r0, #9
 8000e60:	4281      	cmp	r1, r0
 8000e62:	d100      	bne.n	8000e66 <HAL_RCC_OscConfig+0x42>
 8000e64:	e161      	b.n	800112a <HAL_RCC_OscConfig+0x306>
 8000e66:	22a0      	movs	r2, #160	; 0xa0
 8000e68:	02d2      	lsls	r2, r2, #11
 8000e6a:	4291      	cmp	r1, r2
 8000e6c:	d100      	bne.n	8000e70 <HAL_RCC_OscConfig+0x4c>
 8000e6e:	e245      	b.n	80012fc <HAL_RCC_OscConfig+0x4d8>
 8000e70:	4fba      	ldr	r7, [pc, #744]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000e72:	4bbb      	ldr	r3, [pc, #748]	; (8001160 <HAL_RCC_OscConfig+0x33c>)
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	401a      	ands	r2, r3
 8000e78:	603a      	str	r2, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	4ab9      	ldr	r2, [pc, #740]	; (8001164 <HAL_RCC_OscConfig+0x340>)
 8000e7e:	4003      	ands	r3, r0
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	9b01      	ldr	r3, [sp, #4]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	4013      	ands	r3, r2
 8000e88:	603b      	str	r3, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8a:	2900      	cmp	r1, #0
 8000e8c:	d000      	beq.n	8000e90 <HAL_RCC_OscConfig+0x6c>
 8000e8e:	e150      	b.n	8001132 <HAL_RCC_OscConfig+0x30e>
        tickstart = HAL_GetTick();
 8000e90:	f7ff fd48 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8000e98:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e9a:	4699      	mov	r9, r3
 8000e9c:	e006      	b.n	8000eac <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fd41 	bl	8000924 <HAL_GetTick>
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1ac0      	subs	r0, r0, r3
 8000ea6:	2864      	cmp	r0, #100	; 0x64
 8000ea8:	d900      	bls.n	8000eac <HAL_RCC_OscConfig+0x88>
 8000eaa:	e1cc      	b.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eac:	464a      	mov	r2, r9
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4213      	tst	r3, r2
 8000eb2:	d1f4      	bne.n	8000e9e <HAL_RCC_OscConfig+0x7a>
 8000eb4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb6:	079a      	lsls	r2, r3, #30
 8000eb8:	d527      	bpl.n	8000f0a <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000eba:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ebc:	2d04      	cmp	r5, #4
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x9e>
 8000ec0:	e16b      	b.n	800119a <HAL_RCC_OscConfig+0x376>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ec2:	2d0c      	cmp	r5, #12
 8000ec4:	d100      	bne.n	8000ec8 <HAL_RCC_OscConfig+0xa4>
 8000ec6:	e165      	b.n	8001194 <HAL_RCC_OscConfig+0x370>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ec8:	4ea4      	ldr	r6, [pc, #656]	; (800115c <HAL_RCC_OscConfig+0x338>)
      if(hsi_state != RCC_HSI_OFF)
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d100      	bne.n	8000ed0 <HAL_RCC_OscConfig+0xac>
 8000ece:	e1d1      	b.n	8001274 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ed0:	2109      	movs	r1, #9
 8000ed2:	6832      	ldr	r2, [r6, #0]
 8000ed4:	438a      	bics	r2, r1
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000eda:	f7ff fd23 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ede:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8000ee0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	e005      	b.n	8000ef2 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fd1d 	bl	8000924 <HAL_GetTick>
 8000eea:	1bc0      	subs	r0, r0, r7
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d900      	bls.n	8000ef2 <HAL_RCC_OscConfig+0xce>
 8000ef0:	e1a9      	b.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ef2:	4642      	mov	r2, r8
 8000ef4:	6833      	ldr	r3, [r6, #0]
 8000ef6:	421a      	tst	r2, r3
 8000ef8:	d0f5      	beq.n	8000ee6 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efa:	6872      	ldr	r2, [r6, #4]
 8000efc:	6923      	ldr	r3, [r4, #16]
 8000efe:	499a      	ldr	r1, [pc, #616]	; (8001168 <HAL_RCC_OscConfig+0x344>)
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	400a      	ands	r2, r1
 8000f04:	4313      	orrs	r3, r2
 8000f06:	6073      	str	r3, [r6, #4]
 8000f08:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f0a:	06da      	lsls	r2, r3, #27
 8000f0c:	d52b      	bpl.n	8000f66 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	d100      	bne.n	8000f14 <HAL_RCC_OscConfig+0xf0>
 8000f12:	e0df      	b.n	80010d4 <HAL_RCC_OscConfig+0x2b0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f14:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8000f16:	4e91      	ldr	r6, [pc, #580]	; (800115c <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d100      	bne.n	8000f1e <HAL_RCC_OscConfig+0xfa>
 8000f1c:	e1bf      	b.n	800129e <HAL_RCC_OscConfig+0x47a>
        __HAL_RCC_MSI_ENABLE();
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	6832      	ldr	r2, [r6, #0]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4313      	orrs	r3, r2
 8000f26:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f28:	f7ff fcfc 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8000f30:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f32:	4698      	mov	r8, r3
 8000f34:	e005      	b.n	8000f42 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f36:	f7ff fcf5 	bl	8000924 <HAL_GetTick>
 8000f3a:	1bc0      	subs	r0, r0, r7
 8000f3c:	2802      	cmp	r0, #2
 8000f3e:	d900      	bls.n	8000f42 <HAL_RCC_OscConfig+0x11e>
 8000f40:	e181      	b.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f42:	4642      	mov	r2, r8
 8000f44:	6833      	ldr	r3, [r6, #0]
 8000f46:	4213      	tst	r3, r2
 8000f48:	d0f5      	beq.n	8000f36 <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f4a:	6873      	ldr	r3, [r6, #4]
 8000f4c:	4a87      	ldr	r2, [pc, #540]	; (800116c <HAL_RCC_OscConfig+0x348>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f52:	4313      	orrs	r3, r2
 8000f54:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f56:	6872      	ldr	r2, [r6, #4]
 8000f58:	6a23      	ldr	r3, [r4, #32]
 8000f5a:	0212      	lsls	r2, r2, #8
 8000f5c:	061b      	lsls	r3, r3, #24
 8000f5e:	0a12      	lsrs	r2, r2, #8
 8000f60:	4313      	orrs	r3, r2
 8000f62:	6073      	str	r3, [r6, #4]
 8000f64:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f66:	071a      	lsls	r2, r3, #28
 8000f68:	d519      	bpl.n	8000f9e <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8000f6c:	4e7b      	ldr	r6, [pc, #492]	; (800115c <HAL_RCC_OscConfig+0x338>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <HAL_RCC_OscConfig+0x150>
 8000f72:	e16a      	b.n	800124a <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_LSI_ENABLE();
 8000f74:	2201      	movs	r2, #1
 8000f76:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fcd2 	bl	8000924 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f80:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8000f82:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f84:	4698      	mov	r8, r3
 8000f86:	e005      	b.n	8000f94 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f88:	f7ff fccc 	bl	8000924 <HAL_GetTick>
 8000f8c:	1bc0      	subs	r0, r0, r7
 8000f8e:	2802      	cmp	r0, #2
 8000f90:	d900      	bls.n	8000f94 <HAL_RCC_OscConfig+0x170>
 8000f92:	e158      	b.n	8001246 <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f94:	4642      	mov	r2, r8
 8000f96:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000f98:	421a      	tst	r2, r3
 8000f9a:	d0f5      	beq.n	8000f88 <HAL_RCC_OscConfig+0x164>
 8000f9c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f9e:	075a      	lsls	r2, r3, #29
 8000fa0:	d543      	bpl.n	800102a <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000fa4:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa6:	4a6d      	ldr	r2, [pc, #436]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000fa8:	055b      	lsls	r3, r3, #21
 8000faa:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000fac:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fae:	4219      	tst	r1, r3
 8000fb0:	d104      	bne.n	8000fbc <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	2780      	movs	r7, #128	; 0x80
 8000fbe:	4e6c      	ldr	r6, [pc, #432]	; (8001170 <HAL_RCC_OscConfig+0x34c>)
 8000fc0:	007f      	lsls	r7, r7, #1
 8000fc2:	6833      	ldr	r3, [r6, #0]
 8000fc4:	423b      	tst	r3, r7
 8000fc6:	d100      	bne.n	8000fca <HAL_RCC_OscConfig+0x1a6>
 8000fc8:	e12d      	b.n	8001226 <HAL_RCC_OscConfig+0x402>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	68a3      	ldr	r3, [r4, #8]
 8000fce:	0052      	lsls	r2, r2, #1
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d100      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x1b2>
 8000fd4:	e1d7      	b.n	8001386 <HAL_RCC_OscConfig+0x562>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d100      	bne.n	8000fdc <HAL_RCC_OscConfig+0x1b8>
 8000fda:	e108      	b.n	80011ee <HAL_RCC_OscConfig+0x3ca>
 8000fdc:	21a0      	movs	r1, #160	; 0xa0
 8000fde:	00c9      	lsls	r1, r1, #3
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	d100      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x1c2>
 8000fe4:	e1f1      	b.n	80013ca <HAL_RCC_OscConfig+0x5a6>
 8000fe6:	4b5d      	ldr	r3, [pc, #372]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8000fe8:	4962      	ldr	r1, [pc, #392]	; (8001174 <HAL_RCC_OscConfig+0x350>)
 8000fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000fec:	400a      	ands	r2, r1
 8000fee:	651a      	str	r2, [r3, #80]	; 0x50
 8000ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ff2:	4961      	ldr	r1, [pc, #388]	; (8001178 <HAL_RCC_OscConfig+0x354>)
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fc94 	bl	8000924 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ffc:	2780      	movs	r7, #128	; 0x80
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 8001000:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001002:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001004:	4b5d      	ldr	r3, [pc, #372]	; (800117c <HAL_RCC_OscConfig+0x358>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001006:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001008:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800100a:	e005      	b.n	8001018 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800100c:	f7ff fc8a 	bl	8000924 <HAL_GetTick>
 8001010:	1b80      	subs	r0, r0, r6
 8001012:	4548      	cmp	r0, r9
 8001014:	d900      	bls.n	8001018 <HAL_RCC_OscConfig+0x1f4>
 8001016:	e116      	b.n	8001246 <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001018:	4643      	mov	r3, r8
 800101a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800101c:	423b      	tst	r3, r7
 800101e:	d0f5      	beq.n	800100c <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 8001020:	4653      	mov	r3, sl
 8001022:	2b01      	cmp	r3, #1
 8001024:	d100      	bne.n	8001028 <HAL_RCC_OscConfig+0x204>
 8001026:	e173      	b.n	8001310 <HAL_RCC_OscConfig+0x4ec>
 8001028:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800102a:	069b      	lsls	r3, r3, #26
 800102c:	d520      	bpl.n	8001070 <HAL_RCC_OscConfig+0x24c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800102e:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_HSI48_ENABLE();
 8001030:	4e4a      	ldr	r6, [pc, #296]	; (800115c <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001032:	2b00      	cmp	r3, #0
 8001034:	d100      	bne.n	8001038 <HAL_RCC_OscConfig+0x214>
 8001036:	e148      	b.n	80012ca <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_HSI48_ENABLE();
 8001038:	2101      	movs	r1, #1
 800103a:	68b2      	ldr	r2, [r6, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800103c:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 800103e:	430a      	orrs	r2, r1
 8001040:	60b2      	str	r2, [r6, #8]
 8001042:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <HAL_RCC_OscConfig+0x35c>)
 8001046:	430b      	orrs	r3, r1
 8001048:	6373      	str	r3, [r6, #52]	; 0x34
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	6a11      	ldr	r1, [r2, #32]
 800104e:	019b      	lsls	r3, r3, #6
 8001050:	430b      	orrs	r3, r1
 8001052:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001054:	f7ff fc66 	bl	8000924 <HAL_GetTick>
 8001058:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800105a:	e006      	b.n	800106a <HAL_RCC_OscConfig+0x246>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800105c:	f7ff fc62 	bl	8000924 <HAL_GetTick>
 8001060:	4643      	mov	r3, r8
 8001062:	1ac0      	subs	r0, r0, r3
 8001064:	2802      	cmp	r0, #2
 8001066:	d900      	bls.n	800106a <HAL_RCC_OscConfig+0x246>
 8001068:	e0ed      	b.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800106a:	68b3      	ldr	r3, [r6, #8]
 800106c:	421f      	tst	r7, r3
 800106e:	d0f5      	beq.n	800105c <HAL_RCC_OscConfig+0x238>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001072:	2b00      	cmp	r3, #0
 8001074:	d019      	beq.n	80010aa <HAL_RCC_OscConfig+0x286>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001076:	2d0c      	cmp	r5, #12
 8001078:	d100      	bne.n	800107c <HAL_RCC_OscConfig+0x258>
 800107a:	e189      	b.n	8001390 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800107c:	2b02      	cmp	r3, #2
 800107e:	d100      	bne.n	8001082 <HAL_RCC_OscConfig+0x25e>
 8001080:	e14d      	b.n	800131e <HAL_RCC_OscConfig+0x4fa>
        __HAL_RCC_PLL_DISABLE();
 8001082:	4c36      	ldr	r4, [pc, #216]	; (800115c <HAL_RCC_OscConfig+0x338>)
 8001084:	4a3f      	ldr	r2, [pc, #252]	; (8001184 <HAL_RCC_OscConfig+0x360>)
 8001086:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001088:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800108a:	4013      	ands	r3, r2
 800108c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800108e:	f7ff fc49 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001092:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001094:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001096:	e005      	b.n	80010a4 <HAL_RCC_OscConfig+0x280>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001098:	f7ff fc44 	bl	8000924 <HAL_GetTick>
 800109c:	1b40      	subs	r0, r0, r5
 800109e:	2802      	cmp	r0, #2
 80010a0:	d900      	bls.n	80010a4 <HAL_RCC_OscConfig+0x280>
 80010a2:	e0d0      	b.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	4233      	tst	r3, r6
 80010a8:	d1f6      	bne.n	8001098 <HAL_RCC_OscConfig+0x274>
  return HAL_OK;
 80010aa:	2000      	movs	r0, #0
 80010ac:	e00c      	b.n	80010c8 <HAL_RCC_OscConfig+0x2a4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0x290>
 80010b2:	e6d2      	b.n	8000e5a <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <HAL_RCC_OscConfig+0x338>)
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	0392      	lsls	r2, r2, #14
 80010ba:	d400      	bmi.n	80010be <HAL_RCC_OscConfig+0x29a>
 80010bc:	e6fb      	b.n	8000eb6 <HAL_RCC_OscConfig+0x92>
 80010be:	6862      	ldr	r2, [r4, #4]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d000      	beq.n	80010c6 <HAL_RCC_OscConfig+0x2a2>
 80010c4:	e6f7      	b.n	8000eb6 <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 80010c6:	2001      	movs	r0, #1
}
 80010c8:	b002      	add	sp, #8
 80010ca:	bce0      	pop	{r5, r6, r7}
 80010cc:	46ba      	mov	sl, r7
 80010ce:	46b1      	mov	r9, r6
 80010d0:	46a8      	mov	r8, r5
 80010d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_RCC_OscConfig+0x338>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	059b      	lsls	r3, r3, #22
 80010da:	d502      	bpl.n	80010e2 <HAL_RCC_OscConfig+0x2be>
 80010dc:	69e3      	ldr	r3, [r4, #28]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f1      	beq.n	80010c6 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <HAL_RCC_OscConfig+0x338>)
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <HAL_RCC_OscConfig+0x348>)
 80010e6:	6851      	ldr	r1, [r2, #4]
 80010e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010ea:	4001      	ands	r1, r0
 80010ec:	4319      	orrs	r1, r3
 80010ee:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f0:	6850      	ldr	r0, [r2, #4]
 80010f2:	6a21      	ldr	r1, [r4, #32]
 80010f4:	0200      	lsls	r0, r0, #8
 80010f6:	0a00      	lsrs	r0, r0, #8
 80010f8:	0609      	lsls	r1, r1, #24
 80010fa:	4301      	orrs	r1, r0
 80010fc:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80010fe:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	0b5b      	lsrs	r3, r3, #13
 8001104:	3301      	adds	r3, #1
 8001106:	0212      	lsls	r2, r2, #8
 8001108:	409a      	lsls	r2, r3
 800110a:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800110c:	060a      	lsls	r2, r1, #24
 800110e:	491e      	ldr	r1, [pc, #120]	; (8001188 <HAL_RCC_OscConfig+0x364>)
 8001110:	0f12      	lsrs	r2, r2, #28
 8001112:	5c8a      	ldrb	r2, [r1, r2]
 8001114:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001116:	4a1d      	ldr	r2, [pc, #116]	; (800118c <HAL_RCC_OscConfig+0x368>)
 8001118:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_RCC_OscConfig+0x36c>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f7ff fbbb 	bl	8000898 <HAL_InitTick>
        if(status != HAL_OK)
 8001122:	2800      	cmp	r0, #0
 8001124:	d1d0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x2a4>
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	e71d      	b.n	8000f66 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_RCC_OscConfig+0x338>)
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	430b      	orrs	r3, r1
 8001130:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001132:	f7ff fbf7 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_RCC_OscConfig+0x338>)
        tickstart = HAL_GetTick();
 8001138:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800113a:	4699      	mov	r9, r3
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4698      	mov	r8, r3
 8001142:	e004      	b.n	800114e <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fbee 	bl	8000924 <HAL_GetTick>
 8001148:	1bc0      	subs	r0, r0, r7
 800114a:	2864      	cmp	r0, #100	; 0x64
 800114c:	d87b      	bhi.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800114e:	464b      	mov	r3, r9
 8001150:	4642      	mov	r2, r8
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4213      	tst	r3, r2
 8001156:	d0f5      	beq.n	8001144 <HAL_RCC_OscConfig+0x320>
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	e6ac      	b.n	8000eb6 <HAL_RCC_OscConfig+0x92>
 800115c:	40021000 	.word	0x40021000
 8001160:	fffeffff 	.word	0xfffeffff
 8001164:	fffbffff 	.word	0xfffbffff
 8001168:	ffffe0ff 	.word	0xffffe0ff
 800116c:	ffff1fff 	.word	0xffff1fff
 8001170:	40007000 	.word	0x40007000
 8001174:	fffffeff 	.word	0xfffffeff
 8001178:	fffffbff 	.word	0xfffffbff
 800117c:	00001388 	.word	0x00001388
 8001180:	40010000 	.word	0x40010000
 8001184:	feffffff 	.word	0xfeffffff
 8001188:	08002364 	.word	0x08002364
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001194:	2e00      	cmp	r6, #0
 8001196:	d000      	beq.n	800119a <HAL_RCC_OscConfig+0x376>
 8001198:	e696      	b.n	8000ec8 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800119a:	4a91      	ldr	r2, [pc, #580]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	0752      	lsls	r2, r2, #29
 80011a0:	d502      	bpl.n	80011a8 <HAL_RCC_OscConfig+0x384>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <HAL_RCC_OscConfig+0x384>
 80011a6:	e78e      	b.n	80010c6 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4e8d      	ldr	r6, [pc, #564]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
 80011aa:	6922      	ldr	r2, [r4, #16]
 80011ac:	6871      	ldr	r1, [r6, #4]
 80011ae:	488d      	ldr	r0, [pc, #564]	; (80013e4 <HAL_RCC_OscConfig+0x5c0>)
 80011b0:	0212      	lsls	r2, r2, #8
 80011b2:	4001      	ands	r1, r0
 80011b4:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011b6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011ba:	6832      	ldr	r2, [r6, #0]
 80011bc:	438a      	bics	r2, r1
 80011be:	4313      	orrs	r3, r2
 80011c0:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011c2:	f7ff fde9 	bl	8000d98 <HAL_RCC_GetSysClockFreq>
 80011c6:	68f3      	ldr	r3, [r6, #12]
 80011c8:	4a87      	ldr	r2, [pc, #540]	; (80013e8 <HAL_RCC_OscConfig+0x5c4>)
 80011ca:	061b      	lsls	r3, r3, #24
 80011cc:	0f1b      	lsrs	r3, r3, #28
 80011ce:	5cd3      	ldrb	r3, [r2, r3]
 80011d0:	40d8      	lsrs	r0, r3
 80011d2:	4b86      	ldr	r3, [pc, #536]	; (80013ec <HAL_RCC_OscConfig+0x5c8>)
 80011d4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80011d6:	4b86      	ldr	r3, [pc, #536]	; (80013f0 <HAL_RCC_OscConfig+0x5cc>)
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	f7ff fb5d 	bl	8000898 <HAL_InitTick>
      if(status != HAL_OK)
 80011de:	2800      	cmp	r0, #0
 80011e0:	d000      	beq.n	80011e4 <HAL_RCC_OscConfig+0x3c0>
 80011e2:	e771      	b.n	80010c8 <HAL_RCC_OscConfig+0x2a4>
 80011e4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e6:	06da      	lsls	r2, r3, #27
 80011e8:	d400      	bmi.n	80011ec <HAL_RCC_OscConfig+0x3c8>
 80011ea:	e6bc      	b.n	8000f66 <HAL_RCC_OscConfig+0x142>
 80011ec:	e68f      	b.n	8000f0e <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ee:	4e7c      	ldr	r6, [pc, #496]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
 80011f0:	4a80      	ldr	r2, [pc, #512]	; (80013f4 <HAL_RCC_OscConfig+0x5d0>)
 80011f2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80011f4:	4013      	ands	r3, r2
 80011f6:	6533      	str	r3, [r6, #80]	; 0x50
 80011f8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80011fa:	4a7f      	ldr	r2, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x5d4>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001200:	f7ff fb90 	bl	8000924 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	4b7c      	ldr	r3, [pc, #496]	; (80013fc <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 800120c:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001210:	e004      	b.n	800121c <HAL_RCC_OscConfig+0x3f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001212:	f7ff fb87 	bl	8000924 <HAL_GetTick>
 8001216:	1bc0      	subs	r0, r0, r7
 8001218:	4548      	cmp	r0, r9
 800121a:	d814      	bhi.n	8001246 <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800121c:	4642      	mov	r2, r8
 800121e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001220:	4213      	tst	r3, r2
 8001222:	d1f6      	bne.n	8001212 <HAL_RCC_OscConfig+0x3ee>
 8001224:	e6fc      	b.n	8001020 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	6833      	ldr	r3, [r6, #0]
 8001228:	433b      	orrs	r3, r7
 800122a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800122c:	f7ff fb7a 	bl	8000924 <HAL_GetTick>
 8001230:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001232:	6833      	ldr	r3, [r6, #0]
 8001234:	423b      	tst	r3, r7
 8001236:	d000      	beq.n	800123a <HAL_RCC_OscConfig+0x416>
 8001238:	e6c7      	b.n	8000fca <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7ff fb73 	bl	8000924 <HAL_GetTick>
 800123e:	4643      	mov	r3, r8
 8001240:	1ac0      	subs	r0, r0, r3
 8001242:	2864      	cmp	r0, #100	; 0x64
 8001244:	d9f5      	bls.n	8001232 <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 8001246:	2003      	movs	r0, #3
 8001248:	e73e      	b.n	80010c8 <HAL_RCC_OscConfig+0x2a4>
      __HAL_RCC_LSI_DISABLE();
 800124a:	2201      	movs	r2, #1
 800124c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800124e:	4393      	bics	r3, r2
 8001250:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001252:	f7ff fb67 	bl	8000924 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001256:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001258:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800125a:	4698      	mov	r8, r3
 800125c:	e004      	b.n	8001268 <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fb61 	bl	8000924 <HAL_GetTick>
 8001262:	1bc0      	subs	r0, r0, r7
 8001264:	2802      	cmp	r0, #2
 8001266:	d8ee      	bhi.n	8001246 <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001268:	4642      	mov	r2, r8
 800126a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800126c:	421a      	tst	r2, r3
 800126e:	d1f6      	bne.n	800125e <HAL_RCC_OscConfig+0x43a>
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	e694      	b.n	8000f9e <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 8001274:	2201      	movs	r2, #1
 8001276:	6833      	ldr	r3, [r6, #0]
 8001278:	4393      	bics	r3, r2
 800127a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800127c:	f7ff fb52 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001280:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8001282:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001284:	4698      	mov	r8, r3
 8001286:	e004      	b.n	8001292 <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fb4c 	bl	8000924 <HAL_GetTick>
 800128c:	1bc0      	subs	r0, r0, r7
 800128e:	2802      	cmp	r0, #2
 8001290:	d8d9      	bhi.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001292:	4642      	mov	r2, r8
 8001294:	6833      	ldr	r3, [r6, #0]
 8001296:	421a      	tst	r2, r3
 8001298:	d1f6      	bne.n	8001288 <HAL_RCC_OscConfig+0x464>
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	e7a3      	b.n	80011e6 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_MSI_DISABLE();
 800129e:	6833      	ldr	r3, [r6, #0]
 80012a0:	4a54      	ldr	r2, [pc, #336]	; (80013f4 <HAL_RCC_OscConfig+0x5d0>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb3d 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 80012ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012b0:	4698      	mov	r8, r3
 80012b2:	e004      	b.n	80012be <HAL_RCC_OscConfig+0x49a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012b4:	f7ff fb36 	bl	8000924 <HAL_GetTick>
 80012b8:	1bc0      	subs	r0, r0, r7
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d8c3      	bhi.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012be:	4642      	mov	r2, r8
 80012c0:	6833      	ldr	r3, [r6, #0]
 80012c2:	4213      	tst	r3, r2
 80012c4:	d1f6      	bne.n	80012b4 <HAL_RCC_OscConfig+0x490>
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	e64d      	b.n	8000f66 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI48_DISABLE();
 80012ca:	2201      	movs	r2, #1
 80012cc:	68b3      	ldr	r3, [r6, #8]
 80012ce:	494c      	ldr	r1, [pc, #304]	; (8001400 <HAL_RCC_OscConfig+0x5dc>)
 80012d0:	4393      	bics	r3, r2
 80012d2:	4a4c      	ldr	r2, [pc, #304]	; (8001404 <HAL_RCC_OscConfig+0x5e0>)
 80012d4:	60b3      	str	r3, [r6, #8]
 80012d6:	6a13      	ldr	r3, [r2, #32]
 80012d8:	400b      	ands	r3, r1
 80012da:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb22 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012e0:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80012e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012e4:	4698      	mov	r8, r3
 80012e6:	e004      	b.n	80012f2 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e8:	f7ff fb1c 	bl	8000924 <HAL_GetTick>
 80012ec:	1bc0      	subs	r0, r0, r7
 80012ee:	2802      	cmp	r0, #2
 80012f0:	d8a9      	bhi.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012f2:	4642      	mov	r2, r8
 80012f4:	68b3      	ldr	r3, [r6, #8]
 80012f6:	421a      	tst	r2, r3
 80012f8:	d1f6      	bne.n	80012e8 <HAL_RCC_OscConfig+0x4c4>
 80012fa:	e6b9      	b.n	8001070 <HAL_RCC_OscConfig+0x24c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
 8001300:	02db      	lsls	r3, r3, #11
 8001302:	6811      	ldr	r1, [r2, #0]
 8001304:	430b      	orrs	r3, r1
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	4303      	orrs	r3, r0
 800130c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130e:	e710      	b.n	8001132 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001310:	4a33      	ldr	r2, [pc, #204]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
 8001312:	493d      	ldr	r1, [pc, #244]	; (8001408 <HAL_RCC_OscConfig+0x5e4>)
 8001314:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001316:	400b      	ands	r3, r1
 8001318:	6393      	str	r3, [r2, #56]	; 0x38
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	e685      	b.n	800102a <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_PLL_DISABLE();
 800131e:	4d30      	ldr	r5, [pc, #192]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
 8001320:	4a3a      	ldr	r2, [pc, #232]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 8001322:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001324:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001326:	4013      	ands	r3, r2
 8001328:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800132a:	f7ff fafb 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800132e:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001330:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001332:	e004      	b.n	800133e <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff faf6 	bl	8000924 <HAL_GetTick>
 8001338:	1b80      	subs	r0, r0, r6
 800133a:	2802      	cmp	r0, #2
 800133c:	d883      	bhi.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800133e:	682b      	ldr	r3, [r5, #0]
 8001340:	423b      	tst	r3, r7
 8001342:	d1f7      	bne.n	8001334 <HAL_RCC_OscConfig+0x510>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001344:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001348:	68ea      	ldr	r2, [r5, #12]
 800134a:	430b      	orrs	r3, r1
 800134c:	4930      	ldr	r1, [pc, #192]	; (8001410 <HAL_RCC_OscConfig+0x5ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800134e:	4e24      	ldr	r6, [pc, #144]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001350:	400a      	ands	r2, r1
 8001352:	4313      	orrs	r3, r2
 8001354:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001356:	4313      	orrs	r3, r2
 8001358:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	682a      	ldr	r2, [r5, #0]
 800135e:	045b      	lsls	r3, r3, #17
 8001360:	4313      	orrs	r3, r2
 8001362:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001364:	f7ff fade 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001368:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800136a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800136c:	04ad      	lsls	r5, r5, #18
 800136e:	e005      	b.n	800137c <HAL_RCC_OscConfig+0x558>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff fad8 	bl	8000924 <HAL_GetTick>
 8001374:	1b00      	subs	r0, r0, r4
 8001376:	2802      	cmp	r0, #2
 8001378:	d900      	bls.n	800137c <HAL_RCC_OscConfig+0x558>
 800137a:	e764      	b.n	8001246 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800137c:	6833      	ldr	r3, [r6, #0]
 800137e:	422b      	tst	r3, r5
 8001380:	d0f6      	beq.n	8001370 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8001382:	2000      	movs	r0, #0
 8001384:	e6a0      	b.n	80010c8 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
 8001388:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800138a:	430b      	orrs	r3, r1
 800138c:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138e:	e633      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001390:	2b01      	cmp	r3, #1
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x572>
 8001394:	e697      	b.n	80010c6 <HAL_RCC_OscConfig+0x2a2>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 800139c:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 80013a0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a2:	401a      	ands	r2, r3
 80013a4:	428a      	cmp	r2, r1
 80013a6:	d000      	beq.n	80013aa <HAL_RCC_OscConfig+0x586>
 80013a8:	e68e      	b.n	80010c8 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013aa:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013ae:	0392      	lsls	r2, r2, #14
 80013b0:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	428a      	cmp	r2, r1
 80013b4:	d000      	beq.n	80013b8 <HAL_RCC_OscConfig+0x594>
 80013b6:	e687      	b.n	80010c8 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80013b8:	20c0      	movs	r0, #192	; 0xc0
 80013ba:	0400      	lsls	r0, r0, #16
 80013bc:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80013c0:	1a18      	subs	r0, r3, r0
 80013c2:	1e43      	subs	r3, r0, #1
 80013c4:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 80013c6:	b2c0      	uxtb	r0, r0
 80013c8:	e67e      	b.n	80010c8 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_RCC_OscConfig+0x5bc>)
 80013cc:	3901      	subs	r1, #1
 80013ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80013d0:	39ff      	subs	r1, #255	; 0xff
 80013d2:	4301      	orrs	r1, r0
 80013d4:	6519      	str	r1, [r3, #80]	; 0x50
 80013d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80013d8:	430a      	orrs	r2, r1
 80013da:	651a      	str	r2, [r3, #80]	; 0x50
 80013dc:	e60c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x1d4>
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	40021000 	.word	0x40021000
 80013e4:	ffffe0ff 	.word	0xffffe0ff
 80013e8:	08002364 	.word	0x08002364
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000008 	.word	0x20000008
 80013f4:	fffffeff 	.word	0xfffffeff
 80013f8:	fffffbff 	.word	0xfffffbff
 80013fc:	00001388 	.word	0x00001388
 8001400:	ffffdfff 	.word	0xffffdfff
 8001404:	40010000 	.word	0x40010000
 8001408:	efffffff 	.word	0xefffffff
 800140c:	feffffff 	.word	0xfeffffff
 8001410:	ff02ffff 	.word	0xff02ffff

08001414 <HAL_RCC_ClockConfig>:
{
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	46ce      	mov	lr, r9
 8001418:	4647      	mov	r7, r8
 800141a:	0005      	movs	r5, r0
 800141c:	000c      	movs	r4, r1
 800141e:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8001420:	2800      	cmp	r0, #0
 8001422:	d066      	beq.n	80014f2 <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001424:	2201      	movs	r2, #1
 8001426:	4e6b      	ldr	r6, [pc, #428]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	6833      	ldr	r3, [r6, #0]
 800142a:	4013      	ands	r3, r2
 800142c:	428b      	cmp	r3, r1
 800142e:	d362      	bcc.n	80014f6 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001430:	682b      	ldr	r3, [r5, #0]
 8001432:	079a      	lsls	r2, r3, #30
 8001434:	d506      	bpl.n	8001444 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001436:	20f0      	movs	r0, #240	; 0xf0
 8001438:	4967      	ldr	r1, [pc, #412]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	68ca      	ldr	r2, [r1, #12]
 800143c:	4382      	bics	r2, r0
 800143e:	68a8      	ldr	r0, [r5, #8]
 8001440:	4302      	orrs	r2, r0
 8001442:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001444:	07db      	lsls	r3, r3, #31
 8001446:	d52d      	bpl.n	80014a4 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001448:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144a:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800144e:	2a02      	cmp	r2, #2
 8001450:	d04d      	beq.n	80014ee <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	2a03      	cmp	r2, #3
 8001454:	d100      	bne.n	8001458 <HAL_RCC_ClockConfig+0x44>
 8001456:	e06f      	b.n	8001538 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001458:	2a01      	cmp	r2, #1
 800145a:	d100      	bne.n	800145e <HAL_RCC_ClockConfig+0x4a>
 800145c:	e0a4      	b.n	80015a8 <HAL_RCC_ClockConfig+0x194>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800145e:	059b      	lsls	r3, r3, #22
 8001460:	d547      	bpl.n	80014f2 <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001462:	2103      	movs	r1, #3
 8001464:	4e5c      	ldr	r6, [pc, #368]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	68f3      	ldr	r3, [r6, #12]
 8001468:	438b      	bics	r3, r1
 800146a:	4313      	orrs	r3, r2
 800146c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800146e:	f7ff fa59 	bl	8000924 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001472:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001474:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001476:	2b02      	cmp	r3, #2
 8001478:	d100      	bne.n	800147c <HAL_RCC_ClockConfig+0x68>
 800147a:	e075      	b.n	8001568 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147c:	2b03      	cmp	r3, #3
 800147e:	d100      	bne.n	8001482 <HAL_RCC_ClockConfig+0x6e>
 8001480:	e082      	b.n	8001588 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001482:	2b01      	cmp	r3, #1
 8001484:	d100      	bne.n	8001488 <HAL_RCC_ClockConfig+0x74>
 8001486:	e094      	b.n	80015b2 <HAL_RCC_ClockConfig+0x19e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001488:	230c      	movs	r3, #12
 800148a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 800148e:	4699      	mov	r9, r3
 8001490:	e004      	b.n	800149c <HAL_RCC_ClockConfig+0x88>
 8001492:	f7ff fa47 	bl	8000924 <HAL_GetTick>
 8001496:	1bc0      	subs	r0, r0, r7
 8001498:	4548      	cmp	r0, r9
 800149a:	d842      	bhi.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800149c:	4642      	mov	r2, r8
 800149e:	68f3      	ldr	r3, [r6, #12]
 80014a0:	421a      	tst	r2, r3
 80014a2:	d1f6      	bne.n	8001492 <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	2201      	movs	r2, #1
 80014a6:	4e4b      	ldr	r6, [pc, #300]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	6833      	ldr	r3, [r6, #0]
 80014aa:	4013      	ands	r3, r2
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	d847      	bhi.n	8001540 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	075a      	lsls	r2, r3, #29
 80014b4:	d506      	bpl.n	80014c4 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b6:	4948      	ldr	r1, [pc, #288]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	4849      	ldr	r0, [pc, #292]	; (80015e0 <HAL_RCC_ClockConfig+0x1cc>)
 80014ba:	68ca      	ldr	r2, [r1, #12]
 80014bc:	4002      	ands	r2, r0
 80014be:	68e8      	ldr	r0, [r5, #12]
 80014c0:	4302      	orrs	r2, r0
 80014c2:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c4:	071b      	lsls	r3, r3, #28
 80014c6:	d42e      	bmi.n	8001526 <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014c8:	f7ff fc66 	bl	8000d98 <HAL_RCC_GetSysClockFreq>
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	4a45      	ldr	r2, [pc, #276]	; (80015e4 <HAL_RCC_ClockConfig+0x1d0>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	061b      	lsls	r3, r3, #24
 80014d4:	0f1b      	lsrs	r3, r3, #28
 80014d6:	5cd3      	ldrb	r3, [r2, r3]
 80014d8:	40d8      	lsrs	r0, r3
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_RCC_ClockConfig+0x1d4>)
 80014dc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_ClockConfig+0x1d8>)
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	f7ff f9d9 	bl	8000898 <HAL_InitTick>
}
 80014e6:	bcc0      	pop	{r6, r7}
 80014e8:	46b9      	mov	r9, r7
 80014ea:	46b0      	mov	r8, r6
 80014ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ee:	039b      	lsls	r3, r3, #14
 80014f0:	d4b7      	bmi.n	8001462 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80014f2:	2001      	movs	r0, #1
 80014f4:	e7f7      	b.n	80014e6 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	6833      	ldr	r3, [r6, #0]
 80014f8:	4393      	bics	r3, r2
 80014fa:	430b      	orrs	r3, r1
 80014fc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80014fe:	f7ff fa11 	bl	8000924 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	2301      	movs	r3, #1
 8001504:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001506:	4b35      	ldr	r3, [pc, #212]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 8001508:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150a:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150c:	4642      	mov	r2, r8
 800150e:	6833      	ldr	r3, [r6, #0]
 8001510:	4013      	ands	r3, r2
 8001512:	42a3      	cmp	r3, r4
 8001514:	d100      	bne.n	8001518 <HAL_RCC_ClockConfig+0x104>
 8001516:	e78b      	b.n	8001430 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001518:	f7ff fa04 	bl	8000924 <HAL_GetTick>
 800151c:	1bc0      	subs	r0, r0, r7
 800151e:	4548      	cmp	r0, r9
 8001520:	d9f4      	bls.n	800150c <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8001522:	2003      	movs	r0, #3
 8001524:	e7df      	b.n	80014e6 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001526:	492c      	ldr	r1, [pc, #176]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	692b      	ldr	r3, [r5, #16]
 800152a:	68ca      	ldr	r2, [r1, #12]
 800152c:	4830      	ldr	r0, [pc, #192]	; (80015f0 <HAL_RCC_ClockConfig+0x1dc>)
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4002      	ands	r2, r0
 8001532:	4313      	orrs	r3, r2
 8001534:	60cb      	str	r3, [r1, #12]
 8001536:	e7c7      	b.n	80014c8 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001538:	019b      	lsls	r3, r3, #6
 800153a:	d492      	bmi.n	8001462 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 800153c:	2001      	movs	r0, #1
 800153e:	e7d2      	b.n	80014e6 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001540:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	0034      	movs	r4, r6
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001544:	4393      	bics	r3, r2
 8001546:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001548:	f7ff f9ec 	bl	8000924 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 800154e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001550:	2601      	movs	r6, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001552:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	421e      	tst	r6, r3
 8001558:	d0aa      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155a:	f7ff f9e3 	bl	8000924 <HAL_GetTick>
 800155e:	1bc0      	subs	r0, r0, r7
 8001560:	4540      	cmp	r0, r8
 8001562:	d9f7      	bls.n	8001554 <HAL_RCC_ClockConfig+0x140>
        return HAL_TIMEOUT;
 8001564:	2003      	movs	r0, #3
 8001566:	e7be      	b.n	80014e6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001568:	330a      	adds	r3, #10
 800156a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 800156e:	4699      	mov	r9, r3
 8001570:	e004      	b.n	800157c <HAL_RCC_ClockConfig+0x168>
 8001572:	f7ff f9d7 	bl	8000924 <HAL_GetTick>
 8001576:	1bc0      	subs	r0, r0, r7
 8001578:	4548      	cmp	r0, r9
 800157a:	d8d2      	bhi.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800157c:	4642      	mov	r2, r8
 800157e:	68f3      	ldr	r3, [r6, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	2b08      	cmp	r3, #8
 8001584:	d1f5      	bne.n	8001572 <HAL_RCC_ClockConfig+0x15e>
 8001586:	e78d      	b.n	80014a4 <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001588:	3309      	adds	r3, #9
 800158a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 800158e:	4699      	mov	r9, r3
 8001590:	e004      	b.n	800159c <HAL_RCC_ClockConfig+0x188>
 8001592:	f7ff f9c7 	bl	8000924 <HAL_GetTick>
 8001596:	1bc0      	subs	r0, r0, r7
 8001598:	4548      	cmp	r0, r9
 800159a:	d8c2      	bhi.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159c:	4642      	mov	r2, r8
 800159e:	68f3      	ldr	r3, [r6, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d1f5      	bne.n	8001592 <HAL_RCC_ClockConfig+0x17e>
 80015a6:	e77d      	b.n	80014a4 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a8:	075b      	lsls	r3, r3, #29
 80015aa:	d500      	bpl.n	80015ae <HAL_RCC_ClockConfig+0x19a>
 80015ac:	e759      	b.n	8001462 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
 80015b0:	e799      	b.n	80014e6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b2:	330b      	adds	r3, #11
 80015b4:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 80015b8:	4699      	mov	r9, r3
 80015ba:	e004      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1b2>
 80015bc:	f7ff f9b2 	bl	8000924 <HAL_GetTick>
 80015c0:	1bc0      	subs	r0, r0, r7
 80015c2:	4548      	cmp	r0, r9
 80015c4:	d8ad      	bhi.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c6:	4642      	mov	r2, r8
 80015c8:	68f3      	ldr	r3, [r6, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d1f5      	bne.n	80015bc <HAL_RCC_ClockConfig+0x1a8>
 80015d0:	e768      	b.n	80014a4 <HAL_RCC_ClockConfig+0x90>
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	00001388 	.word	0x00001388
 80015e0:	fffff8ff 	.word	0xfffff8ff
 80015e4:	08002364 	.word	0x08002364
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000008 	.word	0x20000008
 80015f0:	ffffc7ff 	.word	0xffffc7ff

080015f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <HAL_RCC_GetPCLK1Freq+0x18>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	055b      	lsls	r3, r3, #21
 80015fc:	0f5b      	lsrs	r3, r3, #29
 80015fe:	5cd3      	ldrb	r3, [r2, r3]
 8001600:	4a03      	ldr	r2, [pc, #12]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001602:	6810      	ldr	r0, [r2, #0]
 8001604:	40d8      	lsrs	r0, r3
}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	08002374 	.word	0x08002374
 8001610:	20000000 	.word	0x20000000

08001614 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	049b      	lsls	r3, r3, #18
 800161c:	0f5b      	lsrs	r3, r3, #29
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	4a03      	ldr	r2, [pc, #12]	; (8001630 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001622:	6810      	ldr	r0, [r2, #0]
 8001624:	40d8      	lsrs	r0, r3
}
 8001626:	4770      	bx	lr
 8001628:	40021000 	.word	0x40021000
 800162c:	08002374 	.word	0x08002374
 8001630:	20000000 	.word	0x20000000

08001634 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001634:	2282      	movs	r2, #130	; 0x82
{
 8001636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001638:	46ce      	mov	lr, r9
 800163a:	4647      	mov	r7, r8
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800163c:	6803      	ldr	r3, [r0, #0]
 800163e:	0112      	lsls	r2, r2, #4
{
 8001640:	0004      	movs	r4, r0
 8001642:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001644:	4213      	tst	r3, r2
 8001646:	d059      	beq.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0xc8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	4a7e      	ldr	r2, [pc, #504]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800164c:	055b      	lsls	r3, r3, #21
 800164e:	6b91      	ldr	r1, [r2, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8001650:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4219      	tst	r1, r3
 8001654:	d100      	bne.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001656:	e08c      	b.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	2680      	movs	r6, #128	; 0x80
 800165a:	4d7b      	ldr	r5, [pc, #492]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800165c:	0076      	lsls	r6, r6, #1
 800165e:	682b      	ldr	r3, [r5, #0]
 8001660:	4233      	tst	r3, r6
 8001662:	d100      	bne.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001664:	e090      	b.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001666:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001668:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800166a:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800166c:	4d75      	ldr	r5, [pc, #468]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800166e:	0392      	lsls	r2, r2, #14
 8001670:	682b      	ldr	r3, [r5, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001672:	4010      	ands	r0, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001674:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001676:	4298      	cmp	r0, r3
 8001678:	d100      	bne.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x48>
 800167a:	e0a5      	b.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x194>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800167c:	23c0      	movs	r3, #192	; 0xc0
 800167e:	000a      	movs	r2, r1
 8001680:	029b      	lsls	r3, r3, #10
 8001682:	401a      	ands	r2, r3
 8001684:	429a      	cmp	r2, r3
 8001686:	d100      	bne.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001688:	e0b7      	b.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800168a:	486e      	ldr	r0, [pc, #440]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800168c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800168e:	0005      	movs	r5, r0
 8001690:	401d      	ands	r5, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001692:	4218      	tst	r0, r3
 8001694:	d100      	bne.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001696:	e089      	b.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x178>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001698:	6823      	ldr	r3, [r4, #0]
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800169a:	4295      	cmp	r5, r2
 800169c:	d100      	bne.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800169e:	e0a1      	b.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016a0:	0698      	lsls	r0, r3, #26
 80016a2:	d400      	bmi.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80016a4:	e09e      	b.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80016a6:	4d67      	ldr	r5, [pc, #412]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80016a8:	4b68      	ldr	r3, [pc, #416]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80016aa:	6d2e      	ldr	r6, [r5, #80]	; 0x50

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016ac:	6d28      	ldr	r0, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80016ae:	4033      	ands	r3, r6
      __HAL_RCC_BACKUPRESET_FORCE();
 80016b0:	4684      	mov	ip, r0
 80016b2:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80016b4:	4698      	mov	r8, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80016b6:	4663      	mov	r3, ip
 80016b8:	0300      	lsls	r0, r0, #12
 80016ba:	4318      	orrs	r0, r3
 80016bc:	6528      	str	r0, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016be:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80016c0:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80016c2:	4018      	ands	r0, r3

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80016c4:	4643      	mov	r3, r8
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016c6:	6528      	str	r0, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 80016c8:	652b      	str	r3, [r5, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80016ca:	05f3      	lsls	r3, r6, #23
 80016cc:	d500      	bpl.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80016ce:	e0a0      	b.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80016d0:	6823      	ldr	r3, [r4, #0]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016d2:	20c0      	movs	r0, #192	; 0xc0
 80016d4:	0280      	lsls	r0, r0, #10
 80016d6:	4282      	cmp	r2, r0
 80016d8:	d169      	bne.n	80017ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80016da:	20c0      	movs	r0, #192	; 0xc0
 80016dc:	0380      	lsls	r0, r0, #14
 80016de:	4008      	ands	r0, r1
 80016e0:	4958      	ldr	r1, [pc, #352]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80016e2:	4d5c      	ldr	r5, [pc, #368]	; (8001854 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80016e4:	680a      	ldr	r2, [r1, #0]
 80016e6:	402a      	ands	r2, r5
 80016e8:	4310      	orrs	r0, r2
 80016ea:	22c0      	movs	r2, #192	; 0xc0
 80016ec:	6008      	str	r0, [r1, #0]
 80016ee:	4855      	ldr	r0, [pc, #340]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80016f0:	0292      	lsls	r2, r2, #10
 80016f2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80016f4:	430a      	orrs	r2, r1
 80016f6:	6502      	str	r2, [r0, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016f8:	2f01      	cmp	r7, #1
 80016fa:	d05e      	beq.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x186>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016fc:	07da      	lsls	r2, r3, #31
 80016fe:	d506      	bpl.n	800170e <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001700:	2003      	movs	r0, #3
 8001702:	4950      	ldr	r1, [pc, #320]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001704:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001706:	4382      	bics	r2, r0
 8001708:	68e0      	ldr	r0, [r4, #12]
 800170a:	4302      	orrs	r2, r0
 800170c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800170e:	079a      	lsls	r2, r3, #30
 8001710:	d506      	bpl.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001712:	200c      	movs	r0, #12
 8001714:	494b      	ldr	r1, [pc, #300]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001716:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001718:	4382      	bics	r2, r0
 800171a:	6920      	ldr	r0, [r4, #16]
 800171c:	4302      	orrs	r2, r0
 800171e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001720:	075a      	lsls	r2, r3, #29
 8001722:	d506      	bpl.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001724:	4947      	ldr	r1, [pc, #284]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001726:	484c      	ldr	r0, [pc, #304]	; (8001858 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001728:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800172a:	4002      	ands	r2, r0
 800172c:	6960      	ldr	r0, [r4, #20]
 800172e:	4302      	orrs	r2, r0
 8001730:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001732:	071a      	lsls	r2, r3, #28
 8001734:	d506      	bpl.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001736:	4943      	ldr	r1, [pc, #268]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001738:	4848      	ldr	r0, [pc, #288]	; (800185c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800173a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800173c:	4002      	ands	r2, r0
 800173e:	69a0      	ldr	r0, [r4, #24]
 8001740:	4302      	orrs	r2, r0
 8001742:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001744:	065a      	lsls	r2, r3, #25
 8001746:	d506      	bpl.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001748:	493e      	ldr	r1, [pc, #248]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800174a:	4845      	ldr	r0, [pc, #276]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800174c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800174e:	4002      	ands	r2, r0
 8001750:	6a20      	ldr	r0, [r4, #32]
 8001752:	4302      	orrs	r2, r0
 8001754:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001756:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	d506      	bpl.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800175c:	4a39      	ldr	r2, [pc, #228]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800175e:	4941      	ldr	r1, [pc, #260]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001760:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001762:	400b      	ands	r3, r1
 8001764:	69e1      	ldr	r1, [r4, #28]
 8001766:	430b      	orrs	r3, r1
 8001768:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800176a:	bcc0      	pop	{r6, r7}
 800176c:	46b9      	mov	r9, r7
 800176e:	46b0      	mov	r8, r6
 8001770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	6b91      	ldr	r1, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	4d34      	ldr	r5, [pc, #208]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x214>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	430b      	orrs	r3, r1
 800177a:	6393      	str	r3, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	0076      	lsls	r6, r6, #1
      pwrclkchanged = SET;
 8001780:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4233      	tst	r3, r6
 8001784:	d000      	beq.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001786:	e76e      	b.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	4333      	orrs	r3, r6
 800178c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800178e:	f7ff f8c9 	bl	8000924 <HAL_GetTick>
 8001792:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	4233      	tst	r3, r6
 8001798:	d000      	beq.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800179a:	e764      	b.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179c:	f7ff f8c2 	bl	8000924 <HAL_GetTick>
 80017a0:	4643      	mov	r3, r8
 80017a2:	1ac0      	subs	r0, r0, r3
 80017a4:	2864      	cmp	r0, #100	; 0x64
 80017a6:	d9f5      	bls.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x160>
          return HAL_TIMEOUT;
 80017a8:	2003      	movs	r0, #3
 80017aa:	e7de      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	4825      	ldr	r0, [pc, #148]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80017b0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80017b2:	430a      	orrs	r2, r1
 80017b4:	6502      	str	r2, [r0, #80]	; 0x50
    if(pwrclkchanged == SET)
 80017b6:	2f01      	cmp	r7, #1
 80017b8:	d1a0      	bne.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80017bc:	492a      	ldr	r1, [pc, #168]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80017be:	400a      	ands	r2, r1
 80017c0:	6382      	str	r2, [r0, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017c2:	07da      	lsls	r2, r3, #31
 80017c4:	d5a3      	bpl.n	800170e <HAL_RCCEx_PeriphCLKConfig+0xda>
 80017c6:	e79b      	b.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0xcc>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80017c8:	68a3      	ldr	r3, [r4, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	4282      	cmp	r2, r0
 80017ce:	d000      	beq.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80017d0:	e754      	b.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x48>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80017d2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80017d4:	22c0      	movs	r2, #192	; 0xc0
 80017d6:	001d      	movs	r5, r3
 80017d8:	0292      	lsls	r2, r2, #10
 80017da:	4015      	ands	r5, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80017dc:	4213      	tst	r3, r2
 80017de:	d02d      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x208>
 80017e0:	400a      	ands	r2, r1
 80017e2:	e759      	b.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x64>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80017e4:	20c0      	movs	r0, #192	; 0xc0
 80017e6:	68a6      	ldr	r6, [r4, #8]
 80017e8:	0280      	lsls	r0, r0, #10
 80017ea:	4030      	ands	r0, r6
 80017ec:	42a8      	cmp	r0, r5
 80017ee:	d100      	bne.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80017f0:	e76f      	b.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80017f2:	0518      	lsls	r0, r3, #20
 80017f4:	d400      	bmi.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80017f6:	e76c      	b.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80017f8:	e755      	b.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80017fc:	681d      	ldr	r5, [r3, #0]
 80017fe:	03ad      	lsls	r5, r5, #14
 8001800:	d41e      	bmi.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001804:	001d      	movs	r5, r3
 8001806:	4015      	ands	r5, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001808:	4213      	tst	r3, r2
 800180a:	d000      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x1da>
 800180c:	e744      	b.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	e766      	b.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 8001812:	f7ff f887 	bl	8000924 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x238>)
        tickstart = HAL_GetTick();
 800181e:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001822:	e004      	b.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff f87e 	bl	8000924 <HAL_GetTick>
 8001828:	1b80      	subs	r0, r0, r6
 800182a:	4548      	cmp	r0, r9
 800182c:	d8bc      	bhi.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800182e:	4642      	mov	r2, r8
 8001830:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001832:	4213      	tst	r3, r2
 8001834:	d0f6      	beq.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8001836:	22c0      	movs	r2, #192	; 0xc0
 8001838:	6861      	ldr	r1, [r4, #4]
 800183a:	0292      	lsls	r2, r2, #10
 800183c:	400a      	ands	r2, r1
 800183e:	e747      	b.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
 8001842:	e792      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	fffcffff 	.word	0xfffcffff
 8001850:	fff7ffff 	.word	0xfff7ffff
 8001854:	ffcfffff 	.word	0xffcfffff
 8001858:	fffff3ff 	.word	0xfffff3ff
 800185c:	ffffcfff 	.word	0xffffcfff
 8001860:	fbffffff 	.word	0xfbffffff
 8001864:	fff3ffff 	.word	0xfff3ffff
 8001868:	efffffff 	.word	0xefffffff
 800186c:	00001388 	.word	0x00001388

08001870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001870:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001872:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001876:	2201      	movs	r2, #1
 8001878:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800187c:	6801      	ldr	r1, [r0, #0]
 800187e:	4d12      	ldr	r5, [pc, #72]	; (80018c8 <UART_EndRxTransfer+0x58>)
 8001880:	680b      	ldr	r3, [r1, #0]
 8001882:	402b      	ands	r3, r5
 8001884:	600b      	str	r3, [r1, #0]
 8001886:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800188a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800188e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001892:	6801      	ldr	r1, [r0, #0]
 8001894:	688b      	ldr	r3, [r1, #8]
 8001896:	4393      	bics	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
 800189a:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800189e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10a      	bne.n	80018ba <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018a8:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018ac:	2410      	movs	r4, #16
 80018ae:	6802      	ldr	r2, [r0, #0]
 80018b0:	6813      	ldr	r3, [r2, #0]
 80018b2:	43a3      	bics	r3, r4
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018ba:	2320      	movs	r3, #32
 80018bc:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018be:	2300      	movs	r3, #0
 80018c0:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80018c2:	6643      	str	r3, [r0, #100]	; 0x64
}
 80018c4:	bd30      	pop	{r4, r5, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	fffffedf 	.word	0xfffffedf

080018cc <HAL_UART_RxHalfCpltCallback>:
 80018cc:	4770      	bx	lr
 80018ce:	46c0      	nop			; (mov r8, r8)

080018d0 <HAL_UART_ErrorCallback>:
 80018d0:	4770      	bx	lr
 80018d2:	46c0      	nop			; (mov r8, r8)

080018d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80018d4:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80018d6:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80018d8:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80018da:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80018dc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	0612      	lsls	r2, r2, #24
 80018e2:	d501      	bpl.n	80018e8 <UART_DMAError+0x14>
 80018e4:	2821      	cmp	r0, #33	; 0x21
 80018e6:	d00d      	beq.n	8001904 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	065b      	lsls	r3, r3, #25
 80018ec:	d501      	bpl.n	80018f2 <UART_DMAError+0x1e>
 80018ee:	2922      	cmp	r1, #34	; 0x22
 80018f0:	d01b      	beq.n	800192a <UART_DMAError+0x56>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80018f2:	2280      	movs	r2, #128	; 0x80
 80018f4:	2110      	movs	r1, #16
 80018f6:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80018f8:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80018fa:	430b      	orrs	r3, r1
 80018fc:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 80018fe:	f7ff ffe7 	bl	80018d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001902:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8001904:	2352      	movs	r3, #82	; 0x52
 8001906:	2200      	movs	r2, #0
 8001908:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800190a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800190e:	3b51      	subs	r3, #81	; 0x51
 8001910:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001914:	25c0      	movs	r5, #192	; 0xc0
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	43ab      	bics	r3, r5
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 8001922:	2320      	movs	r3, #32
 8001924:	67a3      	str	r3, [r4, #120]	; 0x78
 8001926:	6823      	ldr	r3, [r4, #0]
}
 8001928:	e7de      	b.n	80018e8 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 800192a:	235a      	movs	r3, #90	; 0x5a
 800192c:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 800192e:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8001930:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8001932:	f7ff ff9d 	bl	8001870 <UART_EndRxTransfer>
 8001936:	e7dc      	b.n	80018f2 <UART_DMAError+0x1e>

08001938 <HAL_UARTEx_RxEventCallback>:
}
 8001938:	4770      	bx	lr
 800193a:	46c0      	nop			; (mov r8, r8)

0800193c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800193c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800193e:	b510      	push	{r4, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001940:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001942:	2b01      	cmp	r3, #1
 8001944:	d002      	beq.n	800194c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8001946:	f7ff ffc1 	bl	80018cc <HAL_UART_RxHalfCpltCallback>
}
 800194a:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800194c:	3357      	adds	r3, #87	; 0x57
 800194e:	5ac1      	ldrh	r1, [r0, r3]
 8001950:	0849      	lsrs	r1, r1, #1
 8001952:	f7ff fff1 	bl	8001938 <HAL_UARTEx_RxEventCallback>
 8001956:	e7f8      	b.n	800194a <UART_DMARxHalfCplt+0xe>

08001958 <UART_DMAReceiveCplt>:
{
 8001958:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800195a:	681b      	ldr	r3, [r3, #0]
{
 800195c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2320      	movs	r3, #32
 8001962:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001964:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8001966:	4011      	ands	r1, r2
 8001968:	4213      	tst	r3, r2
 800196a:	d126      	bne.n	80019ba <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800196c:	225a      	movs	r2, #90	; 0x5a
 800196e:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001970:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001974:	3a59      	subs	r2, #89	; 0x59
 8001976:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800197a:	6804      	ldr	r4, [r0, #0]
 800197c:	4e1a      	ldr	r6, [pc, #104]	; (80019e8 <UART_DMAReceiveCplt+0x90>)
 800197e:	6821      	ldr	r1, [r4, #0]
 8001980:	4031      	ands	r1, r6
 8001982:	6021      	str	r1, [r4, #0]
 8001984:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001988:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800198c:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001990:	6804      	ldr	r4, [r0, #0]
 8001992:	68a1      	ldr	r1, [r4, #8]
 8001994:	4391      	bics	r1, r2
 8001996:	60a1      	str	r1, [r4, #8]
 8001998:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800199c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019a0:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019a4:	2540      	movs	r5, #64	; 0x40
 80019a6:	6801      	ldr	r1, [r0, #0]
 80019a8:	688a      	ldr	r2, [r1, #8]
 80019aa:	43aa      	bics	r2, r5
 80019ac:	608a      	str	r2, [r1, #8]
 80019ae:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 80019b2:	67c3      	str	r3, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019b4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d00a      	beq.n	80019d0 <UART_DMAReceiveCplt+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019ba:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d002      	beq.n	80019c6 <UART_DMAReceiveCplt+0x6e>
    HAL_UART_RxCpltCallback(huart);
 80019c0:	f7fe fe12 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80019c6:	3357      	adds	r3, #87	; 0x57
 80019c8:	5ac1      	ldrh	r1, [r0, r3]
 80019ca:	f7ff ffb5 	bl	8001938 <HAL_UARTEx_RxEventCallback>
 80019ce:	e7f9      	b.n	80019c4 <UART_DMAReceiveCplt+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019d4:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80019d8:	2410      	movs	r4, #16
 80019da:	6802      	ldr	r2, [r0, #0]
 80019dc:	6813      	ldr	r3, [r2, #0]
 80019de:	43a3      	bics	r3, r4
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	f381 8810 	msr	PRIMASK, r1
}
 80019e6:	e7e8      	b.n	80019ba <UART_DMAReceiveCplt+0x62>
 80019e8:	fffffeff 	.word	0xfffffeff

080019ec <UART_SetConfig>:
{
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019f0:	6925      	ldr	r5, [r4, #16]
 80019f2:	68a3      	ldr	r3, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80019f4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019f6:	432b      	orrs	r3, r5
 80019f8:	6965      	ldr	r5, [r4, #20]
 80019fa:	69c1      	ldr	r1, [r0, #28]
 80019fc:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019fe:	6810      	ldr	r0, [r2, #0]
 8001a00:	4d76      	ldr	r5, [pc, #472]	; (8001bdc <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a02:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a04:	4028      	ands	r0, r5
 8001a06:	4303      	orrs	r3, r0
 8001a08:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a0a:	6853      	ldr	r3, [r2, #4]
 8001a0c:	4874      	ldr	r0, [pc, #464]	; (8001be0 <UART_SetConfig+0x1f4>)
 8001a0e:	4003      	ands	r3, r0
 8001a10:	68e0      	ldr	r0, [r4, #12]
 8001a12:	4303      	orrs	r3, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a14:	4873      	ldr	r0, [pc, #460]	; (8001be4 <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a16:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a18:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a1a:	4282      	cmp	r2, r0
 8001a1c:	d061      	beq.n	8001ae2 <UART_SetConfig+0xf6>
    tmpreg |= huart->Init.OneBitSampling;
 8001a1e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a20:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8001a22:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a24:	4d70      	ldr	r5, [pc, #448]	; (8001be8 <UART_SetConfig+0x1fc>)
 8001a26:	4028      	ands	r0, r5
 8001a28:	4303      	orrs	r3, r0
 8001a2a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <UART_SetConfig+0x200>)
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d007      	beq.n	8001a42 <UART_SetConfig+0x56>
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <UART_SetConfig+0x204>)
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d014      	beq.n	8001a62 <UART_SetConfig+0x76>
        ret = HAL_ERROR;
 8001a38:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8001a3e:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8001a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a42:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <UART_SetConfig+0x208>)
 8001a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a46:	2303      	movs	r3, #3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d800      	bhi.n	8001a52 <UART_SetConfig+0x66>
 8001a50:	e098      	b.n	8001b84 <UART_SetConfig+0x198>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	4299      	cmp	r1, r3
 8001a58:	d100      	bne.n	8001a5c <UART_SetConfig+0x70>
 8001a5a:	e0af      	b.n	8001bbc <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001a5c:	f7ff fdda 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
        break;
 8001a60:	e07c      	b.n	8001b5c <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a62:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <UART_SetConfig+0x208>)
 8001a64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a66:	230c      	movs	r3, #12
 8001a68:	4013      	ands	r3, r2
 8001a6a:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <UART_SetConfig+0x20c>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	0212      	lsls	r2, r2, #8
 8001a72:	4291      	cmp	r1, r2
 8001a74:	d018      	beq.n	8001aa8 <UART_SetConfig+0xbc>
    switch (clocksource)
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d8de      	bhi.n	8001a38 <UART_SetConfig+0x4c>
 8001a7a:	4a60      	ldr	r2, [pc, #384]	; (8001bfc <UART_SetConfig+0x210>)
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	58d3      	ldr	r3, [r2, r3]
 8001a80:	469f      	mov	pc, r3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a82:	2080      	movs	r0, #128	; 0x80
 8001a84:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a86:	6863      	ldr	r3, [r4, #4]
 8001a88:	6861      	ldr	r1, [r4, #4]
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	1818      	adds	r0, r3, r0
 8001a8e:	f7fe fb3b 	bl	8000108 <__udivsi3>
 8001a92:	0400      	lsls	r0, r0, #16
 8001a94:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a96:	0002      	movs	r2, r0
 8001a98:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <UART_SetConfig+0x214>)
 8001a9a:	3a10      	subs	r2, #16
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8cb      	bhi.n	8001a38 <UART_SetConfig+0x4c>
        huart->Instance->BRR = usartdiv;
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	60d8      	str	r0, [r3, #12]
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	e7c8      	b.n	8001a3a <UART_SetConfig+0x4e>
    switch (clocksource)
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d8c5      	bhi.n	8001a38 <UART_SetConfig+0x4c>
 8001aac:	4a55      	ldr	r2, [pc, #340]	; (8001c04 <UART_SetConfig+0x218>)
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	58d3      	ldr	r3, [r2, r3]
 8001ab2:	469f      	mov	pc, r3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab4:	2080      	movs	r0, #128	; 0x80
 8001ab6:	0240      	lsls	r0, r0, #9
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ab8:	6863      	ldr	r3, [r4, #4]
 8001aba:	6861      	ldr	r1, [r4, #4]
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	1818      	adds	r0, r3, r0
 8001ac0:	f7fe fb22 	bl	8000108 <__udivsi3>
 8001ac4:	0403      	lsls	r3, r0, #16
 8001ac6:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ac8:	494d      	ldr	r1, [pc, #308]	; (8001c00 <UART_SetConfig+0x214>)
 8001aca:	3a10      	subs	r2, #16
 8001acc:	428a      	cmp	r2, r1
 8001ace:	d8b3      	bhi.n	8001a38 <UART_SetConfig+0x4c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ad0:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <UART_SetConfig+0x21c>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ad2:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ad4:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ad6:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	4318      	orrs	r0, r3
 8001adc:	60d0      	str	r0, [r2, #12]
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e7ab      	b.n	8001a3a <UART_SetConfig+0x4e>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ae2:	6891      	ldr	r1, [r2, #8]
 8001ae4:	4840      	ldr	r0, [pc, #256]	; (8001be8 <UART_SetConfig+0x1fc>)
 8001ae6:	4001      	ands	r1, r0
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001aec:	22c0      	movs	r2, #192	; 0xc0
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	4840      	ldr	r0, [pc, #256]	; (8001bf4 <UART_SetConfig+0x208>)
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001af6:	0109      	lsls	r1, r1, #4
 8001af8:	4013      	ands	r3, r2
 8001afa:	428b      	cmp	r3, r1
 8001afc:	d048      	beq.n	8001b90 <UART_SetConfig+0x1a4>
 8001afe:	d80c      	bhi.n	8001b1a <UART_SetConfig+0x12e>
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d042      	beq.n	8001b8a <UART_SetConfig+0x19e>
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	00d2      	lsls	r2, r2, #3
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d000      	beq.n	8001b0e <UART_SetConfig+0x122>
 8001b0c:	e794      	b.n	8001a38 <UART_SetConfig+0x4c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b0e:	f7ff f943 	bl	8000d98 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d106      	bne.n	8001b24 <UART_SetConfig+0x138>
 8001b16:	2000      	movs	r0, #0
 8001b18:	e78f      	b.n	8001a3a <UART_SetConfig+0x4e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d000      	beq.n	8001b20 <UART_SetConfig+0x134>
 8001b1e:	e78b      	b.n	8001a38 <UART_SetConfig+0x4c>
 8001b20:	2080      	movs	r0, #128	; 0x80
 8001b22:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001b24:	6862      	ldr	r2, [r4, #4]
 8001b26:	0053      	lsls	r3, r2, #1
 8001b28:	189b      	adds	r3, r3, r2
 8001b2a:	4283      	cmp	r3, r0
 8001b2c:	d900      	bls.n	8001b30 <UART_SetConfig+0x144>
 8001b2e:	e783      	b.n	8001a38 <UART_SetConfig+0x4c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001b30:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001b32:	4283      	cmp	r3, r0
 8001b34:	d200      	bcs.n	8001b38 <UART_SetConfig+0x14c>
 8001b36:	e77f      	b.n	8001a38 <UART_SetConfig+0x4c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001b38:	2100      	movs	r1, #0
 8001b3a:	0e07      	lsrs	r7, r0, #24
 8001b3c:	0206      	lsls	r6, r0, #8
 8001b3e:	0850      	lsrs	r0, r2, #1
 8001b40:	2300      	movs	r3, #0
 8001b42:	1980      	adds	r0, r0, r6
 8001b44:	4179      	adcs	r1, r7
 8001b46:	f7fe fb6b 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <UART_SetConfig+0x220>)
 8001b4c:	18c2      	adds	r2, r0, r3
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <UART_SetConfig+0x224>)
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d900      	bls.n	8001b56 <UART_SetConfig+0x16a>
 8001b54:	e770      	b.n	8001a38 <UART_SetConfig+0x4c>
 8001b56:	e7a3      	b.n	8001aa0 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b58:	f7ff f91e 	bl	8000d98 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d192      	bne.n	8001a86 <UART_SetConfig+0x9a>
 8001b60:	2000      	movs	r0, #0
 8001b62:	e76a      	b.n	8001a3a <UART_SetConfig+0x4e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b64:	2010      	movs	r0, #16
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <UART_SetConfig+0x208>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001b6c:	4243      	negs	r3, r0
 8001b6e:	4158      	adcs	r0, r3
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <UART_SetConfig+0x228>)
 8001b72:	4240      	negs	r0, r0
 8001b74:	4018      	ands	r0, r3
 8001b76:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <UART_SetConfig+0x22c>)
 8001b78:	469c      	mov	ip, r3
 8001b7a:	4460      	add	r0, ip
 8001b7c:	e783      	b.n	8001a86 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b7e:	f7ff fd39 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
        break;
 8001b82:	e7eb      	b.n	8001b5c <UART_SetConfig+0x170>
 8001b84:	4a25      	ldr	r2, [pc, #148]	; (8001c1c <UART_SetConfig+0x230>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b88:	e771      	b.n	8001a6e <UART_SetConfig+0x82>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b8a:	f7ff fd33 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
        break;
 8001b8e:	e7c0      	b.n	8001b12 <UART_SetConfig+0x126>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b90:	6803      	ldr	r3, [r0, #0]
 8001b92:	2010      	movs	r0, #16
 8001b94:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001b96:	4243      	negs	r3, r0
 8001b98:	4158      	adcs	r0, r3
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <UART_SetConfig+0x228>)
 8001b9c:	4240      	negs	r0, r0
 8001b9e:	4018      	ands	r0, r3
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <UART_SetConfig+0x22c>)
 8001ba2:	469c      	mov	ip, r3
 8001ba4:	4460      	add	r0, ip
 8001ba6:	e7bd      	b.n	8001b24 <UART_SetConfig+0x138>
        pclk = HAL_RCC_GetSysClockFreq();
 8001ba8:	f7ff f8f6 	bl	8000d98 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d100      	bne.n	8001bb2 <UART_SetConfig+0x1c6>
 8001bb0:	e778      	b.n	8001aa4 <UART_SetConfig+0xb8>
 8001bb2:	0040      	lsls	r0, r0, #1
 8001bb4:	e780      	b.n	8001ab8 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001bb6:	f7ff fd1d 	bl	80015f4 <HAL_RCC_GetPCLK1Freq>
        break;
 8001bba:	e7f7      	b.n	8001bac <UART_SetConfig+0x1c0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001bbc:	f7ff fd2a 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
        break;
 8001bc0:	e7f4      	b.n	8001bac <UART_SetConfig+0x1c0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001bc2:	2010      	movs	r0, #16
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <UART_SetConfig+0x208>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4018      	ands	r0, r3
 8001bca:	4243      	negs	r3, r0
 8001bcc:	4158      	adcs	r0, r3
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <UART_SetConfig+0x234>)
 8001bd0:	4240      	negs	r0, r0
 8001bd2:	4018      	ands	r0, r3
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <UART_SetConfig+0x238>)
 8001bd6:	469c      	mov	ip, r3
 8001bd8:	4460      	add	r0, ip
 8001bda:	e76d      	b.n	8001ab8 <UART_SetConfig+0xcc>
 8001bdc:	efff69f3 	.word	0xefff69f3
 8001be0:	ffffcfff 	.word	0xffffcfff
 8001be4:	40004800 	.word	0x40004800
 8001be8:	fffff4ff 	.word	0xfffff4ff
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40004400 	.word	0x40004400
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	080023d4 	.word	0x080023d4
 8001bfc:	08002388 	.word	0x08002388
 8001c00:	0000ffef 	.word	0x0000ffef
 8001c04:	080023ac 	.word	0x080023ac
 8001c08:	0000fff0 	.word	0x0000fff0
 8001c0c:	fffffd00 	.word	0xfffffd00
 8001c10:	000ffcff 	.word	0x000ffcff
 8001c14:	00b71b00 	.word	0x00b71b00
 8001c18:	003d0900 	.word	0x003d0900
 8001c1c:	080023d0 	.word	0x080023d0
 8001c20:	016e3600 	.word	0x016e3600
 8001c24:	007a1200 	.word	0x007a1200

08001c28 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c28:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001c2a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c2c:	07da      	lsls	r2, r3, #31
 8001c2e:	d506      	bpl.n	8001c3e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c30:	6801      	ldr	r1, [r0, #0]
 8001c32:	4c28      	ldr	r4, [pc, #160]	; (8001cd4 <UART_AdvFeatureConfig+0xac>)
 8001c34:	684a      	ldr	r2, [r1, #4]
 8001c36:	4022      	ands	r2, r4
 8001c38:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c3a:	4322      	orrs	r2, r4
 8001c3c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c3e:	079a      	lsls	r2, r3, #30
 8001c40:	d506      	bpl.n	8001c50 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c42:	6801      	ldr	r1, [r0, #0]
 8001c44:	4c24      	ldr	r4, [pc, #144]	; (8001cd8 <UART_AdvFeatureConfig+0xb0>)
 8001c46:	684a      	ldr	r2, [r1, #4]
 8001c48:	4022      	ands	r2, r4
 8001c4a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001c4c:	4322      	orrs	r2, r4
 8001c4e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c50:	075a      	lsls	r2, r3, #29
 8001c52:	d506      	bpl.n	8001c62 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c54:	6801      	ldr	r1, [r0, #0]
 8001c56:	4c21      	ldr	r4, [pc, #132]	; (8001cdc <UART_AdvFeatureConfig+0xb4>)
 8001c58:	684a      	ldr	r2, [r1, #4]
 8001c5a:	4022      	ands	r2, r4
 8001c5c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001c5e:	4322      	orrs	r2, r4
 8001c60:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c62:	071a      	lsls	r2, r3, #28
 8001c64:	d506      	bpl.n	8001c74 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c66:	6801      	ldr	r1, [r0, #0]
 8001c68:	4c1d      	ldr	r4, [pc, #116]	; (8001ce0 <UART_AdvFeatureConfig+0xb8>)
 8001c6a:	684a      	ldr	r2, [r1, #4]
 8001c6c:	4022      	ands	r2, r4
 8001c6e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c70:	4322      	orrs	r2, r4
 8001c72:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c74:	06da      	lsls	r2, r3, #27
 8001c76:	d506      	bpl.n	8001c86 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c78:	6801      	ldr	r1, [r0, #0]
 8001c7a:	4c1a      	ldr	r4, [pc, #104]	; (8001ce4 <UART_AdvFeatureConfig+0xbc>)
 8001c7c:	688a      	ldr	r2, [r1, #8]
 8001c7e:	4022      	ands	r2, r4
 8001c80:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c82:	4322      	orrs	r2, r4
 8001c84:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c86:	069a      	lsls	r2, r3, #26
 8001c88:	d506      	bpl.n	8001c98 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c8a:	6801      	ldr	r1, [r0, #0]
 8001c8c:	4c16      	ldr	r4, [pc, #88]	; (8001ce8 <UART_AdvFeatureConfig+0xc0>)
 8001c8e:	688a      	ldr	r2, [r1, #8]
 8001c90:	4022      	ands	r2, r4
 8001c92:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c94:	4322      	orrs	r2, r4
 8001c96:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c98:	065a      	lsls	r2, r3, #25
 8001c9a:	d50a      	bpl.n	8001cb2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c9c:	6801      	ldr	r1, [r0, #0]
 8001c9e:	4d13      	ldr	r5, [pc, #76]	; (8001cec <UART_AdvFeatureConfig+0xc4>)
 8001ca0:	684a      	ldr	r2, [r1, #4]
 8001ca2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ca4:	402a      	ands	r2, r5
 8001ca6:	4322      	orrs	r2, r4
 8001ca8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0352      	lsls	r2, r2, #13
 8001cae:	4294      	cmp	r4, r2
 8001cb0:	d009      	beq.n	8001cc6 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cb2:	061b      	lsls	r3, r3, #24
 8001cb4:	d506      	bpl.n	8001cc4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cb6:	6802      	ldr	r2, [r0, #0]
 8001cb8:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <UART_AdvFeatureConfig+0xc8>)
 8001cba:	6853      	ldr	r3, [r2, #4]
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	6053      	str	r3, [r2, #4]
}
 8001cc4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cc6:	684a      	ldr	r2, [r1, #4]
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	; (8001cf4 <UART_AdvFeatureConfig+0xcc>)
 8001cca:	4022      	ands	r2, r4
 8001ccc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001cce:	4322      	orrs	r2, r4
 8001cd0:	604a      	str	r2, [r1, #4]
 8001cd2:	e7ee      	b.n	8001cb2 <UART_AdvFeatureConfig+0x8a>
 8001cd4:	fffdffff 	.word	0xfffdffff
 8001cd8:	fffeffff 	.word	0xfffeffff
 8001cdc:	fffbffff 	.word	0xfffbffff
 8001ce0:	ffff7fff 	.word	0xffff7fff
 8001ce4:	ffffefff 	.word	0xffffefff
 8001ce8:	ffffdfff 	.word	0xffffdfff
 8001cec:	ffefffff 	.word	0xffefffff
 8001cf0:	fff7ffff 	.word	0xfff7ffff
 8001cf4:	ff9fffff 	.word	0xff9fffff

08001cf8 <UART_WaitOnFlagUntilTimeout>:
{
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	4657      	mov	r7, sl
 8001cfc:	464e      	mov	r6, r9
 8001cfe:	4645      	mov	r5, r8
 8001d00:	46de      	mov	lr, fp
 8001d02:	b5e0      	push	{r5, r6, r7, lr}
 8001d04:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d06:	2204      	movs	r2, #4
 8001d08:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	0112      	lsls	r2, r2, #4
{
 8001d0e:	4699      	mov	r9, r3
 8001d10:	4680      	mov	r8, r0
 8001d12:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d14:	4693      	mov	fp, r2
{
 8001d16:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8001d18:	6803      	ldr	r3, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d1a:	e001      	b.n	8001d20 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8001d1c:	1c7a      	adds	r2, r7, #1
 8001d1e:	d10d      	bne.n	8001d3c <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d20:	69dc      	ldr	r4, [r3, #28]
 8001d22:	402c      	ands	r4, r5
 8001d24:	1b64      	subs	r4, r4, r5
 8001d26:	4262      	negs	r2, r4
 8001d28:	4154      	adcs	r4, r2
 8001d2a:	42b4      	cmp	r4, r6
 8001d2c:	d0f6      	beq.n	8001d1c <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001d2e:	2000      	movs	r0, #0
}
 8001d30:	bcf0      	pop	{r4, r5, r6, r7}
 8001d32:	46bb      	mov	fp, r7
 8001d34:	46b2      	mov	sl, r6
 8001d36:	46a9      	mov	r9, r5
 8001d38:	46a0      	mov	r8, r4
 8001d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3c:	f7fe fdf2 	bl	8000924 <HAL_GetTick>
 8001d40:	464b      	mov	r3, r9
 8001d42:	1ac0      	subs	r0, r0, r3
 8001d44:	42b8      	cmp	r0, r7
 8001d46:	d830      	bhi.n	8001daa <UART_WaitOnFlagUntilTimeout+0xb2>
 8001d48:	2f00      	cmp	r7, #0
 8001d4a:	d02e      	beq.n	8001daa <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001d4c:	4643      	mov	r3, r8
 8001d4e:	4651      	mov	r1, sl
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4211      	tst	r1, r2
 8001d56:	d0e3      	beq.n	8001d20 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001d58:	4659      	mov	r1, fp
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	420a      	tst	r2, r1
 8001d5e:	d0df      	beq.n	8001d20 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d60:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d62:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d66:	2201      	movs	r2, #1
 8001d68:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d6c:	4643      	mov	r3, r8
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	4c1f      	ldr	r4, [pc, #124]	; (8001df0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001d72:	680b      	ldr	r3, [r1, #0]
 8001d74:	4023      	ands	r3, r4
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d7c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d80:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d84:	4643      	mov	r3, r8
 8001d86:	6819      	ldr	r1, [r3, #0]
 8001d88:	688b      	ldr	r3, [r1, #8]
 8001d8a:	4393      	bics	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
 8001d8e:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8001d92:	2320      	movs	r3, #32
 8001d94:	4642      	mov	r2, r8
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d96:	4641      	mov	r1, r8
          huart->gState = HAL_UART_STATE_READY;
 8001d98:	6793      	str	r3, [r2, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001d9a:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 8001da0:	2200      	movs	r2, #0
 8001da2:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 8001da4:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001da6:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8001da8:	e7c2      	b.n	8001d30 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001daa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dae:	2201      	movs	r2, #1
 8001db0:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001db4:	4643      	mov	r3, r8
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	4c0d      	ldr	r4, [pc, #52]	; (8001df0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001dba:	680b      	ldr	r3, [r1, #0]
 8001dbc:	4023      	ands	r3, r4
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dc4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dc8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dcc:	4643      	mov	r3, r8
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	688b      	ldr	r3, [r1, #8]
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
 8001dd6:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8001dda:	2320      	movs	r3, #32
 8001ddc:	4642      	mov	r2, r8
        __HAL_UNLOCK(huart);
 8001dde:	4641      	mov	r1, r8
        huart->gState = HAL_UART_STATE_READY;
 8001de0:	6793      	str	r3, [r2, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001de2:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001de4:	2200      	movs	r2, #0
 8001de6:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 8001de8:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8001dea:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8001dec:	e7a0      	b.n	8001d30 <UART_WaitOnFlagUntilTimeout+0x38>
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	fffffe5f 	.word	0xfffffe5f

08001df4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	2200      	movs	r2, #0
{
 8001df8:	b530      	push	{r4, r5, lr}
 8001dfa:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfc:	50c2      	str	r2, [r0, r3]
{
 8001dfe:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 8001e00:	f7fe fd90 	bl	8000924 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e04:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001e06:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	0712      	lsls	r2, r2, #28
 8001e0c:	d40c      	bmi.n	8001e28 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	075b      	lsls	r3, r3, #29
 8001e12:	d418      	bmi.n	8001e46 <UART_CheckIdleState+0x52>
  huart->gState = HAL_UART_STATE_READY;
 8001e14:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001e16:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8001e18:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001e1a:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1c:	2300      	movs	r3, #0
  return HAL_OK;
 8001e1e:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e20:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8001e22:	54a3      	strb	r3, [r4, r2]
}
 8001e24:	b003      	add	sp, #12
 8001e26:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <UART_CheckIdleState+0x6c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	0389      	lsls	r1, r1, #14
 8001e32:	0003      	movs	r3, r0
 8001e34:	0020      	movs	r0, r4
 8001e36:	f7ff ff5f 	bl	8001cf8 <UART_WaitOnFlagUntilTimeout>
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d10e      	bne.n	8001e5c <UART_CheckIdleState+0x68>
 8001e3e:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	075b      	lsls	r3, r3, #29
 8001e44:	d5e6      	bpl.n	8001e14 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <UART_CheckIdleState+0x6c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	0020      	movs	r0, r4
 8001e50:	002b      	movs	r3, r5
 8001e52:	03c9      	lsls	r1, r1, #15
 8001e54:	f7ff ff50 	bl	8001cf8 <UART_WaitOnFlagUntilTimeout>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d0db      	beq.n	8001e14 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	e7e1      	b.n	8001e24 <UART_CheckIdleState+0x30>
 8001e60:	01ffffff 	.word	0x01ffffff

08001e64 <HAL_UART_Init>:
{
 8001e64:	b510      	push	{r4, lr}
 8001e66:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001e68:	d026      	beq.n	8001eb8 <HAL_UART_Init+0x54>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e6a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d025      	beq.n	8001ebc <HAL_UART_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e70:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001e72:	2101      	movs	r1, #1
 8001e74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e76:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001e78:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e7a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001e7c:	438b      	bics	r3, r1
 8001e7e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e80:	f7ff fdb4 	bl	80019ec <UART_SetConfig>
 8001e84:	2801      	cmp	r0, #1
 8001e86:	d017      	beq.n	8001eb8 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d110      	bne.n	8001eb0 <HAL_UART_Init+0x4c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	490d      	ldr	r1, [pc, #52]	; (8001ec8 <HAL_UART_Init+0x64>)
 8001e92:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001e94:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e96:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e98:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	3929      	subs	r1, #41	; 0x29
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001eaa:	f7ff ffa3 	bl	8001df4 <UART_CheckIdleState>
}
 8001eae:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8001eb0:	0020      	movs	r0, r4
 8001eb2:	f7ff feb9 	bl	8001c28 <UART_AdvFeatureConfig>
 8001eb6:	e7ea      	b.n	8001e8e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8001eb8:	2001      	movs	r0, #1
 8001eba:	e7f8      	b.n	8001eae <HAL_UART_Init+0x4a>
    huart->Lock = HAL_UNLOCKED;
 8001ebc:	2274      	movs	r2, #116	; 0x74
 8001ebe:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8001ec0:	f7fe fc3e 	bl	8000740 <HAL_UART_MspInit>
 8001ec4:	e7d4      	b.n	8001e70 <HAL_UART_Init+0xc>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	ffffb7ff 	.word	0xffffb7ff

08001ecc <UART_Start_Receive_DMA>:
{
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 8001ed0:	2258      	movs	r2, #88	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed2:	2780      	movs	r7, #128	; 0x80
 8001ed4:	2600      	movs	r6, #0
  huart->pRxBuffPtr = pData;
 8001ed6:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize = Size;
 8001ed8:	5283      	strh	r3, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001eda:	3a36      	subs	r2, #54	; 0x36
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001edc:	51c6      	str	r6, [r0, r7]
{
 8001ede:	0004      	movs	r4, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ee0:	67c2      	str	r2, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8001ee2:	6f00      	ldr	r0, [r0, #112]	; 0x70
{
 8001ee4:	000d      	movs	r5, r1
  if (huart->hdmarx != NULL)
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d00d      	beq.n	8001f06 <UART_Start_Receive_DMA+0x3a>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001eec:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001eee:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8001ef2:	6386      	str	r6, [r0, #56]	; 0x38
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001ef4:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001ef8:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001efa:	6342      	str	r2, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001efc:	002a      	movs	r2, r5
 8001efe:	f7fe fdb5 	bl	8000a6c <HAL_DMA_Start_IT>
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d126      	bne.n	8001f54 <UART_Start_Receive_DMA+0x88>
  __HAL_UNLOCK(huart);
 8001f06:	2374      	movs	r3, #116	; 0x74
 8001f08:	2200      	movs	r2, #0
 8001f0a:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f0c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f10:	3b73      	subs	r3, #115	; 0x73
 8001f12:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f16:	6821      	ldr	r1, [r4, #0]
 8001f18:	3201      	adds	r2, #1
 8001f1a:	680d      	ldr	r5, [r1, #0]
 8001f1c:	32ff      	adds	r2, #255	; 0xff
 8001f1e:	432a      	orrs	r2, r5
 8001f20:	600a      	str	r2, [r1, #0]
 8001f22:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f26:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f2e:	6821      	ldr	r1, [r4, #0]
 8001f30:	688a      	ldr	r2, [r1, #8]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	608a      	str	r2, [r1, #8]
 8001f36:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f3a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f42:	2040      	movs	r0, #64	; 0x40
 8001f44:	6822      	ldr	r2, [r4, #0]
 8001f46:	6893      	ldr	r3, [r2, #8]
 8001f48:	4303      	orrs	r3, r0
 8001f4a:	6093      	str	r3, [r2, #8]
 8001f4c:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8001f50:	2000      	movs	r0, #0
}
 8001f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001f54:	2310      	movs	r3, #16
 8001f56:	51e3      	str	r3, [r4, r7]
      __HAL_UNLOCK(huart);
 8001f58:	3364      	adds	r3, #100	; 0x64
 8001f5a:	54e6      	strb	r6, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	3b54      	subs	r3, #84	; 0x54
      return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 8001f60:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_ERROR;
 8001f62:	e7f6      	b.n	8001f52 <UART_Start_Receive_DMA+0x86>
 8001f64:	08001959 	.word	0x08001959
 8001f68:	0800193d 	.word	0x0800193d
 8001f6c:	080018d5 	.word	0x080018d5

08001f70 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f70:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8001f72:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d12d      	bne.n	8001fd4 <HAL_UART_Receive_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	d029      	beq.n	8001fd0 <HAL_UART_Receive_DMA+0x60>
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d027      	beq.n	8001fd0 <HAL_UART_Receive_DMA+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	6884      	ldr	r4, [r0, #8]
 8001f84:	015b      	lsls	r3, r3, #5
 8001f86:	429c      	cmp	r4, r3
 8001f88:	d01d      	beq.n	8001fc6 <HAL_UART_Receive_DMA+0x56>
    __HAL_LOCK(huart);
 8001f8a:	2374      	movs	r3, #116	; 0x74
 8001f8c:	5cc4      	ldrb	r4, [r0, r3]
 8001f8e:	2c01      	cmp	r4, #1
 8001f90:	d020      	beq.n	8001fd4 <HAL_UART_Receive_DMA+0x64>
 8001f92:	2401      	movs	r4, #1
 8001f94:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f96:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001f98:	4d0f      	ldr	r5, [pc, #60]	; (8001fd8 <HAL_UART_Receive_DMA+0x68>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f9a:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001f9c:	6803      	ldr	r3, [r0, #0]
 8001f9e:	42ab      	cmp	r3, r5
 8001fa0:	d00e      	beq.n	8001fc0 <HAL_UART_Receive_DMA+0x50>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	d50b      	bpl.n	8001fc0 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fa8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fac:	f384 8810 	msr	PRIMASK, r4
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	6804      	ldr	r4, [r0, #0]
 8001fb4:	04db      	lsls	r3, r3, #19
 8001fb6:	6826      	ldr	r6, [r4, #0]
 8001fb8:	4333      	orrs	r3, r6
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001fc0:	f7ff ff84 	bl	8001ecc <UART_Start_Receive_DMA>
 8001fc4:	e005      	b.n	8001fd2 <HAL_UART_Receive_DMA+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc6:	6903      	ldr	r3, [r0, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1de      	bne.n	8001f8a <HAL_UART_Receive_DMA+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fcc:	07cb      	lsls	r3, r1, #31
 8001fce:	d5dc      	bpl.n	8001f8a <HAL_UART_Receive_DMA+0x1a>
      return HAL_ERROR;
 8001fd0:	2001      	movs	r0, #1
}
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	e7fc      	b.n	8001fd2 <HAL_UART_Receive_DMA+0x62>
 8001fd8:	40004800 	.word	0x40004800

08001fdc <atoi>:
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	220a      	movs	r2, #10
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	f000 f98f 	bl	8002304 <strtol>
 8001fe6:	bd10      	pop	{r4, pc}

08001fe8 <__errno>:
 8001fe8:	4b01      	ldr	r3, [pc, #4]	; (8001ff0 <__errno+0x8>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	4770      	bx	lr
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	2000000c 	.word	0x2000000c

08001ff4 <__libc_init_array>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	4d0c      	ldr	r5, [pc, #48]	; (800202c <__libc_init_array+0x38>)
 8001ffa:	4c0d      	ldr	r4, [pc, #52]	; (8002030 <__libc_init_array+0x3c>)
 8001ffc:	1b64      	subs	r4, r4, r5
 8001ffe:	10a4      	asrs	r4, r4, #2
 8002000:	42a6      	cmp	r6, r4
 8002002:	d109      	bne.n	8002018 <__libc_init_array+0x24>
 8002004:	2600      	movs	r6, #0
 8002006:	f000 f99b 	bl	8002340 <_init>
 800200a:	4d0a      	ldr	r5, [pc, #40]	; (8002034 <__libc_init_array+0x40>)
 800200c:	4c0a      	ldr	r4, [pc, #40]	; (8002038 <__libc_init_array+0x44>)
 800200e:	1b64      	subs	r4, r4, r5
 8002010:	10a4      	asrs	r4, r4, #2
 8002012:	42a6      	cmp	r6, r4
 8002014:	d105      	bne.n	8002022 <__libc_init_array+0x2e>
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	00b3      	lsls	r3, r6, #2
 800201a:	58eb      	ldr	r3, [r5, r3]
 800201c:	4798      	blx	r3
 800201e:	3601      	adds	r6, #1
 8002020:	e7ee      	b.n	8002000 <__libc_init_array+0xc>
 8002022:	00b3      	lsls	r3, r6, #2
 8002024:	58eb      	ldr	r3, [r5, r3]
 8002026:	4798      	blx	r3
 8002028:	3601      	adds	r6, #1
 800202a:	e7f2      	b.n	8002012 <__libc_init_array+0x1e>
 800202c:	0800254c 	.word	0x0800254c
 8002030:	0800254c 	.word	0x0800254c
 8002034:	0800254c 	.word	0x0800254c
 8002038:	08002550 	.word	0x08002550

0800203c <malloc>:
 800203c:	b510      	push	{r4, lr}
 800203e:	4b03      	ldr	r3, [pc, #12]	; (800204c <malloc+0x10>)
 8002040:	0001      	movs	r1, r0
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f000 f860 	bl	8002108 <_malloc_r>
 8002048:	bd10      	pop	{r4, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	2000000c 	.word	0x2000000c

08002050 <free>:
 8002050:	b510      	push	{r4, lr}
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <free+0x10>)
 8002054:	0001      	movs	r1, r0
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	f000 f80c 	bl	8002074 <_free_r>
 800205c:	bd10      	pop	{r4, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	2000000c 	.word	0x2000000c

08002064 <memset>:
 8002064:	0003      	movs	r3, r0
 8002066:	1882      	adds	r2, r0, r2
 8002068:	4293      	cmp	r3, r2
 800206a:	d100      	bne.n	800206e <memset+0xa>
 800206c:	4770      	bx	lr
 800206e:	7019      	strb	r1, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	e7f9      	b.n	8002068 <memset+0x4>

08002074 <_free_r>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	0005      	movs	r5, r0
 8002078:	2900      	cmp	r1, #0
 800207a:	d010      	beq.n	800209e <_free_r+0x2a>
 800207c:	1f0c      	subs	r4, r1, #4
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	da00      	bge.n	8002086 <_free_r+0x12>
 8002084:	18e4      	adds	r4, r4, r3
 8002086:	0028      	movs	r0, r5
 8002088:	f000 f94a 	bl	8002320 <__malloc_lock>
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <_free_r+0x90>)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <_free_r+0x2c>
 8002094:	6063      	str	r3, [r4, #4]
 8002096:	6014      	str	r4, [r2, #0]
 8002098:	0028      	movs	r0, r5
 800209a:	f000 f949 	bl	8002330 <__malloc_unlock>
 800209e:	bd70      	pop	{r4, r5, r6, pc}
 80020a0:	42a3      	cmp	r3, r4
 80020a2:	d908      	bls.n	80020b6 <_free_r+0x42>
 80020a4:	6821      	ldr	r1, [r4, #0]
 80020a6:	1860      	adds	r0, r4, r1
 80020a8:	4283      	cmp	r3, r0
 80020aa:	d1f3      	bne.n	8002094 <_free_r+0x20>
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	1841      	adds	r1, r0, r1
 80020b2:	6021      	str	r1, [r4, #0]
 80020b4:	e7ee      	b.n	8002094 <_free_r+0x20>
 80020b6:	001a      	movs	r2, r3
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <_free_r+0x4e>
 80020be:	42a3      	cmp	r3, r4
 80020c0:	d9f9      	bls.n	80020b6 <_free_r+0x42>
 80020c2:	6811      	ldr	r1, [r2, #0]
 80020c4:	1850      	adds	r0, r2, r1
 80020c6:	42a0      	cmp	r0, r4
 80020c8:	d10b      	bne.n	80020e2 <_free_r+0x6e>
 80020ca:	6820      	ldr	r0, [r4, #0]
 80020cc:	1809      	adds	r1, r1, r0
 80020ce:	1850      	adds	r0, r2, r1
 80020d0:	6011      	str	r1, [r2, #0]
 80020d2:	4283      	cmp	r3, r0
 80020d4:	d1e0      	bne.n	8002098 <_free_r+0x24>
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	1841      	adds	r1, r0, r1
 80020dc:	6011      	str	r1, [r2, #0]
 80020de:	6053      	str	r3, [r2, #4]
 80020e0:	e7da      	b.n	8002098 <_free_r+0x24>
 80020e2:	42a0      	cmp	r0, r4
 80020e4:	d902      	bls.n	80020ec <_free_r+0x78>
 80020e6:	230c      	movs	r3, #12
 80020e8:	602b      	str	r3, [r5, #0]
 80020ea:	e7d5      	b.n	8002098 <_free_r+0x24>
 80020ec:	6821      	ldr	r1, [r4, #0]
 80020ee:	1860      	adds	r0, r4, r1
 80020f0:	4283      	cmp	r3, r0
 80020f2:	d103      	bne.n	80020fc <_free_r+0x88>
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	1841      	adds	r1, r0, r1
 80020fa:	6021      	str	r1, [r4, #0]
 80020fc:	6063      	str	r3, [r4, #4]
 80020fe:	6054      	str	r4, [r2, #4]
 8002100:	e7ca      	b.n	8002098 <_free_r+0x24>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	20000094 	.word	0x20000094

08002108 <_malloc_r>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	2303      	movs	r3, #3
 800210c:	1ccd      	adds	r5, r1, #3
 800210e:	439d      	bics	r5, r3
 8002110:	3508      	adds	r5, #8
 8002112:	0006      	movs	r6, r0
 8002114:	2d0c      	cmp	r5, #12
 8002116:	d21f      	bcs.n	8002158 <_malloc_r+0x50>
 8002118:	250c      	movs	r5, #12
 800211a:	42a9      	cmp	r1, r5
 800211c:	d81e      	bhi.n	800215c <_malloc_r+0x54>
 800211e:	0030      	movs	r0, r6
 8002120:	f000 f8fe 	bl	8002320 <__malloc_lock>
 8002124:	4925      	ldr	r1, [pc, #148]	; (80021bc <_malloc_r+0xb4>)
 8002126:	680a      	ldr	r2, [r1, #0]
 8002128:	0014      	movs	r4, r2
 800212a:	2c00      	cmp	r4, #0
 800212c:	d11a      	bne.n	8002164 <_malloc_r+0x5c>
 800212e:	4f24      	ldr	r7, [pc, #144]	; (80021c0 <_malloc_r+0xb8>)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d104      	bne.n	8002140 <_malloc_r+0x38>
 8002136:	0021      	movs	r1, r4
 8002138:	0030      	movs	r0, r6
 800213a:	f000 f843 	bl	80021c4 <_sbrk_r>
 800213e:	6038      	str	r0, [r7, #0]
 8002140:	0029      	movs	r1, r5
 8002142:	0030      	movs	r0, r6
 8002144:	f000 f83e 	bl	80021c4 <_sbrk_r>
 8002148:	1c43      	adds	r3, r0, #1
 800214a:	d12b      	bne.n	80021a4 <_malloc_r+0x9c>
 800214c:	230c      	movs	r3, #12
 800214e:	0030      	movs	r0, r6
 8002150:	6033      	str	r3, [r6, #0]
 8002152:	f000 f8ed 	bl	8002330 <__malloc_unlock>
 8002156:	e003      	b.n	8002160 <_malloc_r+0x58>
 8002158:	2d00      	cmp	r5, #0
 800215a:	dade      	bge.n	800211a <_malloc_r+0x12>
 800215c:	230c      	movs	r3, #12
 800215e:	6033      	str	r3, [r6, #0]
 8002160:	2000      	movs	r0, #0
 8002162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	1b5b      	subs	r3, r3, r5
 8002168:	d419      	bmi.n	800219e <_malloc_r+0x96>
 800216a:	2b0b      	cmp	r3, #11
 800216c:	d903      	bls.n	8002176 <_malloc_r+0x6e>
 800216e:	6023      	str	r3, [r4, #0]
 8002170:	18e4      	adds	r4, r4, r3
 8002172:	6025      	str	r5, [r4, #0]
 8002174:	e003      	b.n	800217e <_malloc_r+0x76>
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	42a2      	cmp	r2, r4
 800217a:	d10e      	bne.n	800219a <_malloc_r+0x92>
 800217c:	600b      	str	r3, [r1, #0]
 800217e:	0030      	movs	r0, r6
 8002180:	f000 f8d6 	bl	8002330 <__malloc_unlock>
 8002184:	0020      	movs	r0, r4
 8002186:	2207      	movs	r2, #7
 8002188:	300b      	adds	r0, #11
 800218a:	1d23      	adds	r3, r4, #4
 800218c:	4390      	bics	r0, r2
 800218e:	1ac2      	subs	r2, r0, r3
 8002190:	4298      	cmp	r0, r3
 8002192:	d0e6      	beq.n	8002162 <_malloc_r+0x5a>
 8002194:	1a1b      	subs	r3, r3, r0
 8002196:	50a3      	str	r3, [r4, r2]
 8002198:	e7e3      	b.n	8002162 <_malloc_r+0x5a>
 800219a:	6053      	str	r3, [r2, #4]
 800219c:	e7ef      	b.n	800217e <_malloc_r+0x76>
 800219e:	0022      	movs	r2, r4
 80021a0:	6864      	ldr	r4, [r4, #4]
 80021a2:	e7c2      	b.n	800212a <_malloc_r+0x22>
 80021a4:	2303      	movs	r3, #3
 80021a6:	1cc4      	adds	r4, r0, #3
 80021a8:	439c      	bics	r4, r3
 80021aa:	42a0      	cmp	r0, r4
 80021ac:	d0e1      	beq.n	8002172 <_malloc_r+0x6a>
 80021ae:	1a21      	subs	r1, r4, r0
 80021b0:	0030      	movs	r0, r6
 80021b2:	f000 f807 	bl	80021c4 <_sbrk_r>
 80021b6:	1c43      	adds	r3, r0, #1
 80021b8:	d1db      	bne.n	8002172 <_malloc_r+0x6a>
 80021ba:	e7c7      	b.n	800214c <_malloc_r+0x44>
 80021bc:	20000094 	.word	0x20000094
 80021c0:	20000098 	.word	0x20000098

080021c4 <_sbrk_r>:
 80021c4:	2300      	movs	r3, #0
 80021c6:	b570      	push	{r4, r5, r6, lr}
 80021c8:	4d06      	ldr	r5, [pc, #24]	; (80021e4 <_sbrk_r+0x20>)
 80021ca:	0004      	movs	r4, r0
 80021cc:	0008      	movs	r0, r1
 80021ce:	602b      	str	r3, [r5, #0]
 80021d0:	f7fe fb14 	bl	80007fc <_sbrk>
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	d103      	bne.n	80021e0 <_sbrk_r+0x1c>
 80021d8:	682b      	ldr	r3, [r5, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d000      	beq.n	80021e0 <_sbrk_r+0x1c>
 80021de:	6023      	str	r3, [r4, #0]
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	20000178 	.word	0x20000178

080021e8 <_strtol_l.isra.0>:
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	b087      	sub	sp, #28
 80021ec:	001e      	movs	r6, r3
 80021ee:	9005      	str	r0, [sp, #20]
 80021f0:	9101      	str	r1, [sp, #4]
 80021f2:	9202      	str	r2, [sp, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d045      	beq.n	8002284 <_strtol_l.isra.0+0x9c>
 80021f8:	0008      	movs	r0, r1
 80021fa:	2b24      	cmp	r3, #36	; 0x24
 80021fc:	d842      	bhi.n	8002284 <_strtol_l.isra.0+0x9c>
 80021fe:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <_strtol_l.isra.0+0x114>)
 8002200:	2208      	movs	r2, #8
 8002202:	469c      	mov	ip, r3
 8002204:	0003      	movs	r3, r0
 8002206:	4661      	mov	r1, ip
 8002208:	781c      	ldrb	r4, [r3, #0]
 800220a:	1c45      	adds	r5, r0, #1
 800220c:	5d09      	ldrb	r1, [r1, r4]
 800220e:	0028      	movs	r0, r5
 8002210:	000f      	movs	r7, r1
 8002212:	4017      	ands	r7, r2
 8002214:	4211      	tst	r1, r2
 8002216:	d1f5      	bne.n	8002204 <_strtol_l.isra.0+0x1c>
 8002218:	2c2d      	cmp	r4, #45	; 0x2d
 800221a:	d13a      	bne.n	8002292 <_strtol_l.isra.0+0xaa>
 800221c:	2701      	movs	r7, #1
 800221e:	782c      	ldrb	r4, [r5, #0]
 8002220:	1c9d      	adds	r5, r3, #2
 8002222:	2e00      	cmp	r6, #0
 8002224:	d065      	beq.n	80022f2 <_strtol_l.isra.0+0x10a>
 8002226:	2e10      	cmp	r6, #16
 8002228:	d109      	bne.n	800223e <_strtol_l.isra.0+0x56>
 800222a:	2c30      	cmp	r4, #48	; 0x30
 800222c:	d107      	bne.n	800223e <_strtol_l.isra.0+0x56>
 800222e:	2220      	movs	r2, #32
 8002230:	782b      	ldrb	r3, [r5, #0]
 8002232:	4393      	bics	r3, r2
 8002234:	2b58      	cmp	r3, #88	; 0x58
 8002236:	d157      	bne.n	80022e8 <_strtol_l.isra.0+0x100>
 8002238:	2610      	movs	r6, #16
 800223a:	786c      	ldrb	r4, [r5, #1]
 800223c:	3502      	adds	r5, #2
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <_strtol_l.isra.0+0x118>)
 8002240:	0031      	movs	r1, r6
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	0018      	movs	r0, r3
 8002246:	9303      	str	r3, [sp, #12]
 8002248:	f7fd ffe4 	bl	8000214 <__aeabi_uidivmod>
 800224c:	2300      	movs	r3, #0
 800224e:	2201      	movs	r2, #1
 8002250:	4684      	mov	ip, r0
 8002252:	0018      	movs	r0, r3
 8002254:	9104      	str	r1, [sp, #16]
 8002256:	4252      	negs	r2, r2
 8002258:	0021      	movs	r1, r4
 800225a:	3930      	subs	r1, #48	; 0x30
 800225c:	2909      	cmp	r1, #9
 800225e:	d81d      	bhi.n	800229c <_strtol_l.isra.0+0xb4>
 8002260:	000c      	movs	r4, r1
 8002262:	42a6      	cmp	r6, r4
 8002264:	dd28      	ble.n	80022b8 <_strtol_l.isra.0+0xd0>
 8002266:	2b00      	cmp	r3, #0
 8002268:	db24      	blt.n	80022b4 <_strtol_l.isra.0+0xcc>
 800226a:	0013      	movs	r3, r2
 800226c:	4584      	cmp	ip, r0
 800226e:	d306      	bcc.n	800227e <_strtol_l.isra.0+0x96>
 8002270:	d102      	bne.n	8002278 <_strtol_l.isra.0+0x90>
 8002272:	9904      	ldr	r1, [sp, #16]
 8002274:	42a1      	cmp	r1, r4
 8002276:	db02      	blt.n	800227e <_strtol_l.isra.0+0x96>
 8002278:	2301      	movs	r3, #1
 800227a:	4370      	muls	r0, r6
 800227c:	1820      	adds	r0, r4, r0
 800227e:	782c      	ldrb	r4, [r5, #0]
 8002280:	3501      	adds	r5, #1
 8002282:	e7e9      	b.n	8002258 <_strtol_l.isra.0+0x70>
 8002284:	f7ff feb0 	bl	8001fe8 <__errno>
 8002288:	2316      	movs	r3, #22
 800228a:	6003      	str	r3, [r0, #0]
 800228c:	2000      	movs	r0, #0
 800228e:	b007      	add	sp, #28
 8002290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002292:	2c2b      	cmp	r4, #43	; 0x2b
 8002294:	d1c5      	bne.n	8002222 <_strtol_l.isra.0+0x3a>
 8002296:	782c      	ldrb	r4, [r5, #0]
 8002298:	1c9d      	adds	r5, r3, #2
 800229a:	e7c2      	b.n	8002222 <_strtol_l.isra.0+0x3a>
 800229c:	0021      	movs	r1, r4
 800229e:	3941      	subs	r1, #65	; 0x41
 80022a0:	2919      	cmp	r1, #25
 80022a2:	d801      	bhi.n	80022a8 <_strtol_l.isra.0+0xc0>
 80022a4:	3c37      	subs	r4, #55	; 0x37
 80022a6:	e7dc      	b.n	8002262 <_strtol_l.isra.0+0x7a>
 80022a8:	0021      	movs	r1, r4
 80022aa:	3961      	subs	r1, #97	; 0x61
 80022ac:	2919      	cmp	r1, #25
 80022ae:	d803      	bhi.n	80022b8 <_strtol_l.isra.0+0xd0>
 80022b0:	3c57      	subs	r4, #87	; 0x57
 80022b2:	e7d6      	b.n	8002262 <_strtol_l.isra.0+0x7a>
 80022b4:	0013      	movs	r3, r2
 80022b6:	e7e2      	b.n	800227e <_strtol_l.isra.0+0x96>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da09      	bge.n	80022d0 <_strtol_l.isra.0+0xe8>
 80022bc:	2322      	movs	r3, #34	; 0x22
 80022be:	9a05      	ldr	r2, [sp, #20]
 80022c0:	9803      	ldr	r0, [sp, #12]
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	9b02      	ldr	r3, [sp, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0e1      	beq.n	800228e <_strtol_l.isra.0+0xa6>
 80022ca:	1e6b      	subs	r3, r5, #1
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	e007      	b.n	80022e0 <_strtol_l.isra.0+0xf8>
 80022d0:	2f00      	cmp	r7, #0
 80022d2:	d000      	beq.n	80022d6 <_strtol_l.isra.0+0xee>
 80022d4:	4240      	negs	r0, r0
 80022d6:	9a02      	ldr	r2, [sp, #8]
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d0d8      	beq.n	800228e <_strtol_l.isra.0+0xa6>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f4      	bne.n	80022ca <_strtol_l.isra.0+0xe2>
 80022e0:	9b02      	ldr	r3, [sp, #8]
 80022e2:	9a01      	ldr	r2, [sp, #4]
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e7d2      	b.n	800228e <_strtol_l.isra.0+0xa6>
 80022e8:	2430      	movs	r4, #48	; 0x30
 80022ea:	2e00      	cmp	r6, #0
 80022ec:	d1a7      	bne.n	800223e <_strtol_l.isra.0+0x56>
 80022ee:	3608      	adds	r6, #8
 80022f0:	e7a5      	b.n	800223e <_strtol_l.isra.0+0x56>
 80022f2:	2c30      	cmp	r4, #48	; 0x30
 80022f4:	d09b      	beq.n	800222e <_strtol_l.isra.0+0x46>
 80022f6:	260a      	movs	r6, #10
 80022f8:	e7a1      	b.n	800223e <_strtol_l.isra.0+0x56>
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	080023e2 	.word	0x080023e2
 8002300:	7fffffff 	.word	0x7fffffff

08002304 <strtol>:
 8002304:	b510      	push	{r4, lr}
 8002306:	0013      	movs	r3, r2
 8002308:	000a      	movs	r2, r1
 800230a:	0001      	movs	r1, r0
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <strtol+0x14>)
 800230e:	6800      	ldr	r0, [r0, #0]
 8002310:	f7ff ff6a 	bl	80021e8 <_strtol_l.isra.0>
 8002314:	bd10      	pop	{r4, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	2000000c 	.word	0x2000000c

0800231c <__retarget_lock_acquire_recursive>:
 800231c:	4770      	bx	lr

0800231e <__retarget_lock_release_recursive>:
 800231e:	4770      	bx	lr

08002320 <__malloc_lock>:
 8002320:	b510      	push	{r4, lr}
 8002322:	4802      	ldr	r0, [pc, #8]	; (800232c <__malloc_lock+0xc>)
 8002324:	f7ff fffa 	bl	800231c <__retarget_lock_acquire_recursive>
 8002328:	bd10      	pop	{r4, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	20000170 	.word	0x20000170

08002330 <__malloc_unlock>:
 8002330:	b510      	push	{r4, lr}
 8002332:	4802      	ldr	r0, [pc, #8]	; (800233c <__malloc_unlock+0xc>)
 8002334:	f7ff fff3 	bl	800231e <__retarget_lock_release_recursive>
 8002338:	bd10      	pop	{r4, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	20000170 	.word	0x20000170

08002340 <_init>:
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002346:	bc08      	pop	{r3}
 8002348:	469e      	mov	lr, r3
 800234a:	4770      	bx	lr

0800234c <_fini>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002352:	bc08      	pop	{r3}
 8002354:	469e      	mov	lr, r3
 8002356:	4770      	bx	lr
