
cleaner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000700c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007550  08007550  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007558  08007558  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007558  08007558  00017558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000078  080075d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080075d8  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee6a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004069  00000000  00000000  0003ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000127d0  00000000  00000000  00042f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00055748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003100  00000000  00000000  00056378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ff4  00000000  00000000  00059478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000194c6  00000000  00000000  0007046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000827ce  00000000  00000000  00089932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010c100  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032e0  00000000  00000000  0010c154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080070b4 	.word	0x080070b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080070b4 	.word	0x080070b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cfrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	1c08      	adds	r0, r1, #0
 8000248:	4661      	mov	r1, ip
 800024a:	e7ff      	b.n	800024c <__aeabi_cfcmpeq>

0800024c <__aeabi_cfcmpeq>:
 800024c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024e:	f000 fb71 	bl	8000934 <__lesf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	d401      	bmi.n	800025a <__aeabi_cfcmpeq+0xe>
 8000256:	2100      	movs	r1, #0
 8000258:	42c8      	cmn	r0, r1
 800025a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800025c <__aeabi_fcmpeq>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 faf5 	bl	800084c <__eqsf2>
 8000262:	4240      	negs	r0, r0
 8000264:	3001      	adds	r0, #1
 8000266:	bd10      	pop	{r4, pc}

08000268 <__aeabi_fcmplt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fb63 	bl	8000934 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	db01      	blt.n	8000276 <__aeabi_fcmplt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmple>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fb59 	bl	8000934 <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dd01      	ble.n	800028a <__aeabi_fcmple+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpgt>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 fb03 	bl	800089c <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dc01      	bgt.n	800029e <__aeabi_fcmpgt+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_fcmpge>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 faf9 	bl	800089c <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	da01      	bge.n	80002b2 <__aeabi_fcmpge+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_uldivmod>:
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d111      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d10f      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d100      	bne.n	80002c6 <__aeabi_uldivmod+0xe>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d002      	beq.n	80002ce <__aeabi_uldivmod+0x16>
 80002c8:	2100      	movs	r1, #0
 80002ca:	43c9      	mvns	r1, r1
 80002cc:	1c08      	adds	r0, r1, #0
 80002ce:	b407      	push	{r0, r1, r2}
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <__aeabi_uldivmod+0x24>)
 80002d2:	a102      	add	r1, pc, #8	; (adr r1, 80002dc <__aeabi_uldivmod+0x24>)
 80002d4:	1840      	adds	r0, r0, r1
 80002d6:	9002      	str	r0, [sp, #8]
 80002d8:	bd03      	pop	{r0, r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	ffffff65 	.word	0xffffff65
 80002e0:	b403      	push	{r0, r1}
 80002e2:	4668      	mov	r0, sp
 80002e4:	b501      	push	{r0, lr}
 80002e6:	9802      	ldr	r0, [sp, #8]
 80002e8:	f000 f848 	bl	800037c <__udivmoddi4>
 80002ec:	9b01      	ldr	r3, [sp, #4]
 80002ee:	469e      	mov	lr, r3
 80002f0:	b002      	add	sp, #8
 80002f2:	bc0c      	pop	{r2, r3}
 80002f4:	4770      	bx	lr
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_lmul>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	0415      	lsls	r5, r2, #16
 80002fc:	0c2d      	lsrs	r5, r5, #16
 80002fe:	000f      	movs	r7, r1
 8000300:	0001      	movs	r1, r0
 8000302:	002e      	movs	r6, r5
 8000304:	46c6      	mov	lr, r8
 8000306:	4684      	mov	ip, r0
 8000308:	0400      	lsls	r0, r0, #16
 800030a:	0c14      	lsrs	r4, r2, #16
 800030c:	0c00      	lsrs	r0, r0, #16
 800030e:	0c09      	lsrs	r1, r1, #16
 8000310:	4346      	muls	r6, r0
 8000312:	434d      	muls	r5, r1
 8000314:	4360      	muls	r0, r4
 8000316:	4361      	muls	r1, r4
 8000318:	1940      	adds	r0, r0, r5
 800031a:	0c34      	lsrs	r4, r6, #16
 800031c:	1824      	adds	r4, r4, r0
 800031e:	b500      	push	{lr}
 8000320:	42a5      	cmp	r5, r4
 8000322:	d903      	bls.n	800032c <__aeabi_lmul+0x34>
 8000324:	2080      	movs	r0, #128	; 0x80
 8000326:	0240      	lsls	r0, r0, #9
 8000328:	4680      	mov	r8, r0
 800032a:	4441      	add	r1, r8
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	186d      	adds	r5, r5, r1
 8000330:	4661      	mov	r1, ip
 8000332:	4359      	muls	r1, r3
 8000334:	437a      	muls	r2, r7
 8000336:	0430      	lsls	r0, r6, #16
 8000338:	1949      	adds	r1, r1, r5
 800033a:	0424      	lsls	r4, r4, #16
 800033c:	0c00      	lsrs	r0, r0, #16
 800033e:	1820      	adds	r0, r4, r0
 8000340:	1889      	adds	r1, r1, r2
 8000342:	bc80      	pop	{r7}
 8000344:	46b8      	mov	r8, r7
 8000346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000348 <__clear_cache>:
 8000348:	4770      	bx	lr
 800034a:	46c0      	nop			; (mov r8, r8)

0800034c <__aeabi_f2uiz>:
 800034c:	219e      	movs	r1, #158	; 0x9e
 800034e:	b510      	push	{r4, lr}
 8000350:	05c9      	lsls	r1, r1, #23
 8000352:	1c04      	adds	r4, r0, #0
 8000354:	f7ff ffa6 	bl	80002a4 <__aeabi_fcmpge>
 8000358:	2800      	cmp	r0, #0
 800035a:	d103      	bne.n	8000364 <__aeabi_f2uiz+0x18>
 800035c:	1c20      	adds	r0, r4, #0
 800035e:	f000 fcfb 	bl	8000d58 <__aeabi_f2iz>
 8000362:	bd10      	pop	{r4, pc}
 8000364:	219e      	movs	r1, #158	; 0x9e
 8000366:	1c20      	adds	r0, r4, #0
 8000368:	05c9      	lsls	r1, r1, #23
 800036a:	f000 fb2d 	bl	80009c8 <__aeabi_fsub>
 800036e:	f000 fcf3 	bl	8000d58 <__aeabi_f2iz>
 8000372:	2380      	movs	r3, #128	; 0x80
 8000374:	061b      	lsls	r3, r3, #24
 8000376:	469c      	mov	ip, r3
 8000378:	4460      	add	r0, ip
 800037a:	e7f2      	b.n	8000362 <__aeabi_f2uiz+0x16>

0800037c <__udivmoddi4>:
 800037c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037e:	4657      	mov	r7, sl
 8000380:	464e      	mov	r6, r9
 8000382:	4645      	mov	r5, r8
 8000384:	46de      	mov	lr, fp
 8000386:	b5e0      	push	{r5, r6, r7, lr}
 8000388:	0004      	movs	r4, r0
 800038a:	000d      	movs	r5, r1
 800038c:	4692      	mov	sl, r2
 800038e:	4699      	mov	r9, r3
 8000390:	b083      	sub	sp, #12
 8000392:	428b      	cmp	r3, r1
 8000394:	d830      	bhi.n	80003f8 <__udivmoddi4+0x7c>
 8000396:	d02d      	beq.n	80003f4 <__udivmoddi4+0x78>
 8000398:	4649      	mov	r1, r9
 800039a:	4650      	mov	r0, sl
 800039c:	f001 f978 	bl	8001690 <__clzdi2>
 80003a0:	0029      	movs	r1, r5
 80003a2:	0006      	movs	r6, r0
 80003a4:	0020      	movs	r0, r4
 80003a6:	f001 f973 	bl	8001690 <__clzdi2>
 80003aa:	1a33      	subs	r3, r6, r0
 80003ac:	4698      	mov	r8, r3
 80003ae:	3b20      	subs	r3, #32
 80003b0:	469b      	mov	fp, r3
 80003b2:	d433      	bmi.n	800041c <__udivmoddi4+0xa0>
 80003b4:	465a      	mov	r2, fp
 80003b6:	4653      	mov	r3, sl
 80003b8:	4093      	lsls	r3, r2
 80003ba:	4642      	mov	r2, r8
 80003bc:	001f      	movs	r7, r3
 80003be:	4653      	mov	r3, sl
 80003c0:	4093      	lsls	r3, r2
 80003c2:	001e      	movs	r6, r3
 80003c4:	42af      	cmp	r7, r5
 80003c6:	d83a      	bhi.n	800043e <__udivmoddi4+0xc2>
 80003c8:	42af      	cmp	r7, r5
 80003ca:	d100      	bne.n	80003ce <__udivmoddi4+0x52>
 80003cc:	e078      	b.n	80004c0 <__udivmoddi4+0x144>
 80003ce:	465b      	mov	r3, fp
 80003d0:	1ba4      	subs	r4, r4, r6
 80003d2:	41bd      	sbcs	r5, r7
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	da00      	bge.n	80003da <__udivmoddi4+0x5e>
 80003d8:	e075      	b.n	80004c6 <__udivmoddi4+0x14a>
 80003da:	2200      	movs	r2, #0
 80003dc:	2300      	movs	r3, #0
 80003de:	9200      	str	r2, [sp, #0]
 80003e0:	9301      	str	r3, [sp, #4]
 80003e2:	2301      	movs	r3, #1
 80003e4:	465a      	mov	r2, fp
 80003e6:	4093      	lsls	r3, r2
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	2301      	movs	r3, #1
 80003ec:	4642      	mov	r2, r8
 80003ee:	4093      	lsls	r3, r2
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	e028      	b.n	8000446 <__udivmoddi4+0xca>
 80003f4:	4282      	cmp	r2, r0
 80003f6:	d9cf      	bls.n	8000398 <__udivmoddi4+0x1c>
 80003f8:	2200      	movs	r2, #0
 80003fa:	2300      	movs	r3, #0
 80003fc:	9200      	str	r2, [sp, #0]
 80003fe:	9301      	str	r3, [sp, #4]
 8000400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <__udivmoddi4+0x8e>
 8000406:	601c      	str	r4, [r3, #0]
 8000408:	605d      	str	r5, [r3, #4]
 800040a:	9800      	ldr	r0, [sp, #0]
 800040c:	9901      	ldr	r1, [sp, #4]
 800040e:	b003      	add	sp, #12
 8000410:	bcf0      	pop	{r4, r5, r6, r7}
 8000412:	46bb      	mov	fp, r7
 8000414:	46b2      	mov	sl, r6
 8000416:	46a9      	mov	r9, r5
 8000418:	46a0      	mov	r8, r4
 800041a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	4652      	mov	r2, sl
 8000424:	40da      	lsrs	r2, r3
 8000426:	4641      	mov	r1, r8
 8000428:	0013      	movs	r3, r2
 800042a:	464a      	mov	r2, r9
 800042c:	408a      	lsls	r2, r1
 800042e:	0017      	movs	r7, r2
 8000430:	4642      	mov	r2, r8
 8000432:	431f      	orrs	r7, r3
 8000434:	4653      	mov	r3, sl
 8000436:	4093      	lsls	r3, r2
 8000438:	001e      	movs	r6, r3
 800043a:	42af      	cmp	r7, r5
 800043c:	d9c4      	bls.n	80003c8 <__udivmoddi4+0x4c>
 800043e:	2200      	movs	r2, #0
 8000440:	2300      	movs	r3, #0
 8000442:	9200      	str	r2, [sp, #0]
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	4643      	mov	r3, r8
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0d9      	beq.n	8000400 <__udivmoddi4+0x84>
 800044c:	07fb      	lsls	r3, r7, #31
 800044e:	0872      	lsrs	r2, r6, #1
 8000450:	431a      	orrs	r2, r3
 8000452:	4646      	mov	r6, r8
 8000454:	087b      	lsrs	r3, r7, #1
 8000456:	e00e      	b.n	8000476 <__udivmoddi4+0xfa>
 8000458:	42ab      	cmp	r3, r5
 800045a:	d101      	bne.n	8000460 <__udivmoddi4+0xe4>
 800045c:	42a2      	cmp	r2, r4
 800045e:	d80c      	bhi.n	800047a <__udivmoddi4+0xfe>
 8000460:	1aa4      	subs	r4, r4, r2
 8000462:	419d      	sbcs	r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	1924      	adds	r4, r4, r4
 8000468:	416d      	adcs	r5, r5
 800046a:	2100      	movs	r1, #0
 800046c:	3e01      	subs	r6, #1
 800046e:	1824      	adds	r4, r4, r0
 8000470:	414d      	adcs	r5, r1
 8000472:	2e00      	cmp	r6, #0
 8000474:	d006      	beq.n	8000484 <__udivmoddi4+0x108>
 8000476:	42ab      	cmp	r3, r5
 8000478:	d9ee      	bls.n	8000458 <__udivmoddi4+0xdc>
 800047a:	3e01      	subs	r6, #1
 800047c:	1924      	adds	r4, r4, r4
 800047e:	416d      	adcs	r5, r5
 8000480:	2e00      	cmp	r6, #0
 8000482:	d1f8      	bne.n	8000476 <__udivmoddi4+0xfa>
 8000484:	9800      	ldr	r0, [sp, #0]
 8000486:	9901      	ldr	r1, [sp, #4]
 8000488:	465b      	mov	r3, fp
 800048a:	1900      	adds	r0, r0, r4
 800048c:	4169      	adcs	r1, r5
 800048e:	2b00      	cmp	r3, #0
 8000490:	db24      	blt.n	80004dc <__udivmoddi4+0x160>
 8000492:	002b      	movs	r3, r5
 8000494:	465a      	mov	r2, fp
 8000496:	4644      	mov	r4, r8
 8000498:	40d3      	lsrs	r3, r2
 800049a:	002a      	movs	r2, r5
 800049c:	40e2      	lsrs	r2, r4
 800049e:	001c      	movs	r4, r3
 80004a0:	465b      	mov	r3, fp
 80004a2:	0015      	movs	r5, r2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	db2a      	blt.n	80004fe <__udivmoddi4+0x182>
 80004a8:	0026      	movs	r6, r4
 80004aa:	409e      	lsls	r6, r3
 80004ac:	0033      	movs	r3, r6
 80004ae:	0026      	movs	r6, r4
 80004b0:	4647      	mov	r7, r8
 80004b2:	40be      	lsls	r6, r7
 80004b4:	0032      	movs	r2, r6
 80004b6:	1a80      	subs	r0, r0, r2
 80004b8:	4199      	sbcs	r1, r3
 80004ba:	9000      	str	r0, [sp, #0]
 80004bc:	9101      	str	r1, [sp, #4]
 80004be:	e79f      	b.n	8000400 <__udivmoddi4+0x84>
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d8bc      	bhi.n	800043e <__udivmoddi4+0xc2>
 80004c4:	e783      	b.n	80003ce <__udivmoddi4+0x52>
 80004c6:	4642      	mov	r2, r8
 80004c8:	2320      	movs	r3, #32
 80004ca:	2100      	movs	r1, #0
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	2200      	movs	r2, #0
 80004d0:	9100      	str	r1, [sp, #0]
 80004d2:	9201      	str	r2, [sp, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	40da      	lsrs	r2, r3
 80004d8:	9201      	str	r2, [sp, #4]
 80004da:	e786      	b.n	80003ea <__udivmoddi4+0x6e>
 80004dc:	4642      	mov	r2, r8
 80004de:	2320      	movs	r3, #32
 80004e0:	1a9b      	subs	r3, r3, r2
 80004e2:	002a      	movs	r2, r5
 80004e4:	4646      	mov	r6, r8
 80004e6:	409a      	lsls	r2, r3
 80004e8:	0023      	movs	r3, r4
 80004ea:	40f3      	lsrs	r3, r6
 80004ec:	4644      	mov	r4, r8
 80004ee:	4313      	orrs	r3, r2
 80004f0:	002a      	movs	r2, r5
 80004f2:	40e2      	lsrs	r2, r4
 80004f4:	001c      	movs	r4, r3
 80004f6:	465b      	mov	r3, fp
 80004f8:	0015      	movs	r5, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	dad4      	bge.n	80004a8 <__udivmoddi4+0x12c>
 80004fe:	4642      	mov	r2, r8
 8000500:	002f      	movs	r7, r5
 8000502:	2320      	movs	r3, #32
 8000504:	0026      	movs	r6, r4
 8000506:	4097      	lsls	r7, r2
 8000508:	1a9b      	subs	r3, r3, r2
 800050a:	40de      	lsrs	r6, r3
 800050c:	003b      	movs	r3, r7
 800050e:	4333      	orrs	r3, r6
 8000510:	e7cd      	b.n	80004ae <__udivmoddi4+0x132>
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	4646      	mov	r6, r8
 8000518:	46d6      	mov	lr, sl
 800051a:	464f      	mov	r7, r9
 800051c:	024d      	lsls	r5, r1, #9
 800051e:	0242      	lsls	r2, r0, #9
 8000520:	b5c0      	push	{r6, r7, lr}
 8000522:	0a52      	lsrs	r2, r2, #9
 8000524:	0a6e      	lsrs	r6, r5, #9
 8000526:	0047      	lsls	r7, r0, #1
 8000528:	46b0      	mov	r8, r6
 800052a:	0e3f      	lsrs	r7, r7, #24
 800052c:	004e      	lsls	r6, r1, #1
 800052e:	0fc4      	lsrs	r4, r0, #31
 8000530:	00d0      	lsls	r0, r2, #3
 8000532:	4694      	mov	ip, r2
 8000534:	003b      	movs	r3, r7
 8000536:	4682      	mov	sl, r0
 8000538:	0e36      	lsrs	r6, r6, #24
 800053a:	0fc9      	lsrs	r1, r1, #31
 800053c:	09ad      	lsrs	r5, r5, #6
 800053e:	428c      	cmp	r4, r1
 8000540:	d06d      	beq.n	800061e <__aeabi_fadd+0x10a>
 8000542:	1bb8      	subs	r0, r7, r6
 8000544:	4681      	mov	r9, r0
 8000546:	2800      	cmp	r0, #0
 8000548:	dd4d      	ble.n	80005e6 <__aeabi_fadd+0xd2>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x3c>
 800054e:	e088      	b.n	8000662 <__aeabi_fadd+0x14e>
 8000550:	2fff      	cmp	r7, #255	; 0xff
 8000552:	d05a      	beq.n	800060a <__aeabi_fadd+0xf6>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	04db      	lsls	r3, r3, #19
 8000558:	431d      	orrs	r5, r3
 800055a:	464b      	mov	r3, r9
 800055c:	2201      	movs	r2, #1
 800055e:	2b1b      	cmp	r3, #27
 8000560:	dc0a      	bgt.n	8000578 <__aeabi_fadd+0x64>
 8000562:	002b      	movs	r3, r5
 8000564:	464a      	mov	r2, r9
 8000566:	4649      	mov	r1, r9
 8000568:	40d3      	lsrs	r3, r2
 800056a:	2220      	movs	r2, #32
 800056c:	1a52      	subs	r2, r2, r1
 800056e:	4095      	lsls	r5, r2
 8000570:	002a      	movs	r2, r5
 8000572:	1e55      	subs	r5, r2, #1
 8000574:	41aa      	sbcs	r2, r5
 8000576:	431a      	orrs	r2, r3
 8000578:	4653      	mov	r3, sl
 800057a:	1a9a      	subs	r2, r3, r2
 800057c:	0153      	lsls	r3, r2, #5
 800057e:	d400      	bmi.n	8000582 <__aeabi_fadd+0x6e>
 8000580:	e0b9      	b.n	80006f6 <__aeabi_fadd+0x1e2>
 8000582:	0192      	lsls	r2, r2, #6
 8000584:	0996      	lsrs	r6, r2, #6
 8000586:	0030      	movs	r0, r6
 8000588:	f001 f864 	bl	8001654 <__clzsi2>
 800058c:	3805      	subs	r0, #5
 800058e:	4086      	lsls	r6, r0
 8000590:	4287      	cmp	r7, r0
 8000592:	dd00      	ble.n	8000596 <__aeabi_fadd+0x82>
 8000594:	e0d4      	b.n	8000740 <__aeabi_fadd+0x22c>
 8000596:	0033      	movs	r3, r6
 8000598:	1bc7      	subs	r7, r0, r7
 800059a:	2020      	movs	r0, #32
 800059c:	3701      	adds	r7, #1
 800059e:	40fb      	lsrs	r3, r7
 80005a0:	1bc7      	subs	r7, r0, r7
 80005a2:	40be      	lsls	r6, r7
 80005a4:	0032      	movs	r2, r6
 80005a6:	1e56      	subs	r6, r2, #1
 80005a8:	41b2      	sbcs	r2, r6
 80005aa:	2700      	movs	r7, #0
 80005ac:	431a      	orrs	r2, r3
 80005ae:	0753      	lsls	r3, r2, #29
 80005b0:	d004      	beq.n	80005bc <__aeabi_fadd+0xa8>
 80005b2:	230f      	movs	r3, #15
 80005b4:	4013      	ands	r3, r2
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0xa8>
 80005ba:	3204      	adds	r2, #4
 80005bc:	0153      	lsls	r3, r2, #5
 80005be:	d400      	bmi.n	80005c2 <__aeabi_fadd+0xae>
 80005c0:	e09c      	b.n	80006fc <__aeabi_fadd+0x1e8>
 80005c2:	1c7b      	adds	r3, r7, #1
 80005c4:	2ffe      	cmp	r7, #254	; 0xfe
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0xb6>
 80005c8:	e09a      	b.n	8000700 <__aeabi_fadd+0x1ec>
 80005ca:	0192      	lsls	r2, r2, #6
 80005cc:	0a52      	lsrs	r2, r2, #9
 80005ce:	4694      	mov	ip, r2
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	05d8      	lsls	r0, r3, #23
 80005d4:	4663      	mov	r3, ip
 80005d6:	07e4      	lsls	r4, r4, #31
 80005d8:	4318      	orrs	r0, r3
 80005da:	4320      	orrs	r0, r4
 80005dc:	bce0      	pop	{r5, r6, r7}
 80005de:	46ba      	mov	sl, r7
 80005e0:	46b1      	mov	r9, r6
 80005e2:	46a8      	mov	r8, r5
 80005e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d049      	beq.n	800067e <__aeabi_fadd+0x16a>
 80005ea:	1bf3      	subs	r3, r6, r7
 80005ec:	2f00      	cmp	r7, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xde>
 80005f0:	e0b6      	b.n	8000760 <__aeabi_fadd+0x24c>
 80005f2:	4652      	mov	r2, sl
 80005f4:	2a00      	cmp	r2, #0
 80005f6:	d060      	beq.n	80006ba <__aeabi_fadd+0x1a6>
 80005f8:	3b01      	subs	r3, #1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d100      	bne.n	8000600 <__aeabi_fadd+0xec>
 80005fe:	e0fc      	b.n	80007fa <__aeabi_fadd+0x2e6>
 8000600:	2eff      	cmp	r6, #255	; 0xff
 8000602:	d000      	beq.n	8000606 <__aeabi_fadd+0xf2>
 8000604:	e0b4      	b.n	8000770 <__aeabi_fadd+0x25c>
 8000606:	000c      	movs	r4, r1
 8000608:	4642      	mov	r2, r8
 800060a:	2a00      	cmp	r2, #0
 800060c:	d078      	beq.n	8000700 <__aeabi_fadd+0x1ec>
 800060e:	2080      	movs	r0, #128	; 0x80
 8000610:	03c0      	lsls	r0, r0, #15
 8000612:	4310      	orrs	r0, r2
 8000614:	0242      	lsls	r2, r0, #9
 8000616:	0a53      	lsrs	r3, r2, #9
 8000618:	469c      	mov	ip, r3
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	e7d9      	b.n	80005d2 <__aeabi_fadd+0xbe>
 800061e:	1bb9      	subs	r1, r7, r6
 8000620:	2900      	cmp	r1, #0
 8000622:	dd71      	ble.n	8000708 <__aeabi_fadd+0x1f4>
 8000624:	2e00      	cmp	r6, #0
 8000626:	d03f      	beq.n	80006a8 <__aeabi_fadd+0x194>
 8000628:	2fff      	cmp	r7, #255	; 0xff
 800062a:	d0ee      	beq.n	800060a <__aeabi_fadd+0xf6>
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	04db      	lsls	r3, r3, #19
 8000630:	431d      	orrs	r5, r3
 8000632:	2201      	movs	r2, #1
 8000634:	291b      	cmp	r1, #27
 8000636:	dc07      	bgt.n	8000648 <__aeabi_fadd+0x134>
 8000638:	002a      	movs	r2, r5
 800063a:	2320      	movs	r3, #32
 800063c:	40ca      	lsrs	r2, r1
 800063e:	1a59      	subs	r1, r3, r1
 8000640:	408d      	lsls	r5, r1
 8000642:	1e6b      	subs	r3, r5, #1
 8000644:	419d      	sbcs	r5, r3
 8000646:	432a      	orrs	r2, r5
 8000648:	4452      	add	r2, sl
 800064a:	0153      	lsls	r3, r2, #5
 800064c:	d553      	bpl.n	80006f6 <__aeabi_fadd+0x1e2>
 800064e:	3701      	adds	r7, #1
 8000650:	2fff      	cmp	r7, #255	; 0xff
 8000652:	d055      	beq.n	8000700 <__aeabi_fadd+0x1ec>
 8000654:	2301      	movs	r3, #1
 8000656:	497b      	ldr	r1, [pc, #492]	; (8000844 <__aeabi_fadd+0x330>)
 8000658:	4013      	ands	r3, r2
 800065a:	0852      	lsrs	r2, r2, #1
 800065c:	400a      	ands	r2, r1
 800065e:	431a      	orrs	r2, r3
 8000660:	e7a5      	b.n	80005ae <__aeabi_fadd+0x9a>
 8000662:	2d00      	cmp	r5, #0
 8000664:	d02c      	beq.n	80006c0 <__aeabi_fadd+0x1ac>
 8000666:	2301      	movs	r3, #1
 8000668:	425b      	negs	r3, r3
 800066a:	469c      	mov	ip, r3
 800066c:	44e1      	add	r9, ip
 800066e:	464b      	mov	r3, r9
 8000670:	2b00      	cmp	r3, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x162>
 8000674:	e0ad      	b.n	80007d2 <__aeabi_fadd+0x2be>
 8000676:	2fff      	cmp	r7, #255	; 0xff
 8000678:	d000      	beq.n	800067c <__aeabi_fadd+0x168>
 800067a:	e76e      	b.n	800055a <__aeabi_fadd+0x46>
 800067c:	e7c5      	b.n	800060a <__aeabi_fadd+0xf6>
 800067e:	20fe      	movs	r0, #254	; 0xfe
 8000680:	1c7e      	adds	r6, r7, #1
 8000682:	4230      	tst	r0, r6
 8000684:	d160      	bne.n	8000748 <__aeabi_fadd+0x234>
 8000686:	2f00      	cmp	r7, #0
 8000688:	d000      	beq.n	800068c <__aeabi_fadd+0x178>
 800068a:	e093      	b.n	80007b4 <__aeabi_fadd+0x2a0>
 800068c:	4652      	mov	r2, sl
 800068e:	2a00      	cmp	r2, #0
 8000690:	d100      	bne.n	8000694 <__aeabi_fadd+0x180>
 8000692:	e0b6      	b.n	8000802 <__aeabi_fadd+0x2ee>
 8000694:	2d00      	cmp	r5, #0
 8000696:	d09c      	beq.n	80005d2 <__aeabi_fadd+0xbe>
 8000698:	1b52      	subs	r2, r2, r5
 800069a:	0150      	lsls	r0, r2, #5
 800069c:	d400      	bmi.n	80006a0 <__aeabi_fadd+0x18c>
 800069e:	e0c3      	b.n	8000828 <__aeabi_fadd+0x314>
 80006a0:	4653      	mov	r3, sl
 80006a2:	000c      	movs	r4, r1
 80006a4:	1aea      	subs	r2, r5, r3
 80006a6:	e782      	b.n	80005ae <__aeabi_fadd+0x9a>
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d009      	beq.n	80006c0 <__aeabi_fadd+0x1ac>
 80006ac:	3901      	subs	r1, #1
 80006ae:	2900      	cmp	r1, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x1a0>
 80006b2:	e08b      	b.n	80007cc <__aeabi_fadd+0x2b8>
 80006b4:	2fff      	cmp	r7, #255	; 0xff
 80006b6:	d1bc      	bne.n	8000632 <__aeabi_fadd+0x11e>
 80006b8:	e7a7      	b.n	800060a <__aeabi_fadd+0xf6>
 80006ba:	000c      	movs	r4, r1
 80006bc:	4642      	mov	r2, r8
 80006be:	0037      	movs	r7, r6
 80006c0:	2fff      	cmp	r7, #255	; 0xff
 80006c2:	d0a2      	beq.n	800060a <__aeabi_fadd+0xf6>
 80006c4:	0252      	lsls	r2, r2, #9
 80006c6:	0a53      	lsrs	r3, r2, #9
 80006c8:	469c      	mov	ip, r3
 80006ca:	b2fb      	uxtb	r3, r7
 80006cc:	e781      	b.n	80005d2 <__aeabi_fadd+0xbe>
 80006ce:	21fe      	movs	r1, #254	; 0xfe
 80006d0:	3701      	adds	r7, #1
 80006d2:	4239      	tst	r1, r7
 80006d4:	d165      	bne.n	80007a2 <__aeabi_fadd+0x28e>
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d17e      	bne.n	80007d8 <__aeabi_fadd+0x2c4>
 80006da:	2800      	cmp	r0, #0
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x1cc>
 80006de:	e0aa      	b.n	8000836 <__aeabi_fadd+0x322>
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0x1d2>
 80006e4:	e775      	b.n	80005d2 <__aeabi_fadd+0xbe>
 80006e6:	002a      	movs	r2, r5
 80006e8:	4452      	add	r2, sl
 80006ea:	2700      	movs	r7, #0
 80006ec:	0153      	lsls	r3, r2, #5
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_fadd+0x1e2>
 80006f0:	4b55      	ldr	r3, [pc, #340]	; (8000848 <__aeabi_fadd+0x334>)
 80006f2:	3701      	adds	r7, #1
 80006f4:	401a      	ands	r2, r3
 80006f6:	0753      	lsls	r3, r2, #29
 80006f8:	d000      	beq.n	80006fc <__aeabi_fadd+0x1e8>
 80006fa:	e75a      	b.n	80005b2 <__aeabi_fadd+0x9e>
 80006fc:	08d2      	lsrs	r2, r2, #3
 80006fe:	e7df      	b.n	80006c0 <__aeabi_fadd+0x1ac>
 8000700:	2200      	movs	r2, #0
 8000702:	23ff      	movs	r3, #255	; 0xff
 8000704:	4694      	mov	ip, r2
 8000706:	e764      	b.n	80005d2 <__aeabi_fadd+0xbe>
 8000708:	2900      	cmp	r1, #0
 800070a:	d0e0      	beq.n	80006ce <__aeabi_fadd+0x1ba>
 800070c:	1bf3      	subs	r3, r6, r7
 800070e:	2f00      	cmp	r7, #0
 8000710:	d03e      	beq.n	8000790 <__aeabi_fadd+0x27c>
 8000712:	2eff      	cmp	r6, #255	; 0xff
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x204>
 8000716:	e777      	b.n	8000608 <__aeabi_fadd+0xf4>
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0001      	movs	r1, r0
 800071c:	04d2      	lsls	r2, r2, #19
 800071e:	4311      	orrs	r1, r2
 8000720:	468a      	mov	sl, r1
 8000722:	2201      	movs	r2, #1
 8000724:	2b1b      	cmp	r3, #27
 8000726:	dc08      	bgt.n	800073a <__aeabi_fadd+0x226>
 8000728:	4652      	mov	r2, sl
 800072a:	2120      	movs	r1, #32
 800072c:	4650      	mov	r0, sl
 800072e:	40da      	lsrs	r2, r3
 8000730:	1acb      	subs	r3, r1, r3
 8000732:	4098      	lsls	r0, r3
 8000734:	1e43      	subs	r3, r0, #1
 8000736:	4198      	sbcs	r0, r3
 8000738:	4302      	orrs	r2, r0
 800073a:	0037      	movs	r7, r6
 800073c:	1952      	adds	r2, r2, r5
 800073e:	e784      	b.n	800064a <__aeabi_fadd+0x136>
 8000740:	4a41      	ldr	r2, [pc, #260]	; (8000848 <__aeabi_fadd+0x334>)
 8000742:	1a3f      	subs	r7, r7, r0
 8000744:	4032      	ands	r2, r6
 8000746:	e732      	b.n	80005ae <__aeabi_fadd+0x9a>
 8000748:	4653      	mov	r3, sl
 800074a:	1b5e      	subs	r6, r3, r5
 800074c:	0173      	lsls	r3, r6, #5
 800074e:	d42d      	bmi.n	80007ac <__aeabi_fadd+0x298>
 8000750:	2e00      	cmp	r6, #0
 8000752:	d000      	beq.n	8000756 <__aeabi_fadd+0x242>
 8000754:	e717      	b.n	8000586 <__aeabi_fadd+0x72>
 8000756:	2200      	movs	r2, #0
 8000758:	2400      	movs	r4, #0
 800075a:	2300      	movs	r3, #0
 800075c:	4694      	mov	ip, r2
 800075e:	e738      	b.n	80005d2 <__aeabi_fadd+0xbe>
 8000760:	2eff      	cmp	r6, #255	; 0xff
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x252>
 8000764:	e74f      	b.n	8000606 <__aeabi_fadd+0xf2>
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	4650      	mov	r0, sl
 800076a:	04d2      	lsls	r2, r2, #19
 800076c:	4310      	orrs	r0, r2
 800076e:	4682      	mov	sl, r0
 8000770:	2201      	movs	r2, #1
 8000772:	2b1b      	cmp	r3, #27
 8000774:	dc08      	bgt.n	8000788 <__aeabi_fadd+0x274>
 8000776:	4652      	mov	r2, sl
 8000778:	2420      	movs	r4, #32
 800077a:	4650      	mov	r0, sl
 800077c:	40da      	lsrs	r2, r3
 800077e:	1ae3      	subs	r3, r4, r3
 8000780:	4098      	lsls	r0, r3
 8000782:	1e43      	subs	r3, r0, #1
 8000784:	4198      	sbcs	r0, r3
 8000786:	4302      	orrs	r2, r0
 8000788:	000c      	movs	r4, r1
 800078a:	0037      	movs	r7, r6
 800078c:	1aaa      	subs	r2, r5, r2
 800078e:	e6f5      	b.n	800057c <__aeabi_fadd+0x68>
 8000790:	2800      	cmp	r0, #0
 8000792:	d093      	beq.n	80006bc <__aeabi_fadd+0x1a8>
 8000794:	3b01      	subs	r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d04f      	beq.n	800083a <__aeabi_fadd+0x326>
 800079a:	2eff      	cmp	r6, #255	; 0xff
 800079c:	d1c1      	bne.n	8000722 <__aeabi_fadd+0x20e>
 800079e:	4642      	mov	r2, r8
 80007a0:	e733      	b.n	800060a <__aeabi_fadd+0xf6>
 80007a2:	2fff      	cmp	r7, #255	; 0xff
 80007a4:	d0ac      	beq.n	8000700 <__aeabi_fadd+0x1ec>
 80007a6:	4455      	add	r5, sl
 80007a8:	086a      	lsrs	r2, r5, #1
 80007aa:	e7a4      	b.n	80006f6 <__aeabi_fadd+0x1e2>
 80007ac:	4653      	mov	r3, sl
 80007ae:	000c      	movs	r4, r1
 80007b0:	1aee      	subs	r6, r5, r3
 80007b2:	e6e8      	b.n	8000586 <__aeabi_fadd+0x72>
 80007b4:	4653      	mov	r3, sl
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d128      	bne.n	800080c <__aeabi_fadd+0x2f8>
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d000      	beq.n	80007c0 <__aeabi_fadd+0x2ac>
 80007be:	e722      	b.n	8000606 <__aeabi_fadd+0xf2>
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	03db      	lsls	r3, r3, #15
 80007c4:	469c      	mov	ip, r3
 80007c6:	2400      	movs	r4, #0
 80007c8:	23ff      	movs	r3, #255	; 0xff
 80007ca:	e702      	b.n	80005d2 <__aeabi_fadd+0xbe>
 80007cc:	002a      	movs	r2, r5
 80007ce:	4452      	add	r2, sl
 80007d0:	e73b      	b.n	800064a <__aeabi_fadd+0x136>
 80007d2:	4653      	mov	r3, sl
 80007d4:	1b5a      	subs	r2, r3, r5
 80007d6:	e6d1      	b.n	800057c <__aeabi_fadd+0x68>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d100      	bne.n	80007de <__aeabi_fadd+0x2ca>
 80007dc:	e714      	b.n	8000608 <__aeabi_fadd+0xf4>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x2d0>
 80007e2:	e712      	b.n	800060a <__aeabi_fadd+0xf6>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	03db      	lsls	r3, r3, #15
 80007e8:	421a      	tst	r2, r3
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x2da>
 80007ec:	e70d      	b.n	800060a <__aeabi_fadd+0xf6>
 80007ee:	4641      	mov	r1, r8
 80007f0:	4219      	tst	r1, r3
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0x2e2>
 80007f4:	e709      	b.n	800060a <__aeabi_fadd+0xf6>
 80007f6:	4642      	mov	r2, r8
 80007f8:	e707      	b.n	800060a <__aeabi_fadd+0xf6>
 80007fa:	000c      	movs	r4, r1
 80007fc:	0037      	movs	r7, r6
 80007fe:	1aaa      	subs	r2, r5, r2
 8000800:	e6bc      	b.n	800057c <__aeabi_fadd+0x68>
 8000802:	2d00      	cmp	r5, #0
 8000804:	d013      	beq.n	800082e <__aeabi_fadd+0x31a>
 8000806:	000c      	movs	r4, r1
 8000808:	46c4      	mov	ip, r8
 800080a:	e6e2      	b.n	80005d2 <__aeabi_fadd+0xbe>
 800080c:	2d00      	cmp	r5, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x2fe>
 8000810:	e6fb      	b.n	800060a <__aeabi_fadd+0xf6>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	03db      	lsls	r3, r3, #15
 8000816:	421a      	tst	r2, r3
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x308>
 800081a:	e6f6      	b.n	800060a <__aeabi_fadd+0xf6>
 800081c:	4640      	mov	r0, r8
 800081e:	4218      	tst	r0, r3
 8000820:	d000      	beq.n	8000824 <__aeabi_fadd+0x310>
 8000822:	e6f2      	b.n	800060a <__aeabi_fadd+0xf6>
 8000824:	000c      	movs	r4, r1
 8000826:	e6ef      	b.n	8000608 <__aeabi_fadd+0xf4>
 8000828:	2a00      	cmp	r2, #0
 800082a:	d000      	beq.n	800082e <__aeabi_fadd+0x31a>
 800082c:	e763      	b.n	80006f6 <__aeabi_fadd+0x1e2>
 800082e:	2200      	movs	r2, #0
 8000830:	2400      	movs	r4, #0
 8000832:	4694      	mov	ip, r2
 8000834:	e6cd      	b.n	80005d2 <__aeabi_fadd+0xbe>
 8000836:	46c4      	mov	ip, r8
 8000838:	e6cb      	b.n	80005d2 <__aeabi_fadd+0xbe>
 800083a:	002a      	movs	r2, r5
 800083c:	0037      	movs	r7, r6
 800083e:	4452      	add	r2, sl
 8000840:	e703      	b.n	800064a <__aeabi_fadd+0x136>
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	7dffffff 	.word	0x7dffffff
 8000848:	fbffffff 	.word	0xfbffffff

0800084c <__eqsf2>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	0042      	lsls	r2, r0, #1
 8000850:	024e      	lsls	r6, r1, #9
 8000852:	004c      	lsls	r4, r1, #1
 8000854:	0245      	lsls	r5, r0, #9
 8000856:	0a6d      	lsrs	r5, r5, #9
 8000858:	0e12      	lsrs	r2, r2, #24
 800085a:	0fc3      	lsrs	r3, r0, #31
 800085c:	0a76      	lsrs	r6, r6, #9
 800085e:	0e24      	lsrs	r4, r4, #24
 8000860:	0fc9      	lsrs	r1, r1, #31
 8000862:	2aff      	cmp	r2, #255	; 0xff
 8000864:	d00f      	beq.n	8000886 <__eqsf2+0x3a>
 8000866:	2cff      	cmp	r4, #255	; 0xff
 8000868:	d011      	beq.n	800088e <__eqsf2+0x42>
 800086a:	2001      	movs	r0, #1
 800086c:	42a2      	cmp	r2, r4
 800086e:	d000      	beq.n	8000872 <__eqsf2+0x26>
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	42b5      	cmp	r5, r6
 8000874:	d1fc      	bne.n	8000870 <__eqsf2+0x24>
 8000876:	428b      	cmp	r3, r1
 8000878:	d00d      	beq.n	8000896 <__eqsf2+0x4a>
 800087a:	2a00      	cmp	r2, #0
 800087c:	d1f8      	bne.n	8000870 <__eqsf2+0x24>
 800087e:	0028      	movs	r0, r5
 8000880:	1e45      	subs	r5, r0, #1
 8000882:	41a8      	sbcs	r0, r5
 8000884:	e7f4      	b.n	8000870 <__eqsf2+0x24>
 8000886:	2001      	movs	r0, #1
 8000888:	2d00      	cmp	r5, #0
 800088a:	d1f1      	bne.n	8000870 <__eqsf2+0x24>
 800088c:	e7eb      	b.n	8000866 <__eqsf2+0x1a>
 800088e:	2001      	movs	r0, #1
 8000890:	2e00      	cmp	r6, #0
 8000892:	d1ed      	bne.n	8000870 <__eqsf2+0x24>
 8000894:	e7e9      	b.n	800086a <__eqsf2+0x1e>
 8000896:	2000      	movs	r0, #0
 8000898:	e7ea      	b.n	8000870 <__eqsf2+0x24>
 800089a:	46c0      	nop			; (mov r8, r8)

0800089c <__gesf2>:
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0246      	lsls	r6, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	004c      	lsls	r4, r1, #1
 80008a6:	0fc3      	lsrs	r3, r0, #31
 80008a8:	0a76      	lsrs	r6, r6, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e24      	lsrs	r4, r4, #24
 80008b0:	0fc8      	lsrs	r0, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d01f      	beq.n	80008f6 <__gesf2+0x5a>
 80008b6:	2cff      	cmp	r4, #255	; 0xff
 80008b8:	d010      	beq.n	80008dc <__gesf2+0x40>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d11f      	bne.n	80008fe <__gesf2+0x62>
 80008be:	4271      	negs	r1, r6
 80008c0:	4171      	adcs	r1, r6
 80008c2:	2c00      	cmp	r4, #0
 80008c4:	d101      	bne.n	80008ca <__gesf2+0x2e>
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d01e      	beq.n	8000908 <__gesf2+0x6c>
 80008ca:	2900      	cmp	r1, #0
 80008cc:	d10e      	bne.n	80008ec <__gesf2+0x50>
 80008ce:	4283      	cmp	r3, r0
 80008d0:	d01e      	beq.n	8000910 <__gesf2+0x74>
 80008d2:	2102      	movs	r1, #2
 80008d4:	1e58      	subs	r0, r3, #1
 80008d6:	4008      	ands	r0, r1
 80008d8:	3801      	subs	r0, #1
 80008da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008dc:	2d00      	cmp	r5, #0
 80008de:	d126      	bne.n	800092e <__gesf2+0x92>
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	d1f4      	bne.n	80008ce <__gesf2+0x32>
 80008e4:	4271      	negs	r1, r6
 80008e6:	4171      	adcs	r1, r6
 80008e8:	2900      	cmp	r1, #0
 80008ea:	d0f0      	beq.n	80008ce <__gesf2+0x32>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d1f4      	bne.n	80008da <__gesf2+0x3e>
 80008f0:	2001      	movs	r0, #1
 80008f2:	4240      	negs	r0, r0
 80008f4:	e7f1      	b.n	80008da <__gesf2+0x3e>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d119      	bne.n	800092e <__gesf2+0x92>
 80008fa:	2cff      	cmp	r4, #255	; 0xff
 80008fc:	d0ee      	beq.n	80008dc <__gesf2+0x40>
 80008fe:	2c00      	cmp	r4, #0
 8000900:	d1e5      	bne.n	80008ce <__gesf2+0x32>
 8000902:	2d00      	cmp	r5, #0
 8000904:	d1e3      	bne.n	80008ce <__gesf2+0x32>
 8000906:	e7e4      	b.n	80008d2 <__gesf2+0x36>
 8000908:	2000      	movs	r0, #0
 800090a:	2e00      	cmp	r6, #0
 800090c:	d0e5      	beq.n	80008da <__gesf2+0x3e>
 800090e:	e7e0      	b.n	80008d2 <__gesf2+0x36>
 8000910:	42a2      	cmp	r2, r4
 8000912:	dc05      	bgt.n	8000920 <__gesf2+0x84>
 8000914:	dbea      	blt.n	80008ec <__gesf2+0x50>
 8000916:	42ae      	cmp	r6, r5
 8000918:	d802      	bhi.n	8000920 <__gesf2+0x84>
 800091a:	d3e7      	bcc.n	80008ec <__gesf2+0x50>
 800091c:	2000      	movs	r0, #0
 800091e:	e7dc      	b.n	80008da <__gesf2+0x3e>
 8000920:	4241      	negs	r1, r0
 8000922:	4141      	adcs	r1, r0
 8000924:	4248      	negs	r0, r1
 8000926:	2102      	movs	r1, #2
 8000928:	4008      	ands	r0, r1
 800092a:	3801      	subs	r0, #1
 800092c:	e7d5      	b.n	80008da <__gesf2+0x3e>
 800092e:	2002      	movs	r0, #2
 8000930:	4240      	negs	r0, r0
 8000932:	e7d2      	b.n	80008da <__gesf2+0x3e>

08000934 <__lesf2>:
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	0042      	lsls	r2, r0, #1
 8000938:	0246      	lsls	r6, r0, #9
 800093a:	024d      	lsls	r5, r1, #9
 800093c:	004c      	lsls	r4, r1, #1
 800093e:	0fc3      	lsrs	r3, r0, #31
 8000940:	0a76      	lsrs	r6, r6, #9
 8000942:	0e12      	lsrs	r2, r2, #24
 8000944:	0a6d      	lsrs	r5, r5, #9
 8000946:	0e24      	lsrs	r4, r4, #24
 8000948:	0fc8      	lsrs	r0, r1, #31
 800094a:	2aff      	cmp	r2, #255	; 0xff
 800094c:	d00d      	beq.n	800096a <__lesf2+0x36>
 800094e:	2cff      	cmp	r4, #255	; 0xff
 8000950:	d00f      	beq.n	8000972 <__lesf2+0x3e>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d123      	bne.n	800099e <__lesf2+0x6a>
 8000956:	4271      	negs	r1, r6
 8000958:	4171      	adcs	r1, r6
 800095a:	2c00      	cmp	r4, #0
 800095c:	d10f      	bne.n	800097e <__lesf2+0x4a>
 800095e:	2d00      	cmp	r5, #0
 8000960:	d10d      	bne.n	800097e <__lesf2+0x4a>
 8000962:	2000      	movs	r0, #0
 8000964:	2e00      	cmp	r6, #0
 8000966:	d014      	beq.n	8000992 <__lesf2+0x5e>
 8000968:	e00d      	b.n	8000986 <__lesf2+0x52>
 800096a:	2e00      	cmp	r6, #0
 800096c:	d110      	bne.n	8000990 <__lesf2+0x5c>
 800096e:	2cff      	cmp	r4, #255	; 0xff
 8000970:	d115      	bne.n	800099e <__lesf2+0x6a>
 8000972:	2d00      	cmp	r5, #0
 8000974:	d10c      	bne.n	8000990 <__lesf2+0x5c>
 8000976:	2a00      	cmp	r2, #0
 8000978:	d103      	bne.n	8000982 <__lesf2+0x4e>
 800097a:	4271      	negs	r1, r6
 800097c:	4171      	adcs	r1, r6
 800097e:	2900      	cmp	r1, #0
 8000980:	d108      	bne.n	8000994 <__lesf2+0x60>
 8000982:	4283      	cmp	r3, r0
 8000984:	d010      	beq.n	80009a8 <__lesf2+0x74>
 8000986:	2102      	movs	r1, #2
 8000988:	1e58      	subs	r0, r3, #1
 800098a:	4008      	ands	r0, r1
 800098c:	3801      	subs	r0, #1
 800098e:	e000      	b.n	8000992 <__lesf2+0x5e>
 8000990:	2002      	movs	r0, #2
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	2800      	cmp	r0, #0
 8000996:	d1fc      	bne.n	8000992 <__lesf2+0x5e>
 8000998:	2001      	movs	r0, #1
 800099a:	4240      	negs	r0, r0
 800099c:	e7f9      	b.n	8000992 <__lesf2+0x5e>
 800099e:	2c00      	cmp	r4, #0
 80009a0:	d1ef      	bne.n	8000982 <__lesf2+0x4e>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d1ed      	bne.n	8000982 <__lesf2+0x4e>
 80009a6:	e7ee      	b.n	8000986 <__lesf2+0x52>
 80009a8:	42a2      	cmp	r2, r4
 80009aa:	dc05      	bgt.n	80009b8 <__lesf2+0x84>
 80009ac:	dbf2      	blt.n	8000994 <__lesf2+0x60>
 80009ae:	42ae      	cmp	r6, r5
 80009b0:	d802      	bhi.n	80009b8 <__lesf2+0x84>
 80009b2:	d3ef      	bcc.n	8000994 <__lesf2+0x60>
 80009b4:	2000      	movs	r0, #0
 80009b6:	e7ec      	b.n	8000992 <__lesf2+0x5e>
 80009b8:	4241      	negs	r1, r0
 80009ba:	4141      	adcs	r1, r0
 80009bc:	4248      	negs	r0, r1
 80009be:	2102      	movs	r1, #2
 80009c0:	4008      	ands	r0, r1
 80009c2:	3801      	subs	r0, #1
 80009c4:	e7e5      	b.n	8000992 <__lesf2+0x5e>
 80009c6:	46c0      	nop			; (mov r8, r8)

080009c8 <__aeabi_fsub>:
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	4646      	mov	r6, r8
 80009cc:	46d6      	mov	lr, sl
 80009ce:	464f      	mov	r7, r9
 80009d0:	0243      	lsls	r3, r0, #9
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	00da      	lsls	r2, r3, #3
 80009d6:	4694      	mov	ip, r2
 80009d8:	024a      	lsls	r2, r1, #9
 80009da:	b5c0      	push	{r6, r7, lr}
 80009dc:	0044      	lsls	r4, r0, #1
 80009de:	0a56      	lsrs	r6, r2, #9
 80009e0:	1c05      	adds	r5, r0, #0
 80009e2:	46b0      	mov	r8, r6
 80009e4:	0e24      	lsrs	r4, r4, #24
 80009e6:	004e      	lsls	r6, r1, #1
 80009e8:	0992      	lsrs	r2, r2, #6
 80009ea:	001f      	movs	r7, r3
 80009ec:	0020      	movs	r0, r4
 80009ee:	4692      	mov	sl, r2
 80009f0:	0fed      	lsrs	r5, r5, #31
 80009f2:	0e36      	lsrs	r6, r6, #24
 80009f4:	0fc9      	lsrs	r1, r1, #31
 80009f6:	2eff      	cmp	r6, #255	; 0xff
 80009f8:	d100      	bne.n	80009fc <__aeabi_fsub+0x34>
 80009fa:	e07f      	b.n	8000afc <__aeabi_fsub+0x134>
 80009fc:	2201      	movs	r2, #1
 80009fe:	4051      	eors	r1, r2
 8000a00:	428d      	cmp	r5, r1
 8000a02:	d051      	beq.n	8000aa8 <__aeabi_fsub+0xe0>
 8000a04:	1ba2      	subs	r2, r4, r6
 8000a06:	4691      	mov	r9, r2
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	dc00      	bgt.n	8000a0e <__aeabi_fsub+0x46>
 8000a0c:	e07e      	b.n	8000b0c <__aeabi_fsub+0x144>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fsub+0x4c>
 8000a12:	e099      	b.n	8000b48 <__aeabi_fsub+0x180>
 8000a14:	2cff      	cmp	r4, #255	; 0xff
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fsub+0x52>
 8000a18:	e08c      	b.n	8000b34 <__aeabi_fsub+0x16c>
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	4652      	mov	r2, sl
 8000a1e:	04db      	lsls	r3, r3, #19
 8000a20:	431a      	orrs	r2, r3
 8000a22:	4692      	mov	sl, r2
 8000a24:	464a      	mov	r2, r9
 8000a26:	2301      	movs	r3, #1
 8000a28:	2a1b      	cmp	r2, #27
 8000a2a:	dc08      	bgt.n	8000a3e <__aeabi_fsub+0x76>
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	2120      	movs	r1, #32
 8000a30:	40d3      	lsrs	r3, r2
 8000a32:	1a89      	subs	r1, r1, r2
 8000a34:	4652      	mov	r2, sl
 8000a36:	408a      	lsls	r2, r1
 8000a38:	1e51      	subs	r1, r2, #1
 8000a3a:	418a      	sbcs	r2, r1
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	4662      	mov	r2, ip
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	015a      	lsls	r2, r3, #5
 8000a44:	d400      	bmi.n	8000a48 <__aeabi_fsub+0x80>
 8000a46:	e0f3      	b.n	8000c30 <__aeabi_fsub+0x268>
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	099e      	lsrs	r6, r3, #6
 8000a4c:	0030      	movs	r0, r6
 8000a4e:	f000 fe01 	bl	8001654 <__clzsi2>
 8000a52:	3805      	subs	r0, #5
 8000a54:	4086      	lsls	r6, r0
 8000a56:	4284      	cmp	r4, r0
 8000a58:	dd00      	ble.n	8000a5c <__aeabi_fsub+0x94>
 8000a5a:	e0f7      	b.n	8000c4c <__aeabi_fsub+0x284>
 8000a5c:	0032      	movs	r2, r6
 8000a5e:	1b04      	subs	r4, r0, r4
 8000a60:	2020      	movs	r0, #32
 8000a62:	3401      	adds	r4, #1
 8000a64:	40e2      	lsrs	r2, r4
 8000a66:	1b04      	subs	r4, r0, r4
 8000a68:	40a6      	lsls	r6, r4
 8000a6a:	0033      	movs	r3, r6
 8000a6c:	1e5e      	subs	r6, r3, #1
 8000a6e:	41b3      	sbcs	r3, r6
 8000a70:	2400      	movs	r4, #0
 8000a72:	4313      	orrs	r3, r2
 8000a74:	075a      	lsls	r2, r3, #29
 8000a76:	d004      	beq.n	8000a82 <__aeabi_fsub+0xba>
 8000a78:	220f      	movs	r2, #15
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	2a04      	cmp	r2, #4
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fsub+0xba>
 8000a80:	3304      	adds	r3, #4
 8000a82:	015a      	lsls	r2, r3, #5
 8000a84:	d400      	bmi.n	8000a88 <__aeabi_fsub+0xc0>
 8000a86:	e0d6      	b.n	8000c36 <__aeabi_fsub+0x26e>
 8000a88:	1c62      	adds	r2, r4, #1
 8000a8a:	2cfe      	cmp	r4, #254	; 0xfe
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0xc8>
 8000a8e:	e0da      	b.n	8000c46 <__aeabi_fsub+0x27e>
 8000a90:	019b      	lsls	r3, r3, #6
 8000a92:	0a5f      	lsrs	r7, r3, #9
 8000a94:	b2d0      	uxtb	r0, r2
 8000a96:	05c0      	lsls	r0, r0, #23
 8000a98:	4338      	orrs	r0, r7
 8000a9a:	07ed      	lsls	r5, r5, #31
 8000a9c:	4328      	orrs	r0, r5
 8000a9e:	bce0      	pop	{r5, r6, r7}
 8000aa0:	46ba      	mov	sl, r7
 8000aa2:	46b1      	mov	r9, r6
 8000aa4:	46a8      	mov	r8, r5
 8000aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa8:	1ba2      	subs	r2, r4, r6
 8000aaa:	4691      	mov	r9, r2
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	dd63      	ble.n	8000b78 <__aeabi_fsub+0x1b0>
 8000ab0:	2e00      	cmp	r6, #0
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_fsub+0xee>
 8000ab4:	e099      	b.n	8000bea <__aeabi_fsub+0x222>
 8000ab6:	2cff      	cmp	r4, #255	; 0xff
 8000ab8:	d03c      	beq.n	8000b34 <__aeabi_fsub+0x16c>
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	4652      	mov	r2, sl
 8000abe:	04db      	lsls	r3, r3, #19
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	4692      	mov	sl, r2
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	2a1b      	cmp	r2, #27
 8000aca:	dc08      	bgt.n	8000ade <__aeabi_fsub+0x116>
 8000acc:	4653      	mov	r3, sl
 8000ace:	2120      	movs	r1, #32
 8000ad0:	40d3      	lsrs	r3, r2
 8000ad2:	1a89      	subs	r1, r1, r2
 8000ad4:	4652      	mov	r2, sl
 8000ad6:	408a      	lsls	r2, r1
 8000ad8:	1e51      	subs	r1, r2, #1
 8000ada:	418a      	sbcs	r2, r1
 8000adc:	4313      	orrs	r3, r2
 8000ade:	4463      	add	r3, ip
 8000ae0:	015a      	lsls	r2, r3, #5
 8000ae2:	d400      	bmi.n	8000ae6 <__aeabi_fsub+0x11e>
 8000ae4:	e0a4      	b.n	8000c30 <__aeabi_fsub+0x268>
 8000ae6:	3401      	adds	r4, #1
 8000ae8:	2cff      	cmp	r4, #255	; 0xff
 8000aea:	d100      	bne.n	8000aee <__aeabi_fsub+0x126>
 8000aec:	e0ab      	b.n	8000c46 <__aeabi_fsub+0x27e>
 8000aee:	2201      	movs	r2, #1
 8000af0:	4997      	ldr	r1, [pc, #604]	; (8000d50 <__aeabi_fsub+0x388>)
 8000af2:	401a      	ands	r2, r3
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	400b      	ands	r3, r1
 8000af8:	4313      	orrs	r3, r2
 8000afa:	e7bb      	b.n	8000a74 <__aeabi_fsub+0xac>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d032      	beq.n	8000b66 <__aeabi_fsub+0x19e>
 8000b00:	428d      	cmp	r5, r1
 8000b02:	d035      	beq.n	8000b70 <__aeabi_fsub+0x1a8>
 8000b04:	22ff      	movs	r2, #255	; 0xff
 8000b06:	4252      	negs	r2, r2
 8000b08:	4691      	mov	r9, r2
 8000b0a:	44a1      	add	r9, r4
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	d051      	beq.n	8000bb6 <__aeabi_fsub+0x1ee>
 8000b12:	1b30      	subs	r0, r6, r4
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d000      	beq.n	8000b1a <__aeabi_fsub+0x152>
 8000b18:	e09c      	b.n	8000c54 <__aeabi_fsub+0x28c>
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_fsub+0x15a>
 8000b20:	e0df      	b.n	8000ce2 <__aeabi_fsub+0x31a>
 8000b22:	3801      	subs	r0, #1
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d100      	bne.n	8000b2a <__aeabi_fsub+0x162>
 8000b28:	e0f7      	b.n	8000d1a <__aeabi_fsub+0x352>
 8000b2a:	2eff      	cmp	r6, #255	; 0xff
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_fsub+0x168>
 8000b2e:	e099      	b.n	8000c64 <__aeabi_fsub+0x29c>
 8000b30:	000d      	movs	r5, r1
 8000b32:	4643      	mov	r3, r8
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fsub+0x172>
 8000b38:	e085      	b.n	8000c46 <__aeabi_fsub+0x27e>
 8000b3a:	2780      	movs	r7, #128	; 0x80
 8000b3c:	03ff      	lsls	r7, r7, #15
 8000b3e:	431f      	orrs	r7, r3
 8000b40:	027f      	lsls	r7, r7, #9
 8000b42:	20ff      	movs	r0, #255	; 0xff
 8000b44:	0a7f      	lsrs	r7, r7, #9
 8000b46:	e7a6      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000b48:	4652      	mov	r2, sl
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d074      	beq.n	8000c38 <__aeabi_fsub+0x270>
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4252      	negs	r2, r2
 8000b52:	4690      	mov	r8, r2
 8000b54:	44c1      	add	r9, r8
 8000b56:	464a      	mov	r2, r9
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fsub+0x196>
 8000b5c:	e0c8      	b.n	8000cf0 <__aeabi_fsub+0x328>
 8000b5e:	2cff      	cmp	r4, #255	; 0xff
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fsub+0x19c>
 8000b62:	e75f      	b.n	8000a24 <__aeabi_fsub+0x5c>
 8000b64:	e7e6      	b.n	8000b34 <__aeabi_fsub+0x16c>
 8000b66:	2201      	movs	r2, #1
 8000b68:	4051      	eors	r1, r2
 8000b6a:	42a9      	cmp	r1, r5
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_fsub+0x1a8>
 8000b6e:	e749      	b.n	8000a04 <__aeabi_fsub+0x3c>
 8000b70:	22ff      	movs	r2, #255	; 0xff
 8000b72:	4252      	negs	r2, r2
 8000b74:	4691      	mov	r9, r2
 8000b76:	44a1      	add	r9, r4
 8000b78:	464a      	mov	r2, r9
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d043      	beq.n	8000c06 <__aeabi_fsub+0x23e>
 8000b7e:	1b31      	subs	r1, r6, r4
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_fsub+0x1be>
 8000b84:	e08c      	b.n	8000ca0 <__aeabi_fsub+0x2d8>
 8000b86:	2eff      	cmp	r6, #255	; 0xff
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fsub+0x1c4>
 8000b8a:	e092      	b.n	8000cb2 <__aeabi_fsub+0x2ea>
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	4662      	mov	r2, ip
 8000b90:	04db      	lsls	r3, r3, #19
 8000b92:	431a      	orrs	r2, r3
 8000b94:	4694      	mov	ip, r2
 8000b96:	2301      	movs	r3, #1
 8000b98:	291b      	cmp	r1, #27
 8000b9a:	dc09      	bgt.n	8000bb0 <__aeabi_fsub+0x1e8>
 8000b9c:	2020      	movs	r0, #32
 8000b9e:	4663      	mov	r3, ip
 8000ba0:	4662      	mov	r2, ip
 8000ba2:	40cb      	lsrs	r3, r1
 8000ba4:	1a41      	subs	r1, r0, r1
 8000ba6:	408a      	lsls	r2, r1
 8000ba8:	0011      	movs	r1, r2
 8000baa:	1e48      	subs	r0, r1, #1
 8000bac:	4181      	sbcs	r1, r0
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	0034      	movs	r4, r6
 8000bb2:	4453      	add	r3, sl
 8000bb4:	e794      	b.n	8000ae0 <__aeabi_fsub+0x118>
 8000bb6:	22fe      	movs	r2, #254	; 0xfe
 8000bb8:	1c66      	adds	r6, r4, #1
 8000bba:	4232      	tst	r2, r6
 8000bbc:	d164      	bne.n	8000c88 <__aeabi_fsub+0x2c0>
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_fsub+0x1fc>
 8000bc2:	e082      	b.n	8000cca <__aeabi_fsub+0x302>
 8000bc4:	4663      	mov	r3, ip
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_fsub+0x204>
 8000bca:	e0ab      	b.n	8000d24 <__aeabi_fsub+0x35c>
 8000bcc:	4653      	mov	r3, sl
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x20c>
 8000bd2:	e760      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000bd4:	4663      	mov	r3, ip
 8000bd6:	4652      	mov	r2, sl
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	015a      	lsls	r2, r3, #5
 8000bdc:	d400      	bmi.n	8000be0 <__aeabi_fsub+0x218>
 8000bde:	e0aa      	b.n	8000d36 <__aeabi_fsub+0x36e>
 8000be0:	4663      	mov	r3, ip
 8000be2:	4652      	mov	r2, sl
 8000be4:	000d      	movs	r5, r1
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	e744      	b.n	8000a74 <__aeabi_fsub+0xac>
 8000bea:	4652      	mov	r2, sl
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	d023      	beq.n	8000c38 <__aeabi_fsub+0x270>
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4252      	negs	r2, r2
 8000bf4:	4690      	mov	r8, r2
 8000bf6:	44c1      	add	r9, r8
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d075      	beq.n	8000cea <__aeabi_fsub+0x322>
 8000bfe:	2cff      	cmp	r4, #255	; 0xff
 8000c00:	d000      	beq.n	8000c04 <__aeabi_fsub+0x23c>
 8000c02:	e75f      	b.n	8000ac4 <__aeabi_fsub+0xfc>
 8000c04:	e796      	b.n	8000b34 <__aeabi_fsub+0x16c>
 8000c06:	26fe      	movs	r6, #254	; 0xfe
 8000c08:	3401      	adds	r4, #1
 8000c0a:	4226      	tst	r6, r4
 8000c0c:	d153      	bne.n	8000cb6 <__aeabi_fsub+0x2ee>
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d172      	bne.n	8000cf8 <__aeabi_fsub+0x330>
 8000c12:	4663      	mov	r3, ip
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x252>
 8000c18:	e093      	b.n	8000d42 <__aeabi_fsub+0x37a>
 8000c1a:	4653      	mov	r3, sl
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fsub+0x25a>
 8000c20:	e739      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000c22:	4463      	add	r3, ip
 8000c24:	2400      	movs	r4, #0
 8000c26:	015a      	lsls	r2, r3, #5
 8000c28:	d502      	bpl.n	8000c30 <__aeabi_fsub+0x268>
 8000c2a:	4a4a      	ldr	r2, [pc, #296]	; (8000d54 <__aeabi_fsub+0x38c>)
 8000c2c:	3401      	adds	r4, #1
 8000c2e:	4013      	ands	r3, r2
 8000c30:	075a      	lsls	r2, r3, #29
 8000c32:	d000      	beq.n	8000c36 <__aeabi_fsub+0x26e>
 8000c34:	e720      	b.n	8000a78 <__aeabi_fsub+0xb0>
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	2cff      	cmp	r4, #255	; 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0x276>
 8000c3c:	e77a      	b.n	8000b34 <__aeabi_fsub+0x16c>
 8000c3e:	025b      	lsls	r3, r3, #9
 8000c40:	0a5f      	lsrs	r7, r3, #9
 8000c42:	b2e0      	uxtb	r0, r4
 8000c44:	e727      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000c46:	20ff      	movs	r0, #255	; 0xff
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e724      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000c4c:	4b41      	ldr	r3, [pc, #260]	; (8000d54 <__aeabi_fsub+0x38c>)
 8000c4e:	1a24      	subs	r4, r4, r0
 8000c50:	4033      	ands	r3, r6
 8000c52:	e70f      	b.n	8000a74 <__aeabi_fsub+0xac>
 8000c54:	2eff      	cmp	r6, #255	; 0xff
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x292>
 8000c58:	e76a      	b.n	8000b30 <__aeabi_fsub+0x168>
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	4662      	mov	r2, ip
 8000c5e:	04db      	lsls	r3, r3, #19
 8000c60:	431a      	orrs	r2, r3
 8000c62:	4694      	mov	ip, r2
 8000c64:	2301      	movs	r3, #1
 8000c66:	281b      	cmp	r0, #27
 8000c68:	dc09      	bgt.n	8000c7e <__aeabi_fsub+0x2b6>
 8000c6a:	2420      	movs	r4, #32
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	4662      	mov	r2, ip
 8000c70:	40c3      	lsrs	r3, r0
 8000c72:	1a20      	subs	r0, r4, r0
 8000c74:	4082      	lsls	r2, r0
 8000c76:	0010      	movs	r0, r2
 8000c78:	1e44      	subs	r4, r0, #1
 8000c7a:	41a0      	sbcs	r0, r4
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	4652      	mov	r2, sl
 8000c80:	000d      	movs	r5, r1
 8000c82:	0034      	movs	r4, r6
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	e6dc      	b.n	8000a42 <__aeabi_fsub+0x7a>
 8000c88:	4663      	mov	r3, ip
 8000c8a:	4652      	mov	r2, sl
 8000c8c:	1a9e      	subs	r6, r3, r2
 8000c8e:	0173      	lsls	r3, r6, #5
 8000c90:	d417      	bmi.n	8000cc2 <__aeabi_fsub+0x2fa>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d000      	beq.n	8000c98 <__aeabi_fsub+0x2d0>
 8000c96:	e6d9      	b.n	8000a4c <__aeabi_fsub+0x84>
 8000c98:	2500      	movs	r5, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e6fa      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d044      	beq.n	8000d30 <__aeabi_fsub+0x368>
 8000ca6:	3901      	subs	r1, #1
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d04c      	beq.n	8000d46 <__aeabi_fsub+0x37e>
 8000cac:	2eff      	cmp	r6, #255	; 0xff
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fsub+0x2ea>
 8000cb0:	e771      	b.n	8000b96 <__aeabi_fsub+0x1ce>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	e73e      	b.n	8000b34 <__aeabi_fsub+0x16c>
 8000cb6:	2cff      	cmp	r4, #255	; 0xff
 8000cb8:	d0c5      	beq.n	8000c46 <__aeabi_fsub+0x27e>
 8000cba:	4652      	mov	r2, sl
 8000cbc:	4462      	add	r2, ip
 8000cbe:	0853      	lsrs	r3, r2, #1
 8000cc0:	e7b6      	b.n	8000c30 <__aeabi_fsub+0x268>
 8000cc2:	4663      	mov	r3, ip
 8000cc4:	000d      	movs	r5, r1
 8000cc6:	1ad6      	subs	r6, r2, r3
 8000cc8:	e6c0      	b.n	8000a4c <__aeabi_fsub+0x84>
 8000cca:	4662      	mov	r2, ip
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	d116      	bne.n	8000cfe <__aeabi_fsub+0x336>
 8000cd0:	4653      	mov	r3, sl
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d000      	beq.n	8000cd8 <__aeabi_fsub+0x310>
 8000cd6:	e72b      	b.n	8000b30 <__aeabi_fsub+0x168>
 8000cd8:	2780      	movs	r7, #128	; 0x80
 8000cda:	2500      	movs	r5, #0
 8000cdc:	20ff      	movs	r0, #255	; 0xff
 8000cde:	03ff      	lsls	r7, r7, #15
 8000ce0:	e6d9      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000ce2:	000d      	movs	r5, r1
 8000ce4:	4643      	mov	r3, r8
 8000ce6:	0034      	movs	r4, r6
 8000ce8:	e7a6      	b.n	8000c38 <__aeabi_fsub+0x270>
 8000cea:	4653      	mov	r3, sl
 8000cec:	4463      	add	r3, ip
 8000cee:	e6f7      	b.n	8000ae0 <__aeabi_fsub+0x118>
 8000cf0:	4663      	mov	r3, ip
 8000cf2:	4652      	mov	r2, sl
 8000cf4:	1a9b      	subs	r3, r3, r2
 8000cf6:	e6a4      	b.n	8000a42 <__aeabi_fsub+0x7a>
 8000cf8:	4662      	mov	r2, ip
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d0d9      	beq.n	8000cb2 <__aeabi_fsub+0x2ea>
 8000cfe:	4652      	mov	r2, sl
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	d100      	bne.n	8000d06 <__aeabi_fsub+0x33e>
 8000d04:	e716      	b.n	8000b34 <__aeabi_fsub+0x16c>
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	03d2      	lsls	r2, r2, #15
 8000d0a:	4213      	tst	r3, r2
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x348>
 8000d0e:	e711      	b.n	8000b34 <__aeabi_fsub+0x16c>
 8000d10:	4640      	mov	r0, r8
 8000d12:	4210      	tst	r0, r2
 8000d14:	d000      	beq.n	8000d18 <__aeabi_fsub+0x350>
 8000d16:	e70d      	b.n	8000b34 <__aeabi_fsub+0x16c>
 8000d18:	e70a      	b.n	8000b30 <__aeabi_fsub+0x168>
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	000d      	movs	r5, r1
 8000d1e:	0034      	movs	r4, r6
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	e68e      	b.n	8000a42 <__aeabi_fsub+0x7a>
 8000d24:	4653      	mov	r3, sl
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d008      	beq.n	8000d3c <__aeabi_fsub+0x374>
 8000d2a:	000d      	movs	r5, r1
 8000d2c:	4647      	mov	r7, r8
 8000d2e:	e6b2      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000d30:	4643      	mov	r3, r8
 8000d32:	0034      	movs	r4, r6
 8000d34:	e780      	b.n	8000c38 <__aeabi_fsub+0x270>
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fsub+0x374>
 8000d3a:	e779      	b.n	8000c30 <__aeabi_fsub+0x268>
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	2700      	movs	r7, #0
 8000d40:	e6a9      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000d42:	4647      	mov	r7, r8
 8000d44:	e6a7      	b.n	8000a96 <__aeabi_fsub+0xce>
 8000d46:	4653      	mov	r3, sl
 8000d48:	0034      	movs	r4, r6
 8000d4a:	4463      	add	r3, ip
 8000d4c:	e6c8      	b.n	8000ae0 <__aeabi_fsub+0x118>
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	7dffffff 	.word	0x7dffffff
 8000d54:	fbffffff 	.word	0xfbffffff

08000d58 <__aeabi_f2iz>:
 8000d58:	0241      	lsls	r1, r0, #9
 8000d5a:	0042      	lsls	r2, r0, #1
 8000d5c:	0fc3      	lsrs	r3, r0, #31
 8000d5e:	0a49      	lsrs	r1, r1, #9
 8000d60:	2000      	movs	r0, #0
 8000d62:	0e12      	lsrs	r2, r2, #24
 8000d64:	2a7e      	cmp	r2, #126	; 0x7e
 8000d66:	d903      	bls.n	8000d70 <__aeabi_f2iz+0x18>
 8000d68:	2a9d      	cmp	r2, #157	; 0x9d
 8000d6a:	d902      	bls.n	8000d72 <__aeabi_f2iz+0x1a>
 8000d6c:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <__aeabi_f2iz+0x3c>)
 8000d6e:	1898      	adds	r0, r3, r2
 8000d70:	4770      	bx	lr
 8000d72:	2080      	movs	r0, #128	; 0x80
 8000d74:	0400      	lsls	r0, r0, #16
 8000d76:	4301      	orrs	r1, r0
 8000d78:	2a95      	cmp	r2, #149	; 0x95
 8000d7a:	dc07      	bgt.n	8000d8c <__aeabi_f2iz+0x34>
 8000d7c:	2096      	movs	r0, #150	; 0x96
 8000d7e:	1a82      	subs	r2, r0, r2
 8000d80:	40d1      	lsrs	r1, r2
 8000d82:	4248      	negs	r0, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f3      	bne.n	8000d70 <__aeabi_f2iz+0x18>
 8000d88:	0008      	movs	r0, r1
 8000d8a:	e7f1      	b.n	8000d70 <__aeabi_f2iz+0x18>
 8000d8c:	3a96      	subs	r2, #150	; 0x96
 8000d8e:	4091      	lsls	r1, r2
 8000d90:	e7f7      	b.n	8000d82 <__aeabi_f2iz+0x2a>
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	7fffffff 	.word	0x7fffffff

08000d98 <__aeabi_ui2f>:
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	1e05      	subs	r5, r0, #0
 8000d9c:	d00e      	beq.n	8000dbc <__aeabi_ui2f+0x24>
 8000d9e:	f000 fc59 	bl	8001654 <__clzsi2>
 8000da2:	239e      	movs	r3, #158	; 0x9e
 8000da4:	0004      	movs	r4, r0
 8000da6:	1a1b      	subs	r3, r3, r0
 8000da8:	2b96      	cmp	r3, #150	; 0x96
 8000daa:	dc0c      	bgt.n	8000dc6 <__aeabi_ui2f+0x2e>
 8000dac:	2808      	cmp	r0, #8
 8000dae:	dd01      	ble.n	8000db4 <__aeabi_ui2f+0x1c>
 8000db0:	3c08      	subs	r4, #8
 8000db2:	40a5      	lsls	r5, r4
 8000db4:	026d      	lsls	r5, r5, #9
 8000db6:	0a6d      	lsrs	r5, r5, #9
 8000db8:	b2d8      	uxtb	r0, r3
 8000dba:	e001      	b.n	8000dc0 <__aeabi_ui2f+0x28>
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	2500      	movs	r5, #0
 8000dc0:	05c0      	lsls	r0, r0, #23
 8000dc2:	4328      	orrs	r0, r5
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
 8000dc6:	2b99      	cmp	r3, #153	; 0x99
 8000dc8:	dd09      	ble.n	8000dde <__aeabi_ui2f+0x46>
 8000dca:	0002      	movs	r2, r0
 8000dcc:	0029      	movs	r1, r5
 8000dce:	321b      	adds	r2, #27
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	1e4a      	subs	r2, r1, #1
 8000dd4:	4191      	sbcs	r1, r2
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	1a12      	subs	r2, r2, r0
 8000dda:	40d5      	lsrs	r5, r2
 8000ddc:	430d      	orrs	r5, r1
 8000dde:	2c05      	cmp	r4, #5
 8000de0:	dd01      	ble.n	8000de6 <__aeabi_ui2f+0x4e>
 8000de2:	1f62      	subs	r2, r4, #5
 8000de4:	4095      	lsls	r5, r2
 8000de6:	0029      	movs	r1, r5
 8000de8:	4e08      	ldr	r6, [pc, #32]	; (8000e0c <__aeabi_ui2f+0x74>)
 8000dea:	4031      	ands	r1, r6
 8000dec:	076a      	lsls	r2, r5, #29
 8000dee:	d009      	beq.n	8000e04 <__aeabi_ui2f+0x6c>
 8000df0:	200f      	movs	r0, #15
 8000df2:	4028      	ands	r0, r5
 8000df4:	2804      	cmp	r0, #4
 8000df6:	d005      	beq.n	8000e04 <__aeabi_ui2f+0x6c>
 8000df8:	3104      	adds	r1, #4
 8000dfa:	014a      	lsls	r2, r1, #5
 8000dfc:	d502      	bpl.n	8000e04 <__aeabi_ui2f+0x6c>
 8000dfe:	239f      	movs	r3, #159	; 0x9f
 8000e00:	4031      	ands	r1, r6
 8000e02:	1b1b      	subs	r3, r3, r4
 8000e04:	0189      	lsls	r1, r1, #6
 8000e06:	0a4d      	lsrs	r5, r1, #9
 8000e08:	b2d8      	uxtb	r0, r3
 8000e0a:	e7d9      	b.n	8000dc0 <__aeabi_ui2f+0x28>
 8000e0c:	fbffffff 	.word	0xfbffffff

08000e10 <__aeabi_dadd>:
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	464f      	mov	r7, r9
 8000e14:	46d6      	mov	lr, sl
 8000e16:	4646      	mov	r6, r8
 8000e18:	000d      	movs	r5, r1
 8000e1a:	0001      	movs	r1, r0
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	b5c0      	push	{r6, r7, lr}
 8000e20:	0017      	movs	r7, r2
 8000e22:	032b      	lsls	r3, r5, #12
 8000e24:	0a5a      	lsrs	r2, r3, #9
 8000e26:	0f4b      	lsrs	r3, r1, #29
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	00ca      	lsls	r2, r1, #3
 8000e2c:	4691      	mov	r9, r2
 8000e2e:	0302      	lsls	r2, r0, #12
 8000e30:	006e      	lsls	r6, r5, #1
 8000e32:	0041      	lsls	r1, r0, #1
 8000e34:	0a52      	lsrs	r2, r2, #9
 8000e36:	0fec      	lsrs	r4, r5, #31
 8000e38:	0f7d      	lsrs	r5, r7, #29
 8000e3a:	4315      	orrs	r5, r2
 8000e3c:	0d76      	lsrs	r6, r6, #21
 8000e3e:	0d49      	lsrs	r1, r1, #21
 8000e40:	0fc0      	lsrs	r0, r0, #31
 8000e42:	4682      	mov	sl, r0
 8000e44:	46ac      	mov	ip, r5
 8000e46:	00ff      	lsls	r7, r7, #3
 8000e48:	1a72      	subs	r2, r6, r1
 8000e4a:	4284      	cmp	r4, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dadd+0x40>
 8000e4e:	e098      	b.n	8000f82 <__aeabi_dadd+0x172>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	dc00      	bgt.n	8000e56 <__aeabi_dadd+0x46>
 8000e54:	e081      	b.n	8000f5a <__aeabi_dadd+0x14a>
 8000e56:	2900      	cmp	r1, #0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_dadd+0x4c>
 8000e5a:	e0b6      	b.n	8000fca <__aeabi_dadd+0x1ba>
 8000e5c:	49c9      	ldr	r1, [pc, #804]	; (8001184 <__aeabi_dadd+0x374>)
 8000e5e:	428e      	cmp	r6, r1
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dadd+0x54>
 8000e62:	e172      	b.n	800114a <__aeabi_dadd+0x33a>
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0028      	movs	r0, r5
 8000e68:	0409      	lsls	r1, r1, #16
 8000e6a:	4308      	orrs	r0, r1
 8000e6c:	4684      	mov	ip, r0
 8000e6e:	2a38      	cmp	r2, #56	; 0x38
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_dadd+0x64>
 8000e72:	e15e      	b.n	8001132 <__aeabi_dadd+0x322>
 8000e74:	2a1f      	cmp	r2, #31
 8000e76:	dd00      	ble.n	8000e7a <__aeabi_dadd+0x6a>
 8000e78:	e1ee      	b.n	8001258 <__aeabi_dadd+0x448>
 8000e7a:	2020      	movs	r0, #32
 8000e7c:	0039      	movs	r1, r7
 8000e7e:	4665      	mov	r5, ip
 8000e80:	1a80      	subs	r0, r0, r2
 8000e82:	4087      	lsls	r7, r0
 8000e84:	40d1      	lsrs	r1, r2
 8000e86:	4085      	lsls	r5, r0
 8000e88:	430d      	orrs	r5, r1
 8000e8a:	0039      	movs	r1, r7
 8000e8c:	1e4f      	subs	r7, r1, #1
 8000e8e:	41b9      	sbcs	r1, r7
 8000e90:	4667      	mov	r7, ip
 8000e92:	40d7      	lsrs	r7, r2
 8000e94:	4329      	orrs	r1, r5
 8000e96:	1bdb      	subs	r3, r3, r7
 8000e98:	464a      	mov	r2, r9
 8000e9a:	1a55      	subs	r5, r2, r1
 8000e9c:	45a9      	cmp	r9, r5
 8000e9e:	4189      	sbcs	r1, r1
 8000ea0:	4249      	negs	r1, r1
 8000ea2:	1a5b      	subs	r3, r3, r1
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	d400      	bmi.n	8000eae <__aeabi_dadd+0x9e>
 8000eac:	e0cc      	b.n	8001048 <__aeabi_dadd+0x238>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	025b      	lsls	r3, r3, #9
 8000eb2:	0a5b      	lsrs	r3, r3, #9
 8000eb4:	4698      	mov	r8, r3
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dadd+0xae>
 8000ebc:	e12c      	b.n	8001118 <__aeabi_dadd+0x308>
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	f000 fbc8 	bl	8001654 <__clzsi2>
 8000ec4:	0001      	movs	r1, r0
 8000ec6:	3908      	subs	r1, #8
 8000ec8:	2220      	movs	r2, #32
 8000eca:	0028      	movs	r0, r5
 8000ecc:	4643      	mov	r3, r8
 8000ece:	1a52      	subs	r2, r2, r1
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	40d0      	lsrs	r0, r2
 8000ed4:	408d      	lsls	r5, r1
 8000ed6:	4303      	orrs	r3, r0
 8000ed8:	428e      	cmp	r6, r1
 8000eda:	dd00      	ble.n	8000ede <__aeabi_dadd+0xce>
 8000edc:	e117      	b.n	800110e <__aeabi_dadd+0x2fe>
 8000ede:	1b8e      	subs	r6, r1, r6
 8000ee0:	1c72      	adds	r2, r6, #1
 8000ee2:	2a1f      	cmp	r2, #31
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_dadd+0xd8>
 8000ee6:	e1a7      	b.n	8001238 <__aeabi_dadd+0x428>
 8000ee8:	2120      	movs	r1, #32
 8000eea:	0018      	movs	r0, r3
 8000eec:	002e      	movs	r6, r5
 8000eee:	1a89      	subs	r1, r1, r2
 8000ef0:	408d      	lsls	r5, r1
 8000ef2:	4088      	lsls	r0, r1
 8000ef4:	40d6      	lsrs	r6, r2
 8000ef6:	40d3      	lsrs	r3, r2
 8000ef8:	1e69      	subs	r1, r5, #1
 8000efa:	418d      	sbcs	r5, r1
 8000efc:	4330      	orrs	r0, r6
 8000efe:	4698      	mov	r8, r3
 8000f00:	2600      	movs	r6, #0
 8000f02:	4305      	orrs	r5, r0
 8000f04:	076b      	lsls	r3, r5, #29
 8000f06:	d009      	beq.n	8000f1c <__aeabi_dadd+0x10c>
 8000f08:	230f      	movs	r3, #15
 8000f0a:	402b      	ands	r3, r5
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d005      	beq.n	8000f1c <__aeabi_dadd+0x10c>
 8000f10:	1d2b      	adds	r3, r5, #4
 8000f12:	42ab      	cmp	r3, r5
 8000f14:	41ad      	sbcs	r5, r5
 8000f16:	426d      	negs	r5, r5
 8000f18:	44a8      	add	r8, r5
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	d400      	bmi.n	8000f24 <__aeabi_dadd+0x114>
 8000f22:	e094      	b.n	800104e <__aeabi_dadd+0x23e>
 8000f24:	4b97      	ldr	r3, [pc, #604]	; (8001184 <__aeabi_dadd+0x374>)
 8000f26:	1c72      	adds	r2, r6, #1
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x11e>
 8000f2c:	e09d      	b.n	800106a <__aeabi_dadd+0x25a>
 8000f2e:	4641      	mov	r1, r8
 8000f30:	4b95      	ldr	r3, [pc, #596]	; (8001188 <__aeabi_dadd+0x378>)
 8000f32:	08ed      	lsrs	r5, r5, #3
 8000f34:	4019      	ands	r1, r3
 8000f36:	000b      	movs	r3, r1
 8000f38:	0552      	lsls	r2, r2, #21
 8000f3a:	0749      	lsls	r1, r1, #29
 8000f3c:	025b      	lsls	r3, r3, #9
 8000f3e:	4329      	orrs	r1, r5
 8000f40:	0b1b      	lsrs	r3, r3, #12
 8000f42:	0d52      	lsrs	r2, r2, #21
 8000f44:	0512      	lsls	r2, r2, #20
 8000f46:	4313      	orrs	r3, r2
 8000f48:	07e4      	lsls	r4, r4, #31
 8000f4a:	4323      	orrs	r3, r4
 8000f4c:	0008      	movs	r0, r1
 8000f4e:	0019      	movs	r1, r3
 8000f50:	bce0      	pop	{r5, r6, r7}
 8000f52:	46ba      	mov	sl, r7
 8000f54:	46b1      	mov	r9, r6
 8000f56:	46a8      	mov	r8, r5
 8000f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d043      	beq.n	8000fe6 <__aeabi_dadd+0x1d6>
 8000f5e:	1b8a      	subs	r2, r1, r6
 8000f60:	2e00      	cmp	r6, #0
 8000f62:	d000      	beq.n	8000f66 <__aeabi_dadd+0x156>
 8000f64:	e12a      	b.n	80011bc <__aeabi_dadd+0x3ac>
 8000f66:	464c      	mov	r4, r9
 8000f68:	431c      	orrs	r4, r3
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x15e>
 8000f6c:	e1d1      	b.n	8001312 <__aeabi_dadd+0x502>
 8000f6e:	1e54      	subs	r4, r2, #1
 8000f70:	2a01      	cmp	r2, #1
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x166>
 8000f74:	e21f      	b.n	80013b6 <__aeabi_dadd+0x5a6>
 8000f76:	4d83      	ldr	r5, [pc, #524]	; (8001184 <__aeabi_dadd+0x374>)
 8000f78:	42aa      	cmp	r2, r5
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_dadd+0x16e>
 8000f7c:	e272      	b.n	8001464 <__aeabi_dadd+0x654>
 8000f7e:	0022      	movs	r2, r4
 8000f80:	e123      	b.n	80011ca <__aeabi_dadd+0x3ba>
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	dc00      	bgt.n	8000f88 <__aeabi_dadd+0x178>
 8000f86:	e098      	b.n	80010ba <__aeabi_dadd+0x2aa>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	d042      	beq.n	8001012 <__aeabi_dadd+0x202>
 8000f8c:	497d      	ldr	r1, [pc, #500]	; (8001184 <__aeabi_dadd+0x374>)
 8000f8e:	428e      	cmp	r6, r1
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x184>
 8000f92:	e0da      	b.n	800114a <__aeabi_dadd+0x33a>
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	0028      	movs	r0, r5
 8000f98:	0409      	lsls	r1, r1, #16
 8000f9a:	4308      	orrs	r0, r1
 8000f9c:	4684      	mov	ip, r0
 8000f9e:	2a38      	cmp	r2, #56	; 0x38
 8000fa0:	dd00      	ble.n	8000fa4 <__aeabi_dadd+0x194>
 8000fa2:	e129      	b.n	80011f8 <__aeabi_dadd+0x3e8>
 8000fa4:	2a1f      	cmp	r2, #31
 8000fa6:	dc00      	bgt.n	8000faa <__aeabi_dadd+0x19a>
 8000fa8:	e187      	b.n	80012ba <__aeabi_dadd+0x4aa>
 8000faa:	0011      	movs	r1, r2
 8000fac:	4665      	mov	r5, ip
 8000fae:	3920      	subs	r1, #32
 8000fb0:	40cd      	lsrs	r5, r1
 8000fb2:	2a20      	cmp	r2, #32
 8000fb4:	d004      	beq.n	8000fc0 <__aeabi_dadd+0x1b0>
 8000fb6:	2040      	movs	r0, #64	; 0x40
 8000fb8:	4661      	mov	r1, ip
 8000fba:	1a82      	subs	r2, r0, r2
 8000fbc:	4091      	lsls	r1, r2
 8000fbe:	430f      	orrs	r7, r1
 8000fc0:	0039      	movs	r1, r7
 8000fc2:	1e4f      	subs	r7, r1, #1
 8000fc4:	41b9      	sbcs	r1, r7
 8000fc6:	430d      	orrs	r5, r1
 8000fc8:	e11b      	b.n	8001202 <__aeabi_dadd+0x3f2>
 8000fca:	0029      	movs	r1, r5
 8000fcc:	4339      	orrs	r1, r7
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_dadd+0x1c2>
 8000fd0:	e0b5      	b.n	800113e <__aeabi_dadd+0x32e>
 8000fd2:	1e51      	subs	r1, r2, #1
 8000fd4:	2a01      	cmp	r2, #1
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x1ca>
 8000fd8:	e1ab      	b.n	8001332 <__aeabi_dadd+0x522>
 8000fda:	486a      	ldr	r0, [pc, #424]	; (8001184 <__aeabi_dadd+0x374>)
 8000fdc:	4282      	cmp	r2, r0
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_dadd+0x1d2>
 8000fe0:	e1b2      	b.n	8001348 <__aeabi_dadd+0x538>
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	e743      	b.n	8000e6e <__aeabi_dadd+0x5e>
 8000fe6:	4969      	ldr	r1, [pc, #420]	; (800118c <__aeabi_dadd+0x37c>)
 8000fe8:	1c75      	adds	r5, r6, #1
 8000fea:	420d      	tst	r5, r1
 8000fec:	d000      	beq.n	8000ff0 <__aeabi_dadd+0x1e0>
 8000fee:	e0cf      	b.n	8001190 <__aeabi_dadd+0x380>
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_dadd+0x1e6>
 8000ff4:	e193      	b.n	800131e <__aeabi_dadd+0x50e>
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	4319      	orrs	r1, r3
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x1ee>
 8000ffc:	e1d1      	b.n	80013a2 <__aeabi_dadd+0x592>
 8000ffe:	4661      	mov	r1, ip
 8001000:	4339      	orrs	r1, r7
 8001002:	d000      	beq.n	8001006 <__aeabi_dadd+0x1f6>
 8001004:	e1e3      	b.n	80013ce <__aeabi_dadd+0x5be>
 8001006:	4649      	mov	r1, r9
 8001008:	0758      	lsls	r0, r3, #29
 800100a:	08c9      	lsrs	r1, r1, #3
 800100c:	4301      	orrs	r1, r0
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	e026      	b.n	8001060 <__aeabi_dadd+0x250>
 8001012:	0029      	movs	r1, r5
 8001014:	4339      	orrs	r1, r7
 8001016:	d100      	bne.n	800101a <__aeabi_dadd+0x20a>
 8001018:	e091      	b.n	800113e <__aeabi_dadd+0x32e>
 800101a:	1e51      	subs	r1, r2, #1
 800101c:	2a01      	cmp	r2, #1
 800101e:	d005      	beq.n	800102c <__aeabi_dadd+0x21c>
 8001020:	4858      	ldr	r0, [pc, #352]	; (8001184 <__aeabi_dadd+0x374>)
 8001022:	4282      	cmp	r2, r0
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x218>
 8001026:	e18f      	b.n	8001348 <__aeabi_dadd+0x538>
 8001028:	000a      	movs	r2, r1
 800102a:	e7b8      	b.n	8000f9e <__aeabi_dadd+0x18e>
 800102c:	003d      	movs	r5, r7
 800102e:	444d      	add	r5, r9
 8001030:	454d      	cmp	r5, r9
 8001032:	4189      	sbcs	r1, r1
 8001034:	4463      	add	r3, ip
 8001036:	4698      	mov	r8, r3
 8001038:	4249      	negs	r1, r1
 800103a:	4488      	add	r8, r1
 800103c:	4643      	mov	r3, r8
 800103e:	2602      	movs	r6, #2
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	d500      	bpl.n	8001046 <__aeabi_dadd+0x236>
 8001044:	e0eb      	b.n	800121e <__aeabi_dadd+0x40e>
 8001046:	3e01      	subs	r6, #1
 8001048:	076b      	lsls	r3, r5, #29
 800104a:	d000      	beq.n	800104e <__aeabi_dadd+0x23e>
 800104c:	e75c      	b.n	8000f08 <__aeabi_dadd+0xf8>
 800104e:	4643      	mov	r3, r8
 8001050:	08e9      	lsrs	r1, r5, #3
 8001052:	075a      	lsls	r2, r3, #29
 8001054:	4311      	orrs	r1, r2
 8001056:	0032      	movs	r2, r6
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	484a      	ldr	r0, [pc, #296]	; (8001184 <__aeabi_dadd+0x374>)
 800105c:	4282      	cmp	r2, r0
 800105e:	d021      	beq.n	80010a4 <__aeabi_dadd+0x294>
 8001060:	031b      	lsls	r3, r3, #12
 8001062:	0552      	lsls	r2, r2, #21
 8001064:	0b1b      	lsrs	r3, r3, #12
 8001066:	0d52      	lsrs	r2, r2, #21
 8001068:	e76c      	b.n	8000f44 <__aeabi_dadd+0x134>
 800106a:	2300      	movs	r3, #0
 800106c:	2100      	movs	r1, #0
 800106e:	e769      	b.n	8000f44 <__aeabi_dadd+0x134>
 8001070:	002a      	movs	r2, r5
 8001072:	433a      	orrs	r2, r7
 8001074:	d069      	beq.n	800114a <__aeabi_dadd+0x33a>
 8001076:	464a      	mov	r2, r9
 8001078:	0758      	lsls	r0, r3, #29
 800107a:	08d1      	lsrs	r1, r2, #3
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	031b      	lsls	r3, r3, #12
 8001082:	4308      	orrs	r0, r1
 8001084:	421a      	tst	r2, r3
 8001086:	d007      	beq.n	8001098 <__aeabi_dadd+0x288>
 8001088:	0029      	movs	r1, r5
 800108a:	08ed      	lsrs	r5, r5, #3
 800108c:	421d      	tst	r5, r3
 800108e:	d103      	bne.n	8001098 <__aeabi_dadd+0x288>
 8001090:	002a      	movs	r2, r5
 8001092:	08ff      	lsrs	r7, r7, #3
 8001094:	0748      	lsls	r0, r1, #29
 8001096:	4338      	orrs	r0, r7
 8001098:	0f43      	lsrs	r3, r0, #29
 800109a:	00c1      	lsls	r1, r0, #3
 800109c:	075b      	lsls	r3, r3, #29
 800109e:	08c9      	lsrs	r1, r1, #3
 80010a0:	4319      	orrs	r1, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	000a      	movs	r2, r1
 80010a6:	431a      	orrs	r2, r3
 80010a8:	d100      	bne.n	80010ac <__aeabi_dadd+0x29c>
 80010aa:	e213      	b.n	80014d4 <__aeabi_dadd+0x6c4>
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	0312      	lsls	r2, r2, #12
 80010b0:	4313      	orrs	r3, r2
 80010b2:	031b      	lsls	r3, r3, #12
 80010b4:	4a33      	ldr	r2, [pc, #204]	; (8001184 <__aeabi_dadd+0x374>)
 80010b6:	0b1b      	lsrs	r3, r3, #12
 80010b8:	e744      	b.n	8000f44 <__aeabi_dadd+0x134>
 80010ba:	2a00      	cmp	r2, #0
 80010bc:	d04b      	beq.n	8001156 <__aeabi_dadd+0x346>
 80010be:	1b8a      	subs	r2, r1, r6
 80010c0:	2e00      	cmp	r6, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dadd+0x2b6>
 80010c4:	e0e7      	b.n	8001296 <__aeabi_dadd+0x486>
 80010c6:	482f      	ldr	r0, [pc, #188]	; (8001184 <__aeabi_dadd+0x374>)
 80010c8:	4281      	cmp	r1, r0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x2be>
 80010cc:	e195      	b.n	80013fa <__aeabi_dadd+0x5ea>
 80010ce:	2080      	movs	r0, #128	; 0x80
 80010d0:	0400      	lsls	r0, r0, #16
 80010d2:	4303      	orrs	r3, r0
 80010d4:	2a38      	cmp	r2, #56	; 0x38
 80010d6:	dd00      	ble.n	80010da <__aeabi_dadd+0x2ca>
 80010d8:	e143      	b.n	8001362 <__aeabi_dadd+0x552>
 80010da:	2a1f      	cmp	r2, #31
 80010dc:	dd00      	ble.n	80010e0 <__aeabi_dadd+0x2d0>
 80010de:	e1db      	b.n	8001498 <__aeabi_dadd+0x688>
 80010e0:	2020      	movs	r0, #32
 80010e2:	001d      	movs	r5, r3
 80010e4:	464e      	mov	r6, r9
 80010e6:	1a80      	subs	r0, r0, r2
 80010e8:	4085      	lsls	r5, r0
 80010ea:	40d6      	lsrs	r6, r2
 80010ec:	4335      	orrs	r5, r6
 80010ee:	464e      	mov	r6, r9
 80010f0:	4086      	lsls	r6, r0
 80010f2:	0030      	movs	r0, r6
 80010f4:	40d3      	lsrs	r3, r2
 80010f6:	1e46      	subs	r6, r0, #1
 80010f8:	41b0      	sbcs	r0, r6
 80010fa:	449c      	add	ip, r3
 80010fc:	4305      	orrs	r5, r0
 80010fe:	19ed      	adds	r5, r5, r7
 8001100:	42bd      	cmp	r5, r7
 8001102:	419b      	sbcs	r3, r3
 8001104:	425b      	negs	r3, r3
 8001106:	4463      	add	r3, ip
 8001108:	4698      	mov	r8, r3
 800110a:	000e      	movs	r6, r1
 800110c:	e07f      	b.n	800120e <__aeabi_dadd+0x3fe>
 800110e:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <__aeabi_dadd+0x378>)
 8001110:	1a76      	subs	r6, r6, r1
 8001112:	4013      	ands	r3, r2
 8001114:	4698      	mov	r8, r3
 8001116:	e6f5      	b.n	8000f04 <__aeabi_dadd+0xf4>
 8001118:	0028      	movs	r0, r5
 800111a:	f000 fa9b 	bl	8001654 <__clzsi2>
 800111e:	0001      	movs	r1, r0
 8001120:	3118      	adds	r1, #24
 8001122:	291f      	cmp	r1, #31
 8001124:	dc00      	bgt.n	8001128 <__aeabi_dadd+0x318>
 8001126:	e6cf      	b.n	8000ec8 <__aeabi_dadd+0xb8>
 8001128:	002b      	movs	r3, r5
 800112a:	3808      	subs	r0, #8
 800112c:	4083      	lsls	r3, r0
 800112e:	2500      	movs	r5, #0
 8001130:	e6d2      	b.n	8000ed8 <__aeabi_dadd+0xc8>
 8001132:	4662      	mov	r2, ip
 8001134:	433a      	orrs	r2, r7
 8001136:	0011      	movs	r1, r2
 8001138:	1e4f      	subs	r7, r1, #1
 800113a:	41b9      	sbcs	r1, r7
 800113c:	e6ac      	b.n	8000e98 <__aeabi_dadd+0x88>
 800113e:	4649      	mov	r1, r9
 8001140:	0758      	lsls	r0, r3, #29
 8001142:	08c9      	lsrs	r1, r1, #3
 8001144:	4301      	orrs	r1, r0
 8001146:	08db      	lsrs	r3, r3, #3
 8001148:	e787      	b.n	800105a <__aeabi_dadd+0x24a>
 800114a:	4649      	mov	r1, r9
 800114c:	075a      	lsls	r2, r3, #29
 800114e:	08c9      	lsrs	r1, r1, #3
 8001150:	4311      	orrs	r1, r2
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	e7a6      	b.n	80010a4 <__aeabi_dadd+0x294>
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <__aeabi_dadd+0x37c>)
 8001158:	1c70      	adds	r0, r6, #1
 800115a:	4208      	tst	r0, r1
 800115c:	d000      	beq.n	8001160 <__aeabi_dadd+0x350>
 800115e:	e0bb      	b.n	80012d8 <__aeabi_dadd+0x4c8>
 8001160:	2e00      	cmp	r6, #0
 8001162:	d000      	beq.n	8001166 <__aeabi_dadd+0x356>
 8001164:	e114      	b.n	8001390 <__aeabi_dadd+0x580>
 8001166:	4649      	mov	r1, r9
 8001168:	4319      	orrs	r1, r3
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x35e>
 800116c:	e175      	b.n	800145a <__aeabi_dadd+0x64a>
 800116e:	0029      	movs	r1, r5
 8001170:	4339      	orrs	r1, r7
 8001172:	d000      	beq.n	8001176 <__aeabi_dadd+0x366>
 8001174:	e17e      	b.n	8001474 <__aeabi_dadd+0x664>
 8001176:	4649      	mov	r1, r9
 8001178:	0758      	lsls	r0, r3, #29
 800117a:	08c9      	lsrs	r1, r1, #3
 800117c:	4301      	orrs	r1, r0
 800117e:	08db      	lsrs	r3, r3, #3
 8001180:	e76e      	b.n	8001060 <__aeabi_dadd+0x250>
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	000007ff 	.word	0x000007ff
 8001188:	ff7fffff 	.word	0xff7fffff
 800118c:	000007fe 	.word	0x000007fe
 8001190:	4649      	mov	r1, r9
 8001192:	1bcd      	subs	r5, r1, r7
 8001194:	4661      	mov	r1, ip
 8001196:	1a58      	subs	r0, r3, r1
 8001198:	45a9      	cmp	r9, r5
 800119a:	4189      	sbcs	r1, r1
 800119c:	4249      	negs	r1, r1
 800119e:	4688      	mov	r8, r1
 80011a0:	0001      	movs	r1, r0
 80011a2:	4640      	mov	r0, r8
 80011a4:	1a09      	subs	r1, r1, r0
 80011a6:	4688      	mov	r8, r1
 80011a8:	0209      	lsls	r1, r1, #8
 80011aa:	d500      	bpl.n	80011ae <__aeabi_dadd+0x39e>
 80011ac:	e0a6      	b.n	80012fc <__aeabi_dadd+0x4ec>
 80011ae:	4641      	mov	r1, r8
 80011b0:	4329      	orrs	r1, r5
 80011b2:	d000      	beq.n	80011b6 <__aeabi_dadd+0x3a6>
 80011b4:	e67f      	b.n	8000eb6 <__aeabi_dadd+0xa6>
 80011b6:	2300      	movs	r3, #0
 80011b8:	2400      	movs	r4, #0
 80011ba:	e751      	b.n	8001060 <__aeabi_dadd+0x250>
 80011bc:	4cc7      	ldr	r4, [pc, #796]	; (80014dc <__aeabi_dadd+0x6cc>)
 80011be:	42a1      	cmp	r1, r4
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dadd+0x3b4>
 80011c2:	e0c7      	b.n	8001354 <__aeabi_dadd+0x544>
 80011c4:	2480      	movs	r4, #128	; 0x80
 80011c6:	0424      	lsls	r4, r4, #16
 80011c8:	4323      	orrs	r3, r4
 80011ca:	2a38      	cmp	r2, #56	; 0x38
 80011cc:	dc54      	bgt.n	8001278 <__aeabi_dadd+0x468>
 80011ce:	2a1f      	cmp	r2, #31
 80011d0:	dd00      	ble.n	80011d4 <__aeabi_dadd+0x3c4>
 80011d2:	e0cc      	b.n	800136e <__aeabi_dadd+0x55e>
 80011d4:	2420      	movs	r4, #32
 80011d6:	4648      	mov	r0, r9
 80011d8:	1aa4      	subs	r4, r4, r2
 80011da:	001d      	movs	r5, r3
 80011dc:	464e      	mov	r6, r9
 80011de:	40a0      	lsls	r0, r4
 80011e0:	40d6      	lsrs	r6, r2
 80011e2:	40a5      	lsls	r5, r4
 80011e4:	0004      	movs	r4, r0
 80011e6:	40d3      	lsrs	r3, r2
 80011e8:	4662      	mov	r2, ip
 80011ea:	4335      	orrs	r5, r6
 80011ec:	1e66      	subs	r6, r4, #1
 80011ee:	41b4      	sbcs	r4, r6
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	469c      	mov	ip, r3
 80011f4:	4325      	orrs	r5, r4
 80011f6:	e044      	b.n	8001282 <__aeabi_dadd+0x472>
 80011f8:	4662      	mov	r2, ip
 80011fa:	433a      	orrs	r2, r7
 80011fc:	0015      	movs	r5, r2
 80011fe:	1e6f      	subs	r7, r5, #1
 8001200:	41bd      	sbcs	r5, r7
 8001202:	444d      	add	r5, r9
 8001204:	454d      	cmp	r5, r9
 8001206:	4189      	sbcs	r1, r1
 8001208:	4249      	negs	r1, r1
 800120a:	4688      	mov	r8, r1
 800120c:	4498      	add	r8, r3
 800120e:	4643      	mov	r3, r8
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	d400      	bmi.n	8001216 <__aeabi_dadd+0x406>
 8001214:	e718      	b.n	8001048 <__aeabi_dadd+0x238>
 8001216:	4bb1      	ldr	r3, [pc, #708]	; (80014dc <__aeabi_dadd+0x6cc>)
 8001218:	3601      	adds	r6, #1
 800121a:	429e      	cmp	r6, r3
 800121c:	d049      	beq.n	80012b2 <__aeabi_dadd+0x4a2>
 800121e:	4642      	mov	r2, r8
 8001220:	4baf      	ldr	r3, [pc, #700]	; (80014e0 <__aeabi_dadd+0x6d0>)
 8001222:	2101      	movs	r1, #1
 8001224:	401a      	ands	r2, r3
 8001226:	0013      	movs	r3, r2
 8001228:	086a      	lsrs	r2, r5, #1
 800122a:	400d      	ands	r5, r1
 800122c:	4315      	orrs	r5, r2
 800122e:	07d9      	lsls	r1, r3, #31
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	4698      	mov	r8, r3
 8001234:	430d      	orrs	r5, r1
 8001236:	e665      	b.n	8000f04 <__aeabi_dadd+0xf4>
 8001238:	0018      	movs	r0, r3
 800123a:	3e1f      	subs	r6, #31
 800123c:	40f0      	lsrs	r0, r6
 800123e:	2a20      	cmp	r2, #32
 8001240:	d003      	beq.n	800124a <__aeabi_dadd+0x43a>
 8001242:	2140      	movs	r1, #64	; 0x40
 8001244:	1a8a      	subs	r2, r1, r2
 8001246:	4093      	lsls	r3, r2
 8001248:	431d      	orrs	r5, r3
 800124a:	1e69      	subs	r1, r5, #1
 800124c:	418d      	sbcs	r5, r1
 800124e:	2300      	movs	r3, #0
 8001250:	2600      	movs	r6, #0
 8001252:	4698      	mov	r8, r3
 8001254:	4305      	orrs	r5, r0
 8001256:	e6f7      	b.n	8001048 <__aeabi_dadd+0x238>
 8001258:	0011      	movs	r1, r2
 800125a:	4665      	mov	r5, ip
 800125c:	3920      	subs	r1, #32
 800125e:	40cd      	lsrs	r5, r1
 8001260:	2a20      	cmp	r2, #32
 8001262:	d004      	beq.n	800126e <__aeabi_dadd+0x45e>
 8001264:	2040      	movs	r0, #64	; 0x40
 8001266:	4661      	mov	r1, ip
 8001268:	1a82      	subs	r2, r0, r2
 800126a:	4091      	lsls	r1, r2
 800126c:	430f      	orrs	r7, r1
 800126e:	0039      	movs	r1, r7
 8001270:	1e4f      	subs	r7, r1, #1
 8001272:	41b9      	sbcs	r1, r7
 8001274:	4329      	orrs	r1, r5
 8001276:	e60f      	b.n	8000e98 <__aeabi_dadd+0x88>
 8001278:	464a      	mov	r2, r9
 800127a:	4313      	orrs	r3, r2
 800127c:	001d      	movs	r5, r3
 800127e:	1e6b      	subs	r3, r5, #1
 8001280:	419d      	sbcs	r5, r3
 8001282:	1b7d      	subs	r5, r7, r5
 8001284:	42af      	cmp	r7, r5
 8001286:	419b      	sbcs	r3, r3
 8001288:	4662      	mov	r2, ip
 800128a:	425b      	negs	r3, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4698      	mov	r8, r3
 8001290:	4654      	mov	r4, sl
 8001292:	000e      	movs	r6, r1
 8001294:	e607      	b.n	8000ea6 <__aeabi_dadd+0x96>
 8001296:	4648      	mov	r0, r9
 8001298:	4318      	orrs	r0, r3
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x48e>
 800129c:	e0b3      	b.n	8001406 <__aeabi_dadd+0x5f6>
 800129e:	1e50      	subs	r0, r2, #1
 80012a0:	2a01      	cmp	r2, #1
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dadd+0x496>
 80012a4:	e10d      	b.n	80014c2 <__aeabi_dadd+0x6b2>
 80012a6:	4d8d      	ldr	r5, [pc, #564]	; (80014dc <__aeabi_dadd+0x6cc>)
 80012a8:	42aa      	cmp	r2, r5
 80012aa:	d100      	bne.n	80012ae <__aeabi_dadd+0x49e>
 80012ac:	e0a5      	b.n	80013fa <__aeabi_dadd+0x5ea>
 80012ae:	0002      	movs	r2, r0
 80012b0:	e710      	b.n	80010d4 <__aeabi_dadd+0x2c4>
 80012b2:	0032      	movs	r2, r6
 80012b4:	2300      	movs	r3, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	e644      	b.n	8000f44 <__aeabi_dadd+0x134>
 80012ba:	2120      	movs	r1, #32
 80012bc:	0038      	movs	r0, r7
 80012be:	1a89      	subs	r1, r1, r2
 80012c0:	4665      	mov	r5, ip
 80012c2:	408f      	lsls	r7, r1
 80012c4:	408d      	lsls	r5, r1
 80012c6:	40d0      	lsrs	r0, r2
 80012c8:	1e79      	subs	r1, r7, #1
 80012ca:	418f      	sbcs	r7, r1
 80012cc:	4305      	orrs	r5, r0
 80012ce:	433d      	orrs	r5, r7
 80012d0:	4667      	mov	r7, ip
 80012d2:	40d7      	lsrs	r7, r2
 80012d4:	19db      	adds	r3, r3, r7
 80012d6:	e794      	b.n	8001202 <__aeabi_dadd+0x3f2>
 80012d8:	4a80      	ldr	r2, [pc, #512]	; (80014dc <__aeabi_dadd+0x6cc>)
 80012da:	4290      	cmp	r0, r2
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x4d0>
 80012de:	e0ec      	b.n	80014ba <__aeabi_dadd+0x6aa>
 80012e0:	0039      	movs	r1, r7
 80012e2:	4449      	add	r1, r9
 80012e4:	4549      	cmp	r1, r9
 80012e6:	4192      	sbcs	r2, r2
 80012e8:	4463      	add	r3, ip
 80012ea:	4252      	negs	r2, r2
 80012ec:	189b      	adds	r3, r3, r2
 80012ee:	07dd      	lsls	r5, r3, #31
 80012f0:	0849      	lsrs	r1, r1, #1
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	4698      	mov	r8, r3
 80012f6:	0006      	movs	r6, r0
 80012f8:	430d      	orrs	r5, r1
 80012fa:	e6a5      	b.n	8001048 <__aeabi_dadd+0x238>
 80012fc:	464a      	mov	r2, r9
 80012fe:	1abd      	subs	r5, r7, r2
 8001300:	42af      	cmp	r7, r5
 8001302:	4189      	sbcs	r1, r1
 8001304:	4662      	mov	r2, ip
 8001306:	4249      	negs	r1, r1
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	1a5b      	subs	r3, r3, r1
 800130c:	4698      	mov	r8, r3
 800130e:	4654      	mov	r4, sl
 8001310:	e5d1      	b.n	8000eb6 <__aeabi_dadd+0xa6>
 8001312:	076c      	lsls	r4, r5, #29
 8001314:	08f9      	lsrs	r1, r7, #3
 8001316:	4321      	orrs	r1, r4
 8001318:	08eb      	lsrs	r3, r5, #3
 800131a:	0004      	movs	r4, r0
 800131c:	e69d      	b.n	800105a <__aeabi_dadd+0x24a>
 800131e:	464a      	mov	r2, r9
 8001320:	431a      	orrs	r2, r3
 8001322:	d175      	bne.n	8001410 <__aeabi_dadd+0x600>
 8001324:	4661      	mov	r1, ip
 8001326:	4339      	orrs	r1, r7
 8001328:	d114      	bne.n	8001354 <__aeabi_dadd+0x544>
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	2400      	movs	r4, #0
 800132e:	031b      	lsls	r3, r3, #12
 8001330:	e6bc      	b.n	80010ac <__aeabi_dadd+0x29c>
 8001332:	464a      	mov	r2, r9
 8001334:	1bd5      	subs	r5, r2, r7
 8001336:	45a9      	cmp	r9, r5
 8001338:	4189      	sbcs	r1, r1
 800133a:	4662      	mov	r2, ip
 800133c:	4249      	negs	r1, r1
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	1a5b      	subs	r3, r3, r1
 8001342:	4698      	mov	r8, r3
 8001344:	2601      	movs	r6, #1
 8001346:	e5ae      	b.n	8000ea6 <__aeabi_dadd+0x96>
 8001348:	464a      	mov	r2, r9
 800134a:	08d1      	lsrs	r1, r2, #3
 800134c:	075a      	lsls	r2, r3, #29
 800134e:	4311      	orrs	r1, r2
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	e6a7      	b.n	80010a4 <__aeabi_dadd+0x294>
 8001354:	4663      	mov	r3, ip
 8001356:	08f9      	lsrs	r1, r7, #3
 8001358:	075a      	lsls	r2, r3, #29
 800135a:	4654      	mov	r4, sl
 800135c:	4311      	orrs	r1, r2
 800135e:	08db      	lsrs	r3, r3, #3
 8001360:	e6a0      	b.n	80010a4 <__aeabi_dadd+0x294>
 8001362:	464a      	mov	r2, r9
 8001364:	4313      	orrs	r3, r2
 8001366:	001d      	movs	r5, r3
 8001368:	1e6b      	subs	r3, r5, #1
 800136a:	419d      	sbcs	r5, r3
 800136c:	e6c7      	b.n	80010fe <__aeabi_dadd+0x2ee>
 800136e:	0014      	movs	r4, r2
 8001370:	001e      	movs	r6, r3
 8001372:	3c20      	subs	r4, #32
 8001374:	40e6      	lsrs	r6, r4
 8001376:	2a20      	cmp	r2, #32
 8001378:	d005      	beq.n	8001386 <__aeabi_dadd+0x576>
 800137a:	2440      	movs	r4, #64	; 0x40
 800137c:	1aa2      	subs	r2, r4, r2
 800137e:	4093      	lsls	r3, r2
 8001380:	464a      	mov	r2, r9
 8001382:	431a      	orrs	r2, r3
 8001384:	4691      	mov	r9, r2
 8001386:	464d      	mov	r5, r9
 8001388:	1e6b      	subs	r3, r5, #1
 800138a:	419d      	sbcs	r5, r3
 800138c:	4335      	orrs	r5, r6
 800138e:	e778      	b.n	8001282 <__aeabi_dadd+0x472>
 8001390:	464a      	mov	r2, r9
 8001392:	431a      	orrs	r2, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_dadd+0x588>
 8001396:	e66b      	b.n	8001070 <__aeabi_dadd+0x260>
 8001398:	076b      	lsls	r3, r5, #29
 800139a:	08f9      	lsrs	r1, r7, #3
 800139c:	4319      	orrs	r1, r3
 800139e:	08eb      	lsrs	r3, r5, #3
 80013a0:	e680      	b.n	80010a4 <__aeabi_dadd+0x294>
 80013a2:	4661      	mov	r1, ip
 80013a4:	4339      	orrs	r1, r7
 80013a6:	d054      	beq.n	8001452 <__aeabi_dadd+0x642>
 80013a8:	4663      	mov	r3, ip
 80013aa:	08f9      	lsrs	r1, r7, #3
 80013ac:	075c      	lsls	r4, r3, #29
 80013ae:	4321      	orrs	r1, r4
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	0004      	movs	r4, r0
 80013b4:	e654      	b.n	8001060 <__aeabi_dadd+0x250>
 80013b6:	464a      	mov	r2, r9
 80013b8:	1abd      	subs	r5, r7, r2
 80013ba:	42af      	cmp	r7, r5
 80013bc:	4189      	sbcs	r1, r1
 80013be:	4662      	mov	r2, ip
 80013c0:	4249      	negs	r1, r1
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	1a5b      	subs	r3, r3, r1
 80013c6:	4698      	mov	r8, r3
 80013c8:	0004      	movs	r4, r0
 80013ca:	2601      	movs	r6, #1
 80013cc:	e56b      	b.n	8000ea6 <__aeabi_dadd+0x96>
 80013ce:	464a      	mov	r2, r9
 80013d0:	1bd5      	subs	r5, r2, r7
 80013d2:	45a9      	cmp	r9, r5
 80013d4:	4189      	sbcs	r1, r1
 80013d6:	4662      	mov	r2, ip
 80013d8:	4249      	negs	r1, r1
 80013da:	1a9a      	subs	r2, r3, r2
 80013dc:	1a52      	subs	r2, r2, r1
 80013de:	4690      	mov	r8, r2
 80013e0:	0212      	lsls	r2, r2, #8
 80013e2:	d532      	bpl.n	800144a <__aeabi_dadd+0x63a>
 80013e4:	464a      	mov	r2, r9
 80013e6:	1abd      	subs	r5, r7, r2
 80013e8:	42af      	cmp	r7, r5
 80013ea:	4189      	sbcs	r1, r1
 80013ec:	4662      	mov	r2, ip
 80013ee:	4249      	negs	r1, r1
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	1a5b      	subs	r3, r3, r1
 80013f4:	4698      	mov	r8, r3
 80013f6:	0004      	movs	r4, r0
 80013f8:	e584      	b.n	8000f04 <__aeabi_dadd+0xf4>
 80013fa:	4663      	mov	r3, ip
 80013fc:	08f9      	lsrs	r1, r7, #3
 80013fe:	075a      	lsls	r2, r3, #29
 8001400:	4311      	orrs	r1, r2
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	e64e      	b.n	80010a4 <__aeabi_dadd+0x294>
 8001406:	08f9      	lsrs	r1, r7, #3
 8001408:	0768      	lsls	r0, r5, #29
 800140a:	4301      	orrs	r1, r0
 800140c:	08eb      	lsrs	r3, r5, #3
 800140e:	e624      	b.n	800105a <__aeabi_dadd+0x24a>
 8001410:	4662      	mov	r2, ip
 8001412:	433a      	orrs	r2, r7
 8001414:	d100      	bne.n	8001418 <__aeabi_dadd+0x608>
 8001416:	e698      	b.n	800114a <__aeabi_dadd+0x33a>
 8001418:	464a      	mov	r2, r9
 800141a:	08d1      	lsrs	r1, r2, #3
 800141c:	075a      	lsls	r2, r3, #29
 800141e:	4311      	orrs	r1, r2
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	031b      	lsls	r3, r3, #12
 8001426:	421a      	tst	r2, r3
 8001428:	d008      	beq.n	800143c <__aeabi_dadd+0x62c>
 800142a:	4660      	mov	r0, ip
 800142c:	08c5      	lsrs	r5, r0, #3
 800142e:	421d      	tst	r5, r3
 8001430:	d104      	bne.n	800143c <__aeabi_dadd+0x62c>
 8001432:	4654      	mov	r4, sl
 8001434:	002a      	movs	r2, r5
 8001436:	08f9      	lsrs	r1, r7, #3
 8001438:	0743      	lsls	r3, r0, #29
 800143a:	4319      	orrs	r1, r3
 800143c:	0f4b      	lsrs	r3, r1, #29
 800143e:	00c9      	lsls	r1, r1, #3
 8001440:	075b      	lsls	r3, r3, #29
 8001442:	08c9      	lsrs	r1, r1, #3
 8001444:	4319      	orrs	r1, r3
 8001446:	0013      	movs	r3, r2
 8001448:	e62c      	b.n	80010a4 <__aeabi_dadd+0x294>
 800144a:	4641      	mov	r1, r8
 800144c:	4329      	orrs	r1, r5
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x642>
 8001450:	e5fa      	b.n	8001048 <__aeabi_dadd+0x238>
 8001452:	2300      	movs	r3, #0
 8001454:	000a      	movs	r2, r1
 8001456:	2400      	movs	r4, #0
 8001458:	e602      	b.n	8001060 <__aeabi_dadd+0x250>
 800145a:	076b      	lsls	r3, r5, #29
 800145c:	08f9      	lsrs	r1, r7, #3
 800145e:	4319      	orrs	r1, r3
 8001460:	08eb      	lsrs	r3, r5, #3
 8001462:	e5fd      	b.n	8001060 <__aeabi_dadd+0x250>
 8001464:	4663      	mov	r3, ip
 8001466:	08f9      	lsrs	r1, r7, #3
 8001468:	075b      	lsls	r3, r3, #29
 800146a:	4319      	orrs	r1, r3
 800146c:	4663      	mov	r3, ip
 800146e:	0004      	movs	r4, r0
 8001470:	08db      	lsrs	r3, r3, #3
 8001472:	e617      	b.n	80010a4 <__aeabi_dadd+0x294>
 8001474:	003d      	movs	r5, r7
 8001476:	444d      	add	r5, r9
 8001478:	4463      	add	r3, ip
 800147a:	454d      	cmp	r5, r9
 800147c:	4189      	sbcs	r1, r1
 800147e:	4698      	mov	r8, r3
 8001480:	4249      	negs	r1, r1
 8001482:	4488      	add	r8, r1
 8001484:	4643      	mov	r3, r8
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	d400      	bmi.n	800148c <__aeabi_dadd+0x67c>
 800148a:	e5dd      	b.n	8001048 <__aeabi_dadd+0x238>
 800148c:	4642      	mov	r2, r8
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <__aeabi_dadd+0x6d0>)
 8001490:	2601      	movs	r6, #1
 8001492:	401a      	ands	r2, r3
 8001494:	4690      	mov	r8, r2
 8001496:	e5d7      	b.n	8001048 <__aeabi_dadd+0x238>
 8001498:	0010      	movs	r0, r2
 800149a:	001e      	movs	r6, r3
 800149c:	3820      	subs	r0, #32
 800149e:	40c6      	lsrs	r6, r0
 80014a0:	2a20      	cmp	r2, #32
 80014a2:	d005      	beq.n	80014b0 <__aeabi_dadd+0x6a0>
 80014a4:	2040      	movs	r0, #64	; 0x40
 80014a6:	1a82      	subs	r2, r0, r2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	464a      	mov	r2, r9
 80014ac:	431a      	orrs	r2, r3
 80014ae:	4691      	mov	r9, r2
 80014b0:	464d      	mov	r5, r9
 80014b2:	1e6b      	subs	r3, r5, #1
 80014b4:	419d      	sbcs	r5, r3
 80014b6:	4335      	orrs	r5, r6
 80014b8:	e621      	b.n	80010fe <__aeabi_dadd+0x2ee>
 80014ba:	0002      	movs	r2, r0
 80014bc:	2300      	movs	r3, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	e540      	b.n	8000f44 <__aeabi_dadd+0x134>
 80014c2:	464a      	mov	r2, r9
 80014c4:	19d5      	adds	r5, r2, r7
 80014c6:	42bd      	cmp	r5, r7
 80014c8:	4189      	sbcs	r1, r1
 80014ca:	4463      	add	r3, ip
 80014cc:	4698      	mov	r8, r3
 80014ce:	4249      	negs	r1, r1
 80014d0:	4488      	add	r8, r1
 80014d2:	e5b3      	b.n	800103c <__aeabi_dadd+0x22c>
 80014d4:	2100      	movs	r1, #0
 80014d6:	4a01      	ldr	r2, [pc, #4]	; (80014dc <__aeabi_dadd+0x6cc>)
 80014d8:	000b      	movs	r3, r1
 80014da:	e533      	b.n	8000f44 <__aeabi_dadd+0x134>
 80014dc:	000007ff 	.word	0x000007ff
 80014e0:	ff7fffff 	.word	0xff7fffff

080014e4 <__aeabi_i2d>:
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d016      	beq.n	8001518 <__aeabi_i2d+0x34>
 80014ea:	17c3      	asrs	r3, r0, #31
 80014ec:	18c5      	adds	r5, r0, r3
 80014ee:	405d      	eors	r5, r3
 80014f0:	0fc4      	lsrs	r4, r0, #31
 80014f2:	0028      	movs	r0, r5
 80014f4:	f000 f8ae 	bl	8001654 <__clzsi2>
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <__aeabi_i2d+0x5c>)
 80014fa:	1a12      	subs	r2, r2, r0
 80014fc:	280a      	cmp	r0, #10
 80014fe:	dc16      	bgt.n	800152e <__aeabi_i2d+0x4a>
 8001500:	0003      	movs	r3, r0
 8001502:	002e      	movs	r6, r5
 8001504:	3315      	adds	r3, #21
 8001506:	409e      	lsls	r6, r3
 8001508:	230b      	movs	r3, #11
 800150a:	1a18      	subs	r0, r3, r0
 800150c:	40c5      	lsrs	r5, r0
 800150e:	0553      	lsls	r3, r2, #21
 8001510:	032d      	lsls	r5, r5, #12
 8001512:	0b2d      	lsrs	r5, r5, #12
 8001514:	0d5b      	lsrs	r3, r3, #21
 8001516:	e003      	b.n	8001520 <__aeabi_i2d+0x3c>
 8001518:	2400      	movs	r4, #0
 800151a:	2300      	movs	r3, #0
 800151c:	2500      	movs	r5, #0
 800151e:	2600      	movs	r6, #0
 8001520:	051b      	lsls	r3, r3, #20
 8001522:	432b      	orrs	r3, r5
 8001524:	07e4      	lsls	r4, r4, #31
 8001526:	4323      	orrs	r3, r4
 8001528:	0030      	movs	r0, r6
 800152a:	0019      	movs	r1, r3
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	380b      	subs	r0, #11
 8001530:	4085      	lsls	r5, r0
 8001532:	0553      	lsls	r3, r2, #21
 8001534:	032d      	lsls	r5, r5, #12
 8001536:	2600      	movs	r6, #0
 8001538:	0b2d      	lsrs	r5, r5, #12
 800153a:	0d5b      	lsrs	r3, r3, #21
 800153c:	e7f0      	b.n	8001520 <__aeabi_i2d+0x3c>
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	0000041e 	.word	0x0000041e

08001544 <__aeabi_d2f>:
 8001544:	0002      	movs	r2, r0
 8001546:	004b      	lsls	r3, r1, #1
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	0308      	lsls	r0, r1, #12
 800154c:	0d5b      	lsrs	r3, r3, #21
 800154e:	4e3d      	ldr	r6, [pc, #244]	; (8001644 <__aeabi_d2f+0x100>)
 8001550:	0fcc      	lsrs	r4, r1, #31
 8001552:	0a40      	lsrs	r0, r0, #9
 8001554:	0f51      	lsrs	r1, r2, #29
 8001556:	1c5f      	adds	r7, r3, #1
 8001558:	4308      	orrs	r0, r1
 800155a:	00d5      	lsls	r5, r2, #3
 800155c:	4237      	tst	r7, r6
 800155e:	d00a      	beq.n	8001576 <__aeabi_d2f+0x32>
 8001560:	4939      	ldr	r1, [pc, #228]	; (8001648 <__aeabi_d2f+0x104>)
 8001562:	185e      	adds	r6, r3, r1
 8001564:	2efe      	cmp	r6, #254	; 0xfe
 8001566:	dd16      	ble.n	8001596 <__aeabi_d2f+0x52>
 8001568:	23ff      	movs	r3, #255	; 0xff
 800156a:	2100      	movs	r1, #0
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	430b      	orrs	r3, r1
 8001570:	07e0      	lsls	r0, r4, #31
 8001572:	4318      	orrs	r0, r3
 8001574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <__aeabi_d2f+0x44>
 800157a:	4328      	orrs	r0, r5
 800157c:	d027      	beq.n	80015ce <__aeabi_d2f+0x8a>
 800157e:	2105      	movs	r1, #5
 8001580:	0189      	lsls	r1, r1, #6
 8001582:	0a49      	lsrs	r1, r1, #9
 8001584:	b2db      	uxtb	r3, r3
 8001586:	e7f1      	b.n	800156c <__aeabi_d2f+0x28>
 8001588:	4305      	orrs	r5, r0
 800158a:	d0ed      	beq.n	8001568 <__aeabi_d2f+0x24>
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	03c9      	lsls	r1, r1, #15
 8001590:	23ff      	movs	r3, #255	; 0xff
 8001592:	4301      	orrs	r1, r0
 8001594:	e7ea      	b.n	800156c <__aeabi_d2f+0x28>
 8001596:	2e00      	cmp	r6, #0
 8001598:	dd1c      	ble.n	80015d4 <__aeabi_d2f+0x90>
 800159a:	0192      	lsls	r2, r2, #6
 800159c:	0011      	movs	r1, r2
 800159e:	1e4a      	subs	r2, r1, #1
 80015a0:	4191      	sbcs	r1, r2
 80015a2:	00c0      	lsls	r0, r0, #3
 80015a4:	0f6d      	lsrs	r5, r5, #29
 80015a6:	4301      	orrs	r1, r0
 80015a8:	4329      	orrs	r1, r5
 80015aa:	074b      	lsls	r3, r1, #29
 80015ac:	d048      	beq.n	8001640 <__aeabi_d2f+0xfc>
 80015ae:	230f      	movs	r3, #15
 80015b0:	400b      	ands	r3, r1
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d000      	beq.n	80015b8 <__aeabi_d2f+0x74>
 80015b6:	3104      	adds	r1, #4
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	04db      	lsls	r3, r3, #19
 80015bc:	400b      	ands	r3, r1
 80015be:	d03f      	beq.n	8001640 <__aeabi_d2f+0xfc>
 80015c0:	1c72      	adds	r2, r6, #1
 80015c2:	2efe      	cmp	r6, #254	; 0xfe
 80015c4:	d0d0      	beq.n	8001568 <__aeabi_d2f+0x24>
 80015c6:	0189      	lsls	r1, r1, #6
 80015c8:	0a49      	lsrs	r1, r1, #9
 80015ca:	b2d3      	uxtb	r3, r2
 80015cc:	e7ce      	b.n	800156c <__aeabi_d2f+0x28>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	e7cb      	b.n	800156c <__aeabi_d2f+0x28>
 80015d4:	0032      	movs	r2, r6
 80015d6:	3217      	adds	r2, #23
 80015d8:	db22      	blt.n	8001620 <__aeabi_d2f+0xdc>
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	221e      	movs	r2, #30
 80015de:	0409      	lsls	r1, r1, #16
 80015e0:	4308      	orrs	r0, r1
 80015e2:	1b92      	subs	r2, r2, r6
 80015e4:	2a1f      	cmp	r2, #31
 80015e6:	dd1d      	ble.n	8001624 <__aeabi_d2f+0xe0>
 80015e8:	2102      	movs	r1, #2
 80015ea:	4249      	negs	r1, r1
 80015ec:	1b8e      	subs	r6, r1, r6
 80015ee:	0001      	movs	r1, r0
 80015f0:	40f1      	lsrs	r1, r6
 80015f2:	000e      	movs	r6, r1
 80015f4:	2a20      	cmp	r2, #32
 80015f6:	d004      	beq.n	8001602 <__aeabi_d2f+0xbe>
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <__aeabi_d2f+0x108>)
 80015fa:	4694      	mov	ip, r2
 80015fc:	4463      	add	r3, ip
 80015fe:	4098      	lsls	r0, r3
 8001600:	4305      	orrs	r5, r0
 8001602:	0029      	movs	r1, r5
 8001604:	1e4d      	subs	r5, r1, #1
 8001606:	41a9      	sbcs	r1, r5
 8001608:	4331      	orrs	r1, r6
 800160a:	2600      	movs	r6, #0
 800160c:	074b      	lsls	r3, r1, #29
 800160e:	d1ce      	bne.n	80015ae <__aeabi_d2f+0x6a>
 8001610:	2080      	movs	r0, #128	; 0x80
 8001612:	000b      	movs	r3, r1
 8001614:	04c0      	lsls	r0, r0, #19
 8001616:	2201      	movs	r2, #1
 8001618:	4003      	ands	r3, r0
 800161a:	4201      	tst	r1, r0
 800161c:	d1d3      	bne.n	80015c6 <__aeabi_d2f+0x82>
 800161e:	e7af      	b.n	8001580 <__aeabi_d2f+0x3c>
 8001620:	2300      	movs	r3, #0
 8001622:	e7ac      	b.n	800157e <__aeabi_d2f+0x3a>
 8001624:	490a      	ldr	r1, [pc, #40]	; (8001650 <__aeabi_d2f+0x10c>)
 8001626:	468c      	mov	ip, r1
 8001628:	0029      	movs	r1, r5
 800162a:	4463      	add	r3, ip
 800162c:	40d1      	lsrs	r1, r2
 800162e:	409d      	lsls	r5, r3
 8001630:	000a      	movs	r2, r1
 8001632:	0029      	movs	r1, r5
 8001634:	4098      	lsls	r0, r3
 8001636:	1e4d      	subs	r5, r1, #1
 8001638:	41a9      	sbcs	r1, r5
 800163a:	4301      	orrs	r1, r0
 800163c:	4311      	orrs	r1, r2
 800163e:	e7e4      	b.n	800160a <__aeabi_d2f+0xc6>
 8001640:	0033      	movs	r3, r6
 8001642:	e79d      	b.n	8001580 <__aeabi_d2f+0x3c>
 8001644:	000007fe 	.word	0x000007fe
 8001648:	fffffc80 	.word	0xfffffc80
 800164c:	fffffca2 	.word	0xfffffca2
 8001650:	fffffc82 	.word	0xfffffc82

08001654 <__clzsi2>:
 8001654:	211c      	movs	r1, #28
 8001656:	2301      	movs	r3, #1
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	4298      	cmp	r0, r3
 800165c:	d301      	bcc.n	8001662 <__clzsi2+0xe>
 800165e:	0c00      	lsrs	r0, r0, #16
 8001660:	3910      	subs	r1, #16
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	4298      	cmp	r0, r3
 8001666:	d301      	bcc.n	800166c <__clzsi2+0x18>
 8001668:	0a00      	lsrs	r0, r0, #8
 800166a:	3908      	subs	r1, #8
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	4298      	cmp	r0, r3
 8001670:	d301      	bcc.n	8001676 <__clzsi2+0x22>
 8001672:	0900      	lsrs	r0, r0, #4
 8001674:	3904      	subs	r1, #4
 8001676:	a202      	add	r2, pc, #8	; (adr r2, 8001680 <__clzsi2+0x2c>)
 8001678:	5c10      	ldrb	r0, [r2, r0]
 800167a:	1840      	adds	r0, r0, r1
 800167c:	4770      	bx	lr
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	02020304 	.word	0x02020304
 8001684:	01010101 	.word	0x01010101
	...

08001690 <__clzdi2>:
 8001690:	b510      	push	{r4, lr}
 8001692:	2900      	cmp	r1, #0
 8001694:	d103      	bne.n	800169e <__clzdi2+0xe>
 8001696:	f7ff ffdd 	bl	8001654 <__clzsi2>
 800169a:	3020      	adds	r0, #32
 800169c:	e002      	b.n	80016a4 <__clzdi2+0x14>
 800169e:	1c08      	adds	r0, r1, #0
 80016a0:	f7ff ffd8 	bl	8001654 <__clzsi2>
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)

080016a8 <ASNeighborListAdd>:
}

/********************************************/

void ASNeighborListAdd(ASNeighborList list, void *node, float edgeCost)
{
 80016a8:	b570      	push	{r4, r5, r6, lr}
    if (list->count == list->capacity) {
 80016aa:	6883      	ldr	r3, [r0, #8]
{
 80016ac:	1c16      	adds	r6, r2, #0
    if (list->count == list->capacity) {
 80016ae:	6842      	ldr	r2, [r0, #4]
{
 80016b0:	0004      	movs	r4, r0
 80016b2:	000d      	movs	r5, r1
    if (list->count == list->capacity) {
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00e      	beq.n	80016d6 <ASNeighborListAdd+0x2e>
 80016b8:	6900      	ldr	r0, [r0, #16]
        list->capacity = 1 + (list->capacity * 2);
        list->costs = realloc(list->costs, sizeof(float) * list->capacity);
        list->nodeKeys = realloc(list->nodeKeys, list->source->nodeSize * list->capacity);
    }
    list->costs[list->count] = edgeCost;
 80016ba:	68e1      	ldr	r1, [r4, #12]
 80016bc:	009a      	lsls	r2, r3, #2
 80016be:	5056      	str	r6, [r2, r1]
    memcpy(list->nodeKeys + (list->count * list->source->nodeSize), node, list->source->nodeSize);
 80016c0:	6822      	ldr	r2, [r4, #0]
 80016c2:	0029      	movs	r1, r5
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	4353      	muls	r3, r2
 80016c8:	18c0      	adds	r0, r0, r3
 80016ca:	f004 fa61 	bl	8005b90 <memcpy>
    list->count++;
 80016ce:	68a3      	ldr	r3, [r4, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60a3      	str	r3, [r4, #8]
}
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
        list->capacity = 1 + (list->capacity * 2);
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	3301      	adds	r3, #1
 80016da:	6043      	str	r3, [r0, #4]
        list->costs = realloc(list->costs, sizeof(float) * list->capacity);
 80016dc:	0099      	lsls	r1, r3, #2
 80016de:	68c0      	ldr	r0, [r0, #12]
 80016e0:	f004 fe14 	bl	800630c <realloc>
        list->nodeKeys = realloc(list->nodeKeys, list->source->nodeSize * list->capacity);
 80016e4:	6823      	ldr	r3, [r4, #0]
        list->costs = realloc(list->costs, sizeof(float) * list->capacity);
 80016e6:	60e0      	str	r0, [r4, #12]
        list->nodeKeys = realloc(list->nodeKeys, list->source->nodeSize * list->capacity);
 80016e8:	6819      	ldr	r1, [r3, #0]
 80016ea:	6863      	ldr	r3, [r4, #4]
 80016ec:	6920      	ldr	r0, [r4, #16]
 80016ee:	4359      	muls	r1, r3
 80016f0:	f004 fe0c 	bl	800630c <realloc>
 80016f4:	68a3      	ldr	r3, [r4, #8]
 80016f6:	6120      	str	r0, [r4, #16]
 80016f8:	e7df      	b.n	80016ba <ASNeighborListAdd+0x12>
 80016fa:	46c0      	nop			; (mov r8, r8)

080016fc <ASPathCreate>:

ASPath ASPathCreate(const ASPathNodeSource *source, void *context, void *startNodeKey, void *goalNodeKey)
{
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	46de      	mov	lr, fp
 8001700:	4657      	mov	r7, sl
 8001702:	4645      	mov	r5, r8
 8001704:	464e      	mov	r6, r9
 8001706:	b5e0      	push	{r5, r6, r7, lr}
 8001708:	b091      	sub	sp, #68	; 0x44
 800170a:	4683      	mov	fp, r0
 800170c:	000d      	movs	r5, r1
 800170e:	1e17      	subs	r7, r2, #0
 8001710:	9106      	str	r1, [sp, #24]
 8001712:	930c      	str	r3, [sp, #48]	; 0x30
    if (!startNodeKey || !source || !source->nodeNeighbors || source->nodeSize == 0) {
 8001714:	d101      	bne.n	800171a <ASPathCreate+0x1e>
 8001716:	f000 fcd3 	bl	80020c0 <ASPathCreate+0x9c4>
 800171a:	2800      	cmp	r0, #0
 800171c:	d101      	bne.n	8001722 <ASPathCreate+0x26>
 800171e:	f000 fccf 	bl	80020c0 <ASPathCreate+0x9c4>
 8001722:	6843      	ldr	r3, [r0, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <ASPathCreate+0x30>
 8001728:	f000 fcca 	bl	80020c0 <ASPathCreate+0x9c4>
 800172c:	6804      	ldr	r4, [r0, #0]
 800172e:	2c00      	cmp	r4, #0
 8001730:	d101      	bne.n	8001736 <ASPathCreate+0x3a>
 8001732:	f000 fcc5 	bl	80020c0 <ASPathCreate+0x9c4>
    VisitedNodes nodes = calloc(1, sizeof(struct __VisitedNodes));
 8001736:	2124      	movs	r1, #36	; 0x24
 8001738:	2001      	movs	r0, #1
 800173a:	f004 f9c3 	bl	8005ac4 <calloc>
    nodes->source = source;
 800173e:	465a      	mov	r2, fp
 8001740:	0003      	movs	r3, r0
    VisitedNodes nodes = calloc(1, sizeof(struct __VisitedNodes));
 8001742:	4681      	mov	r9, r0
    nodes->context = context;
 8001744:	c324      	stmia	r3!, {r2, r5}
    ASNeighborList list = calloc(1, sizeof(struct __ASNeighborList));
 8001746:	2114      	movs	r1, #20
 8001748:	2001      	movs	r0, #1
 800174a:	f004 f9bb 	bl	8005ac4 <calloc>
    if (nodes->nodeRecordsCount > 0) {
 800174e:	464b      	mov	r3, r9
    list->source = source;
 8001750:	465a      	mov	r2, fp
    if (nodes->nodeRecordsCount > 0) {
 8001752:	68db      	ldr	r3, [r3, #12]
    ASNeighborList list = calloc(1, sizeof(struct __ASNeighborList));
 8001754:	900d      	str	r0, [sp, #52]	; 0x34
    if (nodes->nodeRecordsCount > 0) {
 8001756:	4698      	mov	r8, r3
    list->source = source;
 8001758:	6002      	str	r2, [r0, #0]
    if (nodes->nodeRecordsCount > 0) {
 800175a:	2b00      	cmp	r3, #0
 800175c:	d000      	beq.n	8001760 <ASPathCreate+0x64>
 800175e:	e170      	b.n	8001a42 <ASPathCreate+0x346>
 8001760:	464b      	mov	r3, r9
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	2400      	movs	r4, #0
 8001766:	9300      	str	r3, [sp, #0]
    size_t first = 0;
 8001768:	2300      	movs	r3, #0
    if (nodes->nodeRecordsCount > 0) {
 800176a:	2604      	movs	r6, #4
    size_t first = 0;
 800176c:	9302      	str	r3, [sp, #8]
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 800176e:	464b      	mov	r3, r9
 8001770:	689d      	ldr	r5, [r3, #8]
 8001772:	45a8      	cmp	r8, r5
 8001774:	d101      	bne.n	800177a <ASPathCreate+0x7e>
 8001776:	f000 fd7e 	bl	8002276 <ASPathCreate+0xb7a>
 800177a:	1e6b      	subs	r3, r5, #1
 800177c:	9303      	str	r3, [sp, #12]
 800177e:	464b      	mov	r3, r9
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	9301      	str	r3, [sp, #4]
    nodes->nodeRecordsCount++;
 8001784:	2301      	movs	r3, #1
 8001786:	4443      	add	r3, r8
 8001788:	469a      	mov	sl, r3
 800178a:	464b      	mov	r3, r9
 800178c:	4652      	mov	r2, sl
 800178e:	60da      	str	r2, [r3, #12]
    memmove(&nodes->nodeRecordsIndex[first+1], &nodes->nodeRecordsIndex[first], (nodes->nodeRecordsCapacity - first - 1) * sizeof(size_t));
 8001790:	9b01      	ldr	r3, [sp, #4]
 8001792:	9902      	ldr	r1, [sp, #8]
 8001794:	469c      	mov	ip, r3
 8001796:	9a03      	ldr	r2, [sp, #12]
 8001798:	4464      	add	r4, ip
 800179a:	1a52      	subs	r2, r2, r1
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	0021      	movs	r1, r4
 80017a0:	1998      	adds	r0, r3, r6
 80017a2:	f004 f9fe 	bl	8005ba2 <memmove>
    nodes->nodeRecordsIndex[first] = node.index;
 80017a6:	4643      	mov	r3, r8
 80017a8:	6023      	str	r3, [r4, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80017aa:	465b      	mov	r3, fp
 80017ac:	681c      	ldr	r4, [r3, #0]
 80017ae:	4643      	mov	r3, r8
 80017b0:	3414      	adds	r4, #20
 80017b2:	435c      	muls	r4, r3
 80017b4:	9b00      	ldr	r3, [sp, #0]
    memset(record, 0, sizeof(NodeRecord));
 80017b6:	2214      	movs	r2, #20
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80017b8:	469c      	mov	ip, r3
 80017ba:	4464      	add	r4, ip
    memset(record, 0, sizeof(NodeRecord));
 80017bc:	2100      	movs	r1, #0
 80017be:	0020      	movs	r0, r4
 80017c0:	f004 fa02 	bl	8005bc8 <memset>
    memcpy(record->nodeKey, nodeKey, nodes->source->nodeSize);
 80017c4:	465b      	mov	r3, fp
 80017c6:	0020      	movs	r0, r4
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	0039      	movs	r1, r7
 80017cc:	3014      	adds	r0, #20
 80017ce:	f004 f9df 	bl	8005b90 <memcpy>
    if (!nodeKey) {
 80017d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <ASPathCreate+0xe0>
 80017d8:	f000 fd40 	bl	800225c <ASPathCreate+0xb60>
    if (nodes->nodeRecordsCount > 0) {
 80017dc:	4653      	mov	r3, sl
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <ASPathCreate+0xea>
 80017e2:	f000 fcc7 	bl	8002174 <ASPathCreate+0xa78>
 80017e6:	2300      	movs	r3, #0
    size_t first = 0;
 80017e8:	2600      	movs	r6, #0
 80017ea:	2404      	movs	r4, #4
    if (nodes->nodeRecordsCount > 0) {
 80017ec:	9309      	str	r3, [sp, #36]	; 0x24
    return node;
 80017ee:	3b01      	subs	r3, #1
 80017f0:	9304      	str	r3, [sp, #16]
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 80017f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017f4:	42ab      	cmp	r3, r5
 80017f6:	d101      	bne.n	80017fc <ASPathCreate+0x100>
 80017f8:	f000 fd56 	bl	80022a8 <ASPathCreate+0xbac>
 80017fc:	464b      	mov	r3, r9
 80017fe:	6958      	ldr	r0, [r3, #20]
 8001800:	3d01      	subs	r5, #1
    nodes->nodeRecordsCount++;
 8001802:	464a      	mov	r2, r9
 8001804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001806:	3301      	adds	r3, #1
 8001808:	60d3      	str	r3, [r2, #12]
    memmove(&nodes->nodeRecordsIndex[first+1], &nodes->nodeRecordsIndex[first], (nodes->nodeRecordsCapacity - first - 1) * sizeof(size_t));
 800180a:	4652      	mov	r2, sl
 800180c:	1887      	adds	r7, r0, r2
 800180e:	1baa      	subs	r2, r5, r6
 8001810:	0039      	movs	r1, r7
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	1900      	adds	r0, r0, r4
 8001816:	f004 f9c4 	bl	8005ba2 <memmove>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800181a:	465a      	mov	r2, fp
    nodes->nodeRecordsIndex[first] = node.index;
 800181c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    memset(record, 0, sizeof(NodeRecord));
 800181e:	2100      	movs	r1, #0
    nodes->nodeRecordsIndex[first] = node.index;
 8001820:	603b      	str	r3, [r7, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001822:	6814      	ldr	r4, [r2, #0]
    memset(record, 0, sizeof(NodeRecord));
 8001824:	2214      	movs	r2, #20
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001826:	3414      	adds	r4, #20
 8001828:	435c      	muls	r4, r3
 800182a:	9b00      	ldr	r3, [sp, #0]
 800182c:	469c      	mov	ip, r3
 800182e:	4464      	add	r4, ip
    memset(record, 0, sizeof(NodeRecord));
 8001830:	0020      	movs	r0, r4
 8001832:	f004 f9c9 	bl	8005bc8 <memset>
    memcpy(record->nodeKey, nodeKey, nodes->source->nodeSize);
 8001836:	0020      	movs	r0, r4
 8001838:	465b      	mov	r3, fp
 800183a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	3014      	adds	r0, #20
 8001840:	f004 f9a6 	bl	8005b90 <memcpy>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001844:	465b      	mov	r3, fp
 8001846:	681c      	ldr	r4, [r3, #0]
 8001848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800184a:	3414      	adds	r4, #20
 800184c:	4363      	muls	r3, r4
 800184e:	9a00      	ldr	r2, [sp, #0]
 8001850:	18d1      	adds	r1, r2, r3
        NodeGetRecord(n)->isGoal = 1;
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	2204      	movs	r2, #4
 8001856:	4313      	orrs	r3, r2
 8001858:	700b      	strb	r3, [r1, #0]
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 800185a:	465b      	mov	r3, fp
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <ASPathCreate+0x16a>
 8001862:	f000 fd38 	bl	80022d6 <ASPathCreate+0xbda>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001866:	9a04      	ldr	r2, [sp, #16]
    return NodeGetRecord(node)->nodeKey;
 8001868:	3114      	adds	r1, #20
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800186a:	4354      	muls	r4, r2
 800186c:	9a00      	ldr	r2, [sp, #0]
 800186e:	4694      	mov	ip, r2
 8001870:	4464      	add	r4, ip
    return NodeGetRecord(node)->nodeKey;
 8001872:	0020      	movs	r0, r4
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001874:	9a06      	ldr	r2, [sp, #24]
    return NodeGetRecord(node)->nodeKey;
 8001876:	3014      	adds	r0, #20
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001878:	4798      	blx	r3
 800187a:	465b      	mov	r3, fp
 800187c:	681c      	ldr	r4, [r3, #0]
 800187e:	464b      	mov	r3, r9
 8001880:	3414      	adds	r4, #20
 8001882:	930a      	str	r3, [sp, #40]	; 0x28
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001884:	9b04      	ldr	r3, [sp, #16]
        record->hasParent = 0;
 8001886:	2218      	movs	r2, #24
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001888:	435c      	muls	r4, r3
 800188a:	9b00      	ldr	r3, [sp, #0]
 800188c:	469c      	mov	ip, r3
 800188e:	4464      	add	r4, ip
        record->hasParent = 0;
 8001890:	7823      	ldrb	r3, [r4, #0]
    record->estimatedCost = estimatedCost;
 8001892:	6060      	str	r0, [r4, #4]
        record->hasParent = 0;
 8001894:	4393      	bics	r3, r2
 8001896:	2210      	movs	r2, #16
 8001898:	4313      	orrs	r3, r2
 800189a:	7023      	strb	r3, [r4, #0]
    if (n.nodes->openNodesCount == n.nodes->openNodesCapacity) {
 800189c:	464b      	mov	r3, r9
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	459a      	cmp	sl, r3
 80018a8:	d101      	bne.n	80018ae <ASPathCreate+0x1b2>
 80018aa:	f000 fcc0 	bl	800222e <ASPathCreate+0xb32>
 80018ae:	464b      	mov	r3, r9
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	9305      	str	r3, [sp, #20]
    n.nodes->openNodes[openIndex] = n.index;
 80018b4:	4653      	mov	r3, sl
 80018b6:	9a04      	ldr	r2, [sp, #16]
 80018b8:	009d      	lsls	r5, r3, #2
 80018ba:	9b05      	ldr	r3, [sp, #20]
 80018bc:	515a      	str	r2, [r3, r5]
    n.nodes->openNodesCount++;
 80018be:	4653      	mov	r3, sl
 80018c0:	464a      	mov	r2, r9
 80018c2:	3301      	adds	r3, #1
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	9307      	str	r3, [sp, #28]
    record->openIndex = openIndex;
 80018c8:	4653      	mov	r3, sl
    record->isOpen = 1;
 80018ca:	2202      	movs	r2, #2
    record->openIndex = openIndex;
 80018cc:	60e3      	str	r3, [r4, #12]
    record->isOpen = 1;
 80018ce:	7823      	ldrb	r3, [r4, #0]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	7023      	strb	r3, [r4, #0]
    record->cost = cost;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60a3      	str	r3, [r4, #8]
    while (index > 0) {
 80018d8:	4653      	mov	r3, sl
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <ASPathCreate+0x1e6>
 80018de:	f000 fd12 	bl	8002306 <ASPathCreate+0xc0a>
 80018e2:	465b      	mov	r3, fp
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	001c      	movs	r4, r3
 80018e8:	9303      	str	r3, [sp, #12]
 80018ea:	464b      	mov	r3, r9
 80018ec:	3414      	adds	r4, #20
 80018ee:	46a1      	mov	r9, r4
 80018f0:	9308      	str	r3, [sp, #32]
 80018f2:	002c      	movs	r4, r5
 80018f4:	e017      	b.n	8001926 <ASPathCreate+0x22a>
    if (index1 != index2) {
 80018f6:	4555      	cmp	r5, sl
 80018f8:	d013      	beq.n	8001922 <ASPathCreate+0x226>
        const size_t tempOpenIndex = record1->openIndex;
 80018fa:	68fb      	ldr	r3, [r7, #12]
        record1->openIndex = record2->openIndex;
 80018fc:	68f2      	ldr	r2, [r6, #12]
 80018fe:	60fa      	str	r2, [r7, #12]
        record2->openIndex = tempOpenIndex;
 8001900:	60f3      	str	r3, [r6, #12]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001902:	4643      	mov	r3, r8
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001904:	4642      	mov	r2, r8
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001906:	681b      	ldr	r3, [r3, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001908:	6821      	ldr	r1, [r4, #0]
 800190a:	6011      	str	r1, [r2, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 800190c:	6023      	str	r3, [r4, #0]
 800190e:	465b      	mov	r3, fp
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2214      	movs	r2, #20
 8001914:	469c      	mov	ip, r3
 8001916:	4462      	add	r2, ip
 8001918:	4691      	mov	r9, r2
 800191a:	9303      	str	r3, [sp, #12]
 800191c:	9202      	str	r2, [sp, #8]
    while (index > 0) {
 800191e:	2d00      	cmp	r5, #0
 8001920:	d02b      	beq.n	800197a <ASPathCreate+0x27e>
        return 0;
 8001922:	46aa      	mov	sl, r5
 8001924:	00ac      	lsls	r4, r5, #2
        const size_t parentIndex = floorf((index-1) / 2);
 8001926:	4653      	mov	r3, sl
 8001928:	1e58      	subs	r0, r3, #1
 800192a:	0840      	lsrs	r0, r0, #1
 800192c:	f7ff fa34 	bl	8000d98 <__aeabi_ui2f>
 8001930:	f7fe fd0c 	bl	800034c <__aeabi_f2uiz>
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001934:	9a05      	ldr	r2, [sp, #20]
 8001936:	0083      	lsls	r3, r0, #2
 8001938:	4690      	mov	r8, r2
 800193a:	4498      	add	r8, r3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800193c:	464b      	mov	r3, r9
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	4643      	mov	r3, r8
 8001942:	681f      	ldr	r7, [r3, #0]
 8001944:	464b      	mov	r3, r9
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001946:	4694      	mov	ip, r2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001948:	435f      	muls	r7, r3
 800194a:	464a      	mov	r2, r9
 800194c:	9b00      	ldr	r3, [sp, #0]
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 800194e:	4464      	add	r4, ip
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001950:	469c      	mov	ip, r3
 8001952:	6826      	ldr	r6, [r4, #0]
 8001954:	4467      	add	r7, ip
 8001956:	4356      	muls	r6, r2
    return record->estimatedCost + record->cost;
 8001958:	68b9      	ldr	r1, [r7, #8]
        const size_t parentIndex = floorf((index-1) / 2);
 800195a:	0005      	movs	r5, r0
    return record->estimatedCost + record->cost;
 800195c:	6878      	ldr	r0, [r7, #4]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800195e:	4466      	add	r6, ip
    return record->estimatedCost + record->cost;
 8001960:	f7fe fdd8 	bl	8000514 <__aeabi_fadd>
 8001964:	68b1      	ldr	r1, [r6, #8]
 8001966:	9001      	str	r0, [sp, #4]
 8001968:	6870      	ldr	r0, [r6, #4]
 800196a:	f7fe fdd3 	bl	8000514 <__aeabi_fadd>
 800196e:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8001970:	9801      	ldr	r0, [sp, #4]
 8001972:	f7fe fc79 	bl	8000268 <__aeabi_fcmplt>
 8001976:	2800      	cmp	r0, #0
 8001978:	d0bd      	beq.n	80018f6 <ASPathCreate+0x1fa>
 800197a:	9b08      	ldr	r3, [sp, #32]
 800197c:	464c      	mov	r4, r9
 800197e:	4699      	mov	r9, r3
    // set the starting node's estimate cost to the goal and add it to the open set
    SetNodeEstimatedCost(current,  GetPathCostHeuristic(current, goalNode));
    AddNodeToOpenSet(current, 0, NodeNull);

    // perform the A* algorithm
    while (HasOpenNode(visitedNodes) && !NodeIsGoal((current = GetOpenNode(visitedNodes)))) {
 8001980:	9b07      	ldr	r3, [sp, #28]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <ASPathCreate+0x28e>
 8001986:	f000 fcdd 	bl	8002344 <ASPathCreate+0xc48>
    record->hasEstimatedCost = 1;
 800198a:	9b05      	ldr	r3, [sp, #20]
 800198c:	46da      	mov	sl, fp
 800198e:	4698      	mov	r8, r3
 8001990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001992:	9f07      	ldr	r7, [sp, #28]
 8001994:	469b      	mov	fp, r3
    return NodeMake(nodes, nodes->openNodes[0]);
 8001996:	4643      	mov	r3, r8
 8001998:	681b      	ldr	r3, [r3, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800199a:	9a00      	ldr	r2, [sp, #0]
    return NodeMake(nodes, nodes->openNodes[0]);
 800199c:	9304      	str	r3, [sp, #16]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800199e:	4363      	muls	r3, r4
 80019a0:	18d5      	adds	r5, r2, r3
    return !NodeIsNull(n) && NodeGetRecord(n)->isGoal;
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	075a      	lsls	r2, r3, #29
 80019a6:	d400      	bmi.n	80019aa <ASPathCreate+0x2ae>
 80019a8:	e09c      	b.n	8001ae4 <ASPathCreate+0x3e8>
    return (n.nodes == NodeNull.nodes) && (n.index == NodeNull.index);
 80019aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80019ac:	9402      	str	r4, [sp, #8]
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	d10b      	bne.n	80019ca <ASPathCreate+0x2ce>
 80019b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019b4:	3201      	adds	r2, #1
 80019b6:	d108      	bne.n	80019ca <ASPathCreate+0x2ce>
        NodeGetRecord(n)->isGoal = 1;
 80019b8:	2204      	movs	r2, #4
 80019ba:	782b      	ldrb	r3, [r5, #0]
 80019bc:	4313      	orrs	r3, r2
 80019be:	702b      	strb	r3, [r5, #0]
    return !NodeIsNull(n) && NodeGetRecord(n)->isGoal;
 80019c0:	782b      	ldrb	r3, [r5, #0]
    ASPath path = NULL;
 80019c2:	2700      	movs	r7, #0
    return !NodeIsNull(n) && NodeGetRecord(n)->isGoal;
 80019c4:	075a      	lsls	r2, r3, #29
 80019c6:	d400      	bmi.n	80019ca <ASPathCreate+0x2ce>
 80019c8:	e3b7      	b.n	800213a <ASPathCreate+0xa3e>
    if (record->hasParent) {
 80019ca:	071b      	lsls	r3, r3, #28
 80019cc:	d500      	bpl.n	80019d0 <ASPathCreate+0x2d4>
 80019ce:	e39a      	b.n	8002106 <ASPathCreate+0xa0a>
        while (!NodeIsNull(n)) {
            count++;
            n = GetParentNode(n);
        }

        path = malloc(sizeof(struct __ASPath) + (count * source->nodeSize));
 80019d0:	9c03      	ldr	r4, [sp, #12]
 80019d2:	0020      	movs	r0, r4
 80019d4:	300c      	adds	r0, #12
 80019d6:	f004 f8b9 	bl	8005b4c <malloc>
        path->nodeSize = source->nodeSize;
        path->count = count;
 80019da:	2301      	movs	r3, #1
        path->nodeSize = source->nodeSize;
 80019dc:	6004      	str	r4, [r0, #0]
        path = malloc(sizeof(struct __ASPath) + (count * source->nodeSize));
 80019de:	0007      	movs	r7, r0
            count++;
 80019e0:	2401      	movs	r4, #1
        path->count = count;
 80019e2:	6043      	str	r3, [r0, #4]
        path->cost = GetNodeCost(current);
 80019e4:	68ab      	ldr	r3, [r5, #8]
 80019e6:	6083      	str	r3, [r0, #8]
 80019e8:	9b03      	ldr	r3, [sp, #12]
    if (record->hasParent) {
 80019ea:	2208      	movs	r2, #8
 80019ec:	001e      	movs	r6, r3
 80019ee:	3c01      	subs	r4, #1
 80019f0:	4366      	muls	r6, r4
 80019f2:	360c      	adds	r6, #12
 80019f4:	46bb      	mov	fp, r7
 80019f6:	19be      	adds	r6, r7, r6
 80019f8:	4692      	mov	sl, r2
 80019fa:	464f      	mov	r7, r9
 80019fc:	4698      	mov	r8, r3
 80019fe:	9d04      	ldr	r5, [sp, #16]
 8001a00:	e005      	b.n	8001a0e <ASPathCreate+0x312>
        return NodeMake(n.nodes, record->parentIndex);
 8001a02:	4643      	mov	r3, r8
 8001a04:	692d      	ldr	r5, [r5, #16]

        n = current;
        for (size_t i=count; i>0; i--) {
 8001a06:	1af6      	subs	r6, r6, r3
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d018      	beq.n	8001a3e <ASPathCreate+0x342>
 8001a0c:	3c01      	subs	r4, #1
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001a0e:	683b      	ldr	r3, [r7, #0]
            memcpy(path->nodeKeys + ((i - 1) * source->nodeSize), GetNodeKey(n), source->nodeSize);
 8001a10:	4642      	mov	r2, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001a12:	681b      	ldr	r3, [r3, #0]
            memcpy(path->nodeKeys + ((i - 1) * source->nodeSize), GetNodeKey(n), source->nodeSize);
 8001a14:	0030      	movs	r0, r6
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001a16:	3314      	adds	r3, #20
 8001a18:	435d      	muls	r5, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	469c      	mov	ip, r3
 8001a1e:	4465      	add	r5, ip
            memcpy(path->nodeKeys + ((i - 1) * source->nodeSize), GetNodeKey(n), source->nodeSize);
 8001a20:	0029      	movs	r1, r5
 8001a22:	3114      	adds	r1, #20
 8001a24:	f004 f8b4 	bl	8005b90 <memcpy>
    if (record->hasParent) {
 8001a28:	4652      	mov	r2, sl
 8001a2a:	782b      	ldrb	r3, [r5, #0]
 8001a2c:	421a      	tst	r2, r3
 8001a2e:	d1e8      	bne.n	8001a02 <ASPathCreate+0x306>
        return NodeNull;
 8001a30:	2501      	movs	r5, #1
 8001a32:	4643      	mov	r3, r8
 8001a34:	2700      	movs	r7, #0
 8001a36:	426d      	negs	r5, r5
 8001a38:	1af6      	subs	r6, r6, r3
        for (size_t i=count; i>0; i--) {
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d1e6      	bne.n	8001a0c <ASPathCreate+0x310>
 8001a3e:	465f      	mov	r7, fp
 8001a40:	e37b      	b.n	800213a <ASPathCreate+0xa3e>
        size_t last = nodes->nodeRecordsCount-1;
 8001a42:	464a      	mov	r2, r9
 8001a44:	6952      	ldr	r2, [r2, #20]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	9201      	str	r2, [sp, #4]
 8001a4a:	464a      	mov	r2, r9
 8001a4c:	469a      	mov	sl, r3
 8001a4e:	9302      	str	r3, [sp, #8]
    size_t first = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	6912      	ldr	r2, [r2, #16]
 8001a54:	9200      	str	r2, [sp, #0]
 8001a56:	464a      	mov	r2, r9
 8001a58:	4699      	mov	r9, r3
 8001a5a:	4643      	mov	r3, r8
 8001a5c:	9304      	str	r3, [sp, #16]
 8001a5e:	003b      	movs	r3, r7
 8001a60:	9203      	str	r2, [sp, #12]
 8001a62:	4657      	mov	r7, sl
 8001a64:	0022      	movs	r2, r4
 8001a66:	46a8      	mov	r8, r5
 8001a68:	469a      	mov	sl, r3
 8001a6a:	e00a      	b.n	8001a82 <ASPathCreate+0x386>
            } else if (comp > 0 && mid > 0) {
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d101      	bne.n	8001a74 <ASPathCreate+0x378>
 8001a70:	f000 fc36 	bl	80022e0 <ASPathCreate+0xbe4>
 8001a74:	2c01      	cmp	r4, #1
 8001a76:	d91f      	bls.n	8001ab8 <ASPathCreate+0x3bc>
                last = mid - 1;
 8001a78:	1e77      	subs	r7, r6, #1
        while (first <= last) {
 8001a7a:	454f      	cmp	r7, r9
 8001a7c:	d31c      	bcc.n	8001ab8 <ASPathCreate+0x3bc>
 8001a7e:	465b      	mov	r3, fp
 8001a80:	681a      	ldr	r2, [r3, #0]
            const size_t mid = (first + last) / 2;
 8001a82:	464b      	mov	r3, r9
 8001a84:	19dc      	adds	r4, r3, r7
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001a86:	9b01      	ldr	r3, [sp, #4]
            const size_t mid = (first + last) / 2;
 8001a88:	0866      	lsrs	r6, r4, #1
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001a8a:	469c      	mov	ip, r3
    if (node.nodes->source->nodeComparator) {
 8001a8c:	465b      	mov	r3, fp
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001a8e:	00b5      	lsls	r5, r6, #2
    if (node.nodes->source->nodeComparator) {
 8001a90:	691b      	ldr	r3, [r3, #16]
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001a92:	4465      	add	r5, ip
 8001a94:	6828      	ldr	r0, [r5, #0]
    if (node.nodes->source->nodeComparator) {
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d019      	beq.n	8001ace <ASPathCreate+0x3d2>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001a9a:	3214      	adds	r2, #20
 8001a9c:	4350      	muls	r0, r2
 8001a9e:	9a00      	ldr	r2, [sp, #0]
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001aa0:	4651      	mov	r1, sl
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001aa2:	4694      	mov	ip, r2
 8001aa4:	4460      	add	r0, ip
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001aa6:	4642      	mov	r2, r8
    return NodeGetRecord(node)->nodeKey;
 8001aa8:	3014      	adds	r0, #20
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001aaa:	4798      	blx	r3
            if (comp < 0) {
 8001aac:	2800      	cmp	r0, #0
 8001aae:	dadd      	bge.n	8001a6c <ASPathCreate+0x370>
                first = mid + 1;
 8001ab0:	1c73      	adds	r3, r6, #1
 8001ab2:	4699      	mov	r9, r3
        while (first <= last) {
 8001ab4:	454f      	cmp	r7, r9
 8001ab6:	d2e2      	bcs.n	8001a7e <ASPathCreate+0x382>
 8001ab8:	464b      	mov	r3, r9
 8001aba:	9a03      	ldr	r2, [sp, #12]
 8001abc:	1c5e      	adds	r6, r3, #1
 8001abe:	4691      	mov	r9, r2
 8001ac0:	9a04      	ldr	r2, [sp, #16]
 8001ac2:	00b6      	lsls	r6, r6, #2
 8001ac4:	4690      	mov	r8, r2
 8001ac6:	4657      	mov	r7, sl
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	1f34      	subs	r4, r6, #4
 8001acc:	e64f      	b.n	800176e <ASPathCreate+0x72>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001ace:	0013      	movs	r3, r2
 8001ad0:	3314      	adds	r3, #20
 8001ad2:	4358      	muls	r0, r3
 8001ad4:	9b00      	ldr	r3, [sp, #0]
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8001ad6:	4651      	mov	r1, sl
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001ad8:	469c      	mov	ip, r3
 8001ada:	4460      	add	r0, ip
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8001adc:	3014      	adds	r0, #20
 8001ade:	f004 f849 	bl	8005b74 <memcmp>
 8001ae2:	e7e3      	b.n	8001aac <ASPathCreate+0x3b0>
        if (source->earlyExit) {
 8001ae4:	4652      	mov	r2, sl
 8001ae6:	68d6      	ldr	r6, [r2, #12]
 8001ae8:	2e00      	cmp	r6, #0
 8001aea:	d015      	beq.n	8001b18 <ASPathCreate+0x41c>
    return NodeGetRecord(node)->nodeKey;
 8001aec:	0029      	movs	r1, r5
            const int shouldExit = source->earlyExit(visitedNodes->nodeRecordsCount, GetNodeKey(current), goalNodeKey, context);
 8001aee:	4648      	mov	r0, r9
 8001af0:	9b06      	ldr	r3, [sp, #24]
 8001af2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001af4:	68c0      	ldr	r0, [r0, #12]
    return NodeGetRecord(node)->nodeKey;
 8001af6:	3114      	adds	r1, #20
            const int shouldExit = source->earlyExit(visitedNodes->nodeRecordsCount, GetNodeKey(current), goalNodeKey, context);
 8001af8:	47b0      	blx	r6
            if (shouldExit > 0) {
 8001afa:	2800      	cmp	r0, #0
 8001afc:	dd01      	ble.n	8001b02 <ASPathCreate+0x406>
 8001afe:	f000 fc26 	bl	800234e <ASPathCreate+0xc52>
            } else if (shouldExit < 0) {
 8001b02:	d001      	beq.n	8001b08 <ASPathCreate+0x40c>
 8001b04:	f000 fc08 	bl	8002318 <ASPathCreate+0xc1c>
 8001b08:	4653      	mov	r3, sl
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	9b04      	ldr	r3, [sp, #16]
 8001b0e:	3414      	adds	r4, #20
 8001b10:	4363      	muls	r3, r4
 8001b12:	9a00      	ldr	r2, [sp, #0]
 8001b14:	18d5      	adds	r5, r2, r3
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
    if (record->isOpen) {
 8001b18:	2202      	movs	r2, #2
 8001b1a:	421a      	tst	r2, r3
 8001b1c:	d100      	bne.n	8001b20 <ASPathCreate+0x424>
 8001b1e:	e0a0      	b.n	8001c62 <ASPathCreate+0x566>
        record->isOpen = 0;
 8001b20:	782b      	ldrb	r3, [r5, #0]
 8001b22:	4393      	bics	r3, r2
 8001b24:	702b      	strb	r3, [r5, #0]
        n.nodes->openNodesCount--;
 8001b26:	464b      	mov	r3, r9
        const size_t index = record->openIndex;
 8001b28:	68ed      	ldr	r5, [r5, #12]
        n.nodes->openNodesCount--;
 8001b2a:	1e7a      	subs	r2, r7, #1
 8001b2c:	9201      	str	r2, [sp, #4]
 8001b2e:	61da      	str	r2, [r3, #28]
    if (index1 != index2) {
 8001b30:	42aa      	cmp	r2, r5
 8001b32:	d013      	beq.n	8001b5c <ASPathCreate+0x460>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b34:	9800      	ldr	r0, [sp, #0]
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001b36:	00a9      	lsls	r1, r5, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b38:	4684      	mov	ip, r0
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001b3a:	0092      	lsls	r2, r2, #2
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001b3c:	4441      	add	r1, r8
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001b3e:	4442      	add	r2, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b40:	6816      	ldr	r6, [r2, #0]
 8001b42:	680b      	ldr	r3, [r1, #0]
 8001b44:	4363      	muls	r3, r4
 8001b46:	4374      	muls	r4, r6
 8001b48:	4463      	add	r3, ip
 8001b4a:	4464      	add	r4, ip
        const size_t tempOpenIndex = record1->openIndex;
 8001b4c:	68d8      	ldr	r0, [r3, #12]
        record1->openIndex = record2->openIndex;
 8001b4e:	68e6      	ldr	r6, [r4, #12]
 8001b50:	60de      	str	r6, [r3, #12]
        record2->openIndex = tempOpenIndex;
 8001b52:	60e0      	str	r0, [r4, #12]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001b54:	680b      	ldr	r3, [r1, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001b56:	6810      	ldr	r0, [r2, #0]
 8001b58:	6008      	str	r0, [r1, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8001b5a:	6013      	str	r3, [r2, #0]
        if (smallestIndex != index) {
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	9303      	str	r3, [sp, #12]
 8001b60:	465b      	mov	r3, fp
 8001b62:	46d3      	mov	fp, sl
 8001b64:	9305      	str	r3, [sp, #20]
 8001b66:	e064      	b.n	8001c32 <ASPathCreate+0x536>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b68:	465b      	mov	r3, fp
 8001b6a:	681e      	ldr	r6, [r3, #0]
 8001b6c:	2314      	movs	r3, #20
 8001b6e:	469c      	mov	ip, r3
 8001b70:	4641      	mov	r1, r8
 8001b72:	44b4      	add	ip, r6
 8001b74:	4662      	mov	r2, ip
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001b76:	00a3      	lsls	r3, r4, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b78:	585b      	ldr	r3, [r3, r1]
 8001b7a:	9900      	ldr	r1, [sp, #0]
 8001b7c:	4353      	muls	r3, r2
 8001b7e:	468c      	mov	ip, r1
 8001b80:	4463      	add	r3, ip
    return record->estimatedCost + record->cost;
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	6858      	ldr	r0, [r3, #4]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b86:	9202      	str	r2, [sp, #8]
    return record->estimatedCost + record->cost;
 8001b88:	f7fe fcc4 	bl	8000514 <__aeabi_fadd>
 8001b8c:	4682      	mov	sl, r0
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b8e:	4640      	mov	r0, r8
 8001b90:	9900      	ldr	r1, [sp, #0]
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001b92:	00ab      	lsls	r3, r5, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b94:	468c      	mov	ip, r1
 8001b96:	581b      	ldr	r3, [r3, r0]
 8001b98:	9a02      	ldr	r2, [sp, #8]
 8001b9a:	4353      	muls	r3, r2
 8001b9c:	4463      	add	r3, ip
    return record->estimatedCost + record->cost;
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	6858      	ldr	r0, [r3, #4]
 8001ba2:	f7fe fcb7 	bl	8000514 <__aeabi_fadd>
 8001ba6:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8001ba8:	4650      	mov	r0, sl
 8001baa:	f7fe fb5d 	bl	8000268 <__aeabi_fcmplt>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d100      	bne.n	8001bb4 <ASPathCreate+0x4b8>
    } else if (rank1 > rank2) {
 8001bb2:	002c      	movs	r4, r5
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001bb4:	9b01      	ldr	r3, [sp, #4]
 8001bb6:	42bb      	cmp	r3, r7
 8001bb8:	d923      	bls.n	8001c02 <ASPathCreate+0x506>
 8001bba:	464b      	mov	r3, r9
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bbc:	4642      	mov	r2, r8
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001bbe:	00db      	lsls	r3, r3, #3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bc0:	589b      	ldr	r3, [r3, r2]
 8001bc2:	2214      	movs	r2, #20
 8001bc4:	4691      	mov	r9, r2
 8001bc6:	44b1      	add	r9, r6
 8001bc8:	464a      	mov	r2, r9
 8001bca:	4353      	muls	r3, r2
 8001bcc:	9a00      	ldr	r2, [sp, #0]
 8001bce:	4694      	mov	ip, r2
 8001bd0:	4463      	add	r3, ip
    return record->estimatedCost + record->cost;
 8001bd2:	6899      	ldr	r1, [r3, #8]
 8001bd4:	6858      	ldr	r0, [r3, #4]
 8001bd6:	f7fe fc9d 	bl	8000514 <__aeabi_fadd>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bda:	4641      	mov	r1, r8
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001bdc:	00a3      	lsls	r3, r4, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bde:	585b      	ldr	r3, [r3, r1]
 8001be0:	4649      	mov	r1, r9
 8001be2:	9a00      	ldr	r2, [sp, #0]
 8001be4:	434b      	muls	r3, r1
 8001be6:	4694      	mov	ip, r2
 8001be8:	4463      	add	r3, ip
    return record->estimatedCost + record->cost;
 8001bea:	4682      	mov	sl, r0
 8001bec:	6899      	ldr	r1, [r3, #8]
 8001bee:	6858      	ldr	r0, [r3, #4]
 8001bf0:	f7fe fc90 	bl	8000514 <__aeabi_fadd>
 8001bf4:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8001bf6:	4650      	mov	r0, sl
 8001bf8:	f7fe fb36 	bl	8000268 <__aeabi_fcmplt>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d000      	beq.n	8001c02 <ASPathCreate+0x506>
 8001c00:	003c      	movs	r4, r7
    } while (smallestIndex != index);
 8001c02:	42ac      	cmp	r4, r5
 8001c04:	d021      	beq.n	8001c4a <ASPathCreate+0x54e>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c06:	9900      	ldr	r1, [sp, #0]
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001c08:	00a2      	lsls	r2, r4, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c0a:	468c      	mov	ip, r1
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001c0c:	00ad      	lsls	r5, r5, #2
 8001c0e:	4445      	add	r5, r8
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001c10:	4442      	add	r2, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c12:	6828      	ldr	r0, [r5, #0]
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	3614      	adds	r6, #20
 8001c18:	4373      	muls	r3, r6
 8001c1a:	4346      	muls	r6, r0
 8001c1c:	4463      	add	r3, ip
 8001c1e:	4466      	add	r6, ip
        const size_t tempOpenIndex = record1->openIndex;
 8001c20:	68d9      	ldr	r1, [r3, #12]
        record1->openIndex = record2->openIndex;
 8001c22:	68f0      	ldr	r0, [r6, #12]
 8001c24:	60d8      	str	r0, [r3, #12]
        record2->openIndex = tempOpenIndex;
 8001c26:	60f1      	str	r1, [r6, #12]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001c28:	6829      	ldr	r1, [r5, #0]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001c2a:	6813      	ldr	r3, [r2, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001c2c:	6011      	str	r1, [r2, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8001c2e:	602b      	str	r3, [r5, #0]
 8001c30:	0025      	movs	r5, r4
        const size_t rightIndex = (2 * index) + 2;
 8001c32:	1c6b      	adds	r3, r5, #1
        const size_t leftIndex = (2 * index) + 1;
 8001c34:	006f      	lsls	r7, r5, #1
        const size_t rightIndex = (2 * index) + 2;
 8001c36:	4699      	mov	r9, r3
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001c38:	9b01      	ldr	r3, [sp, #4]
        const size_t leftIndex = (2 * index) + 1;
 8001c3a:	1c7c      	adds	r4, r7, #1
        const size_t rightIndex = (2 * index) + 2;
 8001c3c:	3702      	adds	r7, #2
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001c3e:	42a3      	cmp	r3, r4
 8001c40:	d892      	bhi.n	8001b68 <ASPathCreate+0x46c>
 8001c42:	465b      	mov	r3, fp
 8001c44:	002c      	movs	r4, r5
 8001c46:	681e      	ldr	r6, [r3, #0]
 8001c48:	e7b4      	b.n	8001bb4 <ASPathCreate+0x4b8>
 8001c4a:	0035      	movs	r5, r6
 8001c4c:	9b03      	ldr	r3, [sp, #12]
 8001c4e:	46da      	mov	sl, fp
 8001c50:	4699      	mov	r9, r3
 8001c52:	9b05      	ldr	r3, [sp, #20]
 8001c54:	3514      	adds	r5, #20
 8001c56:	469b      	mov	fp, r3
 8001c58:	9b04      	ldr	r3, [sp, #16]
 8001c5a:	435d      	muls	r5, r3
 8001c5c:	9b00      	ldr	r3, [sp, #0]
 8001c5e:	469c      	mov	ip, r3
 8001c60:	4465      	add	r5, ip
    NodeGetRecord(n)->isClosed = 1;
 8001c62:	2201      	movs	r2, #1
 8001c64:	782b      	ldrb	r3, [r5, #0]
    return NodeGetRecord(node)->nodeKey;
 8001c66:	0029      	movs	r1, r5
    NodeGetRecord(n)->isClosed = 1;
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	702b      	strb	r3, [r5, #0]
        neighborList->count = 0;
 8001c6c:	465a      	mov	r2, fp
 8001c6e:	2300      	movs	r3, #0
 8001c70:	6093      	str	r3, [r2, #8]
        source->nodeNeighbors(neighborList, GetNodeKey(current), context);
 8001c72:	4653      	mov	r3, sl
 8001c74:	4658      	mov	r0, fp
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	9a06      	ldr	r2, [sp, #24]
    return NodeGetRecord(node)->nodeKey;
 8001c7a:	3114      	adds	r1, #20
        source->nodeNeighbors(neighborList, GetNodeKey(current), context);
 8001c7c:	4798      	blx	r3
        for (size_t n=0; n<neighborList->count; n++) {
 8001c7e:	465b      	mov	r3, fp
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d100      	bne.n	8001c88 <ASPathCreate+0x58c>
 8001c86:	e0da      	b.n	8001e3e <ASPathCreate+0x742>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9303      	str	r3, [sp, #12]
 8001c8c:	4653      	mov	r3, sl
 8001c8e:	46da      	mov	sl, fp
 8001c90:	46cb      	mov	fp, r9
 8001c92:	4699      	mov	r9, r3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c94:	464b      	mov	r3, r9
 8001c96:	681d      	ldr	r5, [r3, #0]
    return NodeGetRecord(n)->cost;
 8001c98:	9900      	ldr	r1, [sp, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c9a:	002c      	movs	r4, r5
    return NodeGetRecord(n)->cost;
 8001c9c:	468c      	mov	ip, r1
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c9e:	9a04      	ldr	r2, [sp, #16]
 8001ca0:	3414      	adds	r4, #20
 8001ca2:	4362      	muls	r2, r4
    return NodeGetRecord(n)->cost;
 8001ca4:	4462      	add	r2, ip
            const float cost = GetNodeCost(current) + NeighborListGetEdgeCost(neighborList, n);
 8001ca6:	6891      	ldr	r1, [r2, #8]
 8001ca8:	4652      	mov	r2, sl
    return list->costs[index];
 8001caa:	9e03      	ldr	r6, [sp, #12]
            const float cost = GetNodeCost(current) + NeighborListGetEdgeCost(neighborList, n);
 8001cac:	68d2      	ldr	r2, [r2, #12]
    return list->costs[index];
 8001cae:	00b3      	lsls	r3, r6, #2
            const float cost = GetNodeCost(current) + NeighborListGetEdgeCost(neighborList, n);
 8001cb0:	5898      	ldr	r0, [r3, r2]
 8001cb2:	f7fe fc2f 	bl	8000514 <__aeabi_fadd>
    return list->nodeKeys + (index * list->source->nodeSize);
 8001cb6:	4653      	mov	r3, sl
 8001cb8:	681b      	ldr	r3, [r3, #0]
            const float cost = GetNodeCost(current) + NeighborListGetEdgeCost(neighborList, n);
 8001cba:	9005      	str	r0, [sp, #20]
    return list->nodeKeys + (index * list->source->nodeSize);
 8001cbc:	681f      	ldr	r7, [r3, #0]
 8001cbe:	4653      	mov	r3, sl
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	4377      	muls	r7, r6
 8001cc4:	469c      	mov	ip, r3
 8001cc6:	4467      	add	r7, ip
    if (!nodeKey) {
 8001cc8:	2f00      	cmp	r7, #0
 8001cca:	d100      	bne.n	8001cce <ASPathCreate+0x5d2>
 8001ccc:	e34e      	b.n	800236c <ASPathCreate+0xc70>
    if (nodes->nodeRecordsCount > 0) {
 8001cce:	465b      	mov	r3, fp
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d05b      	beq.n	8001d90 <ASPathCreate+0x694>
        size_t last = nodes->nodeRecordsCount-1;
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	9302      	str	r3, [sp, #8]
        while (first <= last) {
 8001cdc:	465b      	mov	r3, fp
 8001cde:	695b      	ldr	r3, [r3, #20]
    size_t first = 0;
 8001ce0:	2600      	movs	r6, #0
 8001ce2:	46b8      	mov	r8, r7
 8001ce4:	002a      	movs	r2, r5
 8001ce6:	0021      	movs	r1, r4
 8001ce8:	9307      	str	r3, [sp, #28]
 8001cea:	e00d      	b.n	8001d08 <ASPathCreate+0x60c>
            } else if (comp > 0 && mid > 0) {
 8001cec:	2800      	cmp	r0, #0
 8001cee:	d100      	bne.n	8001cf2 <ASPathCreate+0x5f6>
 8001cf0:	e206      	b.n	8002100 <ASPathCreate+0xa04>
 8001cf2:	2f01      	cmp	r7, #1
 8001cf4:	d922      	bls.n	8001d3c <ASPathCreate+0x640>
                last = mid - 1;
 8001cf6:	1e63      	subs	r3, r4, #1
 8001cf8:	9302      	str	r3, [sp, #8]
        while (first <= last) {
 8001cfa:	9b02      	ldr	r3, [sp, #8]
 8001cfc:	429e      	cmp	r6, r3
 8001cfe:	d81d      	bhi.n	8001d3c <ASPathCreate+0x640>
 8001d00:	464b      	mov	r3, r9
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	0011      	movs	r1, r2
 8001d06:	3114      	adds	r1, #20
            const size_t mid = (first + last) / 2;
 8001d08:	9b02      	ldr	r3, [sp, #8]
 8001d0a:	18f7      	adds	r7, r6, r3
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001d0c:	9b07      	ldr	r3, [sp, #28]
            const size_t mid = (first + last) / 2;
 8001d0e:	087c      	lsrs	r4, r7, #1
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001d10:	469c      	mov	ip, r3
    if (node.nodes->source->nodeComparator) {
 8001d12:	464b      	mov	r3, r9
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001d14:	00a5      	lsls	r5, r4, #2
 8001d16:	4465      	add	r5, ip
 8001d18:	6828      	ldr	r0, [r5, #0]
    if (node.nodes->source->nodeComparator) {
 8001d1a:	691b      	ldr	r3, [r3, #16]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d1c:	4348      	muls	r0, r1
    if (node.nodes->source->nodeComparator) {
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d02e      	beq.n	8001d80 <ASPathCreate+0x684>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d22:	9a00      	ldr	r2, [sp, #0]
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001d24:	4641      	mov	r1, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d26:	4694      	mov	ip, r2
 8001d28:	4460      	add	r0, ip
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001d2a:	9a06      	ldr	r2, [sp, #24]
    return NodeGetRecord(node)->nodeKey;
 8001d2c:	3014      	adds	r0, #20
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001d2e:	4798      	blx	r3
            if (comp < 0) {
 8001d30:	2800      	cmp	r0, #0
 8001d32:	dadb      	bge.n	8001cec <ASPathCreate+0x5f0>
        while (first <= last) {
 8001d34:	9b02      	ldr	r3, [sp, #8]
                first = mid + 1;
 8001d36:	1c66      	adds	r6, r4, #1
        while (first <= last) {
 8001d38:	429e      	cmp	r6, r3
 8001d3a:	d9e1      	bls.n	8001d00 <ASPathCreate+0x604>
 8001d3c:	1c70      	adds	r0, r6, #1
 8001d3e:	0083      	lsls	r3, r0, #2
 8001d40:	4647      	mov	r7, r8
 8001d42:	1f1d      	subs	r5, r3, #4
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 8001d44:	4698      	mov	r8, r3
 8001d46:	465b      	mov	r3, fp
 8001d48:	689c      	ldr	r4, [r3, #8]
 8001d4a:	9b01      	ldr	r3, [sp, #4]
 8001d4c:	42a3      	cmp	r3, r4
 8001d4e:	d128      	bne.n	8001da2 <ASPathCreate+0x6a6>
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 8001d50:	465a      	mov	r2, fp
 8001d52:	9b01      	ldr	r3, [sp, #4]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 8001d54:	9800      	ldr	r0, [sp, #0]
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 8001d56:	005c      	lsls	r4, r3, #1
 8001d58:	1c63      	adds	r3, r4, #1
 8001d5a:	6093      	str	r3, [r2, #8]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 8001d5c:	464a      	mov	r2, r9
 8001d5e:	6811      	ldr	r1, [r2, #0]
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	3114      	adds	r1, #20
 8001d64:	4359      	muls	r1, r3
 8001d66:	f004 fad1 	bl	800630c <realloc>
 8001d6a:	465a      	mov	r2, fp
        nodes->nodeRecordsIndex = realloc(nodes->nodeRecordsIndex, nodes->nodeRecordsCapacity * sizeof(size_t));
 8001d6c:	9b02      	ldr	r3, [sp, #8]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 8001d6e:	9000      	str	r0, [sp, #0]
 8001d70:	6110      	str	r0, [r2, #16]
        nodes->nodeRecordsIndex = realloc(nodes->nodeRecordsIndex, nodes->nodeRecordsCapacity * sizeof(size_t));
 8001d72:	0099      	lsls	r1, r3, #2
 8001d74:	6950      	ldr	r0, [r2, #20]
 8001d76:	f004 fac9 	bl	800630c <realloc>
 8001d7a:	465b      	mov	r3, fp
 8001d7c:	6158      	str	r0, [r3, #20]
 8001d7e:	e013      	b.n	8001da8 <ASPathCreate+0x6ac>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d80:	9b00      	ldr	r3, [sp, #0]
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8001d82:	4641      	mov	r1, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d84:	469c      	mov	ip, r3
 8001d86:	4460      	add	r0, ip
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8001d88:	3014      	adds	r0, #20
 8001d8a:	f003 fef3 	bl	8005b74 <memcmp>
 8001d8e:	e7cf      	b.n	8001d30 <ASPathCreate+0x634>
 8001d90:	2304      	movs	r3, #4
 8001d92:	4698      	mov	r8, r3
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 8001d94:	465b      	mov	r3, fp
 8001d96:	689c      	ldr	r4, [r3, #8]
 8001d98:	9b01      	ldr	r3, [sp, #4]
 8001d9a:	2500      	movs	r5, #0
    size_t first = 0;
 8001d9c:	2600      	movs	r6, #0
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 8001d9e:	42a3      	cmp	r3, r4
 8001da0:	d0d6      	beq.n	8001d50 <ASPathCreate+0x654>
 8001da2:	465b      	mov	r3, fp
 8001da4:	6958      	ldr	r0, [r3, #20]
 8001da6:	3c01      	subs	r4, #1
    nodes->nodeRecordsCount++;
 8001da8:	465a      	mov	r2, fp
 8001daa:	9b01      	ldr	r3, [sp, #4]
    memmove(&nodes->nodeRecordsIndex[first+1], &nodes->nodeRecordsIndex[first], (nodes->nodeRecordsCapacity - first - 1) * sizeof(size_t));
 8001dac:	1945      	adds	r5, r0, r5
    nodes->nodeRecordsCount++;
 8001dae:	3301      	adds	r3, #1
 8001db0:	60d3      	str	r3, [r2, #12]
    memmove(&nodes->nodeRecordsIndex[first+1], &nodes->nodeRecordsIndex[first], (nodes->nodeRecordsCapacity - first - 1) * sizeof(size_t));
 8001db2:	1ba2      	subs	r2, r4, r6
 8001db4:	0029      	movs	r1, r5
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4440      	add	r0, r8
 8001dba:	f003 fef2 	bl	8005ba2 <memmove>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001dbe:	464a      	mov	r2, r9
    nodes->nodeRecordsIndex[first] = node.index;
 8001dc0:	9b01      	ldr	r3, [sp, #4]
    memset(record, 0, sizeof(NodeRecord));
 8001dc2:	2100      	movs	r1, #0
    nodes->nodeRecordsIndex[first] = node.index;
 8001dc4:	602b      	str	r3, [r5, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001dc6:	6814      	ldr	r4, [r2, #0]
    memset(record, 0, sizeof(NodeRecord));
 8001dc8:	2214      	movs	r2, #20
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001dca:	3414      	adds	r4, #20
 8001dcc:	435c      	muls	r4, r3
 8001dce:	9b00      	ldr	r3, [sp, #0]
 8001dd0:	469c      	mov	ip, r3
 8001dd2:	4464      	add	r4, ip
    memset(record, 0, sizeof(NodeRecord));
 8001dd4:	0020      	movs	r0, r4
 8001dd6:	f003 fef7 	bl	8005bc8 <memset>
    memcpy(record->nodeKey, nodeKey, nodes->source->nodeSize);
 8001dda:	0020      	movs	r0, r4
 8001ddc:	464b      	mov	r3, r9
 8001dde:	0039      	movs	r1, r7
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	3014      	adds	r0, #20
 8001de4:	f003 fed4 	bl	8005b90 <memcpy>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001de8:	465b      	mov	r3, fp
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	9a00      	ldr	r2, [sp, #0]
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	001e      	movs	r6, r3
 8001df4:	9307      	str	r3, [sp, #28]
 8001df6:	9b01      	ldr	r3, [sp, #4]
 8001df8:	3614      	adds	r6, #20
 8001dfa:	4373      	muls	r3, r6
 8001dfc:	18d4      	adds	r4, r2, r3
    return NodeGetRecord(n)->hasEstimatedCost;
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
            if (!NodeHasEstimatedCost(neighbor)) {
 8001e00:	06db      	lsls	r3, r3, #27
 8001e02:	d400      	bmi.n	8001e06 <ASPathCreate+0x70a>
 8001e04:	e09f      	b.n	8001f46 <ASPathCreate+0x84a>
    return NodeGetRecord(n)->isOpen;
 8001e06:	7825      	ldrb	r5, [r4, #0]
 8001e08:	07ab      	lsls	r3, r5, #30
 8001e0a:	0fdf      	lsrs	r7, r3, #31
            if (NodeIsInOpenSet(neighbor) && cost < GetNodeCost(neighbor)) {
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da24      	bge.n	8001e5a <ASPathCreate+0x75e>
 8001e10:	68a1      	ldr	r1, [r4, #8]
 8001e12:	9805      	ldr	r0, [sp, #20]
 8001e14:	f7fe fa28 	bl	8000268 <__aeabi_fcmplt>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d000      	beq.n	8001e1e <ASPathCreate+0x722>
 8001e1c:	e0bc      	b.n	8001f98 <ASPathCreate+0x89c>
    return NodeGetRecord(n)->isClosed;
 8001e1e:	07ed      	lsls	r5, r5, #31
 8001e20:	0fef      	lsrs	r7, r5, #31
            if (NodeIsInClosedSet(neighbor) && cost < GetNodeCost(neighbor)) {
 8001e22:	2d00      	cmp	r5, #0
 8001e24:	d11b      	bne.n	8001e5e <ASPathCreate+0x762>
        for (size_t n=0; n<neighborList->count; n++) {
 8001e26:	4652      	mov	r2, sl
 8001e28:	9b03      	ldr	r3, [sp, #12]
 8001e2a:	6892      	ldr	r2, [r2, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	9303      	str	r3, [sp, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d900      	bls.n	8001e36 <ASPathCreate+0x73a>
 8001e34:	e72e      	b.n	8001c94 <ASPathCreate+0x598>
 8001e36:	464b      	mov	r3, r9
 8001e38:	46d9      	mov	r9, fp
 8001e3a:	46d3      	mov	fp, sl
 8001e3c:	469a      	mov	sl, r3
    while (HasOpenNode(visitedNodes) && !NodeIsGoal((current = GetOpenNode(visitedNodes)))) {
 8001e3e:	464b      	mov	r3, r9
 8001e40:	69df      	ldr	r7, [r3, #28]
 8001e42:	2f00      	cmp	r7, #0
 8001e44:	d100      	bne.n	8001e48 <ASPathCreate+0x74c>
 8001e46:	e267      	b.n	8002318 <ASPathCreate+0xc1c>
 8001e48:	4653      	mov	r3, sl
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6a12      	ldr	r2, [r2, #32]
 8001e50:	9303      	str	r3, [sp, #12]
 8001e52:	3314      	adds	r3, #20
 8001e54:	4690      	mov	r8, r2
 8001e56:	001c      	movs	r4, r3
 8001e58:	e59d      	b.n	8001996 <ASPathCreate+0x29a>
            if (NodeIsInClosedSet(neighbor) && cost < GetNodeCost(neighbor)) {
 8001e5a:	07eb      	lsls	r3, r5, #31
 8001e5c:	d50b      	bpl.n	8001e76 <ASPathCreate+0x77a>
 8001e5e:	68a1      	ldr	r1, [r4, #8]
 8001e60:	9805      	ldr	r0, [sp, #20]
 8001e62:	f7fe fa01 	bl	8000268 <__aeabi_fcmplt>
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d0dd      	beq.n	8001e26 <ASPathCreate+0x72a>
    NodeGetRecord(n)->isClosed = 0;
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	7823      	ldrb	r3, [r4, #0]
 8001e6e:	4393      	bics	r3, r2
 8001e70:	7023      	strb	r3, [r4, #0]
            if (!NodeIsInOpenSet(neighbor) && !NodeIsInClosedSet(neighbor)) {
 8001e72:	2f00      	cmp	r7, #0
 8001e74:	d1d7      	bne.n	8001e26 <ASPathCreate+0x72a>
        record->hasParent = 1;
 8001e76:	2208      	movs	r2, #8
 8001e78:	7823      	ldrb	r3, [r4, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	7023      	strb	r3, [r4, #0]
        record->parentIndex = parent.index;
 8001e7e:	9b04      	ldr	r3, [sp, #16]
 8001e80:	6123      	str	r3, [r4, #16]
    if (n.nodes->openNodesCount == n.nodes->openNodesCapacity) {
 8001e82:	465b      	mov	r3, fp
 8001e84:	69de      	ldr	r6, [r3, #28]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	429e      	cmp	r6, r3
 8001e8a:	d100      	bne.n	8001e8e <ASPathCreate+0x792>
 8001e8c:	e1c3      	b.n	8002216 <ASPathCreate+0xb1a>
 8001e8e:	465b      	mov	r3, fp
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	9307      	str	r3, [sp, #28]
    n.nodes->openNodes[openIndex] = n.index;
 8001e94:	9b07      	ldr	r3, [sp, #28]
 8001e96:	9a01      	ldr	r2, [sp, #4]
 8001e98:	00b7      	lsls	r7, r6, #2
 8001e9a:	51da      	str	r2, [r3, r7]
    n.nodes->openNodesCount++;
 8001e9c:	465a      	mov	r2, fp
 8001e9e:	1c73      	adds	r3, r6, #1
 8001ea0:	61d3      	str	r3, [r2, #28]
    record->isOpen = 1;
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	7823      	ldrb	r3, [r4, #0]
    record->openIndex = openIndex;
 8001ea6:	60e6      	str	r6, [r4, #12]
    record->isOpen = 1;
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	7023      	strb	r3, [r4, #0]
    record->cost = cost;
 8001eac:	9b05      	ldr	r3, [sp, #20]
 8001eae:	60a3      	str	r3, [r4, #8]
    while (index > 0) {
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	d0b8      	beq.n	8001e26 <ASPathCreate+0x72a>
 8001eb4:	9b02      	ldr	r3, [sp, #8]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	465b      	mov	r3, fp
 8001ebc:	9305      	str	r3, [sp, #20]
 8001ebe:	4653      	mov	r3, sl
 8001ec0:	46b2      	mov	sl, r6
 8001ec2:	9308      	str	r3, [sp, #32]
 8001ec4:	e012      	b.n	8001eec <ASPathCreate+0x7f0>
    if (index1 != index2) {
 8001ec6:	4556      	cmp	r6, sl
 8001ec8:	d00e      	beq.n	8001ee8 <ASPathCreate+0x7ec>
        const size_t tempOpenIndex = record1->openIndex;
 8001eca:	68eb      	ldr	r3, [r5, #12]
        record1->openIndex = record2->openIndex;
 8001ecc:	68e2      	ldr	r2, [r4, #12]
 8001ece:	60ea      	str	r2, [r5, #12]
        record2->openIndex = tempOpenIndex;
 8001ed0:	60e3      	str	r3, [r4, #12]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001ed2:	4643      	mov	r3, r8
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001ed4:	4642      	mov	r2, r8
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001ed6:	681b      	ldr	r3, [r3, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	6011      	str	r1, [r2, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8001edc:	603b      	str	r3, [r7, #0]
    while (index > 0) {
 8001ede:	2e00      	cmp	r6, #0
 8001ee0:	d02c      	beq.n	8001f3c <ASPathCreate+0x840>
 8001ee2:	9b02      	ldr	r3, [sp, #8]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	9301      	str	r3, [sp, #4]
    if (rank1 < rank2) {
 8001ee8:	46b2      	mov	sl, r6
 8001eea:	00b7      	lsls	r7, r6, #2
        const size_t parentIndex = floorf((index-1) / 2);
 8001eec:	4653      	mov	r3, sl
 8001eee:	1e58      	subs	r0, r3, #1
 8001ef0:	0840      	lsrs	r0, r0, #1
 8001ef2:	f7fe ff51 	bl	8000d98 <__aeabi_ui2f>
 8001ef6:	f7fe fa29 	bl	800034c <__aeabi_f2uiz>
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001efa:	9a07      	ldr	r2, [sp, #28]
 8001efc:	0083      	lsls	r3, r0, #2
 8001efe:	4690      	mov	r8, r2
 8001f00:	4498      	add	r8, r3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f02:	4643      	mov	r3, r8
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001f04:	4694      	mov	ip, r2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f06:	681d      	ldr	r5, [r3, #0]
 8001f08:	9b00      	ldr	r3, [sp, #0]
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001f0a:	4467      	add	r7, ip
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f0c:	469c      	mov	ip, r3
 8001f0e:	9c01      	ldr	r4, [sp, #4]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	3414      	adds	r4, #20
 8001f14:	4365      	muls	r5, r4
 8001f16:	4354      	muls	r4, r2
 8001f18:	4465      	add	r5, ip
    return record->estimatedCost + record->cost;
 8001f1a:	68a9      	ldr	r1, [r5, #8]
        const size_t parentIndex = floorf((index-1) / 2);
 8001f1c:	0006      	movs	r6, r0
    return record->estimatedCost + record->cost;
 8001f1e:	6868      	ldr	r0, [r5, #4]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f20:	4464      	add	r4, ip
    return record->estimatedCost + record->cost;
 8001f22:	f7fe faf7 	bl	8000514 <__aeabi_fadd>
 8001f26:	68a1      	ldr	r1, [r4, #8]
 8001f28:	4683      	mov	fp, r0
 8001f2a:	6860      	ldr	r0, [r4, #4]
 8001f2c:	f7fe faf2 	bl	8000514 <__aeabi_fadd>
 8001f30:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8001f32:	4658      	mov	r0, fp
 8001f34:	f7fe f998 	bl	8000268 <__aeabi_fcmplt>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d0c4      	beq.n	8001ec6 <ASPathCreate+0x7ca>
 8001f3c:	9b05      	ldr	r3, [sp, #20]
 8001f3e:	469b      	mov	fp, r3
 8001f40:	9b08      	ldr	r3, [sp, #32]
 8001f42:	469a      	mov	sl, r3
 8001f44:	e76f      	b.n	8001e26 <ASPathCreate+0x72a>
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 8001f46:	9b02      	ldr	r3, [sp, #8]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d100      	bne.n	8001f50 <ASPathCreate+0x854>
 8001f4e:	e0c4      	b.n	80020da <ASPathCreate+0x9de>
    return (n.nodes == NodeNull.nodes) && (n.index == NodeNull.index);
 8001f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d100      	bne.n	8001f58 <ASPathCreate+0x85c>
 8001f56:	e0bc      	b.n	80020d2 <ASPathCreate+0x9d6>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001f5a:	6802      	ldr	r2, [r0, #0]
 8001f5c:	6811      	ldr	r1, [r2, #0]
 8001f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f60:	3114      	adds	r1, #20
 8001f62:	4351      	muls	r1, r2
 8001f64:	6902      	ldr	r2, [r0, #16]
    return NodeGetRecord(node)->nodeKey;
 8001f66:	0020      	movs	r0, r4
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f68:	4694      	mov	ip, r2
 8001f6a:	9207      	str	r2, [sp, #28]
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001f6c:	465a      	mov	r2, fp
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f6e:	4461      	add	r1, ip
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001f70:	6852      	ldr	r2, [r2, #4]
    return NodeGetRecord(node)->nodeKey;
 8001f72:	3114      	adds	r1, #20
 8001f74:	3014      	adds	r0, #20
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001f76:	4798      	blx	r3
 8001f78:	9b02      	ldr	r3, [sp, #8]
 8001f7a:	9c01      	ldr	r4, [sp, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	001e      	movs	r6, r3
 8001f80:	9307      	str	r3, [sp, #28]
 8001f82:	9b00      	ldr	r3, [sp, #0]
 8001f84:	3614      	adds	r6, #20
 8001f86:	469c      	mov	ip, r3
 8001f88:	4374      	muls	r4, r6
 8001f8a:	4464      	add	r4, ip
    record->hasEstimatedCost = 1;
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	7823      	ldrb	r3, [r4, #0]
    record->estimatedCost = estimatedCost;
 8001f90:	6060      	str	r0, [r4, #4]
    record->hasEstimatedCost = 1;
 8001f92:	4313      	orrs	r3, r2
 8001f94:	7023      	strb	r3, [r4, #0]
 8001f96:	e736      	b.n	8001e06 <ASPathCreate+0x70a>
    if (record->isOpen) {
 8001f98:	2302      	movs	r3, #2
 8001f9a:	422b      	tst	r3, r5
 8001f9c:	d100      	bne.n	8001fa0 <ASPathCreate+0x8a4>
 8001f9e:	e73e      	b.n	8001e1e <ASPathCreate+0x722>
        record->isOpen = 0;
 8001fa0:	439d      	bics	r5, r3
        n.nodes->openNodesCount--;
 8001fa2:	465b      	mov	r3, fp
 8001fa4:	69db      	ldr	r3, [r3, #28]
        record->isOpen = 0;
 8001fa6:	7025      	strb	r5, [r4, #0]
        n.nodes->openNodesCount--;
 8001fa8:	1e58      	subs	r0, r3, #1
 8001faa:	465b      	mov	r3, fp
        const size_t index = record->openIndex;
 8001fac:	68e4      	ldr	r4, [r4, #12]
        n.nodes->openNodesCount--;
 8001fae:	9008      	str	r0, [sp, #32]
 8001fb0:	61d8      	str	r0, [r3, #28]
    if (index1 != index2) {
 8001fb2:	42a0      	cmp	r0, r4
 8001fb4:	d100      	bne.n	8001fb8 <ASPathCreate+0x8bc>
 8001fb6:	e148      	b.n	800224a <ASPathCreate+0xb4e>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001fb8:	9d00      	ldr	r5, [sp, #0]
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001fba:	6a1b      	ldr	r3, [r3, #32]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001fbc:	46ac      	mov	ip, r5
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001fbe:	0080      	lsls	r0, r0, #2
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001fc0:	00a1      	lsls	r1, r4, #2
 8001fc2:	1859      	adds	r1, r3, r1
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001fc4:	181b      	adds	r3, r3, r0
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	680a      	ldr	r2, [r1, #0]
 8001fca:	4372      	muls	r2, r6
 8001fcc:	4346      	muls	r6, r0
 8001fce:	4462      	add	r2, ip
 8001fd0:	4466      	add	r6, ip
        const size_t tempOpenIndex = record1->openIndex;
 8001fd2:	68d0      	ldr	r0, [r2, #12]
        record1->openIndex = record2->openIndex;
 8001fd4:	68f7      	ldr	r7, [r6, #12]
 8001fd6:	60d7      	str	r7, [r2, #12]
        record2->openIndex = tempOpenIndex;
 8001fd8:	60f0      	str	r0, [r6, #12]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001fda:	6818      	ldr	r0, [r3, #0]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001fdc:	680a      	ldr	r2, [r1, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001fde:	6008      	str	r0, [r1, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8001fe0:	601a      	str	r2, [r3, #0]
        if (smallestIndex != index) {
 8001fe2:	4653      	mov	r3, sl
 8001fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	46aa      	mov	sl, r5
 8001fea:	930f      	str	r3, [sp, #60]	; 0x3c
}
 8001fec:	e05c      	b.n	80020a8 <ASPathCreate+0x9ac>
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001fee:	465b      	mov	r3, fp
 8001ff0:	6a1a      	ldr	r2, [r3, #32]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001ff2:	9b02      	ldr	r3, [sp, #8]
 8001ff4:	920b      	str	r2, [sp, #44]	; 0x2c
 8001ff6:	681e      	ldr	r6, [r3, #0]
 8001ff8:	2314      	movs	r3, #20
 8001ffa:	4699      	mov	r9, r3
 8001ffc:	44b1      	add	r9, r6
 8001ffe:	4649      	mov	r1, r9
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8002000:	00ab      	lsls	r3, r5, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002002:	589b      	ldr	r3, [r3, r2]
 8002004:	434b      	muls	r3, r1
 8002006:	4453      	add	r3, sl
    return record->estimatedCost + record->cost;
 8002008:	6899      	ldr	r1, [r3, #8]
 800200a:	6858      	ldr	r0, [r3, #4]
 800200c:	f7fe fa82 	bl	8000514 <__aeabi_fadd>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8002012:	00a3      	lsls	r3, r4, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002014:	589b      	ldr	r3, [r3, r2]
 8002016:	464a      	mov	r2, r9
 8002018:	4353      	muls	r3, r2
 800201a:	4453      	add	r3, sl
    return record->estimatedCost + record->cost;
 800201c:	4680      	mov	r8, r0
 800201e:	6899      	ldr	r1, [r3, #8]
 8002020:	6858      	ldr	r0, [r3, #4]
 8002022:	f7fe fa77 	bl	8000514 <__aeabi_fadd>
 8002026:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8002028:	4640      	mov	r0, r8
 800202a:	f7fe f91d 	bl	8000268 <__aeabi_fcmplt>
 800202e:	2800      	cmp	r0, #0
 8002030:	d100      	bne.n	8002034 <ASPathCreate+0x938>
    } else if (rank1 > rank2) {
 8002032:	0025      	movs	r5, r4
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8002034:	9b08      	ldr	r3, [sp, #32]
 8002036:	9a07      	ldr	r2, [sp, #28]
 8002038:	4293      	cmp	r3, r2
 800203a:	d91d      	bls.n	8002078 <ASPathCreate+0x97c>
 800203c:	465b      	mov	r3, fp
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	00ff      	lsls	r7, r7, #3
 8002042:	4698      	mov	r8, r3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002044:	58fb      	ldr	r3, [r7, r3]
 8002046:	0037      	movs	r7, r6
 8002048:	3714      	adds	r7, #20
 800204a:	437b      	muls	r3, r7
 800204c:	4453      	add	r3, sl
    return record->estimatedCost + record->cost;
 800204e:	6899      	ldr	r1, [r3, #8]
 8002050:	6858      	ldr	r0, [r3, #4]
 8002052:	f7fe fa5f 	bl	8000514 <__aeabi_fadd>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002056:	4642      	mov	r2, r8
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8002058:	00ab      	lsls	r3, r5, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800205a:	589b      	ldr	r3, [r3, r2]
    return record->estimatedCost + record->cost;
 800205c:	4681      	mov	r9, r0
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800205e:	435f      	muls	r7, r3
 8002060:	4457      	add	r7, sl
    return record->estimatedCost + record->cost;
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fa55 	bl	8000514 <__aeabi_fadd>
 800206a:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 800206c:	4648      	mov	r0, r9
 800206e:	f7fe f8fb 	bl	8000268 <__aeabi_fcmplt>
 8002072:	2800      	cmp	r0, #0
 8002074:	d000      	beq.n	8002078 <ASPathCreate+0x97c>
 8002076:	9d07      	ldr	r5, [sp, #28]
    } while (smallestIndex != index);
 8002078:	42ac      	cmp	r4, r5
 800207a:	d030      	beq.n	80020de <ASPathCreate+0x9e2>
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 800207c:	465b      	mov	r3, fp
 800207e:	6a19      	ldr	r1, [r3, #32]
 8002080:	00aa      	lsls	r2, r5, #2
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8002082:	00a4      	lsls	r4, r4, #2
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8002084:	188a      	adds	r2, r1, r2
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8002086:	190c      	adds	r4, r1, r4
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002088:	6821      	ldr	r1, [r4, #0]
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	3614      	adds	r6, #20
 800208e:	4373      	muls	r3, r6
 8002090:	434e      	muls	r6, r1
 8002092:	4453      	add	r3, sl
 8002094:	4456      	add	r6, sl
        const size_t tempOpenIndex = record1->openIndex;
 8002096:	68d9      	ldr	r1, [r3, #12]
        record1->openIndex = record2->openIndex;
 8002098:	68f0      	ldr	r0, [r6, #12]
 800209a:	60d8      	str	r0, [r3, #12]
        record2->openIndex = tempOpenIndex;
 800209c:	60f1      	str	r1, [r6, #12]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 800209e:	6821      	ldr	r1, [r4, #0]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 80020a0:	6813      	ldr	r3, [r2, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 80020a2:	6011      	str	r1, [r2, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	002c      	movs	r4, r5
        const size_t leftIndex = (2 * index) + 1;
 80020a8:	0063      	lsls	r3, r4, #1
 80020aa:	1c5d      	adds	r5, r3, #1
        const size_t rightIndex = (2 * index) + 2;
 80020ac:	3302      	adds	r3, #2
 80020ae:	9307      	str	r3, [sp, #28]
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 80020b0:	9b08      	ldr	r3, [sp, #32]
        const size_t rightIndex = (2 * index) + 2;
 80020b2:	1c67      	adds	r7, r4, #1
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 80020b4:	42ab      	cmp	r3, r5
 80020b6:	d89a      	bhi.n	8001fee <ASPathCreate+0x8f2>
 80020b8:	9b02      	ldr	r3, [sp, #8]
 80020ba:	0025      	movs	r5, r4
 80020bc:	681e      	ldr	r6, [r3, #0]
 80020be:	e7b9      	b.n	8002034 <ASPathCreate+0x938>
        return NULL;
 80020c0:	2700      	movs	r7, #0

    NeighborListDestroy(neighborList);
    VisitedNodesDestroy(visitedNodes);

    return path;
}
 80020c2:	0038      	movs	r0, r7
 80020c4:	b011      	add	sp, #68	; 0x44
 80020c6:	bcf0      	pop	{r4, r5, r6, r7}
 80020c8:	46bb      	mov	fp, r7
 80020ca:	46b2      	mov	sl, r6
 80020cc:	46a9      	mov	r9, r5
 80020ce:	46a0      	mov	r8, r4
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (n.nodes == NodeNull.nodes) && (n.index == NodeNull.index);
 80020d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020d4:	3201      	adds	r2, #1
 80020d6:	d000      	beq.n	80020da <ASPathCreate+0x9de>
 80020d8:	e73e      	b.n	8001f58 <ASPathCreate+0x85c>
        return 0;
 80020da:	2000      	movs	r0, #0
 80020dc:	e756      	b.n	8001f8c <ASPathCreate+0x890>
 80020de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020e0:	9a01      	ldr	r2, [sp, #4]
 80020e2:	469a      	mov	sl, r3
 80020e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80020e6:	4699      	mov	r9, r3
 80020e8:	0033      	movs	r3, r6
 80020ea:	3314      	adds	r3, #20
 80020ec:	4353      	muls	r3, r2
 80020ee:	9a00      	ldr	r2, [sp, #0]
 80020f0:	18d4      	adds	r4, r2, r3
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	079f      	lsls	r7, r3, #30
 80020f6:	0fff      	lsrs	r7, r7, #31
            if (NodeIsInClosedSet(neighbor) && cost < GetNodeCost(neighbor)) {
 80020f8:	07db      	lsls	r3, r3, #31
 80020fa:	d400      	bmi.n	80020fe <ASPathCreate+0xa02>
 80020fc:	e6b9      	b.n	8001e72 <ASPathCreate+0x776>
 80020fe:	e6ae      	b.n	8001e5e <ASPathCreate+0x762>
                return NodeMake(nodes, nodes->nodeRecordsIndex[mid]);
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	e670      	b.n	8001de8 <ASPathCreate+0x6ec>
    if (record->hasParent) {
 8002106:	002a      	movs	r2, r5
            count++;
 8002108:	2401      	movs	r4, #1
    if (record->hasParent) {
 800210a:	2108      	movs	r1, #8
 800210c:	9e02      	ldr	r6, [sp, #8]
 800210e:	9800      	ldr	r0, [sp, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002110:	6913      	ldr	r3, [r2, #16]
            count++;
 8002112:	3401      	adds	r4, #1
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002114:	4373      	muls	r3, r6
 8002116:	18c2      	adds	r2, r0, r3
    if (record->hasParent) {
 8002118:	5cc3      	ldrb	r3, [r0, r3]
 800211a:	4219      	tst	r1, r3
 800211c:	d1f8      	bne.n	8002110 <ASPathCreate+0xa14>
        path = malloc(sizeof(struct __ASPath) + (count * source->nodeSize));
 800211e:	9e03      	ldr	r6, [sp, #12]
 8002120:	0030      	movs	r0, r6
 8002122:	4360      	muls	r0, r4
 8002124:	300c      	adds	r0, #12
 8002126:	f003 fd11 	bl	8005b4c <malloc>
        path->cost = GetNodeCost(current);
 800212a:	68ab      	ldr	r3, [r5, #8]
        path = malloc(sizeof(struct __ASPath) + (count * source->nodeSize));
 800212c:	0007      	movs	r7, r0
        path->nodeSize = source->nodeSize;
 800212e:	6006      	str	r6, [r0, #0]
        path->count = count;
 8002130:	6044      	str	r4, [r0, #4]
        path->cost = GetNodeCost(current);
 8002132:	6083      	str	r3, [r0, #8]
        for (size_t i=count; i>0; i--) {
 8002134:	2c00      	cmp	r4, #0
 8002136:	d000      	beq.n	800213a <ASPathCreate+0xa3e>
 8002138:	e456      	b.n	80019e8 <ASPathCreate+0x2ec>
    free(list->costs);
 800213a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800213c:	68e3      	ldr	r3, [r4, #12]
 800213e:	0018      	movs	r0, r3
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	f003 fd0d 	bl	8005b60 <free>
    free(list->nodeKeys);
 8002146:	6923      	ldr	r3, [r4, #16]
 8002148:	0018      	movs	r0, r3
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f003 fd08 	bl	8005b60 <free>
    free(list);
 8002150:	0020      	movs	r0, r4
 8002152:	f003 fd05 	bl	8005b60 <free>
    free(visitedNodes->nodeRecordsIndex);
 8002156:	464b      	mov	r3, r9
 8002158:	6958      	ldr	r0, [r3, #20]
 800215a:	f003 fd01 	bl	8005b60 <free>
    free(visitedNodes->nodeRecords);
 800215e:	9800      	ldr	r0, [sp, #0]
 8002160:	f003 fcfe 	bl	8005b60 <free>
    free(visitedNodes->openNodes);
 8002164:	464b      	mov	r3, r9
 8002166:	6a18      	ldr	r0, [r3, #32]
 8002168:	f003 fcfa 	bl	8005b60 <free>
    free(visitedNodes);
 800216c:	4648      	mov	r0, r9
 800216e:	f003 fcf7 	bl	8005b60 <free>
}
 8002172:	e7a6      	b.n	80020c2 <ASPathCreate+0x9c6>
 8002174:	4643      	mov	r3, r8
 8002176:	9304      	str	r3, [sp, #16]
    size_t first = 0;
 8002178:	464b      	mov	r3, r9
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	4653      	mov	r3, sl
 800217e:	2600      	movs	r6, #0
 8002180:	9303      	str	r3, [sp, #12]
 8002182:	4643      	mov	r3, r8
 8002184:	9a06      	ldr	r2, [sp, #24]
 8002186:	46b0      	mov	r8, r6
 8002188:	4691      	mov	r9, r2
 800218a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800218c:	001e      	movs	r6, r3
 800218e:	4692      	mov	sl, r2
 8002190:	e007      	b.n	80021a2 <ASPathCreate+0xaa6>
            } else if (comp > 0 && mid > 0) {
 8002192:	2800      	cmp	r0, #0
 8002194:	d100      	bne.n	8002198 <ASPathCreate+0xa9c>
 8002196:	e0b0      	b.n	80022fa <ASPathCreate+0xbfe>
 8002198:	2f01      	cmp	r7, #1
 800219a:	d91f      	bls.n	80021dc <ASPathCreate+0xae0>
                last = mid - 1;
 800219c:	1e6e      	subs	r6, r5, #1
        while (first <= last) {
 800219e:	45b0      	cmp	r8, r6
 80021a0:	d81c      	bhi.n	80021dc <ASPathCreate+0xae0>
            const size_t mid = (first + last) / 2;
 80021a2:	4643      	mov	r3, r8
 80021a4:	199f      	adds	r7, r3, r6
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 80021a6:	9b01      	ldr	r3, [sp, #4]
            const size_t mid = (first + last) / 2;
 80021a8:	087d      	lsrs	r5, r7, #1
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 80021aa:	469c      	mov	ip, r3
    if (node.nodes->source->nodeComparator) {
 80021ac:	465b      	mov	r3, fp
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 80021ae:	00ac      	lsls	r4, r5, #2
    if (node.nodes->source->nodeComparator) {
 80021b0:	691b      	ldr	r3, [r3, #16]
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 80021b2:	4464      	add	r4, ip
 80021b4:	6820      	ldr	r0, [r4, #0]
    if (node.nodes->source->nodeComparator) {
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01f      	beq.n	80021fa <ASPathCreate+0xafe>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80021ba:	465a      	mov	r2, fp
 80021bc:	6812      	ldr	r2, [r2, #0]
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 80021be:	4651      	mov	r1, sl
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80021c0:	3214      	adds	r2, #20
 80021c2:	4350      	muls	r0, r2
 80021c4:	9a00      	ldr	r2, [sp, #0]
 80021c6:	4694      	mov	ip, r2
 80021c8:	4460      	add	r0, ip
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 80021ca:	464a      	mov	r2, r9
    return NodeGetRecord(node)->nodeKey;
 80021cc:	3014      	adds	r0, #20
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 80021ce:	4798      	blx	r3
            if (comp < 0) {
 80021d0:	2800      	cmp	r0, #0
 80021d2:	dade      	bge.n	8002192 <ASPathCreate+0xa96>
                first = mid + 1;
 80021d4:	1c6b      	adds	r3, r5, #1
 80021d6:	4698      	mov	r8, r3
        while (first <= last) {
 80021d8:	45b0      	cmp	r8, r6
 80021da:	d9e2      	bls.n	80021a2 <ASPathCreate+0xaa6>
 80021dc:	9b02      	ldr	r3, [sp, #8]
 80021de:	4646      	mov	r6, r8
 80021e0:	4699      	mov	r9, r3
 80021e2:	9b03      	ldr	r3, [sp, #12]
 80021e4:	1c74      	adds	r4, r6, #1
 80021e6:	469a      	mov	sl, r3
 80021e8:	464b      	mov	r3, r9
 80021ea:	689d      	ldr	r5, [r3, #8]
 80021ec:	4653      	mov	r3, sl
 80021ee:	00a4      	lsls	r4, r4, #2
 80021f0:	9309      	str	r3, [sp, #36]	; 0x24
 80021f2:	1f23      	subs	r3, r4, #4
 80021f4:	469a      	mov	sl, r3
 80021f6:	f7ff fafc 	bl	80017f2 <ASPathCreate+0xf6>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80021fa:	465b      	mov	r3, fp
 80021fc:	681b      	ldr	r3, [r3, #0]
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 80021fe:	4651      	mov	r1, sl
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002200:	3314      	adds	r3, #20
 8002202:	4358      	muls	r0, r3
 8002204:	9b00      	ldr	r3, [sp, #0]
 8002206:	469c      	mov	ip, r3
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8002208:	465b      	mov	r3, fp
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800220a:	4460      	add	r0, ip
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	3014      	adds	r0, #20
 8002210:	f003 fcb0 	bl	8005b74 <memcmp>
 8002214:	e7dc      	b.n	80021d0 <ASPathCreate+0xad4>
        n.nodes->openNodesCapacity = 1 + (n.nodes->openNodesCapacity * 2);
 8002216:	465b      	mov	r3, fp
 8002218:	0071      	lsls	r1, r6, #1
 800221a:	3101      	adds	r1, #1
 800221c:	6199      	str	r1, [r3, #24]
        n.nodes->openNodes = realloc(n.nodes->openNodes, n.nodes->openNodesCapacity * sizeof(size_t));
 800221e:	6a18      	ldr	r0, [r3, #32]
 8002220:	0089      	lsls	r1, r1, #2
 8002222:	f004 f873 	bl	800630c <realloc>
 8002226:	465b      	mov	r3, fp
 8002228:	9007      	str	r0, [sp, #28]
 800222a:	6218      	str	r0, [r3, #32]
 800222c:	e632      	b.n	8001e94 <ASPathCreate+0x798>
        n.nodes->openNodesCapacity = 1 + (n.nodes->openNodesCapacity * 2);
 800222e:	4653      	mov	r3, sl
 8002230:	0059      	lsls	r1, r3, #1
 8002232:	464b      	mov	r3, r9
 8002234:	3101      	adds	r1, #1
 8002236:	6199      	str	r1, [r3, #24]
        n.nodes->openNodes = realloc(n.nodes->openNodes, n.nodes->openNodesCapacity * sizeof(size_t));
 8002238:	6a18      	ldr	r0, [r3, #32]
 800223a:	0089      	lsls	r1, r1, #2
 800223c:	f004 f866 	bl	800630c <realloc>
 8002240:	464b      	mov	r3, r9
 8002242:	9005      	str	r0, [sp, #20]
 8002244:	6218      	str	r0, [r3, #32]
 8002246:	f7ff fb35 	bl	80018b4 <ASPathCreate+0x1b8>
 800224a:	4653      	mov	r3, sl
 800224c:	930e      	str	r3, [sp, #56]	; 0x38
 800224e:	9b00      	ldr	r3, [sp, #0]
 8002250:	469a      	mov	sl, r3
 8002252:	464b      	mov	r3, r9
 8002254:	930f      	str	r3, [sp, #60]	; 0x3c
 8002256:	e727      	b.n	80020a8 <ASPathCreate+0x9ac>
    return (Node){nodes, index};
 8002258:	9b04      	ldr	r3, [sp, #16]
 800225a:	4698      	mov	r8, r3
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 800225c:	465b      	mov	r3, fp
 800225e:	681c      	ldr	r4, [r3, #0]
    return node;
 8002260:	4643      	mov	r3, r8
 8002262:	9304      	str	r3, [sp, #16]
        return NodeNull;
 8002264:	2301      	movs	r3, #1
 8002266:	425b      	negs	r3, r3
 8002268:	9309      	str	r3, [sp, #36]	; 0x24
 800226a:	2300      	movs	r3, #0
        return 0;
 800226c:	2000      	movs	r0, #0
 800226e:	3414      	adds	r4, #20
        return NodeNull;
 8002270:	930a      	str	r3, [sp, #40]	; 0x28
 8002272:	f7ff fb07 	bl	8001884 <ASPathCreate+0x188>
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 8002276:	4643      	mov	r3, r8
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	1c5d      	adds	r5, r3, #1
 800227c:	9303      	str	r3, [sp, #12]
 800227e:	464b      	mov	r3, r9
 8002280:	609d      	str	r5, [r3, #8]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 8002282:	465b      	mov	r3, fp
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	9800      	ldr	r0, [sp, #0]
 8002288:	3114      	adds	r1, #20
 800228a:	4369      	muls	r1, r5
 800228c:	f004 f83e 	bl	800630c <realloc>
 8002290:	464b      	mov	r3, r9
 8002292:	9000      	str	r0, [sp, #0]
 8002294:	6118      	str	r0, [r3, #16]
        nodes->nodeRecordsIndex = realloc(nodes->nodeRecordsIndex, nodes->nodeRecordsCapacity * sizeof(size_t));
 8002296:	00a9      	lsls	r1, r5, #2
 8002298:	6958      	ldr	r0, [r3, #20]
 800229a:	f004 f837 	bl	800630c <realloc>
 800229e:	464b      	mov	r3, r9
 80022a0:	9001      	str	r0, [sp, #4]
 80022a2:	6158      	str	r0, [r3, #20]
 80022a4:	f7ff fa6e 	bl	8001784 <ASPathCreate+0x88>
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 80022a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 80022aa:	9800      	ldr	r0, [sp, #0]
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 80022ac:	005d      	lsls	r5, r3, #1
 80022ae:	464b      	mov	r3, r9
 80022b0:	1c6f      	adds	r7, r5, #1
 80022b2:	609f      	str	r7, [r3, #8]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 80022b4:	465b      	mov	r3, fp
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	3114      	adds	r1, #20
 80022ba:	4379      	muls	r1, r7
 80022bc:	f004 f826 	bl	800630c <realloc>
 80022c0:	464b      	mov	r3, r9
 80022c2:	9000      	str	r0, [sp, #0]
 80022c4:	6118      	str	r0, [r3, #16]
        nodes->nodeRecordsIndex = realloc(nodes->nodeRecordsIndex, nodes->nodeRecordsCapacity * sizeof(size_t));
 80022c6:	00b9      	lsls	r1, r7, #2
 80022c8:	6958      	ldr	r0, [r3, #20]
 80022ca:	f004 f81f 	bl	800630c <realloc>
 80022ce:	464b      	mov	r3, r9
 80022d0:	6158      	str	r0, [r3, #20]
 80022d2:	f7ff fa96 	bl	8001802 <ASPathCreate+0x106>
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 80022d6:	464b      	mov	r3, r9
        return 0;
 80022d8:	2000      	movs	r0, #0
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 80022da:	930a      	str	r3, [sp, #40]	; 0x28
 80022dc:	f7ff fad2 	bl	8001884 <ASPathCreate+0x188>
 80022e0:	9b03      	ldr	r3, [sp, #12]
 80022e2:	4699      	mov	r9, r3
 80022e4:	9b04      	ldr	r3, [sp, #16]
 80022e6:	4698      	mov	r8, r3
                return NodeMake(nodes, nodes->nodeRecordsIndex[mid]);
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	9304      	str	r3, [sp, #16]
    if (!nodeKey) {
 80022ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0b2      	beq.n	8002258 <ASPathCreate+0xb5c>
 80022f2:	9b02      	ldr	r3, [sp, #8]
 80022f4:	46c2      	mov	sl, r8
 80022f6:	4698      	mov	r8, r3
 80022f8:	e73e      	b.n	8002178 <ASPathCreate+0xa7c>
 80022fa:	9b02      	ldr	r3, [sp, #8]
 80022fc:	4699      	mov	r9, r3
                return NodeMake(nodes, nodes->nodeRecordsIndex[mid]);
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	9309      	str	r3, [sp, #36]	; 0x24
 8002302:	f7ff fa9f 	bl	8001844 <ASPathCreate+0x148>
 8002306:	465b      	mov	r3, fp
    while (index > 0) {
 8002308:	2201      	movs	r2, #1
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	9207      	str	r2, [sp, #28]
 800230e:	9303      	str	r3, [sp, #12]
    return nodes->openNodesCount > 0;
 8002310:	3314      	adds	r3, #20
 8002312:	001c      	movs	r4, r3
 8002314:	f7ff fb39 	bl	800198a <ASPathCreate+0x28e>
 8002318:	4653      	mov	r3, sl
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	9d04      	ldr	r5, [sp, #16]
 800231e:	9303      	str	r3, [sp, #12]
 8002320:	3314      	adds	r3, #20
 8002322:	435d      	muls	r5, r3
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	9b00      	ldr	r3, [sp, #0]
 8002328:	469c      	mov	ip, r3
 800232a:	4465      	add	r5, ip
    return (n.nodes == NodeNull.nodes) && (n.index == NodeNull.index);
 800232c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <ASPathCreate+0xc3a>
 8002332:	f7ff fb45 	bl	80019c0 <ASPathCreate+0x2c4>
 8002336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	d001      	beq.n	8002340 <ASPathCreate+0xc44>
 800233c:	f7ff fb40 	bl	80019c0 <ASPathCreate+0x2c4>
 8002340:	f7ff fb3a 	bl	80019b8 <ASPathCreate+0x2bc>
 8002344:	9b04      	ldr	r3, [sp, #16]
 8002346:	435c      	muls	r4, r3
 8002348:	9b00      	ldr	r3, [sp, #0]
 800234a:	191d      	adds	r5, r3, r4
 800234c:	e7ee      	b.n	800232c <ASPathCreate+0xc30>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800234e:	4653      	mov	r3, sl
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	9a04      	ldr	r2, [sp, #16]
 8002354:	9303      	str	r3, [sp, #12]
 8002356:	3314      	adds	r3, #20
 8002358:	435a      	muls	r2, r3
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	0013      	movs	r3, r2
 800235e:	9a00      	ldr	r2, [sp, #0]
 8002360:	18d5      	adds	r5, r2, r3
        NodeGetRecord(n)->isGoal = 1;
 8002362:	5cd3      	ldrb	r3, [r2, r3]
 8002364:	2204      	movs	r2, #4
 8002366:	4313      	orrs	r3, r2
 8002368:	702b      	strb	r3, [r5, #0]
                break;
 800236a:	e7df      	b.n	800232c <ASPathCreate+0xc30>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	deff      	udf	#255	; 0xff

08002370 <ASPathDestroy>:

void ASPathDestroy(ASPath path)
{
 8002370:	b510      	push	{r4, lr}
    free(path);
 8002372:	f003 fbf5 	bl	8005b60 <free>
}
 8002376:	bd10      	pop	{r4, pc}

08002378 <ASPathGetCount>:
    return path? path->cost : INFINITY;
}

size_t ASPathGetCount(ASPath path)
{
    return path? path->count : 0;
 8002378:	2800      	cmp	r0, #0
 800237a:	d001      	beq.n	8002380 <ASPathGetCount+0x8>
 800237c:	6840      	ldr	r0, [r0, #4]
}
 800237e:	4770      	bx	lr
    return path? path->count : 0;
 8002380:	2000      	movs	r0, #0
 8002382:	e7fc      	b.n	800237e <ASPathGetCount+0x6>

08002384 <ASPathGetNode>:

void *ASPathGetNode(ASPath path, size_t index)
{
    return (path && index < path->count)? (path->nodeKeys + (index * path->nodeSize)) : NULL;
 8002384:	2800      	cmp	r0, #0
 8002386:	d008      	beq.n	800239a <ASPathGetNode+0x16>
 8002388:	6843      	ldr	r3, [r0, #4]
 800238a:	428b      	cmp	r3, r1
 800238c:	d905      	bls.n	800239a <ASPathGetNode+0x16>
 800238e:	0003      	movs	r3, r0
 8002390:	6800      	ldr	r0, [r0, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	4348      	muls	r0, r1
 8002396:	1818      	adds	r0, r3, r0
}
 8002398:	4770      	bx	lr
    return (path && index < path->count)? (path->nodeKeys + (index * path->nodeSize)) : NULL;
 800239a:	2000      	movs	r0, #0
 800239c:	e7fc      	b.n	8002398 <ASPathGetNode+0x14>
 800239e:	46c0      	nop			; (mov r8, r8)

080023a0 <path_node_heuristic>:
	if (can_transit_on(&left_position))
		ASNeighborListAdd(neighbors, &left_position, 1);
}

static float path_node_heuristic(void *fromNode, void *toNode, void *context)
{
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	0006      	movs	r6, r0
    MapPosition* from = (MapPosition*) fromNode;
    MapPosition* to = (MapPosition*) toNode;

    return fabs(from->row - to->row) + fabs(from->col - to->col);
 80023a4:	880b      	ldrh	r3, [r1, #0]
 80023a6:	8800      	ldrh	r0, [r0, #0]
{
 80023a8:	000d      	movs	r5, r1
    return fabs(from->row - to->row) + fabs(from->col - to->col);
 80023aa:	1ac0      	subs	r0, r0, r3
 80023ac:	f7ff f89a 	bl	80014e4 <__aeabi_i2d>
 80023b0:	886b      	ldrh	r3, [r5, #2]
 80023b2:	0007      	movs	r7, r0
 80023b4:	8870      	ldrh	r0, [r6, #2]
 80023b6:	004c      	lsls	r4, r1, #1
 80023b8:	1ac0      	subs	r0, r0, r3
 80023ba:	f7ff f893 	bl	80014e4 <__aeabi_i2d>
 80023be:	0864      	lsrs	r4, r4, #1
 80023c0:	0049      	lsls	r1, r1, #1
 80023c2:	0002      	movs	r2, r0
 80023c4:	084b      	lsrs	r3, r1, #1
 80023c6:	0038      	movs	r0, r7
 80023c8:	0021      	movs	r1, r4
 80023ca:	f7fe fd21 	bl	8000e10 <__aeabi_dadd>
 80023ce:	f7ff f8b9 	bl	8001544 <__aeabi_d2f>
}
 80023d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023d4 <path_node_neighbors>:
{
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d6:	46ce      	mov	lr, r9
 80023d8:	4647      	mov	r7, r8
 80023da:	b580      	push	{r7, lr}
 80023dc:	b08d      	sub	sp, #52	; 0x34
static void path_node_neighbors(ASNeighborList neighbors, void *node, void *context)
 80023de:	ac06      	add	r4, sp, #24
{
 80023e0:	000d      	movs	r5, r1
static void path_node_neighbors(ASNeighborList neighbors, void *node, void *context)
 80023e2:	0021      	movs	r1, r4
{
 80023e4:	4691      	mov	r9, r2
static void path_node_neighbors(ASNeighborList neighbors, void *node, void *context)
 80023e6:	ab14      	add	r3, sp, #80	; 0x50
 80023e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <path_node_neighbors+0xcc>)
{
 80023ec:	4680      	mov	r8, r0
static void path_node_neighbors(ASNeighborList neighbors, void *node, void *context)
 80023ee:	cbc1      	ldmia	r3!, {r0, r6, r7}
 80023f0:	c1c1      	stmia	r1!, {r0, r6, r7}
 80023f2:	cb41      	ldmia	r3!, {r0, r6}
 80023f4:	c141      	stmia	r1!, {r0, r6}
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <path_node_neighbors+0xd0>)
 80023f8:	0020      	movs	r0, r4
 80023fa:	aa05      	add	r2, sp, #20
 80023fc:	a90b      	add	r1, sp, #44	; 0x2c
 80023fe:	9209      	str	r2, [sp, #36]	; 0x24
 8002400:	930a      	str	r3, [sp, #40]	; 0x28
 8002402:	f7fd ffa1 	bl	8000348 <__clear_cache>
	MapInfo* mapInfo = (MapInfo*) context;
 8002406:	464b      	mov	r3, r9
 8002408:	9305      	str	r3, [sp, #20]
			lambda(bool, (const MapPosition* test_position), {
 800240a:	2301      	movs	r3, #1
	MapPosition up_position = { .row = position->row - 1, .col = position->col };
 800240c:	466a      	mov	r2, sp
			lambda(bool, (const MapPosition* test_position), {
 800240e:	431c      	orrs	r4, r3
	MapPosition up_position = { .row = position->row - 1, .col = position->col };
 8002410:	882b      	ldrh	r3, [r5, #0]
	if (can_transit_on(&up_position))
 8002412:	a801      	add	r0, sp, #4
	MapPosition up_position = { .row = position->row - 1, .col = position->col };
 8002414:	3b01      	subs	r3, #1
 8002416:	8093      	strh	r3, [r2, #4]
 8002418:	886b      	ldrh	r3, [r5, #2]
 800241a:	80d3      	strh	r3, [r2, #6]
	if (can_transit_on(&up_position))
 800241c:	47a0      	blx	r4
 800241e:	2800      	cmp	r0, #0
 8002420:	d122      	bne.n	8002468 <path_node_neighbors+0x94>
	MapPosition right_position = { .row = position->row, .col = position->col + 1 };
 8002422:	466a      	mov	r2, sp
 8002424:	882b      	ldrh	r3, [r5, #0]
	if (can_transit_on(&right_position))
 8002426:	a802      	add	r0, sp, #8
	MapPosition right_position = { .row = position->row, .col = position->col + 1 };
 8002428:	8113      	strh	r3, [r2, #8]
 800242a:	886b      	ldrh	r3, [r5, #2]
 800242c:	3301      	adds	r3, #1
 800242e:	8153      	strh	r3, [r2, #10]
	if (can_transit_on(&right_position))
 8002430:	47a0      	blx	r4
 8002432:	2800      	cmp	r0, #0
 8002434:	d12d      	bne.n	8002492 <path_node_neighbors+0xbe>
	MapPosition down_position = { .row = position->row + 1, .col = position->col };
 8002436:	466a      	mov	r2, sp
 8002438:	882b      	ldrh	r3, [r5, #0]
	if (can_transit_on(&down_position))
 800243a:	a803      	add	r0, sp, #12
	MapPosition down_position = { .row = position->row + 1, .col = position->col };
 800243c:	3301      	adds	r3, #1
 800243e:	8193      	strh	r3, [r2, #12]
 8002440:	886b      	ldrh	r3, [r5, #2]
 8002442:	81d3      	strh	r3, [r2, #14]
	if (can_transit_on(&down_position))
 8002444:	47a0      	blx	r4
 8002446:	2800      	cmp	r0, #0
 8002448:	d11c      	bne.n	8002484 <path_node_neighbors+0xb0>
	MapPosition left_position = { .row = position->row, .col = position->col - 1 };
 800244a:	466a      	mov	r2, sp
 800244c:	882b      	ldrh	r3, [r5, #0]
	if (can_transit_on(&left_position))
 800244e:	a804      	add	r0, sp, #16
	MapPosition left_position = { .row = position->row, .col = position->col - 1 };
 8002450:	8213      	strh	r3, [r2, #16]
 8002452:	886b      	ldrh	r3, [r5, #2]
 8002454:	3b01      	subs	r3, #1
 8002456:	8253      	strh	r3, [r2, #18]
	if (can_transit_on(&left_position))
 8002458:	47a0      	blx	r4
 800245a:	2800      	cmp	r0, #0
 800245c:	d10b      	bne.n	8002476 <path_node_neighbors+0xa2>
}
 800245e:	b00d      	add	sp, #52	; 0x34
 8002460:	bcc0      	pop	{r6, r7}
 8002462:	46b9      	mov	r9, r7
 8002464:	46b0      	mov	r8, r6
 8002466:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ASNeighborListAdd(neighbors, &up_position, 1);
 8002468:	22fe      	movs	r2, #254	; 0xfe
 800246a:	4640      	mov	r0, r8
 800246c:	0592      	lsls	r2, r2, #22
 800246e:	a901      	add	r1, sp, #4
 8002470:	f7ff f91a 	bl	80016a8 <ASNeighborListAdd>
 8002474:	e7d5      	b.n	8002422 <path_node_neighbors+0x4e>
		ASNeighborListAdd(neighbors, &left_position, 1);
 8002476:	22fe      	movs	r2, #254	; 0xfe
 8002478:	4640      	mov	r0, r8
 800247a:	0592      	lsls	r2, r2, #22
 800247c:	a904      	add	r1, sp, #16
 800247e:	f7ff f913 	bl	80016a8 <ASNeighborListAdd>
}
 8002482:	e7ec      	b.n	800245e <path_node_neighbors+0x8a>
		ASNeighborListAdd(neighbors, &down_position, 1);
 8002484:	22fe      	movs	r2, #254	; 0xfe
 8002486:	4640      	mov	r0, r8
 8002488:	0592      	lsls	r2, r2, #22
 800248a:	a903      	add	r1, sp, #12
 800248c:	f7ff f90c 	bl	80016a8 <ASNeighborListAdd>
 8002490:	e7db      	b.n	800244a <path_node_neighbors+0x76>
		ASNeighborListAdd(neighbors, &right_position, 1);
 8002492:	22fe      	movs	r2, #254	; 0xfe
 8002494:	4640      	mov	r0, r8
 8002496:	0592      	lsls	r2, r2, #22
 8002498:	a902      	add	r1, sp, #8
 800249a:	f7ff f905 	bl	80016a8 <ASNeighborListAdd>
 800249e:	e7ca      	b.n	8002436 <path_node_neighbors+0x62>
 80024a0:	080070cc 	.word	0x080070cc
 80024a4:	080024a9 	.word	0x080024a9

080024a8 <lambda$__anon$.7473>:
			lambda(bool, (const MapPosition* test_position), {
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4665      	mov	r5, ip
 80024ac:	0004      	movs	r4, r0
 80024ae:	0001      	movs	r1, r0
 80024b0:	6828      	ldr	r0, [r5, #0]
 80024b2:	f001 fa5f 	bl	8003974 <is_cell_valid>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d00d      	beq.n	80024d6 <lambda$__anon$.7473+0x2e>
 80024ba:	682a      	ldr	r2, [r5, #0]
 80024bc:	8823      	ldrh	r3, [r4, #0]
 80024be:	6811      	ldr	r1, [r2, #0]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	8862      	ldrh	r2, [r4, #2]
 80024c4:	585b      	ldr	r3, [r3, r1]
 80024c6:	2000      	movs	r0, #0
 80024c8:	5c9b      	ldrb	r3, [r3, r2]
 80024ca:	2201      	movs	r2, #1
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	429a      	cmp	r2, r3
 80024d2:	4140      	adcs	r0, r0
 80024d4:	b2c0      	uxtb	r0, r0
 80024d6:	bd70      	pop	{r4, r5, r6, pc}

080024d8 <find_best_path>:
 */
bool find_best_path(const MapPosition* start,
										const MapPosition* end,
										const MapInfo* mapInfo,
										MapPosition* path[],
										size_t* path_length) {
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024da:	46ce      	mov	lr, r9
 80024dc:	4647      	mov	r7, r8
 80024de:	b580      	push	{r7, lr}
 80024e0:	b087      	sub	sp, #28
 80024e2:	4680      	mov	r8, r0
	ASPathNodeSource path_node_source =
 80024e4:	a801      	add	r0, sp, #4
 80024e6:	0004      	movs	r4, r0
										size_t* path_length) {
 80024e8:	468c      	mov	ip, r1
 80024ea:	4691      	mov	r9, r2
 80024ec:	001e      	movs	r6, r3
	ASPathNodeSource path_node_source =
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <find_best_path+0x80>)
										size_t* path_length) {
 80024f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	ASPathNodeSource path_node_source =
 80024f2:	cb26      	ldmia	r3!, {r1, r2, r5}
 80024f4:	c426      	stmia	r4!, {r1, r2, r5}
 80024f6:	cb06      	ldmia	r3!, {r1, r2}
 80024f8:	c406      	stmia	r4!, {r1, r2}
	    &path_node_neighbors,
	    &path_node_heuristic,
	    NULL,
	    NULL
	};
	ASPath asPath = ASPathCreate(&path_node_source, (void*) mapInfo, (void*) start, (void*) end);
 80024fa:	4663      	mov	r3, ip
 80024fc:	4642      	mov	r2, r8
 80024fe:	4649      	mov	r1, r9
 8002500:	f7ff f8fc 	bl	80016fc <ASPathCreate>
 8002504:	0005      	movs	r5, r0

	*path_length = ASPathGetCount(asPath);
 8002506:	f7ff ff37 	bl	8002378 <ASPathGetCount>
 800250a:	6038      	str	r0, [r7, #0]
	if (*path_length == 0) {
 800250c:	2800      	cmp	r0, #0
 800250e:	d01d      	beq.n	800254c <find_best_path+0x74>
		ASPathDestroy(asPath);
		return false;
	}

	*path = (MapPosition*) calloc(*path_length, sizeof(MapPosition));
 8002510:	2104      	movs	r1, #4
 8002512:	f003 fad7 	bl	8005ac4 <calloc>

	for (size_t i = 0; i < *path_length; i++) {
 8002516:	2400      	movs	r4, #0
	*path = (MapPosition*) calloc(*path_length, sizeof(MapPosition));
 8002518:	6030      	str	r0, [r6, #0]
		MapPosition* next_position = ASPathGetNode(asPath, i);
 800251a:	0021      	movs	r1, r4
 800251c:	0028      	movs	r0, r5
 800251e:	f7ff ff31 	bl	8002384 <ASPathGetNode>
		(*path)[i] = *next_position;
 8002522:	6833      	ldr	r3, [r6, #0]
		MapPosition* next_position = ASPathGetNode(asPath, i);
 8002524:	0001      	movs	r1, r0
		(*path)[i] = *next_position;
 8002526:	469c      	mov	ip, r3
 8002528:	00a0      	lsls	r0, r4, #2
 800252a:	2204      	movs	r2, #4
 800252c:	4460      	add	r0, ip
 800252e:	f003 fb2f 	bl	8005b90 <memcpy>
	for (size_t i = 0; i < *path_length; i++) {
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	3401      	adds	r4, #1
 8002536:	42a3      	cmp	r3, r4
 8002538:	d8ef      	bhi.n	800251a <find_best_path+0x42>
	}

	ASPathDestroy(asPath);
 800253a:	0028      	movs	r0, r5
 800253c:	f7ff ff18 	bl	8002370 <ASPathDestroy>

	return true;
 8002540:	2001      	movs	r0, #1
}
 8002542:	b007      	add	sp, #28
 8002544:	bcc0      	pop	{r6, r7}
 8002546:	46b9      	mov	r9, r7
 8002548:	46b0      	mov	r8, r6
 800254a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ASPathDestroy(asPath);
 800254c:	0028      	movs	r0, r5
 800254e:	f7ff ff0f 	bl	8002370 <ASPathDestroy>
		return false;
 8002552:	2000      	movs	r0, #0
 8002554:	e7f5      	b.n	8002542 <find_best_path+0x6a>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	080070e0 	.word	0x080070e0

0800255c <lambda$__anon$.8671>:
			move_cleaner_to_adjacent_position(mapInfo, obstacle_found, true, huart, lcd, motorsInfo, &cleanerInfo, &next_cell);
			disable_cleaning(cleanComponentsInfo);
		}
		else {
			is_cleaning_ongoing = find_first_around_cell(&cleanerInfo.position, mapInfo, &next_cell,
					lambda(bool, (const MapInfo* inner_mapInfo, const MapPosition* target_pos), {
 800255c:	880b      	ldrh	r3, [r1, #0]
 800255e:	6800      	ldr	r0, [r0, #0]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	581b      	ldr	r3, [r3, r0]
 8002564:	884a      	ldrh	r2, [r1, #2]
 8002566:	5c98      	ldrb	r0, [r3, r2]
 8002568:	3801      	subs	r0, #1
 800256a:	4243      	negs	r3, r0
 800256c:	4158      	adcs	r0, r3
 800256e:	b2c0      	uxtb	r0, r0
 8002570:	4770      	bx	lr
 8002572:	46c0      	nop			; (mov r8, r8)

08002574 <lambda$__anon$.8743>:
 8002574:	b510      	push	{r4, lr}
 8002576:	f7ff fff1 	bl	800255c <lambda$__anon$.8671>
 800257a:	bd10      	pop	{r4, pc}

0800257c <lambda$__anon$.8805>:

		bool is_cell_found = false;
		// visiting the up row
		if (is_row_valid(mapInfo, start->row - radius)) {
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit, right_limit,
					lambda(MapPosition, (uint16_t i), {
 800257c:	4662      	mov	r2, ip
 800257e:	0403      	lsls	r3, r0, #16
 8002580:	88d0      	ldrh	r0, [r2, #6]
 8002582:	b082      	sub	sp, #8
 8002584:	4318      	orrs	r0, r3
 8002586:	b002      	add	sp, #8
 8002588:	4770      	bx	lr
 800258a:	46c0      	nop			; (mov r8, r8)

0800258c <lambda$__anon$.8810>:
		}

		// visiting the right column
		if (!is_cell_found && is_column_valid(mapInfo, start->col + radius)) {
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit, down_limit,
					lambda(MapPosition, (uint16_t i), {
 800258c:	4663      	mov	r3, ip
 800258e:	889b      	ldrh	r3, [r3, #4]
 8002590:	b082      	sub	sp, #8
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	4318      	orrs	r0, r3
 8002596:	b002      	add	sp, #8
 8002598:	4770      	bx	lr
 800259a:	46c0      	nop			; (mov r8, r8)

0800259c <lambda$__anon$.8815>:
		}

		// visiting the down row (from right_limit down to left_limit + 1 to maintain the clockwise visiting order
		if (!is_cell_found && is_row_valid(mapInfo, start->row + radius))
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
					lambda(MapPosition, (uint16_t i), {
 800259c:	4663      	mov	r3, ip
 800259e:	2201      	movs	r2, #1
 80025a0:	1a12      	subs	r2, r2, r0
 80025a2:	8898      	ldrh	r0, [r3, #4]
 80025a4:	b082      	sub	sp, #8
 80025a6:	1880      	adds	r0, r0, r2
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	885b      	ldrh	r3, [r3, #2]
 80025ac:	1880      	adds	r0, r0, r2
 80025ae:	0400      	lsls	r0, r0, #16
 80025b0:	4318      	orrs	r0, r3
 80025b2:	b002      	add	sp, #8
 80025b4:	4770      	bx	lr
 80025b6:	46c0      	nop			; (mov r8, r8)

080025b8 <lambda$__anon$.8820>:
					condition, target);

		// visiting the left column (from down_limit down to up_limit - 1)
		if (!is_cell_found && is_column_valid(mapInfo, start->col - radius))
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
					lambda(MapPosition, (uint16_t i), {
 80025b8:	4663      	mov	r3, ip
 80025ba:	2201      	movs	r2, #1
 80025bc:	1a12      	subs	r2, r2, r0
 80025be:	8858      	ldrh	r0, [r3, #2]
 80025c0:	b082      	sub	sp, #8
 80025c2:	1880      	adds	r0, r0, r2
 80025c4:	88da      	ldrh	r2, [r3, #6]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	1880      	adds	r0, r0, r2
 80025ca:	0400      	lsls	r0, r0, #16
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	0c00      	lsrs	r0, r0, #16
 80025d0:	4318      	orrs	r0, r3
 80025d2:	b002      	add	sp, #8
 80025d4:	4770      	bx	lr
 80025d6:	46c0      	nop			; (mov r8, r8)

080025d8 <lambda$__anon$.8726>:
			lambda(bool, (const MapPosition* position), {
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	4665      	mov	r5, ip
 80025dc:	0001      	movs	r1, r0
 80025de:	0004      	movs	r4, r0
 80025e0:	6828      	ldr	r0, [r5, #0]
 80025e2:	f001 f9c7 	bl	8003974 <is_cell_valid>
 80025e6:	2301      	movs	r3, #1
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d00b      	beq.n	8002604 <lambda$__anon$.8726+0x2c>
 80025ec:	682a      	ldr	r2, [r5, #0]
 80025ee:	8823      	ldrh	r3, [r4, #0]
 80025f0:	6811      	ldr	r1, [r2, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	8862      	ldrh	r2, [r4, #2]
 80025f6:	585b      	ldr	r3, [r3, r1]
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4393      	bics	r3, r2
 80025fe:	4258      	negs	r0, r3
 8002600:	4143      	adcs	r3, r0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	0018      	movs	r0, r3
 8002606:	bd70      	pop	{r4, r5, r6, pc}

08002608 <move_cleaner_to_adjacent_position.isra.0>:
static bool move_cleaner_to_adjacent_position(MapInfo* mapInfo,
 8002608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260a:	4657      	mov	r7, sl
 800260c:	464e      	mov	r6, r9
 800260e:	4645      	mov	r5, r8
 8002610:	4682      	mov	sl, r0
 8002612:	46de      	mov	lr, fp
 8002614:	b5e0      	push	{r5, r6, r7, lr}
 8002616:	000f      	movs	r7, r1
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002618:	4651      	mov	r1, sl
static bool move_cleaner_to_adjacent_position(MapInfo* mapInfo,
 800261a:	b083      	sub	sp, #12
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002620:	9201      	str	r2, [sp, #4]
 8002622:	4699      	mov	r9, r3
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002626:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	6809      	ldr	r1, [r1, #0]
 800262c:	8810      	ldrh	r0, [r2, #0]
 800262e:	009a      	lsls	r2, r3, #2
 8002630:	5852      	ldr	r2, [r2, r1]
static bool move_cleaner_to_adjacent_position(MapInfo* mapInfo,
 8002632:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002634:	5c12      	ldrb	r2, [r2, r0]
static bool move_cleaner_to_adjacent_position(MapInfo* mapInfo,
 8002636:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002638:	2a00      	cmp	r2, #0
 800263a:	d100      	bne.n	800263e <move_cleaner_to_adjacent_position.isra.0+0x36>
 800263c:	e150      	b.n	80028e0 <move_cleaner_to_adjacent_position.isra.0+0x2d8>
	if (target_position->row == cleaner_pos->row - 1)
 800263e:	882a      	ldrh	r2, [r5, #0]
	Direction current_dir = cleanerInfo->direction;
 8002640:	7929      	ldrb	r1, [r5, #4]
	if (target_position->row == cleaner_pos->row - 1)
 8002642:	1e56      	subs	r6, r2, #1
 8002644:	42b3      	cmp	r3, r6
 8002646:	d100      	bne.n	800264a <move_cleaner_to_adjacent_position.isra.0+0x42>
 8002648:	e120      	b.n	800288c <move_cleaner_to_adjacent_position.isra.0+0x284>
	else if (target_position->col == cleaner_pos->col + 1)
 800264a:	886e      	ldrh	r6, [r5, #2]
 800264c:	3601      	adds	r6, #1
 800264e:	42b0      	cmp	r0, r6
 8002650:	d03e      	beq.n	80026d0 <move_cleaner_to_adjacent_position.isra.0+0xc8>
	else if (target_position->row == cleaner_pos->row + 1)
 8002652:	3201      	adds	r2, #1
 8002654:	4293      	cmp	r3, r2
 8002656:	d100      	bne.n	800265a <move_cleaner_to_adjacent_position.isra.0+0x52>
 8002658:	e12a      	b.n	80028b0 <move_cleaner_to_adjacent_position.isra.0+0x2a8>
	if ((current_dir == UP && target_dir == RIGHT) ||
 800265a:	2900      	cmp	r1, #0
 800265c:	d100      	bne.n	8002660 <move_cleaner_to_adjacent_position.isra.0+0x58>
 800265e:	e120      	b.n	80028a2 <move_cleaner_to_adjacent_position.isra.0+0x29a>
 8002660:	2901      	cmp	r1, #1
 8002662:	d100      	bne.n	8002666 <move_cleaner_to_adjacent_position.isra.0+0x5e>
 8002664:	e11d      	b.n	80028a2 <move_cleaner_to_adjacent_position.isra.0+0x29a>
		target_dir = LEFT;
 8002666:	2603      	movs	r6, #3
		  (current_dir == RIGHT && target_dir == DOWN) ||
 8002668:	2902      	cmp	r1, #2
 800266a:	d034      	beq.n	80026d6 <move_cleaner_to_adjacent_position.isra.0+0xce>
	else if (current_dir != target_dir) {
 800266c:	42b1      	cmp	r1, r6
 800266e:	d053      	beq.n	8002718 <move_cleaner_to_adjacent_position.isra.0+0x110>
		while (cleanerInfo->direction != target_dir)
 8002670:	4b9e      	ldr	r3, [pc, #632]	; (80028ec <move_cleaner_to_adjacent_position.isra.0+0x2e4>)
 8002672:	469b      	mov	fp, r3
 8002674:	4b9e      	ldr	r3, [pc, #632]	; (80028f0 <move_cleaner_to_adjacent_position.isra.0+0x2e8>)
 8002676:	4698      	mov	r8, r3

	Lcd_clear_and_write(lcd, "Turning left");
#endif

	// adding 3 is like subtracting 1 with modulo 4
	cleanerInfo->direction = (cleanerInfo->direction + 3) % 4;
 8002678:	464b      	mov	r3, r9
 800267a:	46b9      	mov	r9, r7
 800267c:	001f      	movs	r7, r3
 800267e:	930c      	str	r3, [sp, #48]	; 0x30
	HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_SET); // CW
 8002680:	2201      	movs	r2, #1
 8002682:	88a1      	ldrh	r1, [r4, #4]
 8002684:	6820      	ldr	r0, [r4, #0]
 8002686:	f001 fd27 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_SET); // CW
 800268a:	2201      	movs	r2, #1
 800268c:	8aa1      	ldrh	r1, [r4, #20]
 800268e:	6920      	ldr	r0, [r4, #16]
 8002690:	f001 fd22 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_Delay(millis_to_turn);
 8002694:	465b      	mov	r3, fp
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f001 f9fe 	bl	8003a98 <HAL_Delay>
	HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	88a1      	ldrh	r1, [r4, #4]
 80026a0:	6820      	ldr	r0, [r4, #0]
 80026a2:	f001 fd19 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_RESET);
 80026a6:	2200      	movs	r2, #0
 80026a8:	8aa1      	ldrh	r1, [r4, #20]
 80026aa:	6920      	ldr	r0, [r4, #16]
 80026ac:	f001 fd14 	bl	80040d8 <HAL_GPIO_WritePin>
	Lcd_clear_and_write(lcd, "Turning left");
 80026b0:	4641      	mov	r1, r8
 80026b2:	0038      	movs	r0, r7
 80026b4:	f000 fcdc 	bl	8003070 <Lcd_clear_and_write>
	cleanerInfo->direction = (cleanerInfo->direction + 3) % 4;
 80026b8:	2203      	movs	r2, #3
 80026ba:	792b      	ldrb	r3, [r5, #4]
 80026bc:	3303      	adds	r3, #3
 80026be:	4013      	ands	r3, r2
 80026c0:	712b      	strb	r3, [r5, #4]
		while (cleanerInfo->direction != target_dir)
 80026c2:	42b3      	cmp	r3, r6
 80026c4:	d1dc      	bne.n	8002680 <move_cleaner_to_adjacent_position.isra.0+0x78>
 80026c6:	970c      	str	r7, [sp, #48]	; 0x30
 80026c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026ca:	464f      	mov	r7, r9
 80026cc:	4699      	mov	r9, r3
 80026ce:	e023      	b.n	8002718 <move_cleaner_to_adjacent_position.isra.0+0x110>
	if ((current_dir == UP && target_dir == RIGHT) ||
 80026d0:	2900      	cmp	r1, #0
 80026d2:	d000      	beq.n	80026d6 <move_cleaner_to_adjacent_position.isra.0+0xce>
 80026d4:	e0e7      	b.n	80028a6 <move_cleaner_to_adjacent_position.isra.0+0x29e>
/**
 * @brief rotate the cleaner by 90° clockwise
 */
static void turn_right(CleanerInfo* cleanerInfo, MotorsInfo* motorsInfo, Lcd_HandleTypeDef* lcd) {
#ifndef __TESTING__
	HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_SET); // ACW
 80026d6:	2201      	movs	r2, #1
 80026d8:	89a1      	ldrh	r1, [r4, #12]
 80026da:	68a0      	ldr	r0, [r4, #8]
 80026dc:	f001 fcfc 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right2_GPIOType, motorsInfo->right2_pin, GPIO_PIN_SET); // ACW
 80026e0:	2201      	movs	r2, #1
 80026e2:	8ba1      	ldrh	r1, [r4, #28]
 80026e4:	69a0      	ldr	r0, [r4, #24]
 80026e6:	f001 fcf7 	bl	80040d8 <HAL_GPIO_WritePin>

	HAL_Delay(millis_to_turn);
 80026ea:	4b80      	ldr	r3, [pc, #512]	; (80028ec <move_cleaner_to_adjacent_position.isra.0+0x2e4>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f001 f9d3 	bl	8003a98 <HAL_Delay>

	HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	89a1      	ldrh	r1, [r4, #12]
 80026f6:	68a0      	ldr	r0, [r4, #8]
 80026f8:	f001 fcee 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right2_GPIOType, motorsInfo->right2_pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	8ba1      	ldrh	r1, [r4, #28]
 8002700:	69a0      	ldr	r0, [r4, #24]
 8002702:	f001 fce9 	bl	80040d8 <HAL_GPIO_WritePin>

	Lcd_clear_and_write(lcd, "Turning right");
 8002706:	4648      	mov	r0, r9
 8002708:	497a      	ldr	r1, [pc, #488]	; (80028f4 <move_cleaner_to_adjacent_position.isra.0+0x2ec>)
 800270a:	f000 fcb1 	bl	8003070 <Lcd_clear_and_write>
#endif

	cleanerInfo->direction = (cleanerInfo->direction + 1) % 4;
 800270e:	2303      	movs	r3, #3
 8002710:	792a      	ldrb	r2, [r5, #4]
 8002712:	3201      	adds	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	712b      	strb	r3, [r5, #4]
	*obstacle_found = false;
 8002718:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800271a:	2007      	movs	r0, #7
	*obstacle_found = false;
 800271c:	703b      	strb	r3, [r7, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800271e:	f001 fa35 	bl	8003b8c <HAL_NVIC_ClearPendingIRQ>
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI4_15_IRQn);
 8002722:	2207      	movs	r2, #7
 8002724:	4b74      	ldr	r3, [pc, #464]	; (80028f8 <move_cleaner_to_adjacent_position.isra.0+0x2f0>)
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002726:	2007      	movs	r0, #7
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI4_15_IRQn);
 8002728:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI4_15_IRQn);
 800272a:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800272c:	f001 f9f8 	bl	8003b20 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_SET); // ACW
 8002730:	89a1      	ldrh	r1, [r4, #12]
 8002732:	68a0      	ldr	r0, [r4, #8]
 8002734:	2201      	movs	r2, #1
 8002736:	f001 fccf 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_SET); // CW
 800273a:	8aa1      	ldrh	r1, [r4, #20]
 800273c:	6920      	ldr	r0, [r4, #16]
 800273e:	2201      	movs	r2, #1
 8002740:	f001 fcca 	bl	80040d8 <HAL_GPIO_WritePin>
  uint32_t tickstart = HAL_GetTick();
 8002744:	f001 f9a2 	bl	8003a8c <HAL_GetTick>
  uint32_t wait = millis_to_drive;
 8002748:	4b6c      	ldr	r3, [pc, #432]	; (80028fc <move_cleaner_to_adjacent_position.isra.0+0x2f4>)
 800274a:	950e      	str	r5, [sp, #56]	; 0x38
 800274c:	681b      	ldr	r3, [r3, #0]
  while((undo_delay = HAL_GetTick() - tickstart) < wait)
 800274e:	46a0      	mov	r8, r4
 8002750:	001c      	movs	r4, r3
 8002752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002754:	003d      	movs	r5, r7
 8002756:	469b      	mov	fp, r3
 8002758:	0007      	movs	r7, r0
 800275a:	e002      	b.n	8002762 <move_cleaner_to_adjacent_position.isra.0+0x15a>
  	if (*obstacle_found) {
 800275c:	782b      	ldrb	r3, [r5, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d144      	bne.n	80027ec <move_cleaner_to_adjacent_position.isra.0+0x1e4>
  while((undo_delay = HAL_GetTick() - tickstart) < wait)
 8002762:	f001 f993 	bl	8003a8c <HAL_GetTick>
 8002766:	1bc0      	subs	r0, r0, r7
 8002768:	4284      	cmp	r4, r0
 800276a:	d8f7      	bhi.n	800275c <move_cleaner_to_adjacent_position.isra.0+0x154>
 800276c:	4644      	mov	r4, r8
 800276e:	465d      	mov	r5, fp
  HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	89a1      	ldrh	r1, [r4, #12]
 8002774:	68a0      	ldr	r0, [r4, #8]
 8002776:	f001 fcaf 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	8aa1      	ldrh	r1, [r4, #20]
 800277e:	6920      	ldr	r0, [r4, #16]
 8002780:	f001 fcaa 	bl	80040d8 <HAL_GPIO_WritePin>
	switch (cleanerInfo->direction) {
 8002784:	792b      	ldrb	r3, [r5, #4]
	uint16_t current_row = cleanerInfo->position.row;
 8002786:	8829      	ldrh	r1, [r5, #0]
	uint16_t current_col = cleanerInfo->position.col;
 8002788:	886a      	ldrh	r2, [r5, #2]
	switch (cleanerInfo->direction) {
 800278a:	2b02      	cmp	r3, #2
 800278c:	d100      	bne.n	8002790 <move_cleaner_to_adjacent_position.isra.0+0x188>
 800278e:	e09e      	b.n	80028ce <move_cleaner_to_adjacent_position.isra.0+0x2c6>
 8002790:	d827      	bhi.n	80027e2 <move_cleaner_to_adjacent_position.isra.0+0x1da>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d100      	bne.n	8002798 <move_cleaner_to_adjacent_position.isra.0+0x190>
 8002796:	e097      	b.n	80028c8 <move_cleaner_to_adjacent_position.isra.0+0x2c0>
	case RIGHT: current_col++; break;
 8002798:	3201      	adds	r2, #1
 800279a:	b292      	uxth	r2, r2
		send_new_cleaner_position_command(huart, cleanerInfo->position.row, cleanerInfo->position.col, cleaning_enabled);
 800279c:	9c01      	ldr	r4, [sp, #4]
  	cleanerInfo->position.col = next_position.col;
 800279e:	806a      	strh	r2, [r5, #2]
		send_new_cleaner_position_command(huart, cleanerInfo->position.row, cleanerInfo->position.col, cleaning_enabled);
 80027a0:	0023      	movs	r3, r4
 80027a2:	9800      	ldr	r0, [sp, #0]
  	cleanerInfo->position.row = next_position.row;
 80027a4:	8029      	strh	r1, [r5, #0]
		send_new_cleaner_position_command(huart, cleanerInfo->position.row, cleanerInfo->position.col, cleaning_enabled);
 80027a6:	f000 ff93 	bl	80036d0 <send_new_cleaner_position_command>
		Lcd_clear_and_write(lcd, "Going forward");
 80027aa:	4648      	mov	r0, r9
 80027ac:	4954      	ldr	r1, [pc, #336]	; (8002900 <move_cleaner_to_adjacent_position.isra.0+0x2f8>)
 80027ae:	f000 fc5f 	bl	8003070 <Lcd_clear_and_write>
  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80027b2:	2007      	movs	r0, #7
 80027b4:	f001 f9c0 	bl	8003b38 <HAL_NVIC_DisableIRQ>
	if (is_move_successful && cleaning_enabled)
 80027b8:	2001      	movs	r0, #1
 80027ba:	2c00      	cmp	r4, #0
 80027bc:	d00a      	beq.n	80027d4 <move_cleaner_to_adjacent_position.isra.0+0x1cc>
		mapInfo->map[target_position->row][target_position->col] = ALREADY_CLEANED;
 80027be:	4652      	mov	r2, sl
 80027c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	585b      	ldr	r3, [r3, r1]
 80027cc:	2102      	movs	r1, #2
 80027ce:	8812      	ldrh	r2, [r2, #0]
 80027d0:	9801      	ldr	r0, [sp, #4]
 80027d2:	5499      	strb	r1, [r3, r2]
}
 80027d4:	b003      	add	sp, #12
 80027d6:	bcf0      	pop	{r4, r5, r6, r7}
 80027d8:	46bb      	mov	fp, r7
 80027da:	46b2      	mov	sl, r6
 80027dc:	46a9      	mov	r9, r5
 80027de:	46a0      	mov	r8, r4
 80027e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (cleanerInfo->direction) {
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d1da      	bne.n	800279c <move_cleaner_to_adjacent_position.isra.0+0x194>
	case LEFT: current_col--; break;
 80027e6:	3a01      	subs	r2, #1
 80027e8:	b292      	uxth	r2, r2
  if (!undo_drive) {
 80027ea:	e7d7      	b.n	800279c <move_cleaner_to_adjacent_position.isra.0+0x194>
 80027ec:	4644      	mov	r4, r8
 80027ee:	465d      	mov	r5, fp
  HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	89a1      	ldrh	r1, [r4, #12]
 80027f4:	0006      	movs	r6, r0
 80027f6:	68a0      	ldr	r0, [r4, #8]
 80027f8:	f001 fc6e 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_RESET);
 80027fc:	2200      	movs	r2, #0
 80027fe:	8aa1      	ldrh	r1, [r4, #20]
 8002800:	6920      	ldr	r0, [r4, #16]
 8002802:	f001 fc69 	bl	80040d8 <HAL_GPIO_WritePin>
	uint16_t current_col = cleanerInfo->position.col;
 8002806:	886b      	ldrh	r3, [r5, #2]
	uint16_t current_row = cleanerInfo->position.row;
 8002808:	882f      	ldrh	r7, [r5, #0]
	uint16_t current_col = cleanerInfo->position.col;
 800280a:	4698      	mov	r8, r3
	switch (cleanerInfo->direction) {
 800280c:	792b      	ldrb	r3, [r5, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d060      	beq.n	80028d4 <move_cleaner_to_adjacent_position.isra.0+0x2cc>
 8002812:	d834      	bhi.n	800287e <move_cleaner_to_adjacent_position.isra.0+0x276>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d060      	beq.n	80028da <move_cleaner_to_adjacent_position.isra.0+0x2d2>
	case RIGHT: current_col++; break;
 8002818:	4643      	mov	r3, r8
 800281a:	3301      	adds	r3, #1
 800281c:	b29b      	uxth	r3, r3
 800281e:	4698      	mov	r8, r3
		HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_SET); // CW
 8002820:	2201      	movs	r2, #1
 8002822:	88a1      	ldrh	r1, [r4, #4]
 8002824:	6820      	ldr	r0, [r4, #0]
 8002826:	f001 fc57 	bl	80040d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorsInfo->right2_GPIOType, motorsInfo->right2_pin, GPIO_PIN_SET); // ACW
 800282a:	2201      	movs	r2, #1
 800282c:	8ba1      	ldrh	r1, [r4, #28]
 800282e:	69a0      	ldr	r0, [r4, #24]
 8002830:	f001 fc52 	bl	80040d8 <HAL_GPIO_WritePin>
		HAL_Delay(undo_delay);
 8002834:	0030      	movs	r0, r6
 8002836:	f001 f92f 	bl	8003a98 <HAL_Delay>
		HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	88a1      	ldrh	r1, [r4, #4]
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	f001 fc4a 	bl	80040d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorsInfo->right2_GPIOType, motorsInfo->right2_pin, GPIO_PIN_RESET);
 8002844:	2200      	movs	r2, #0
 8002846:	8ba1      	ldrh	r1, [r4, #28]
 8002848:	69a0      	ldr	r0, [r4, #24]
 800284a:	f001 fc45 	bl	80040d8 <HAL_GPIO_WritePin>
		send_obstacle_command(huart, next_position.row, next_position.col);
 800284e:	4642      	mov	r2, r8
 8002850:	0039      	movs	r1, r7
 8002852:	9800      	ldr	r0, [sp, #0]
 8002854:	f000 ff58 	bl	8003708 <send_obstacle_command>
		Lcd_clear_and_write(lcd, "Obstacle found");
 8002858:	492a      	ldr	r1, [pc, #168]	; (8002904 <move_cleaner_to_adjacent_position.isra.0+0x2fc>)
 800285a:	4648      	mov	r0, r9
 800285c:	f000 fc08 	bl	8003070 <Lcd_clear_and_write>
  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8002860:	2007      	movs	r0, #7
 8002862:	f001 f969 	bl	8003b38 <HAL_NVIC_DisableIRQ>
		mapInfo->map[target_position->row][target_position->col] = UNAVAILABLE;
 8002866:	4652      	mov	r2, sl
 8002868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800286a:	6811      	ldr	r1, [r2, #0]
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	585b      	ldr	r3, [r3, r1]
 8002874:	2100      	movs	r1, #0
 8002876:	8812      	ldrh	r2, [r2, #0]
		was_target_reached = false;
 8002878:	2000      	movs	r0, #0
		mapInfo->map[target_position->row][target_position->col] = UNAVAILABLE;
 800287a:	5499      	strb	r1, [r3, r2]
 800287c:	e7aa      	b.n	80027d4 <move_cleaner_to_adjacent_position.isra.0+0x1cc>
	switch (cleanerInfo->direction) {
 800287e:	2b03      	cmp	r3, #3
 8002880:	d1ce      	bne.n	8002820 <move_cleaner_to_adjacent_position.isra.0+0x218>
	case LEFT: current_col--; break;
 8002882:	4643      	mov	r3, r8
 8002884:	3b01      	subs	r3, #1
 8002886:	b29b      	uxth	r3, r3
 8002888:	4698      	mov	r8, r3
  if (!undo_drive) {
 800288a:	e7c9      	b.n	8002820 <move_cleaner_to_adjacent_position.isra.0+0x218>
		target_dir = UP;
 800288c:	2600      	movs	r6, #0
	if ((current_dir == UP && target_dir == RIGHT) ||
 800288e:	2901      	cmp	r1, #1
 8002890:	d100      	bne.n	8002894 <move_cleaner_to_adjacent_position.isra.0+0x28c>
 8002892:	e6ed      	b.n	8002670 <move_cleaner_to_adjacent_position.isra.0+0x68>
		  (current_dir == RIGHT && target_dir == DOWN) ||
 8002894:	2902      	cmp	r1, #2
 8002896:	d100      	bne.n	800289a <move_cleaner_to_adjacent_position.isra.0+0x292>
 8002898:	e6ea      	b.n	8002670 <move_cleaner_to_adjacent_position.isra.0+0x68>
		  (current_dir == DOWN && target_dir == LEFT) ||
 800289a:	2903      	cmp	r1, #3
 800289c:	d000      	beq.n	80028a0 <move_cleaner_to_adjacent_position.isra.0+0x298>
 800289e:	e6e5      	b.n	800266c <move_cleaner_to_adjacent_position.isra.0+0x64>
 80028a0:	e719      	b.n	80026d6 <move_cleaner_to_adjacent_position.isra.0+0xce>
		target_dir = LEFT;
 80028a2:	2603      	movs	r6, #3
 80028a4:	e6e4      	b.n	8002670 <move_cleaner_to_adjacent_position.isra.0+0x68>
	if ((current_dir == UP && target_dir == RIGHT) ||
 80028a6:	2901      	cmp	r1, #1
 80028a8:	d100      	bne.n	80028ac <move_cleaner_to_adjacent_position.isra.0+0x2a4>
 80028aa:	e735      	b.n	8002718 <move_cleaner_to_adjacent_position.isra.0+0x110>
		target_dir = RIGHT;
 80028ac:	2601      	movs	r6, #1
 80028ae:	e6df      	b.n	8002670 <move_cleaner_to_adjacent_position.isra.0+0x68>
	if ((current_dir == UP && target_dir == RIGHT) ||
 80028b0:	2900      	cmp	r1, #0
 80028b2:	d101      	bne.n	80028b8 <move_cleaner_to_adjacent_position.isra.0+0x2b0>
		  (current_dir == RIGHT && target_dir == DOWN) ||
 80028b4:	2602      	movs	r6, #2
 80028b6:	e6db      	b.n	8002670 <move_cleaner_to_adjacent_position.isra.0+0x68>
	if ((current_dir == UP && target_dir == RIGHT) ||
 80028b8:	2901      	cmp	r1, #1
 80028ba:	d100      	bne.n	80028be <move_cleaner_to_adjacent_position.isra.0+0x2b6>
 80028bc:	e70b      	b.n	80026d6 <move_cleaner_to_adjacent_position.isra.0+0xce>
		  (current_dir == RIGHT && target_dir == DOWN) ||
 80028be:	2902      	cmp	r1, #2
 80028c0:	d100      	bne.n	80028c4 <move_cleaner_to_adjacent_position.isra.0+0x2bc>
 80028c2:	e729      	b.n	8002718 <move_cleaner_to_adjacent_position.isra.0+0x110>
 80028c4:	2602      	movs	r6, #2
 80028c6:	e6d3      	b.n	8002670 <move_cleaner_to_adjacent_position.isra.0+0x68>
	case UP: current_row--; break;
 80028c8:	3901      	subs	r1, #1
 80028ca:	b289      	uxth	r1, r1
  if (!undo_drive) {
 80028cc:	e766      	b.n	800279c <move_cleaner_to_adjacent_position.isra.0+0x194>
	case DOWN: current_row++; break;
 80028ce:	3101      	adds	r1, #1
 80028d0:	b289      	uxth	r1, r1
  if (!undo_drive) {
 80028d2:	e763      	b.n	800279c <move_cleaner_to_adjacent_position.isra.0+0x194>
	case DOWN: current_row++; break;
 80028d4:	3701      	adds	r7, #1
 80028d6:	b2bf      	uxth	r7, r7
  if (!undo_drive) {
 80028d8:	e7a2      	b.n	8002820 <move_cleaner_to_adjacent_position.isra.0+0x218>
	case UP: current_row--; break;
 80028da:	3f01      	subs	r7, #1
 80028dc:	b2bf      	uxth	r7, r7
  if (!undo_drive) {
 80028de:	e79f      	b.n	8002820 <move_cleaner_to_adjacent_position.isra.0+0x218>
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 80028e0:	21b4      	movs	r1, #180	; 0xb4
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <move_cleaner_to_adjacent_position.isra.0+0x300>)
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <move_cleaner_to_adjacent_position.isra.0+0x304>)
 80028e6:	480a      	ldr	r0, [pc, #40]	; (8002910 <move_cleaner_to_adjacent_position.isra.0+0x308>)
 80028e8:	f003 f8c8 	bl	8005a7c <__assert_func>
 80028ec:	20000004 	.word	0x20000004
 80028f0:	080071c4 	.word	0x080071c4
 80028f4:	080071b4 	.word	0x080071b4
 80028f8:	40010400 	.word	0x40010400
 80028fc:	20000000 	.word	0x20000000
 8002900:	080071d4 	.word	0x080071d4
 8002904:	080071e4 	.word	0x080071e4
 8002908:	08007154 	.word	0x08007154
 800290c:	08007204 	.word	0x08007204
 8002910:	0800719c 	.word	0x0800719c

08002914 <find_first_around_cell.isra.0>:
static bool find_first_around_cell(const MapPosition* start,
 8002914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002916:	46de      	mov	lr, fp
 8002918:	4645      	mov	r5, r8
 800291a:	4657      	mov	r7, sl
 800291c:	464e      	mov	r6, r9
 800291e:	b5e0      	push	{r5, r6, r7, lr}
 8002920:	b09d      	sub	sp, #116	; 0x74
 8002922:	9303      	str	r3, [sp, #12]
 8002924:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002926:	4ea2      	ldr	r6, [pc, #648]	; (8002bb0 <find_first_around_cell.isra.0+0x29c>)
 8002928:	af05      	add	r7, sp, #20
 800292a:	ad16      	add	r5, sp, #88	; 0x58
 800292c:	4698      	mov	r8, r3
 800292e:	ab26      	add	r3, sp, #152	; 0x98
 8002930:	65bb      	str	r3, [r7, #88]	; 0x58
 8002932:	4693      	mov	fp, r2
 8002934:	002b      	movs	r3, r5
 8002936:	0032      	movs	r2, r6
 8002938:	9001      	str	r0, [sp, #4]
 800293a:	9100      	str	r1, [sp, #0]
 800293c:	4689      	mov	r9, r1
 800293e:	4682      	mov	sl, r0
 8002940:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002942:	c313      	stmia	r3!, {r0, r1, r4}
 8002944:	ca12      	ldmia	r2!, {r1, r4}
 8002946:	c312      	stmia	r3!, {r1, r4}
 8002948:	4b9a      	ldr	r3, [pc, #616]	; (8002bb4 <find_first_around_cell.isra.0+0x2a0>)
 800294a:	a91b      	add	r1, sp, #108	; 0x6c
 800294c:	0028      	movs	r0, r5
 800294e:	612b      	str	r3, [r5, #16]
 8002950:	60ef      	str	r7, [r5, #12]
 8002952:	f7fd fcf9 	bl	8000348 <__clear_cache>
 8002956:	0032      	movs	r2, r6
 8002958:	ab11      	add	r3, sp, #68	; 0x44
 800295a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800295c:	c313      	stmia	r3!, {r0, r1, r4}
 800295e:	ca12      	ldmia	r2!, {r1, r4}
 8002960:	c312      	stmia	r3!, {r1, r4}
 8002962:	4b95      	ldr	r3, [pc, #596]	; (8002bb8 <find_first_around_cell.isra.0+0x2a4>)
 8002964:	0029      	movs	r1, r5
 8002966:	9315      	str	r3, [sp, #84]	; 0x54
 8002968:	ab11      	add	r3, sp, #68	; 0x44
 800296a:	0018      	movs	r0, r3
 800296c:	9714      	str	r7, [sp, #80]	; 0x50
 800296e:	f7fd fceb 	bl	8000348 <__clear_cache>
 8002972:	0032      	movs	r2, r6
 8002974:	ab0c      	add	r3, sp, #48	; 0x30
 8002976:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002978:	c313      	stmia	r3!, {r0, r1, r4}
 800297a:	ca12      	ldmia	r2!, {r1, r4}
 800297c:	c312      	stmia	r3!, {r1, r4}
 800297e:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <find_first_around_cell.isra.0+0x2a8>)
 8002980:	970f      	str	r7, [sp, #60]	; 0x3c
 8002982:	9310      	str	r3, [sp, #64]	; 0x40
 8002984:	ab11      	add	r3, sp, #68	; 0x44
 8002986:	0019      	movs	r1, r3
 8002988:	ab0c      	add	r3, sp, #48	; 0x30
 800298a:	0018      	movs	r0, r3
 800298c:	f7fd fcdc 	bl	8000348 <__clear_cache>
 8002990:	ab07      	add	r3, sp, #28
 8002992:	ce16      	ldmia	r6!, {r1, r2, r4}
 8002994:	c316      	stmia	r3!, {r1, r2, r4}
 8002996:	ce14      	ldmia	r6!, {r2, r4}
 8002998:	c314      	stmia	r3!, {r2, r4}
 800299a:	4b89      	ldr	r3, [pc, #548]	; (8002bc0 <find_first_around_cell.isra.0+0x2ac>)
 800299c:	970a      	str	r7, [sp, #40]	; 0x28
 800299e:	930b      	str	r3, [sp, #44]	; 0x2c
 80029a0:	ab0c      	add	r3, sp, #48	; 0x30
 80029a2:	0019      	movs	r1, r3
 80029a4:	ab07      	add	r3, sp, #28
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7fd fcce 	bl	8000348 <__clear_cache>
	uint16_t max_radius = max(
 80029ac:	4653      	mov	r3, sl
 80029ae:	881a      	ldrh	r2, [r3, #0]
 80029b0:	465b      	mov	r3, fp
 80029b2:	889b      	ldrh	r3, [r3, #4]
 80029b4:	4659      	mov	r1, fp
 80029b6:	469c      	mov	ip, r3
 80029b8:	464b      	mov	r3, r9
 80029ba:	88c8      	ldrh	r0, [r1, #6]
 80029bc:	4661      	mov	r1, ip
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	1a89      	subs	r1, r1, r2
 80029c2:	0016      	movs	r6, r2
 80029c4:	3901      	subs	r1, #1
 80029c6:	429a      	cmp	r2, r3
 80029c8:	da00      	bge.n	80029cc <find_first_around_cell.isra.0+0xb8>
 80029ca:	001e      	movs	r6, r3
 80029cc:	42b1      	cmp	r1, r6
 80029ce:	da00      	bge.n	80029d2 <find_first_around_cell.isra.0+0xbe>
 80029d0:	0031      	movs	r1, r6
 80029d2:	1ac6      	subs	r6, r0, r3
 80029d4:	3e01      	subs	r6, #1
 80029d6:	42b1      	cmp	r1, r6
 80029d8:	da00      	bge.n	80029dc <find_first_around_cell.isra.0+0xc8>
 80029da:	0031      	movs	r1, r6
 80029dc:	b28e      	uxth	r6, r1
 80029de:	9602      	str	r6, [sp, #8]
	for (uint16_t radius = 1; radius <= max_radius; radius++) {
 80029e0:	2900      	cmp	r1, #0
 80029e2:	d100      	bne.n	80029e6 <find_first_around_cell.isra.0+0xd2>
 80029e4:	e0e2      	b.n	8002bac <find_first_around_cell.isra.0+0x298>
 80029e6:	2601      	movs	r6, #1
					lambda(MapPosition, (uint16_t i), {
 80029e8:	4335      	orrs	r5, r6
 80029ea:	46a9      	mov	r9, r5
 80029ec:	465c      	mov	r4, fp
 80029ee:	e029      	b.n	8002a44 <find_first_around_cell.isra.0+0x130>
		if (!is_cell_found && is_column_valid(mapInfo, start->col + radius)) {
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	0020      	movs	r0, r4
 80029f4:	8819      	ldrh	r1, [r3, #0]
 80029f6:	1871      	adds	r1, r6, r1
 80029f8:	b289      	uxth	r1, r1
 80029fa:	f000 ffb5 	bl	8003968 <is_column_valid>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d15f      	bne.n	8002ac2 <find_first_around_cell.isra.0+0x1ae>
		if (!is_cell_found && is_row_valid(mapInfo, start->row + radius))
 8002a02:	9b01      	ldr	r3, [sp, #4]
 8002a04:	0020      	movs	r0, r4
 8002a06:	8819      	ldrh	r1, [r3, #0]
 8002a08:	1871      	adds	r1, r6, r1
 8002a0a:	b289      	uxth	r1, r1
 8002a0c:	f000 ffa6 	bl	800395c <is_row_valid>
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d000      	beq.n	8002a16 <find_first_around_cell.isra.0+0x102>
 8002a14:	e07b      	b.n	8002b0e <find_first_around_cell.isra.0+0x1fa>
		if (!is_cell_found && is_column_valid(mapInfo, start->col - radius))
 8002a16:	9b00      	ldr	r3, [sp, #0]
 8002a18:	0020      	movs	r0, r4
 8002a1a:	8819      	ldrh	r1, [r3, #0]
 8002a1c:	1b89      	subs	r1, r1, r6
 8002a1e:	b289      	uxth	r1, r1
 8002a20:	f000 ffa2 	bl	8003968 <is_column_valid>
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d000      	beq.n	8002a2a <find_first_around_cell.isra.0+0x116>
 8002a28:	e091      	b.n	8002b4e <find_first_around_cell.isra.0+0x23a>
	for (uint16_t radius = 1; radius <= max_radius; radius++) {
 8002a2a:	3601      	adds	r6, #1
 8002a2c:	9b02      	ldr	r3, [sp, #8]
 8002a2e:	b2b6      	uxth	r6, r6
 8002a30:	42b3      	cmp	r3, r6
 8002a32:	d200      	bcs.n	8002a36 <find_first_around_cell.isra.0+0x122>
 8002a34:	e0ba      	b.n	8002bac <find_first_around_cell.isra.0+0x298>
 8002a36:	88a1      	ldrh	r1, [r4, #4]
 8002a38:	9b01      	ldr	r3, [sp, #4]
 8002a3a:	468c      	mov	ip, r1
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	9b00      	ldr	r3, [sp, #0]
 8002a40:	88e0      	ldrh	r0, [r4, #6]
 8002a42:	881b      	ldrh	r3, [r3, #0]
		uint16_t up_limit = max(0, start->row - radius);
 8002a44:	1b91      	subs	r1, r2, r6
 8002a46:	43cd      	mvns	r5, r1
 8002a48:	17ed      	asrs	r5, r5, #31
 8002a4a:	400d      	ands	r5, r1
 8002a4c:	80fd      	strh	r5, [r7, #6]
		uint16_t right_limit = min(mapInfo->column_count - 1, start->col + radius);
 8002a4e:	3801      	subs	r0, #1
 8002a50:	18f5      	adds	r5, r6, r3
 8002a52:	42a8      	cmp	r0, r5
 8002a54:	dd00      	ble.n	8002a58 <find_first_around_cell.isra.0+0x144>
 8002a56:	0028      	movs	r0, r5
 8002a58:	80b8      	strh	r0, [r7, #4]
		uint16_t down_limit = min(mapInfo->row_count - 1, start->row + radius);
 8002a5a:	4660      	mov	r0, ip
 8002a5c:	1992      	adds	r2, r2, r6
 8002a5e:	3801      	subs	r0, #1
 8002a60:	4290      	cmp	r0, r2
 8002a62:	dd00      	ble.n	8002a66 <find_first_around_cell.isra.0+0x152>
 8002a64:	0010      	movs	r0, r2
		uint16_t left_limit = max(0, start->col - radius);
 8002a66:	1b9b      	subs	r3, r3, r6
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	17d2      	asrs	r2, r2, #31
		uint16_t down_limit = min(mapInfo->row_count - 1, start->row + radius);
 8002a6c:	8078      	strh	r0, [r7, #2]
		uint16_t left_limit = max(0, start->col - radius);
 8002a6e:	4013      	ands	r3, r2
		if (is_row_valid(mapInfo, start->row - radius)) {
 8002a70:	0020      	movs	r0, r4
 8002a72:	b289      	uxth	r1, r1
		uint16_t left_limit = max(0, start->col - radius);
 8002a74:	803b      	strh	r3, [r7, #0]
		if (is_row_valid(mapInfo, start->row - radius)) {
 8002a76:	f000 ff71 	bl	800395c <is_row_valid>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d0b8      	beq.n	80029f0 <find_first_around_cell.isra.0+0xdc>
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit, right_limit,
 8002a7e:	88bb      	ldrh	r3, [r7, #4]
 8002a80:	883d      	ldrh	r5, [r7, #0]
 8002a82:	469a      	mov	sl, r3
	for (uint16_t i = start_index; i < excl_end_index; i++) {
 8002a84:	429d      	cmp	r5, r3
 8002a86:	d2b3      	bcs.n	80029f0 <find_first_around_cell.isra.0+0xdc>
 8002a88:	4643      	mov	r3, r8
 8002a8a:	46b0      	mov	r8, r6
 8002a8c:	9326      	str	r3, [sp, #152]	; 0x98
 8002a8e:	001e      	movs	r6, r3
 8002a90:	e003      	b.n	8002a9a <find_first_around_cell.isra.0+0x186>
 8002a92:	3501      	adds	r5, #1
 8002a94:	b2ad      	uxth	r5, r5
 8002a96:	45aa      	cmp	sl, r5
 8002a98:	d92f      	bls.n	8002afa <find_first_around_cell.isra.0+0x1e6>
		MapPosition cur_cell = position_generator(i);
 8002a9a:	0028      	movs	r0, r5
 8002a9c:	47c8      	blx	r9
		if (condition(mapInfo, &cur_cell)) {
 8002a9e:	a904      	add	r1, sp, #16
		MapPosition cur_cell = position_generator(i);
 8002aa0:	9004      	str	r0, [sp, #16]
		if (condition(mapInfo, &cur_cell)) {
 8002aa2:	0020      	movs	r0, r4
 8002aa4:	47b0      	blx	r6
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d0f3      	beq.n	8002a92 <find_first_around_cell.isra.0+0x17e>
			*target = cur_cell;
 8002aaa:	9b04      	ldr	r3, [sp, #16]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	9a00      	ldr	r2, [sp, #0]
 8002ab0:	9b03      	ldr	r3, [sp, #12]
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	b01d      	add	sp, #116	; 0x74
 8002ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8002ab8:	46bb      	mov	fp, r7
 8002aba:	46b2      	mov	sl, r6
 8002abc:	46a9      	mov	r9, r5
 8002abe:	46a0      	mov	r8, r4
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					lambda(MapPosition, (uint16_t i), {
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	ab11      	add	r3, sp, #68	; 0x44
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	469b      	mov	fp, r3
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit, down_limit,
 8002aca:	88fd      	ldrh	r5, [r7, #6]
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	469a      	mov	sl, r3
	for (uint16_t i = start_index; i < excl_end_index; i++) {
 8002ad0:	429d      	cmp	r5, r3
 8002ad2:	d300      	bcc.n	8002ad6 <find_first_around_cell.isra.0+0x1c2>
 8002ad4:	e795      	b.n	8002a02 <find_first_around_cell.isra.0+0xee>
 8002ad6:	4643      	mov	r3, r8
 8002ad8:	46b0      	mov	r8, r6
 8002ada:	9326      	str	r3, [sp, #152]	; 0x98
 8002adc:	001e      	movs	r6, r3
 8002ade:	e003      	b.n	8002ae8 <find_first_around_cell.isra.0+0x1d4>
 8002ae0:	3501      	adds	r5, #1
 8002ae2:	b2ad      	uxth	r5, r5
 8002ae4:	45aa      	cmp	sl, r5
 8002ae6:	d90d      	bls.n	8002b04 <find_first_around_cell.isra.0+0x1f0>
		MapPosition cur_cell = position_generator(i);
 8002ae8:	0028      	movs	r0, r5
 8002aea:	47d8      	blx	fp
		if (condition(mapInfo, &cur_cell)) {
 8002aec:	a904      	add	r1, sp, #16
		MapPosition cur_cell = position_generator(i);
 8002aee:	9004      	str	r0, [sp, #16]
		if (condition(mapInfo, &cur_cell)) {
 8002af0:	0020      	movs	r0, r4
 8002af2:	47b0      	blx	r6
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d0f3      	beq.n	8002ae0 <find_first_around_cell.isra.0+0x1cc>
 8002af8:	e7d7      	b.n	8002aaa <find_first_around_cell.isra.0+0x196>
 8002afa:	9626      	str	r6, [sp, #152]	; 0x98
 8002afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002afe:	4646      	mov	r6, r8
 8002b00:	4698      	mov	r8, r3
 8002b02:	e775      	b.n	80029f0 <find_first_around_cell.isra.0+0xdc>
 8002b04:	9626      	str	r6, [sp, #152]	; 0x98
 8002b06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002b08:	4646      	mov	r6, r8
 8002b0a:	4698      	mov	r8, r3
 8002b0c:	e779      	b.n	8002a02 <find_first_around_cell.isra.0+0xee>
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
 8002b0e:	88bb      	ldrh	r3, [r7, #4]
					lambda(MapPosition, (uint16_t i), {
 8002b10:	2201      	movs	r2, #1
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
 8002b12:	3301      	adds	r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	469a      	mov	sl, r3
 8002b18:	883d      	ldrh	r5, [r7, #0]
					lambda(MapPosition, (uint16_t i), {
 8002b1a:	ab0c      	add	r3, sp, #48	; 0x30
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
 8002b1c:	3501      	adds	r5, #1
					lambda(MapPosition, (uint16_t i), {
 8002b1e:	4313      	orrs	r3, r2
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
 8002b20:	b2ad      	uxth	r5, r5
					lambda(MapPosition, (uint16_t i), {
 8002b22:	469b      	mov	fp, r3
	for (uint16_t i = start_index; i < excl_end_index; i++) {
 8002b24:	4555      	cmp	r5, sl
 8002b26:	d300      	bcc.n	8002b2a <find_first_around_cell.isra.0+0x216>
 8002b28:	e775      	b.n	8002a16 <find_first_around_cell.isra.0+0x102>
 8002b2a:	4643      	mov	r3, r8
 8002b2c:	46b0      	mov	r8, r6
 8002b2e:	9326      	str	r3, [sp, #152]	; 0x98
 8002b30:	001e      	movs	r6, r3
 8002b32:	e003      	b.n	8002b3c <find_first_around_cell.isra.0+0x228>
 8002b34:	3501      	adds	r5, #1
 8002b36:	b2ad      	uxth	r5, r5
 8002b38:	45aa      	cmp	sl, r5
 8002b3a:	d928      	bls.n	8002b8e <find_first_around_cell.isra.0+0x27a>
		MapPosition cur_cell = position_generator(i);
 8002b3c:	0028      	movs	r0, r5
 8002b3e:	47d8      	blx	fp
		if (condition(mapInfo, &cur_cell)) {
 8002b40:	a904      	add	r1, sp, #16
		MapPosition cur_cell = position_generator(i);
 8002b42:	9004      	str	r0, [sp, #16]
		if (condition(mapInfo, &cur_cell)) {
 8002b44:	0020      	movs	r0, r4
 8002b46:	47b0      	blx	r6
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d0f3      	beq.n	8002b34 <find_first_around_cell.isra.0+0x220>
 8002b4c:	e7ad      	b.n	8002aaa <find_first_around_cell.isra.0+0x196>
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
 8002b4e:	887b      	ldrh	r3, [r7, #2]
					lambda(MapPosition, (uint16_t i), {
 8002b50:	2201      	movs	r2, #1
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
 8002b52:	3301      	adds	r3, #1
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	469a      	mov	sl, r3
 8002b58:	88fd      	ldrh	r5, [r7, #6]
					lambda(MapPosition, (uint16_t i), {
 8002b5a:	ab07      	add	r3, sp, #28
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
 8002b5c:	3501      	adds	r5, #1
					lambda(MapPosition, (uint16_t i), {
 8002b5e:	4313      	orrs	r3, r2
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
 8002b60:	b2ad      	uxth	r5, r5
					lambda(MapPosition, (uint16_t i), {
 8002b62:	469b      	mov	fp, r3
	for (uint16_t i = start_index; i < excl_end_index; i++) {
 8002b64:	4555      	cmp	r5, sl
 8002b66:	d300      	bcc.n	8002b6a <find_first_around_cell.isra.0+0x256>
 8002b68:	e75f      	b.n	8002a2a <find_first_around_cell.isra.0+0x116>
 8002b6a:	4643      	mov	r3, r8
 8002b6c:	46b0      	mov	r8, r6
 8002b6e:	9326      	str	r3, [sp, #152]	; 0x98
 8002b70:	001e      	movs	r6, r3
 8002b72:	e003      	b.n	8002b7c <find_first_around_cell.isra.0+0x268>
 8002b74:	3501      	adds	r5, #1
 8002b76:	b2ad      	uxth	r5, r5
 8002b78:	45aa      	cmp	sl, r5
 8002b7a:	d90d      	bls.n	8002b98 <find_first_around_cell.isra.0+0x284>
		MapPosition cur_cell = position_generator(i);
 8002b7c:	0028      	movs	r0, r5
 8002b7e:	47d8      	blx	fp
		if (condition(mapInfo, &cur_cell)) {
 8002b80:	a904      	add	r1, sp, #16
		MapPosition cur_cell = position_generator(i);
 8002b82:	9004      	str	r0, [sp, #16]
		if (condition(mapInfo, &cur_cell)) {
 8002b84:	0020      	movs	r0, r4
 8002b86:	47b0      	blx	r6
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d0f3      	beq.n	8002b74 <find_first_around_cell.isra.0+0x260>
 8002b8c:	e78d      	b.n	8002aaa <find_first_around_cell.isra.0+0x196>
 8002b8e:	9626      	str	r6, [sp, #152]	; 0x98
 8002b90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002b92:	4646      	mov	r6, r8
 8002b94:	4698      	mov	r8, r3
 8002b96:	e73e      	b.n	8002a16 <find_first_around_cell.isra.0+0x102>
 8002b98:	9626      	str	r6, [sp, #152]	; 0x98
 8002b9a:	4646      	mov	r6, r8
 8002b9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
	for (uint16_t radius = 1; radius <= max_radius; radius++) {
 8002b9e:	3601      	adds	r6, #1
 8002ba0:	4698      	mov	r8, r3
 8002ba2:	9b02      	ldr	r3, [sp, #8]
 8002ba4:	b2b6      	uxth	r6, r6
 8002ba6:	42b3      	cmp	r3, r6
 8002ba8:	d300      	bcc.n	8002bac <find_first_around_cell.isra.0+0x298>
 8002baa:	e744      	b.n	8002a36 <find_first_around_cell.isra.0+0x122>
	return false;
 8002bac:	2000      	movs	r0, #0
 8002bae:	e781      	b.n	8002ab4 <find_first_around_cell.isra.0+0x1a0>
 8002bb0:	080070f4 	.word	0x080070f4
 8002bb4:	0800257d 	.word	0x0800257d
 8002bb8:	0800258d 	.word	0x0800258d
 8002bbc:	0800259d 	.word	0x0800259d
 8002bc0:	080025b9 	.word	0x080025b9

08002bc4 <move_cleaner_to.constprop.0>:
static bool move_cleaner_to(MapInfo* mapInfo,
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	4657      	mov	r7, sl
 8002bc8:	464e      	mov	r6, r9
 8002bca:	4645      	mov	r5, r8
 8002bcc:	46de      	mov	lr, fp
 8002bce:	b5e0      	push	{r5, r6, r7, lr}
 8002bd0:	b089      	sub	sp, #36	; 0x24
 8002bd2:	4699      	mov	r9, r3
 8002bd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	469a      	mov	sl, r3
 8002bda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002bdc:	000f      	movs	r7, r1
 8002bde:	469b      	mov	fp, r3
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002be0:	465a      	mov	r2, fp
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	6801      	ldr	r1, [r0, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	8852      	ldrh	r2, [r2, #2]
 8002bea:	585b      	ldr	r3, [r3, r1]
static bool move_cleaner_to(MapInfo* mapInfo,
 8002bec:	0006      	movs	r6, r0
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002bee:	5c9b      	ldrb	r3, [r3, r2]
static bool move_cleaner_to(MapInfo* mapInfo,
 8002bf0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d045      	beq.n	8002c82 <move_cleaner_to.constprop.0+0xbe>
	while (!are_MapPositions_equal(&cleanerInfo->position, target_position)) {
 8002bf6:	4659      	mov	r1, fp
 8002bf8:	0028      	movs	r0, r5
 8002bfa:	f000 fec9 	bl	8003990 <are_MapPositions_equal>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d138      	bne.n	8002c74 <move_cleaner_to.constprop.0+0xb0>
		bool does_path_exist = find_best_path(&cleanerInfo->position, target_position, mapInfo, &path, &path_length);
 8002c02:	ab07      	add	r3, sp, #28
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	0032      	movs	r2, r6
 8002c08:	4659      	mov	r1, fp
 8002c0a:	0028      	movs	r0, r5
 8002c0c:	ab06      	add	r3, sp, #24
 8002c0e:	f7ff fc63 	bl	80024d8 <find_best_path>
		if (!does_path_exist)
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d02e      	beq.n	8002c74 <move_cleaner_to.constprop.0+0xb0>
		for (size_t i = 1; i < path_length; i++) {
 8002c16:	9b07      	ldr	r3, [sp, #28]
 8002c18:	2401      	movs	r4, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d921      	bls.n	8002c62 <move_cleaner_to.constprop.0+0x9e>
 8002c1e:	9513      	str	r5, [sp, #76]	; 0x4c
 8002c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002c22:	4645      	mov	r5, r8
 8002c24:	4698      	mov	r8, r3
 8002c26:	e003      	b.n	8002c30 <move_cleaner_to.constprop.0+0x6c>
 8002c28:	9b07      	ldr	r3, [sp, #28]
 8002c2a:	3401      	adds	r4, #1
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	d214      	bcs.n	8002c5a <move_cleaner_to.constprop.0+0x96>
			is_move_successful = move_cleaner_to_adjacent_position(mapInfo,
 8002c30:	9a06      	ldr	r2, [sp, #24]
 8002c32:	00a3      	lsls	r3, r4, #2
 8002c34:	4694      	mov	ip, r2
 8002c36:	4463      	add	r3, ip
 8002c38:	1c9a      	adds	r2, r3, #2
 8002c3a:	9303      	str	r3, [sp, #12]
 8002c3c:	4643      	mov	r3, r8
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	4653      	mov	r3, sl
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	464b      	mov	r3, r9
 8002c46:	9204      	str	r2, [sp, #16]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	002b      	movs	r3, r5
 8002c4e:	0039      	movs	r1, r7
 8002c50:	0030      	movs	r0, r6
 8002c52:	f7ff fcd9 	bl	8002608 <move_cleaner_to_adjacent_position.isra.0>
			if (!is_move_successful)
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d1e6      	bne.n	8002c28 <move_cleaner_to.constprop.0+0x64>
 8002c5a:	4643      	mov	r3, r8
 8002c5c:	46a8      	mov	r8, r5
 8002c5e:	001d      	movs	r5, r3
 8002c60:	9313      	str	r3, [sp, #76]	; 0x4c
		free(path);
 8002c62:	9806      	ldr	r0, [sp, #24]
 8002c64:	f002 ff7c 	bl	8005b60 <free>
	while (!are_MapPositions_equal(&cleanerInfo->position, target_position)) {
 8002c68:	4659      	mov	r1, fp
 8002c6a:	0028      	movs	r0, r5
 8002c6c:	f000 fe90 	bl	8003990 <are_MapPositions_equal>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d0c6      	beq.n	8002c02 <move_cleaner_to.constprop.0+0x3e>
}
 8002c74:	b009      	add	sp, #36	; 0x24
 8002c76:	bcf0      	pop	{r4, r5, r6, r7}
 8002c78:	46bb      	mov	fp, r7
 8002c7a:	46b2      	mov	sl, r6
 8002c7c:	46a9      	mov	r9, r5
 8002c7e:	46a0      	mov	r8, r4
 8002c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002c82:	2188      	movs	r1, #136	; 0x88
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <move_cleaner_to.constprop.0+0xcc>)
 8002c86:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <move_cleaner_to.constprop.0+0xd0>)
 8002c88:	4803      	ldr	r0, [pc, #12]	; (8002c98 <move_cleaner_to.constprop.0+0xd4>)
 8002c8a:	f002 fef7 	bl	8005a7c <__assert_func>
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	08007154 	.word	0x08007154
 8002c94:	080071f4 	.word	0x080071f4
 8002c98:	0800719c 	.word	0x0800719c

08002c9c <start_drive>:
								CleanComponentsInfo* cleanComponentsInfo) {
 8002c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9e:	464e      	mov	r6, r9
 8002ca0:	4657      	mov	r7, sl
 8002ca2:	46de      	mov	lr, fp
 8002ca4:	4645      	mov	r5, r8
 8002ca6:	b5e0      	push	{r5, r6, r7, lr}
 8002ca8:	b09f      	sub	sp, #124	; 0x7c
 8002caa:	930d      	str	r3, [sp, #52]	; 0x34
 8002cac:	910c      	str	r1, [sp, #48]	; 0x30
 8002cae:	920b      	str	r2, [sp, #44]	; 0x2c
 8002cb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
	for (int r = 0; r < mapInfo->row_count; r++) {
 8002cb2:	8886      	ldrh	r6, [r0, #4]
								CleanComponentsInfo* cleanComponentsInfo) {
 8002cb4:	4681      	mov	r9, r0
 8002cb6:	469a      	mov	sl, r3
	for (int r = 0; r < mapInfo->row_count; r++) {
 8002cb8:	2e00      	cmp	r6, #0
 8002cba:	d100      	bne.n	8002cbe <start_drive+0x22>
 8002cbc:	e0d0      	b.n	8002e60 <start_drive+0x1c4>
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	464f      	mov	r7, r9
		for (int c = 0; c < mapInfo->column_count; c++) {
 8002cc2:	88c0      	ldrh	r0, [r0, #6]
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d100      	bne.n	8002cca <start_drive+0x2e>
 8002cc8:	e0c6      	b.n	8002e58 <start_drive+0x1bc>
			if (mapInfo->map[r][c] == CLEANER_POS) {
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	00ab      	lsls	r3, r5, #2
 8002cce:	589a      	ldr	r2, [r3, r2]
		for (int c = 0; c < mapInfo->column_count; c++) {
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e003      	b.n	8002cdc <start_drive+0x40>
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	dc00      	bgt.n	8002cdc <start_drive+0x40>
 8002cda:	e0bd      	b.n	8002e58 <start_drive+0x1bc>
			if (mapInfo->map[r][c] == CLEANER_POS) {
 8002cdc:	5cd1      	ldrb	r1, [r2, r3]
 8002cde:	18d4      	adds	r4, r2, r3
 8002ce0:	2903      	cmp	r1, #3
 8002ce2:	d1f7      	bne.n	8002cd4 <start_drive+0x38>
 8002ce4:	46b9      	mov	r9, r7
				cleanerInfo->direction = UP;
 8002ce6:	af15      	add	r7, sp, #84	; 0x54
				cleanerInfo->position.col = c;
 8002ce8:	807b      	strh	r3, [r7, #2]
				cleanerInfo->direction = UP;
 8002cea:	2200      	movs	r2, #0
				mapInfo->map[r][c] = TO_CLEAN;
 8002cec:	2301      	movs	r3, #1
				cleanerInfo->direction = UP;
 8002cee:	713a      	strb	r2, [r7, #4]
				cleanerInfo->position.row = r;
 8002cf0:	803d      	strh	r5, [r7, #0]
				mapInfo->map[r][c] = TO_CLEAN;
 8002cf2:	7023      	strb	r3, [r4, #0]
	if (mapInfo->map[up_left_corner.row][up_left_corner.col] == TO_CLEAN) {
 8002cf4:	464b      	mov	r3, r9
 8002cf6:	681b      	ldr	r3, [r3, #0]
	MapPosition up_left_corner = { .row = 0, .col = 0 };
 8002cf8:	9217      	str	r2, [sp, #92]	; 0x5c
	if (mapInfo->map[up_left_corner.row][up_left_corner.col] == TO_CLEAN) {
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d017      	beq.n	8002d32 <start_drive+0x96>
	bool is_cell_to_clean_found = find_first_around_cell(&up_left_corner, mapInfo, target_position,
 8002d02:	ab17      	add	r3, sp, #92	; 0x5c
 8002d04:	a808      	add	r0, sp, #32
 8002d06:	469b      	mov	fp, r3
 8002d08:	4684      	mov	ip, r0
 8002d0a:	213e      	movs	r1, #62	; 0x3e
 8002d0c:	4b79      	ldr	r3, [pc, #484]	; (8002ef4 <start_drive+0x258>)
 8002d0e:	ac0f      	add	r4, sp, #60	; 0x3c
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	464a      	mov	r2, r9
 8002d14:	0023      	movs	r3, r4
 8002d16:	4658      	mov	r0, fp
 8002d18:	4461      	add	r1, ip
 8002d1a:	f7ff fdfb 	bl	8002914 <find_first_around_cell.isra.0>
	if (!is_start_cell_found)
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d109      	bne.n	8002d36 <start_drive+0x9a>
		return 2;
 8002d22:	3002      	adds	r0, #2
}
 8002d24:	b01f      	add	sp, #124	; 0x7c
 8002d26:	bcf0      	pop	{r4, r5, r6, r7}
 8002d28:	46bb      	mov	fp, r7
 8002d2a:	46b2      	mov	sl, r6
 8002d2c:	46a9      	mov	r9, r5
 8002d2e:	46a0      	mov	r8, r4
 8002d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*target_position = up_left_corner;
 8002d32:	920f      	str	r2, [sp, #60]	; 0x3c
	if (!is_start_cell_found)
 8002d34:	ac0f      	add	r4, sp, #60	; 0x3c
	bool can_move_to_start_position = move_cleaner_to(mapInfo,
 8002d36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	002a      	movs	r2, r5
 8002d3e:	4648      	mov	r0, r9
 8002d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d44:	9402      	str	r4, [sp, #8]
 8002d46:	9701      	str	r7, [sp, #4]
 8002d48:	f7ff ff3c 	bl	8002bc4 <move_cleaner_to.constprop.0>
	if (!can_move_to_start_position)
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d100      	bne.n	8002d52 <start_drive+0xb6>
 8002d50:	e088      	b.n	8002e64 <start_drive+0x1c8>
	mapInfo->map[start_position.row][start_position.col] = ALREADY_CLEANED;
 8002d52:	4649      	mov	r1, r9
 8002d54:	8823      	ldrh	r3, [r4, #0]
 8002d56:	6809      	ldr	r1, [r1, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	585b      	ldr	r3, [r3, r1]
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	8862      	ldrh	r2, [r4, #2]
	send_new_cleaner_position_command(huart, start_position.row, start_position.col, true);
 8002d60:	0028      	movs	r0, r5
	mapInfo->map[start_position.row][start_position.col] = ALREADY_CLEANED;
 8002d62:	5499      	strb	r1, [r3, r2]
	send_new_cleaner_position_command(huart, start_position.row, start_position.col, true);
 8002d64:	8862      	ldrh	r2, [r4, #2]
 8002d66:	2301      	movs	r3, #1
 8002d68:	8821      	ldrh	r1, [r4, #0]
 8002d6a:	f000 fcb1 	bl	80036d0 <send_new_cleaner_position_command>
	while (is_cleaning_ongoing) {
 8002d6e:	ab18      	add	r3, sp, #96	; 0x60
 8002d70:	4698      	mov	r8, r3
 8002d72:	2301      	movs	r3, #1
 8002d74:	4642      	mov	r2, r8
 8002d76:	431a      	orrs	r2, r3
 8002d78:	ab17      	add	r3, sp, #92	; 0x5c
 8002d7a:	469b      	mov	fp, r3
 8002d7c:	ab13      	add	r3, sp, #76	; 0x4c
 8002d7e:	930a      	str	r3, [sp, #40]	; 0x28
				mapInfo->map[next_cell.row][next_cell.col] = ALREADY_CLEANED;
 8002d80:	465b      	mov	r3, fp
 8002d82:	46cb      	mov	fp, r9
 8002d84:	4699      	mov	r9, r3
 8002d86:	9207      	str	r2, [sp, #28]
 8002d88:	ac11      	add	r4, sp, #68	; 0x44
 8002d8a:	ad12      	add	r5, sp, #72	; 0x48
static bool find_next_cell_while_cleaning(const CleanerInfo* cleanerInfo,
 8002d8c:	464b      	mov	r3, r9
 8002d8e:	aa28      	add	r2, sp, #160	; 0xa0
 8002d90:	619a      	str	r2, [r3, #24]
 8002d92:	465a      	mov	r2, fp
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	4643      	mov	r3, r8
 8002d98:	4a57      	ldr	r2, [pc, #348]	; (8002ef8 <start_drive+0x25c>)
 8002d9a:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002d9c:	c343      	stmia	r3!, {r0, r1, r6}
 8002d9e:	ca03      	ldmia	r2!, {r0, r1}
 8002da0:	c303      	stmia	r3!, {r0, r1}
 8002da2:	4643      	mov	r3, r8
 8002da4:	464a      	mov	r2, r9
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	4a54      	ldr	r2, [pc, #336]	; (8002efc <start_drive+0x260>)
 8002daa:	a91d      	add	r1, sp, #116	; 0x74
 8002dac:	611a      	str	r2, [r3, #16]
 8002dae:	4640      	mov	r0, r8
 8002db0:	f7fd faca 	bl	8000348 <__clear_cache>
	MapPosition top_boundary = { .row = current_position->row - 1, .col = current_position->col };
 8002db4:	883b      	ldrh	r3, [r7, #0]
	boundaries[0] = is_boundary(&top_boundary);
 8002db6:	9e07      	ldr	r6, [sp, #28]
	MapPosition top_boundary = { .row = current_position->row - 1, .col = current_position->col };
 8002db8:	3b01      	subs	r3, #1
 8002dba:	8023      	strh	r3, [r4, #0]
 8002dbc:	887b      	ldrh	r3, [r7, #2]
	boundaries[0] = is_boundary(&top_boundary);
 8002dbe:	0020      	movs	r0, r4
	MapPosition top_boundary = { .row = current_position->row - 1, .col = current_position->col };
 8002dc0:	8063      	strh	r3, [r4, #2]
	boundaries[0] = is_boundary(&top_boundary);
 8002dc2:	47b0      	blx	r6
	MapPosition right_boundary = { .row = current_position->row, .col = current_position->col + 1 };
 8002dc4:	883b      	ldrh	r3, [r7, #0]
	boundaries[0] = is_boundary(&top_boundary);
 8002dc6:	9008      	str	r0, [sp, #32]
	MapPosition right_boundary = { .row = current_position->row, .col = current_position->col + 1 };
 8002dc8:	802b      	strh	r3, [r5, #0]
 8002dca:	887b      	ldrh	r3, [r7, #2]
	boundaries[1] = is_boundary(&right_boundary);
 8002dcc:	0028      	movs	r0, r5
	MapPosition right_boundary = { .row = current_position->row, .col = current_position->col + 1 };
 8002dce:	3301      	adds	r3, #1
 8002dd0:	806b      	strh	r3, [r5, #2]
	boundaries[1] = is_boundary(&right_boundary);
 8002dd2:	9607      	str	r6, [sp, #28]
 8002dd4:	47b0      	blx	r6
	MapPosition bottom_boundary = { .row = current_position->row + 1, .col = current_position->col };
 8002dd6:	883b      	ldrh	r3, [r7, #0]
 8002dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dda:	3301      	adds	r3, #1
 8002ddc:	8013      	strh	r3, [r2, #0]
 8002dde:	887b      	ldrh	r3, [r7, #2]
	boundaries[2] = is_boundary(&bottom_boundary);
 8002de0:	9907      	ldr	r1, [sp, #28]
	boundaries[1] = is_boundary(&right_boundary);
 8002de2:	0006      	movs	r6, r0
	boundaries[2] = is_boundary(&bottom_boundary);
 8002de4:	0010      	movs	r0, r2
	MapPosition bottom_boundary = { .row = current_position->row + 1, .col = current_position->col };
 8002de6:	8053      	strh	r3, [r2, #2]
	boundaries[2] = is_boundary(&bottom_boundary);
 8002de8:	4788      	blx	r1
	MapPosition left_boundary = { .row = current_position->row, .col = current_position->col - 1 };
 8002dea:	883b      	ldrh	r3, [r7, #0]
 8002dec:	aa08      	add	r2, sp, #32
	boundaries[2] = is_boundary(&bottom_boundary);
 8002dee:	9009      	str	r0, [sp, #36]	; 0x24
	MapPosition left_boundary = { .row = current_position->row, .col = current_position->col - 1 };
 8002df0:	8613      	strh	r3, [r2, #48]	; 0x30
 8002df2:	887b      	ldrh	r3, [r7, #2]
	boundaries[3] = is_boundary(&left_boundary);
 8002df4:	9907      	ldr	r1, [sp, #28]
	MapPosition left_boundary = { .row = current_position->row, .col = current_position->col - 1 };
 8002df6:	3b01      	subs	r3, #1
 8002df8:	8653      	strh	r3, [r2, #50]	; 0x32
	boundaries[3] = is_boundary(&left_boundary);
 8002dfa:	ab14      	add	r3, sp, #80	; 0x50
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	4788      	blx	r1
	if (boundaries[0] && boundaries[1] && boundaries[2] && boundaries[3])
 8002e00:	9b08      	ldr	r3, [sp, #32]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03f      	beq.n	8002e86 <start_drive+0x1ea>
 8002e06:	2e00      	cmp	r6, #0
 8002e08:	d045      	beq.n	8002e96 <start_drive+0x1fa>
 8002e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d04b      	beq.n	8002ea8 <start_drive+0x20c>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d129      	bne.n	8002e68 <start_drive+0x1cc>
		*next_cell = left_boundary;
 8002e14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e16:	9308      	str	r3, [sp, #32]
 8002e18:	9310      	str	r3, [sp, #64]	; 0x40
}

static void enable_cleaning(CleanComponentsInfo* cleanComponentsInfo) {
#ifndef __TESTING__
	HAL_GPIO_WritePin(cleanComponentsInfo->vacuum_GPIOType, cleanComponentsInfo->vacuum_pin, GPIO_PIN_SET);
 8002e1a:	4653      	mov	r3, sl
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	8899      	ldrh	r1, [r3, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	f001 f959 	bl	80040d8 <HAL_GPIO_WritePin>
			move_cleaner_to_adjacent_position(mapInfo, obstacle_found, true, huart, lcd, motorsInfo, &cleanerInfo, &next_cell);
 8002e26:	aa08      	add	r2, sp, #32
 8002e28:	4694      	mov	ip, r2
 8002e2a:	2322      	movs	r3, #34	; 0x22
 8002e2c:	4463      	add	r3, ip
 8002e2e:	9304      	str	r3, [sp, #16]
 8002e30:	ab10      	add	r3, sp, #64	; 0x40
 8002e32:	9303      	str	r3, [sp, #12]
 8002e34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002e36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4658      	mov	r0, fp
 8002e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e44:	9702      	str	r7, [sp, #8]
 8002e46:	f7ff fbdf 	bl	8002608 <move_cleaner_to_adjacent_position.isra.0>
#endif
}

static void disable_cleaning(CleanComponentsInfo* cleanComponentsInfo) {
#ifndef __TESTING__
	HAL_GPIO_WritePin(cleanComponentsInfo->vacuum_GPIOType, cleanComponentsInfo->vacuum_pin, GPIO_PIN_RESET);
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	8899      	ldrh	r1, [r3, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	f001 f941 	bl	80040d8 <HAL_GPIO_WritePin>
	while (is_cleaning_ongoing) {
 8002e56:	e799      	b.n	8002d8c <start_drive+0xf0>
	for (int r = 0; r < mapInfo->row_count; r++) {
 8002e58:	3501      	adds	r5, #1
 8002e5a:	42b5      	cmp	r5, r6
 8002e5c:	da00      	bge.n	8002e60 <start_drive+0x1c4>
 8002e5e:	e731      	b.n	8002cc4 <start_drive+0x28>
		return 1;
 8002e60:	2001      	movs	r0, #1
 8002e62:	e75f      	b.n	8002d24 <start_drive+0x88>
		return 3;
 8002e64:	2003      	movs	r0, #3
 8002e66:	e75d      	b.n	8002d24 <start_drive+0x88>
			is_cleaning_ongoing = find_first_around_cell(&cleanerInfo.position, mapInfo, &next_cell,
 8002e68:	a808      	add	r0, sp, #32
 8002e6a:	4684      	mov	ip, r0
 8002e6c:	2136      	movs	r1, #54	; 0x36
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <start_drive+0x264>)
 8002e70:	465a      	mov	r2, fp
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	0038      	movs	r0, r7
 8002e76:	ab10      	add	r3, sp, #64	; 0x40
 8002e78:	4461      	add	r1, ip
 8002e7a:	f7ff fd4b 	bl	8002914 <find_first_around_cell.isra.0>
			if (is_cleaning_ongoing) {
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d116      	bne.n	8002eb0 <start_drive+0x214>
	return 0;
 8002e82:	2000      	movs	r0, #0
 8002e84:	e74e      	b.n	8002d24 <start_drive+0x88>
	else if (boundaries[1] && !boundaries[2])
 8002e86:	2e00      	cmp	r6, #0
 8002e88:	d108      	bne.n	8002e9c <start_drive+0x200>
	else if (boundaries[2] && !boundaries[3])
 8002e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <start_drive+0x206>
		*next_cell = top_boundary;
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	9310      	str	r3, [sp, #64]	; 0x40
		if (is_cell_available) {
 8002e94:	e7c1      	b.n	8002e1a <start_drive+0x17e>
		*next_cell = right_boundary;
 8002e96:	682b      	ldr	r3, [r5, #0]
 8002e98:	9310      	str	r3, [sp, #64]	; 0x40
		if (is_cell_available) {
 8002e9a:	e7be      	b.n	8002e1a <start_drive+0x17e>
	else if (boundaries[1] && !boundaries[2])
 8002e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <start_drive+0x20c>
	else if (boundaries[2] && !boundaries[3])
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d1f4      	bne.n	8002e90 <start_drive+0x1f4>
 8002ea6:	e7b5      	b.n	8002e14 <start_drive+0x178>
		*next_cell = bottom_boundary;
 8002ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	9310      	str	r3, [sp, #64]	; 0x40
		if (is_cell_available) {
 8002eae:	e7b4      	b.n	8002e1a <start_drive+0x17e>
				bool can_reach_next_cell = move_cleaner_to(mapInfo, obstacle_found, false, huart, lcd, motorsInfo, &cleanerInfo, &next_cell);
 8002eb0:	ab10      	add	r3, sp, #64	; 0x40
 8002eb2:	9302      	str	r3, [sp, #8]
 8002eb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002eb6:	4658      	mov	r0, fp
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ebe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ec0:	9701      	str	r7, [sp, #4]
 8002ec2:	f7ff fe7f 	bl	8002bc4 <move_cleaner_to.constprop.0>
				if (!can_reach_next_cell)
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d011      	beq.n	8002eee <start_drive+0x252>
				mapInfo->map[next_cell.row][next_cell.col] = ALREADY_CLEANED;
 8002eca:	4659      	mov	r1, fp
 8002ecc:	ab08      	add	r3, sp, #32
 8002ece:	8c1b      	ldrh	r3, [r3, #32]
 8002ed0:	6809      	ldr	r1, [r1, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	585b      	ldr	r3, [r3, r1]
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	aa08      	add	r2, sp, #32
 8002eda:	8c52      	ldrh	r2, [r2, #34]	; 0x22
				send_new_cleaner_position_command(huart, next_cell.row, next_cell.col, true);
 8002edc:	980b      	ldr	r0, [sp, #44]	; 0x2c
				mapInfo->map[next_cell.row][next_cell.col] = ALREADY_CLEANED;
 8002ede:	5499      	strb	r1, [r3, r2]
				send_new_cleaner_position_command(huart, next_cell.row, next_cell.col, true);
 8002ee0:	ab08      	add	r3, sp, #32
 8002ee2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002ee4:	8c19      	ldrh	r1, [r3, #32]
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f000 fbf2 	bl	80036d0 <send_new_cleaner_position_command>
	while (is_cleaning_ongoing) {
 8002eec:	e74e      	b.n	8002d8c <start_drive+0xf0>
					return 4;
 8002eee:	3004      	adds	r0, #4
 8002ef0:	e718      	b.n	8002d24 <start_drive+0x88>
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	08002575 	.word	0x08002575
 8002ef8:	080070f4 	.word	0x080070f4
 8002efc:	080025d9 	.word	0x080025d9
 8002f00:	0800255d 	.word	0x0800255d

08002f04 <lcd_write>:
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
	for(uint8_t i = 0; i < len; i++)
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8002f04:	2301      	movs	r3, #1
{
 8002f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f08:	46c6      	mov	lr, r8
 8002f0a:	0005      	movs	r5, r0
 8002f0c:	000f      	movs	r7, r1
 8002f0e:	0016      	movs	r6, r2
 8002f10:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8002f12:	4698      	mov	r8, r3
{
 8002f14:	b500      	push	{lr}
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8002f16:	003a      	movs	r2, r7
 8002f18:	4643      	mov	r3, r8
 8002f1a:	4122      	asrs	r2, r4
 8002f1c:	6869      	ldr	r1, [r5, #4]
 8002f1e:	6828      	ldr	r0, [r5, #0]
 8002f20:	401a      	ands	r2, r3
 8002f22:	0063      	lsls	r3, r4, #1
 8002f24:	5a59      	ldrh	r1, [r3, r1]
 8002f26:	00a3      	lsls	r3, r4, #2
 8002f28:	5818      	ldr	r0, [r3, r0]
 8002f2a:	3401      	adds	r4, #1
 8002f2c:	f001 f8d4 	bl	80040d8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8002f30:	b2e3      	uxtb	r3, r4
 8002f32:	429e      	cmp	r6, r3
 8002f34:	d8ef      	bhi.n	8002f16 <lcd_write+0x12>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8002f36:	8aa9      	ldrh	r1, [r5, #20]
 8002f38:	6928      	ldr	r0, [r5, #16]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f001 f8cc 	bl	80040d8 <HAL_GPIO_WritePin>
	DELAY(1);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f000 fda9 	bl	8003a98 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8002f46:	8aa9      	ldrh	r1, [r5, #20]
 8002f48:	6928      	ldr	r0, [r5, #16]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f001 f8c4 	bl	80040d8 <HAL_GPIO_WritePin>
}
 8002f50:	bc80      	pop	{r7}
 8002f52:	46b8      	mov	r8, r7
 8002f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)

08002f58 <lcd_write_command.part.0>:
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 8002f58:	b570      	push	{r4, r5, r6, lr}
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8002f5a:	2204      	movs	r2, #4
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 8002f5c:	000d      	movs	r5, r1
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8002f5e:	0909      	lsrs	r1, r1, #4
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
 8002f60:	0004      	movs	r4, r0
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8002f62:	f7ff ffcf 	bl	8002f04 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8002f66:	210f      	movs	r1, #15
 8002f68:	2204      	movs	r2, #4
 8002f6a:	4029      	ands	r1, r5
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	f7ff ffc9 	bl	8002f04 <lcd_write>
}
 8002f72:	bd70      	pop	{r4, r5, r6, pc}

08002f74 <lcd_write_command>:
{
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	0004      	movs	r4, r0
 8002f78:	000d      	movs	r5, r1
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	8981      	ldrh	r1, [r0, #12]
 8002f7e:	6880      	ldr	r0, [r0, #8]
 8002f80:	f001 f8aa 	bl	80040d8 <HAL_GPIO_WritePin>
	if(lcd->mode == LCD_4_BIT_MODE)
 8002f84:	7da3      	ldrb	r3, [r4, #22]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <lcd_write_command+0x20>
 8002f8a:	0029      	movs	r1, r5
 8002f8c:	0020      	movs	r0, r4
 8002f8e:	f7ff ffe3 	bl	8002f58 <lcd_write_command.part.0>
}
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
		lcd_write(lcd, command, LCD_BYTE);
 8002f94:	2208      	movs	r2, #8
 8002f96:	0029      	movs	r1, r5
 8002f98:	0020      	movs	r0, r4
 8002f9a:	f7ff ffb3 	bl	8002f04 <lcd_write>
}
 8002f9e:	e7f8      	b.n	8002f92 <lcd_write_command+0x1e>

08002fa0 <lcd_write_data>:
{
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	0004      	movs	r4, r0
 8002fa4:	000d      	movs	r5, r1
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	8981      	ldrh	r1, [r0, #12]
 8002faa:	6880      	ldr	r0, [r0, #8]
 8002fac:	f001 f894 	bl	80040d8 <HAL_GPIO_WritePin>
	if(lcd->mode == LCD_4_BIT_MODE)
 8002fb0:	7da3      	ldrb	r3, [r4, #22]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d104      	bne.n	8002fc0 <lcd_write_data+0x20>
 8002fb6:	0029      	movs	r1, r5
 8002fb8:	0020      	movs	r0, r4
 8002fba:	f7ff ffcd 	bl	8002f58 <lcd_write_command.part.0>
}
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
		lcd_write(lcd, data, LCD_BYTE);
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	0029      	movs	r1, r5
 8002fc4:	0020      	movs	r0, r4
 8002fc6:	f7ff ff9d 	bl	8002f04 <lcd_write>
}
 8002fca:	e7f8      	b.n	8002fbe <lcd_write_data+0x1e>

08002fcc <Lcd_init>:
{
 8002fcc:	b510      	push	{r4, lr}
	if(lcd->mode == LCD_4_BIT_MODE)
 8002fce:	7d83      	ldrb	r3, [r0, #22]
{
 8002fd0:	0004      	movs	r4, r0
	if(lcd->mode == LCD_4_BIT_MODE)
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d117      	bne.n	8003006 <Lcd_init+0x3a>
			lcd_write_command(lcd, 0x33);
 8002fd6:	2133      	movs	r1, #51	; 0x33
 8002fd8:	f7ff ffcc 	bl	8002f74 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8002fdc:	2132      	movs	r1, #50	; 0x32
 8002fde:	0020      	movs	r0, r4
 8002fe0:	f7ff ffc8 	bl	8002f74 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8002fe4:	2128      	movs	r1, #40	; 0x28
 8002fe6:	0020      	movs	r0, r4
 8002fe8:	f7ff ffc4 	bl	8002f74 <lcd_write_command>
	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8002fec:	0020      	movs	r0, r4
 8002fee:	2101      	movs	r1, #1
 8002ff0:	f7ff ffc0 	bl	8002f74 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8002ff4:	0020      	movs	r0, r4
 8002ff6:	210c      	movs	r1, #12
 8002ff8:	f7ff ffbc 	bl	8002f74 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8002ffc:	2106      	movs	r1, #6
 8002ffe:	0020      	movs	r0, r4
 8003000:	f7ff ffb8 	bl	8002f74 <lcd_write_command>
}
 8003004:	bd10      	pop	{r4, pc}
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8003006:	2138      	movs	r1, #56	; 0x38
 8003008:	f7ff ffb4 	bl	8002f74 <lcd_write_command>
 800300c:	e7ee      	b.n	8002fec <Lcd_init+0x20>
 800300e:	46c0      	nop			; (mov r8, r8)

08003010 <Lcd_create>:
{
 8003010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003012:	b087      	sub	sp, #28
 8003014:	ac0e      	add	r4, sp, #56	; 0x38
 8003016:	8826      	ldrh	r6, [r4, #0]
 8003018:	ac0f      	add	r4, sp, #60	; 0x3c
 800301a:	7827      	ldrb	r7, [r4, #0]
	lcd.mode = mode;
 800301c:	466c      	mov	r4, sp
{
 800301e:	0005      	movs	r5, r0
 8003020:	a80c      	add	r0, sp, #48	; 0x30
 8003022:	8800      	ldrh	r0, [r0, #0]
	lcd.en_pin = en_pin;
 8003024:	82a6      	strh	r6, [r4, #20]
	lcd.en_port = en_port;
 8003026:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	lcd.rs_pin = rs_pin;
 8003028:	81a0      	strh	r0, [r4, #12]
	Lcd_init(&lcd);
 800302a:	0020      	movs	r0, r4
	lcd.data_pin = pin;
 800302c:	6062      	str	r2, [r4, #4]
	lcd.data_port = port;
 800302e:	9100      	str	r1, [sp, #0]
	lcd.mode = mode;
 8003030:	75a7      	strb	r7, [r4, #22]
	lcd.en_port = en_port;
 8003032:	6126      	str	r6, [r4, #16]
	lcd.rs_port = rs_port;
 8003034:	60a3      	str	r3, [r4, #8]
	Lcd_init(&lcd);
 8003036:	f7ff ffc9 	bl	8002fcc <Lcd_init>
	return lcd;
 800303a:	002b      	movs	r3, r5
 800303c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800303e:	c307      	stmia	r3!, {r0, r1, r2}
 8003040:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003042:	c307      	stmia	r3!, {r0, r1, r2}
}
 8003044:	0028      	movs	r0, r5
 8003046:	b007      	add	sp, #28
 8003048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)

0800304c <Lcd_string>:
{
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	0006      	movs	r6, r0
 8003050:	000d      	movs	r5, r1
	for(uint8_t i = 0; i < strlen(string); i++)
 8003052:	2400      	movs	r4, #0
 8003054:	e005      	b.n	8003062 <Lcd_string+0x16>
		lcd_write_data(lcd, string[i]);
 8003056:	5d29      	ldrb	r1, [r5, r4]
 8003058:	0030      	movs	r0, r6
 800305a:	f7ff ffa1 	bl	8002fa0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800305e:	3401      	adds	r4, #1
 8003060:	b2e4      	uxtb	r4, r4
 8003062:	0028      	movs	r0, r5
 8003064:	f7fd f850 	bl	8000108 <strlen>
 8003068:	4284      	cmp	r4, r0
 800306a:	d3f4      	bcc.n	8003056 <Lcd_string+0xa>
}
 800306c:	bd70      	pop	{r4, r5, r6, pc}
 800306e:	46c0      	nop			; (mov r8, r8)

08003070 <Lcd_clear_and_write>:

/**
 * clear the entire screen and write from 0,0
 */
void Lcd_clear_and_write(Lcd_HandleTypeDef* lcd, const char* message) {
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	000d      	movs	r5, r1
 8003074:	b08b      	sub	sp, #44	; 0x2c
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8003076:	2101      	movs	r1, #1
void Lcd_clear_and_write(Lcd_HandleTypeDef* lcd, const char* message) {
 8003078:	0004      	movs	r4, r0
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800307a:	f7ff ff7b 	bl	8002f74 <lcd_write_command>
	Lcd_clear(lcd);

	const size_t message_len = strlen(message);
 800307e:	0028      	movs	r0, r5
 8003080:	f7fd f842 	bl	8000108 <strlen>
	if (message_len <= 16) {
 8003084:	2810      	cmp	r0, #16
 8003086:	d809      	bhi.n	800309c <Lcd_clear_and_write+0x2c>
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0020      	movs	r0, r4
 800308c:	f7ff ff72 	bl	8002f74 <lcd_write_command>
		Lcd_cursor(lcd, 0, 0);
		Lcd_string(lcd, message);
 8003090:	0029      	movs	r1, r5
 8003092:	0020      	movs	r0, r4
 8003094:	f7ff ffda 	bl	800304c <Lcd_string>
		Lcd_string(lcd, message_p1);

		Lcd_cursor(lcd, 1, 0);
		Lcd_string(lcd, message_p2);
	}
}
 8003098:	b00b      	add	sp, #44	; 0x2c
 800309a:	bd30      	pop	{r4, r5, pc}
		char message_p1[17]; memset(message_p1, 0, sizeof(message_p1));
 800309c:	2211      	movs	r2, #17
 800309e:	2100      	movs	r1, #0
 80030a0:	4668      	mov	r0, sp
 80030a2:	f002 fd91 	bl	8005bc8 <memset>
		char message_p2[17]; memset(message_p2, 0, sizeof(message_p2));
 80030a6:	2211      	movs	r2, #17
 80030a8:	2100      	movs	r1, #0
 80030aa:	a805      	add	r0, sp, #20
 80030ac:	f002 fd8c 	bl	8005bc8 <memset>
		strncpy(message_p1, message, 16);
 80030b0:	0029      	movs	r1, r5
 80030b2:	2210      	movs	r2, #16
 80030b4:	4668      	mov	r0, sp
 80030b6:	f003 f986 	bl	80063c6 <strncpy>
		strncpy(message_p2, message + 16 * sizeof(char), 16);
 80030ba:	0029      	movs	r1, r5
 80030bc:	2210      	movs	r2, #16
 80030be:	3110      	adds	r1, #16
 80030c0:	a805      	add	r0, sp, #20
 80030c2:	f003 f980 	bl	80063c6 <strncpy>
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80030c6:	0020      	movs	r0, r4
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	f7ff ff53 	bl	8002f74 <lcd_write_command>
		Lcd_string(lcd, message_p1);
 80030ce:	4669      	mov	r1, sp
 80030d0:	0020      	movs	r0, r4
 80030d2:	f7ff ffbb 	bl	800304c <Lcd_string>
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80030d6:	0020      	movs	r0, r4
 80030d8:	21c0      	movs	r1, #192	; 0xc0
 80030da:	f7ff ff4b 	bl	8002f74 <lcd_write_command>
		Lcd_string(lcd, message_p2);
 80030de:	0020      	movs	r0, r4
 80030e0:	a905      	add	r1, sp, #20
 80030e2:	f7ff ffb3 	bl	800304c <Lcd_string>
}
 80030e6:	e7d7      	b.n	8003098 <Lcd_clear_and_write+0x28>

080030e8 <set_buzzer>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */

static void set_buzzer(int millisec) {
 80030e8:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80030ea:	2680      	movs	r6, #128	; 0x80
 80030ec:	25a0      	movs	r5, #160	; 0xa0
static void set_buzzer(int millisec) {
 80030ee:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80030f0:	0176      	lsls	r6, r6, #5
 80030f2:	05ed      	lsls	r5, r5, #23
 80030f4:	0031      	movs	r1, r6
 80030f6:	0028      	movs	r0, r5
 80030f8:	2201      	movs	r2, #1
 80030fa:	f000 ffed 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_Delay(millisec);
 80030fe:	0020      	movs	r0, r4
 8003100:	f000 fcca 	bl	8003a98 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003104:	0031      	movs	r1, r6
 8003106:	0028      	movs	r0, r5
 8003108:	2200      	movs	r2, #0
 800310a:	f000 ffe5 	bl	80040d8 <HAL_GPIO_WritePin>
}
 800310e:	bd70      	pop	{r4, r5, r6, pc}

08003110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003110:	b500      	push	{lr}
 8003112:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003114:	2234      	movs	r2, #52	; 0x34
 8003116:	2100      	movs	r1, #0
 8003118:	a80f      	add	r0, sp, #60	; 0x3c
 800311a:	f002 fd55 	bl	8005bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800311e:	2214      	movs	r2, #20
 8003120:	2100      	movs	r1, #0
 8003122:	4668      	mov	r0, sp
 8003124:	f002 fd50 	bl	8005bc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003128:	2224      	movs	r2, #36	; 0x24
 800312a:	2100      	movs	r1, #0
 800312c:	a805      	add	r0, sp, #20
 800312e:	f002 fd4b 	bl	8005bc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003132:	4919      	ldr	r1, [pc, #100]	; (8003198 <SystemClock_Config+0x88>)
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <SystemClock_Config+0x8c>)
 8003136:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003138:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800313a:	401a      	ands	r2, r3
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003144:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003146:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003148:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800314a:	3b0f      	subs	r3, #15
 800314c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800314e:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003150:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003152:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003154:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003156:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003158:	f001 f816 	bl	8004188 <HAL_RCC_OscConfig>
 800315c:	2800      	cmp	r0, #0
 800315e:	d001      	beq.n	8003164 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003162:	e7fe      	b.n	8003162 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003164:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003166:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003168:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800316a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800316c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800316e:	2100      	movs	r1, #0
 8003170:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003172:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003174:	f001 fb00 	bl	8004778 <HAL_RCC_ClockConfig>
 8003178:	2800      	cmp	r0, #0
 800317a:	d001      	beq.n	8003180 <SystemClock_Config+0x70>
 800317c:	b672      	cpsid	i
  while (1)
 800317e:	e7fe      	b.n	800317e <SystemClock_Config+0x6e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003180:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003182:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003184:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003186:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003188:	f001 fc06 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 800318c:	2800      	cmp	r0, #0
 800318e:	d001      	beq.n	8003194 <SystemClock_Config+0x84>
 8003190:	b672      	cpsid	i
  while (1)
 8003192:	e7fe      	b.n	8003192 <SystemClock_Config+0x82>
}
 8003194:	b01d      	add	sp, #116	; 0x74
 8003196:	bd00      	pop	{pc}
 8003198:	40007000 	.word	0x40007000
 800319c:	ffffe7ff 	.word	0xffffe7ff

080031a0 <main>:
{
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	46de      	mov	lr, fp
 80031a4:	464e      	mov	r6, r9
 80031a6:	4645      	mov	r5, r8
 80031a8:	4657      	mov	r7, sl
 80031aa:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ac:	2501      	movs	r5, #1
 80031ae:	4ccd      	ldr	r4, [pc, #820]	; (80034e4 <main+0x344>)
{
 80031b0:	b0b3      	sub	sp, #204	; 0xcc
  HAL_Init();
 80031b2:	f000 fc4b 	bl	8003a4c <HAL_Init>
  SystemClock_Config();
 80031b6:	f7ff ffab 	bl	8003110 <SystemClock_Config>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80031bc:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031be:	432b      	orrs	r3, r5
 80031c0:	6323      	str	r3, [r4, #48]	; 0x30
 80031c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80031c4:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031c6:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80031c8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ca:	9310      	str	r3, [sp, #64]	; 0x40
 80031cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80031ce:	f000 fc75 	bl	8003abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80031d2:	200b      	movs	r0, #11
 80031d4:	f000 fca4 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	2214      	movs	r2, #20
 80031da:	2100      	movs	r1, #0
 80031dc:	a829      	add	r0, sp, #164	; 0xa4
 80031de:	f002 fcf3 	bl	8005bc8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e2:	2304      	movs	r3, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e4:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin, GPIO_PIN_RESET);
 80031e8:	210f      	movs	r1, #15
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ea:	431a      	orrs	r2, r3
 80031ec:	62e2      	str	r2, [r4, #44]	; 0x2c
 80031ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin, GPIO_PIN_RESET);
 80031f0:	48bd      	ldr	r0, [pc, #756]	; (80034e8 <main+0x348>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f2:	4013      	ands	r3, r2
 80031f4:	930d      	str	r3, [sp, #52]	; 0x34
 80031f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin, GPIO_PIN_RESET);
 80031fa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	432b      	orrs	r3, r5
 80031fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003200:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003202:	27fc      	movs	r7, #252	; 0xfc
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003204:	402b      	ands	r3, r5
 8003206:	930e      	str	r3, [sp, #56]	; 0x38
 8003208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800320a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800320c:	00bf      	lsls	r7, r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	4333      	orrs	r3, r6
 8003210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003214:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	4033      	ands	r3, r6
 8003218:	930f      	str	r3, [sp, #60]	; 0x3c
 800321a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOC, MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin, GPIO_PIN_RESET);
 800321c:	f000 ff5c 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, VACUUM_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003220:	23a0      	movs	r3, #160	; 0xa0
 8003222:	20a0      	movs	r0, #160	; 0xa0
 8003224:	015b      	lsls	r3, r3, #5
 8003226:	0019      	movs	r1, r3
 8003228:	2200      	movs	r2, #0
 800322a:	05c0      	lsls	r0, r0, #23
 800322c:	4698      	mov	r8, r3
 800322e:	f000 ff53 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003232:	4bae      	ldr	r3, [pc, #696]	; (80034ec <main+0x34c>)
 8003234:	2200      	movs	r2, #0
 8003236:	0039      	movs	r1, r7
 8003238:	0018      	movs	r0, r3
 800323a:	4699      	mov	r9, r3
 800323c:	f000 ff4c 	bl	80040d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8003240:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003242:	48a9      	ldr	r0, [pc, #676]	; (80034e8 <main+0x348>)
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8003244:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003246:	a929      	add	r1, sp, #164	; 0xa4
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8003248:	9329      	str	r3, [sp, #164]	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800324a:	942a      	str	r4, [sp, #168]	; 0xa8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	942b      	str	r4, [sp, #172]	; 0xac
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800324e:	f000 fe43 	bl	8003ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin;
 8003252:	230f      	movs	r3, #15
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003254:	48a4      	ldr	r0, [pc, #656]	; (80034e8 <main+0x348>)
 8003256:	a929      	add	r1, sp, #164	; 0xa4
  GPIO_InitStruct.Pin = MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin;
 8003258:	9329      	str	r3, [sp, #164]	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325a:	952a      	str	r5, [sp, #168]	; 0xa8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	942b      	str	r4, [sp, #172]	; 0xac
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	942c      	str	r4, [sp, #176]	; 0xb0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003260:	f000 fe3a 	bl	8003ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DISTANCE_SENSOR_Pin;
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	9329      	str	r3, [sp, #164]	; 0xa4
 800326a:	469b      	mov	fp, r3
  HAL_GPIO_Init(DISTANCE_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800326c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800326e:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(DISTANCE_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8003270:	a929      	add	r1, sp, #164	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003272:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(DISTANCE_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8003274:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003276:	932a      	str	r3, [sp, #168]	; 0xa8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	942b      	str	r4, [sp, #172]	; 0xac
  HAL_GPIO_Init(DISTANCE_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800327a:	f000 fe2d 	bl	8003ed8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = VACUUM_Pin|BUZZER_Pin;
 8003280:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003282:	a929      	add	r1, sp, #164	; 0xa4
 8003284:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = VACUUM_Pin|BUZZER_Pin;
 8003286:	9329      	str	r3, [sp, #164]	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003288:	952a      	str	r5, [sp, #168]	; 0xa8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	942b      	str	r4, [sp, #172]	; 0xac
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	942c      	str	r4, [sp, #176]	; 0xb0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328e:	f000 fe23 	bl	8003ed8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003292:	4648      	mov	r0, r9
 8003294:	a929      	add	r1, sp, #164	; 0xa4
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003296:	9729      	str	r7, [sp, #164]	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003298:	952a      	str	r5, [sp, #168]	; 0xa8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	942b      	str	r4, [sp, #172]	; 0xac
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	942c      	str	r4, [sp, #176]	; 0xb0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329e:	f000 fe1b 	bl	8003ed8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	2007      	movs	r0, #7
 80032a8:	f000 fc08 	bl	8003abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80032ac:	2007      	movs	r0, #7
 80032ae:	f000 fc37 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80032b2:	4d8f      	ldr	r5, [pc, #572]	; (80034f0 <main+0x350>)
 80032b4:	4b8f      	ldr	r3, [pc, #572]	; (80034f4 <main+0x354>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032b6:	0028      	movs	r0, r5
  huart2.Instance = USART2;
 80032b8:	602b      	str	r3, [r5, #0]
  huart2.Init.BaudRate = 9600;
 80032ba:	2396      	movs	r3, #150	; 0x96
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	606b      	str	r3, [r5, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032c0:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032c2:	60ac      	str	r4, [r5, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032c4:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032c6:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032c8:	616b      	str	r3, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ca:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032cc:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ce:	622c      	str	r4, [r5, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032d0:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032d2:	f002 fb9d 	bl	8005a10 <HAL_UART_Init>
 80032d6:	1e07      	subs	r7, r0, #0
 80032d8:	d001      	beq.n	80032de <main+0x13e>
 80032da:	b672      	cpsid	i
  while (1)
 80032dc:	e7fe      	b.n	80032dc <main+0x13c>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	201c      	movs	r0, #28
 80032e2:	0011      	movs	r1, r2
 80032e4:	f000 fbea 	bl	8003abc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032e8:	201c      	movs	r0, #28
 80032ea:	f000 fc19 	bl	8003b20 <HAL_NVIC_EnableIRQ>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ee:	ab21      	add	r3, sp, #132	; 0x84
 80032f0:	0018      	movs	r0, r3
 80032f2:	2208      	movs	r2, #8
 80032f4:	2100      	movs	r1, #0
 80032f6:	4698      	mov	r8, r3
 80032f8:	f002 fc66 	bl	8005bc8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032fc:	2210      	movs	r2, #16
 80032fe:	2100      	movs	r1, #0
 8003300:	a829      	add	r0, sp, #164	; 0xa4
 8003302:	f002 fc61 	bl	8005bc8 <memset>
  htim2.Instance = TIM2;
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	4c7b      	ldr	r4, [pc, #492]	; (80034f8 <main+0x358>)
 800330a:	05db      	lsls	r3, r3, #23
 800330c:	6023      	str	r3, [r4, #0]
  htim2.Init.Period = 10;
 800330e:	230a      	movs	r3, #10
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003310:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 8003312:	6067      	str	r7, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003314:	60a7      	str	r7, [r4, #8]
  htim2.Init.Period = 10;
 8003316:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003318:	6127      	str	r7, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331a:	6167      	str	r7, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800331c:	f001 fd1e 	bl	8004d5c <HAL_TIM_PWM_Init>
 8003320:	2800      	cmp	r0, #0
 8003322:	d001      	beq.n	8003328 <main+0x188>
 8003324:	b672      	cpsid	i
  while (1)
 8003326:	e7fe      	b.n	8003326 <main+0x186>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003328:	4643      	mov	r3, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332a:	9021      	str	r0, [sp, #132]	; 0x84
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800332c:	6058      	str	r0, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800332e:	4641      	mov	r1, r8
 8003330:	0020      	movs	r0, r4
 8003332:	f001 fdf9 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8003336:	1e02      	subs	r2, r0, #0
 8003338:	d001      	beq.n	800333e <main+0x19e>
 800333a:	b672      	cpsid	i
  while (1)
 800333c:	e7fe      	b.n	800333c <main+0x19c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800333e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003340:	902b      	str	r0, [sp, #172]	; 0xac
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003342:	902c      	str	r0, [sp, #176]	; 0xb0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003344:	a929      	add	r1, sp, #164	; 0xa4
 8003346:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003348:	9329      	str	r3, [sp, #164]	; 0xa4
  sConfigOC.Pulse = 2;
 800334a:	962a      	str	r6, [sp, #168]	; 0xa8
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800334c:	f001 fd32 	bl	8004db4 <HAL_TIM_PWM_ConfigChannel>
 8003350:	2800      	cmp	r0, #0
 8003352:	d001      	beq.n	8003358 <main+0x1b8>
 8003354:	b672      	cpsid	i
  while (1)
 8003356:	e7fe      	b.n	8003356 <main+0x1b6>
  sConfigOC.Pulse = 7;
 8003358:	2307      	movs	r3, #7
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800335a:	2204      	movs	r2, #4
 800335c:	0020      	movs	r0, r4
 800335e:	a929      	add	r1, sp, #164	; 0xa4
  sConfigOC.Pulse = 7;
 8003360:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003362:	f001 fd27 	bl	8004db4 <HAL_TIM_PWM_ConfigChannel>
 8003366:	4682      	mov	sl, r0
 8003368:	2800      	cmp	r0, #0
 800336a:	d001      	beq.n	8003370 <main+0x1d0>
 800336c:	b672      	cpsid	i
  while (1)
 800336e:	e7fe      	b.n	800336e <main+0x1ce>
  HAL_TIM_MspPostInit(&htim2);
 8003370:	0020      	movs	r0, r4
 8003372:	f000 f9f7 	bl	8003764 <HAL_TIM_MspPostInit>
	Lcd_PortType lcd_ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
 8003376:	a917      	add	r1, sp, #92	; 0x5c
 8003378:	000b      	movs	r3, r1
 800337a:	4a60      	ldr	r2, [pc, #384]	; (80034fc <main+0x35c>)
 800337c:	cac1      	ldmia	r2!, {r0, r6, r7}
 800337e:	c3c1      	stmia	r3!, {r0, r6, r7}
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	601a      	str	r2, [r3, #0]
	Lcd_PinType lcd_pins[] = { D4_Pin, D5_Pin, D6_Pin, D7_Pin };
 8003384:	aa11      	add	r2, sp, #68	; 0x44
 8003386:	0010      	movs	r0, r2
 8003388:	4b5c      	ldr	r3, [pc, #368]	; (80034fc <main+0x35c>)
 800338a:	3310      	adds	r3, #16
 800338c:	cbc0      	ldmia	r3!, {r6, r7}
 800338e:	c0c0      	stmia	r0!, {r6, r7}
	lcd = Lcd_create(lcd_ports, lcd_pins, RS_GPIO_Port, RS_Pin, E_GPIO_Port, E_Pin, LCD_4_BIT_MODE);
 8003390:	4653      	mov	r3, sl
 8003392:	9303      	str	r3, [sp, #12]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	9302      	str	r3, [sp, #8]
 800339a:	464b      	mov	r3, r9
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	465b      	mov	r3, fp
 80033a0:	ae06      	add	r6, sp, #24
 80033a2:	0030      	movs	r0, r6
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	af1b      	add	r7, sp, #108	; 0x6c
 80033a8:	464b      	mov	r3, r9
 80033aa:	f7ff fe31 	bl	8003010 <Lcd_create>
 80033ae:	003b      	movs	r3, r7
 80033b0:	ce07      	ldmia	r6!, {r0, r1, r2}
 80033b2:	c307      	stmia	r3!, {r0, r1, r2}
 80033b4:	ce07      	ldmia	r6!, {r0, r1, r2}
 80033b6:	c307      	stmia	r3!, {r0, r1, r2}
 80033b8:	ab15      	add	r3, sp, #84	; 0x54
 80033ba:	469a      	mov	sl, r3
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <main+0x360>)
 80033be:	469b      	mov	fp, r3
		Lcd_clear_and_write(&lcd, "Waiting for map");
 80033c0:	4950      	ldr	r1, [pc, #320]	; (8003504 <main+0x364>)
 80033c2:	0038      	movs	r0, r7
 80033c4:	f7ff fe54 	bl	8003070 <Lcd_clear_and_write>
	set_buzzer(500);
 80033c8:	20fa      	movs	r0, #250	; 0xfa
 80033ca:	0040      	lsls	r0, r0, #1
 80033cc:	f7ff fe8c 	bl	80030e8 <set_buzzer>
		initialize_map(&huart2, &mapInfo);
 80033d0:	a913      	add	r1, sp, #76	; 0x4c
 80033d2:	0028      	movs	r0, r5
 80033d4:	f000 f912 	bl	80035fc <initialize_map>
	set_buzzer(500);
 80033d8:	20fa      	movs	r0, #250	; 0xfa
 80033da:	0040      	lsls	r0, r0, #1
 80033dc:	f7ff fe84 	bl	80030e8 <set_buzzer>
	HAL_Delay(300);
 80033e0:	2096      	movs	r0, #150	; 0x96
 80033e2:	0040      	lsls	r0, r0, #1
 80033e4:	f000 fb58 	bl	8003a98 <HAL_Delay>
	set_buzzer(500);
 80033e8:	20fa      	movs	r0, #250	; 0xfa
 80033ea:	0040      	lsls	r0, r0, #1
 80033ec:	f7ff fe7c 	bl	80030e8 <set_buzzer>
		Lcd_clear_and_write(&lcd, "Press the user button to start");
 80033f0:	0038      	movs	r0, r7
 80033f2:	4945      	ldr	r1, [pc, #276]	; (8003508 <main+0x368>)
 80033f4:	f7ff fe3c 	bl	8003070 <Lcd_clear_and_write>
		while (HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin) != GPIO_PIN_RESET);
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	483b      	ldr	r0, [pc, #236]	; (80034e8 <main+0x348>)
 80033fc:	0189      	lsls	r1, r1, #6
 80033fe:	f000 fe65 	bl	80040cc <HAL_GPIO_ReadPin>
 8003402:	2800      	cmp	r0, #0
 8003404:	d1f8      	bne.n	80033f8 <main+0x258>
		HAL_Delay(1000);
 8003406:	9005      	str	r0, [sp, #20]
 8003408:	20fa      	movs	r0, #250	; 0xfa
 800340a:	0080      	lsls	r0, r0, #2
 800340c:	f000 fb44 	bl	8003a98 <HAL_Delay>
		HAL_TIM_Base_Start(&htim2);
 8003410:	0020      	movs	r0, r4
 8003412:	f001 fc05 	bl	8004c20 <HAL_TIM_Base_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003416:	2100      	movs	r1, #0
 8003418:	0020      	movs	r0, r4
 800341a:	f001 fcc3 	bl	8004da4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800341e:	2104      	movs	r1, #4
 8003420:	0020      	movs	r0, r4
 8003422:	f001 fcbf 	bl	8004da4 <HAL_TIM_PWM_Start>
		MotorsInfo motorsInfo = {
 8003426:	4642      	mov	r2, r8
 8003428:	4b34      	ldr	r3, [pc, #208]	; (80034fc <main+0x35c>)
 800342a:	3318      	adds	r3, #24
 800342c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800342e:	c243      	stmia	r2!, {r0, r1, r6}
 8003430:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003432:	c243      	stmia	r2!, {r0, r1, r6}
 8003434:	cb03      	ldmia	r3!, {r0, r1}
 8003436:	c203      	stmia	r2!, {r0, r1}
		CleanComponentsInfo cleanComponentsInfo = { .vacuum_GPIOType = VACUUM_GPIO_Port, .vacuum_pin = VACUUM_Pin };
 8003438:	4652      	mov	r2, sl
 800343a:	4b30      	ldr	r3, [pc, #192]	; (80034fc <main+0x35c>)
 800343c:	3338      	adds	r3, #56	; 0x38
 800343e:	cb03      	ldmia	r3!, {r0, r1}
 8003440:	c203      	stmia	r2!, {r0, r1}
		is_driving = true;
 8003442:	2301      	movs	r3, #1
 8003444:	465a      	mov	r2, fp
		Lcd_clear_and_write(&lcd, "Start cleaning");
 8003446:	4931      	ldr	r1, [pc, #196]	; (800350c <main+0x36c>)
 8003448:	0038      	movs	r0, r7
		is_driving = true;
 800344a:	7013      	strb	r3, [r2, #0]
		Lcd_clear_and_write(&lcd, "Start cleaning");
 800344c:	f7ff fe10 	bl	8003070 <Lcd_clear_and_write>
		send_start_command(&huart2);
 8003450:	0028      	movs	r0, r5
 8003452:	f000 f923 	bl	800369c <send_start_command>
		int result_code = start_drive(&mapInfo, &is_obstacle_found, &huart2, &lcd, &motorsInfo, &cleanComponentsInfo);
 8003456:	4653      	mov	r3, sl
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	4643      	mov	r3, r8
 800345c:	002a      	movs	r2, r5
 800345e:	492c      	ldr	r1, [pc, #176]	; (8003510 <main+0x370>)
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	a813      	add	r0, sp, #76	; 0x4c
 8003464:	003b      	movs	r3, r7
 8003466:	f7ff fc19 	bl	8002c9c <start_drive>
		is_driving = false;
 800346a:	465b      	mov	r3, fp
		int result_code = start_drive(&mapInfo, &is_obstacle_found, &huart2, &lcd, &motorsInfo, &cleanComponentsInfo);
 800346c:	4681      	mov	r9, r0
		is_driving = false;
 800346e:	9a05      	ldr	r2, [sp, #20]
		send_end_command(&huart2, result_code);
 8003470:	b2c1      	uxtb	r1, r0
 8003472:	0028      	movs	r0, r5
		is_driving = false;
 8003474:	701a      	strb	r2, [r3, #0]
		send_end_command(&huart2, result_code);
 8003476:	f000 f919 	bl	80036ac <send_end_command>
		if (result_code != 0)
 800347a:	464b      	mov	r3, r9
 800347c:	2b00      	cmp	r3, #0
 800347e:	d011      	beq.n	80034a4 <main+0x304>
	set_buzzer(300);
 8003480:	2096      	movs	r0, #150	; 0x96
 8003482:	0040      	lsls	r0, r0, #1
 8003484:	f7ff fe30 	bl	80030e8 <set_buzzer>
	HAL_Delay(150);
 8003488:	2096      	movs	r0, #150	; 0x96
 800348a:	f000 fb05 	bl	8003a98 <HAL_Delay>
	set_buzzer(300);
 800348e:	2096      	movs	r0, #150	; 0x96
 8003490:	0040      	lsls	r0, r0, #1
 8003492:	f7ff fe29 	bl	80030e8 <set_buzzer>
	HAL_Delay(150);
 8003496:	2096      	movs	r0, #150	; 0x96
 8003498:	f000 fafe 	bl	8003a98 <HAL_Delay>
	set_buzzer(300);
 800349c:	2096      	movs	r0, #150	; 0x96
 800349e:	0040      	lsls	r0, r0, #1
 80034a0:	f7ff fe22 	bl	80030e8 <set_buzzer>
		snprintf(end_cleaning_message, 32, "Cleaning complete with code %d", result_code);
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <main+0x374>)
 80034a6:	464b      	mov	r3, r9
 80034a8:	2120      	movs	r1, #32
 80034aa:	a829      	add	r0, sp, #164	; 0xa4
 80034ac:	f002 ff4a 	bl	8006344 <sniprintf>
		Lcd_clear_and_write(&lcd, end_cleaning_message);
 80034b0:	a929      	add	r1, sp, #164	; 0xa4
 80034b2:	0038      	movs	r0, r7
 80034b4:	f7ff fddc 	bl	8003070 <Lcd_clear_and_write>
		free(mapInfo.map[0]);
 80034b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	f002 fb50 	bl	8005b60 <free>
		free(mapInfo.map);
 80034c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80034c2:	0018      	movs	r0, r3
 80034c4:	9305      	str	r3, [sp, #20]
 80034c6:	f002 fb4b 	bl	8005b60 <free>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80034ca:	2100      	movs	r1, #0
 80034cc:	0020      	movs	r0, r4
 80034ce:	f001 fc6d 	bl	8004dac <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80034d2:	2104      	movs	r1, #4
 80034d4:	0020      	movs	r0, r4
 80034d6:	f001 fc69 	bl	8004dac <HAL_TIM_PWM_Stop>
		HAL_Delay(2000); // wait for the user to see the result code
 80034da:	20fa      	movs	r0, #250	; 0xfa
 80034dc:	00c0      	lsls	r0, r0, #3
 80034de:	f000 fadb 	bl	8003a98 <HAL_Delay>
  {
 80034e2:	e76d      	b.n	80033c0 <main+0x220>
 80034e4:	40021000 	.word	0x40021000
 80034e8:	50000800 	.word	0x50000800
 80034ec:	50000400 	.word	0x50000400
 80034f0:	20000194 	.word	0x20000194
 80034f4:	40004400 	.word	0x40004400
 80034f8:	20000154 	.word	0x20000154
 80034fc:	08007108 	.word	0x08007108
 8003500:	20000094 	.word	0x20000094
 8003504:	08007228 	.word	0x08007228
 8003508:	08007238 	.word	0x08007238
 800350c:	08007258 	.word	0x08007258
 8003510:	20000095 	.word	0x20000095
 8003514:	08007268 	.word	0x08007268

08003518 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_9 && is_driving) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003518:	2380      	movs	r3, #128	; 0x80
{
 800351a:	b510      	push	{r4, lr}
	if(GPIO_Pin == GPIO_PIN_9 && is_driving) // If The INT Source Is EXTI Line9 (A9 Pin)
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4298      	cmp	r0, r3
 8003520:	d000      	beq.n	8003524 <HAL_GPIO_EXTI_Callback+0xc>
}
 8003522:	bd10      	pop	{r4, pc}
	if(GPIO_Pin == GPIO_PIN_9 && is_driving) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_GPIO_EXTI_Callback+0x24>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0fa      	beq.n	8003522 <HAL_GPIO_EXTI_Callback+0xa>
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800352c:	2007      	movs	r0, #7
 800352e:	f000 fb03 	bl	8003b38 <HAL_NVIC_DisableIRQ>
		is_obstacle_found = true;
 8003532:	2201      	movs	r2, #1
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <HAL_GPIO_EXTI_Callback+0x28>)
 8003536:	701a      	strb	r2, [r3, #0]
}
 8003538:	e7f3      	b.n	8003522 <HAL_GPIO_EXTI_Callback+0xa>
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000094 	.word	0x20000094
 8003540:	20000095 	.word	0x20000095

08003544 <Error_Handler>:
 8003544:	b672      	cpsid	i
  while (1)
 8003546:	e7fe      	b.n	8003546 <Error_Handler+0x2>

08003548 <read_number>:

/*
 * @brief read characters until '|' is found. returns the int representing
 * the sequence of chars
 */
static int read_number(UART_HandleTypeDef *huart) {
 8003548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354a:	b085      	sub	sp, #20
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 800354c:	af01      	add	r7, sp, #4
 800354e:	003a      	movs	r2, r7
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <read_number+0x44>)
static int read_number(UART_HandleTypeDef *huart) {
 8003552:	0006      	movs	r6, r0
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 8003554:	cb03      	ldmia	r3!, {r0, r1}
 8003556:	c203      	stmia	r2!, {r0, r1}
 8003558:	8819      	ldrh	r1, [r3, #0]
	uint8_t index = 0;
 800355a:	2400      	movs	r4, #0
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 800355c:	8011      	strh	r1, [r2, #0]
 800355e:	789b      	ldrb	r3, [r3, #2]
 8003560:	7093      	strb	r3, [r2, #2]
	uint8_t index = 0;
 8003562:	466b      	mov	r3, sp
 8003564:	1cdd      	adds	r5, r3, #3
	HAL_UART_Receive(huart, buffer, buffer_length, HAL_MAX_DELAY);
 8003566:	2301      	movs	r3, #1
 8003568:	2201      	movs	r2, #1
 800356a:	425b      	negs	r3, r3
 800356c:	0029      	movs	r1, r5
 800356e:	0030      	movs	r0, r6
 8003570:	f002 f97a 	bl	8005868 <HAL_UART_Receive>
	return c;
 8003574:	782b      	ldrb	r3, [r5, #0]
	char token;

	do {
		token = read_char(huart);
		if (token != '|') {
 8003576:	2b7c      	cmp	r3, #124	; 0x7c
 8003578:	d003      	beq.n	8003582 <read_number+0x3a>
			num[index] = token;
 800357a:	553b      	strb	r3, [r7, r4]
			index++;
 800357c:	3401      	adds	r4, #1
 800357e:	b2e4      	uxtb	r4, r4
		}
	} while (token != '|');
 8003580:	e7f1      	b.n	8003566 <read_number+0x1e>

	return atoi(num);
 8003582:	0038      	movs	r0, r7
 8003584:	f002 fa98 	bl	8005ab8 <atoi>
}
 8003588:	b005      	add	sp, #20
 800358a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358c:	08007148 	.word	0x08007148

08003590 <send_command>:
 */

static char buf[100];
static uint8_t last_command_size = 0;

static void send_command(UART_HandleTypeDef *huart, const char* raw_command) {
 8003590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003592:	46c6      	mov	lr, r8
 8003594:	b500      	push	{lr}
	if (last_command_size > 0) {
 8003596:	4e17      	ldr	r6, [pc, #92]	; (80035f4 <send_command+0x64>)
static void send_command(UART_HandleTypeDef *huart, const char* raw_command) {
 8003598:	0004      	movs	r4, r0
	if (last_command_size > 0) {
 800359a:	7833      	ldrb	r3, [r6, #0]
static void send_command(UART_HandleTypeDef *huart, const char* raw_command) {
 800359c:	000f      	movs	r7, r1
	if (last_command_size > 0) {
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <send_command+0x28>
		HAL_StatusTypeDef dmaCheck;
		do {
			dmaCheck = HAL_DMA_PollForTransfer(huart->hdmatx, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
		} // while(dmaCheck != HAL_OK || (dmaCheck == HAL_ERROR && huart->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER) || huart->hdmatx->State != HAL_DMA_STATE_READY);
		while(huart->hdmatx->State != HAL_DMA_STATE_READY);
 80035a2:	2525      	movs	r5, #37	; 0x25
 80035a4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
			dmaCheck = HAL_DMA_PollForTransfer(huart->hdmatx, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 80035a6:	2201      	movs	r2, #1
 80035a8:	2100      	movs	r1, #0
 80035aa:	4252      	negs	r2, r2
 80035ac:	f000 fbd0 	bl	8003d50 <HAL_DMA_PollForTransfer>
		while(huart->hdmatx->State != HAL_DMA_STATE_READY);
 80035b0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80035b2:	5d43      	ldrb	r3, [r0, r5]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d1f6      	bne.n	80035a6 <send_command+0x16>
//		if (last_command_size == 0)
//			break;
//		dmaCheck = HAL_DMA_PollForTransfer(huart->hdmatx, last_command_size, HAL_MAX_DELAY);
//	} while(dmaCheck != HAL_OK);

	uint8_t current_command_size = strlen(raw_command);
 80035b8:	0038      	movs	r0, r7
 80035ba:	f7fc fda5 	bl	8000108 <strlen>
 80035be:	4680      	mov	r8, r0
	last_command_size = current_command_size + 1; // 1 is for the \n
 80035c0:	1c45      	adds	r5, r0, #1
 80035c2:	b2ed      	uxtb	r5, r5
 80035c4:	7035      	strb	r5, [r6, #0]

	memset(buf, 0, sizeof(buf));
 80035c6:	4e0c      	ldr	r6, [pc, #48]	; (80035f8 <send_command+0x68>)
 80035c8:	2264      	movs	r2, #100	; 0x64
 80035ca:	0030      	movs	r0, r6
 80035cc:	2100      	movs	r1, #0
 80035ce:	f002 fafb 	bl	8005bc8 <memset>
	strcat(buf, raw_command);
 80035d2:	0039      	movs	r1, r7
 80035d4:	0030      	movs	r0, r6
 80035d6:	f002 fee9 	bl	80063ac <strcat>
	buf[current_command_size] = '\n';
 80035da:	4643      	mov	r3, r8
 80035dc:	20ff      	movs	r0, #255	; 0xff
 80035de:	4018      	ands	r0, r3
 80035e0:	230a      	movs	r3, #10
//	while(HAL_UART_Transmit_DMA(huart, (uint8_t *) dma_buffer, final_command_size)!= HAL_OK);
//	if (strncmp(raw_command, "START{}", 7) != 0)
//		while(HAL_DMA_PollForTransfer(huart->hdmatx, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY) != HAL_OK);
//	HAL_DMA_PollForTransfer(huart->hdmatx, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
//	huart->Instance->CR3 &= ~USART_CR3_DMAT;
	HAL_UART_Transmit_DMA(huart, (uint8_t *) buf, last_command_size);
 80035e2:	0031      	movs	r1, r6
	buf[current_command_size] = '\n';
 80035e4:	5433      	strb	r3, [r6, r0]
	HAL_UART_Transmit_DMA(huart, (uint8_t *) buf, last_command_size);
 80035e6:	b2aa      	uxth	r2, r5
 80035e8:	0020      	movs	r0, r4
 80035ea:	f001 fcf9 	bl	8004fe0 <HAL_UART_Transmit_DMA>
//	HAL_UART_Transmit(huart, (uint8_t *) buf, final_command_size, HAL_MAX_DELAY);
}
 80035ee:	bc80      	pop	{r7}
 80035f0:	46b8      	mov	r8, r7
 80035f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f4:	200000fc 	.word	0x200000fc
 80035f8:	20000098 	.word	0x20000098

080035fc <initialize_map>:
void initialize_map(UART_HandleTypeDef *huart, MapInfo* mapInfo) {
 80035fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fe:	464e      	mov	r6, r9
 8003600:	4645      	mov	r5, r8
 8003602:	46de      	mov	lr, fp
 8003604:	4657      	mov	r7, sl
 8003606:	b5e0      	push	{r5, r6, r7, lr}
 8003608:	b083      	sub	sp, #12
 800360a:	466b      	mov	r3, sp
 800360c:	0005      	movs	r5, r0
 800360e:	4689      	mov	r9, r1
 8003610:	1ddc      	adds	r4, r3, #7
	HAL_UART_Receive(huart, buffer, buffer_length, HAL_MAX_DELAY);
 8003612:	2301      	movs	r3, #1
 8003614:	2201      	movs	r2, #1
 8003616:	425b      	negs	r3, r3
 8003618:	0021      	movs	r1, r4
 800361a:	0028      	movs	r0, r5
 800361c:	f002 f924 	bl	8005868 <HAL_UART_Receive>
	return c;
 8003620:	7823      	ldrb	r3, [r4, #0]
	} while (c != '&');
 8003622:	2b26      	cmp	r3, #38	; 0x26
 8003624:	d1f5      	bne.n	8003612 <initialize_map+0x16>
	int row_count = read_number(huart);
 8003626:	0028      	movs	r0, r5
 8003628:	f7ff ff8e 	bl	8003548 <read_number>
 800362c:	4680      	mov	r8, r0
	int column_count = read_number(huart);
 800362e:	0028      	movs	r0, r5
 8003630:	f7ff ff8a 	bl	8003548 <read_number>
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 8003634:	4643      	mov	r3, r8
 8003636:	009f      	lsls	r7, r3, #2
	int column_count = read_number(huart);
 8003638:	0006      	movs	r6, r0
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 800363a:	0038      	movs	r0, r7
 800363c:	f002 fa86 	bl	8005b4c <malloc>
	int map_size = row_count * column_count;
 8003640:	4643      	mov	r3, r8
 8003642:	4373      	muls	r3, r6
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 8003644:	4682      	mov	sl, r0
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 8003646:	0018      	movs	r0, r3
	int map_size = row_count * column_count;
 8003648:	469b      	mov	fp, r3
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 800364a:	f002 fa7f 	bl	8005b4c <malloc>
	for (int r = 0; r < row_count; r++) {
 800364e:	4643      	mov	r3, r8
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 8003650:	0001      	movs	r1, r0
	for (int r = 0; r < row_count; r++) {
 8003652:	2b00      	cmp	r3, #0
 8003654:	dd06      	ble.n	8003664 <initialize_map+0x68>
 8003656:	0002      	movs	r2, r0
 8003658:	4653      	mov	r3, sl
 800365a:	4457      	add	r7, sl
		map_rows[r] = &map[r * column_count];
 800365c:	c304      	stmia	r3!, {r2}
	for (int r = 0; r < row_count; r++) {
 800365e:	1992      	adds	r2, r2, r6
 8003660:	429f      	cmp	r7, r3
 8003662:	d1fb      	bne.n	800365c <initialize_map+0x60>
	HAL_UART_Receive(huart, buffer, buffer_length, HAL_MAX_DELAY);
 8003664:	465b      	mov	r3, fp
 8003666:	b29a      	uxth	r2, r3
 8003668:	2301      	movs	r3, #1
 800366a:	0028      	movs	r0, r5
 800366c:	425b      	negs	r3, r3
 800366e:	f002 f8fb 	bl	8005868 <HAL_UART_Receive>
 8003672:	2301      	movs	r3, #1
 8003674:	2201      	movs	r2, #1
 8003676:	0021      	movs	r1, r4
 8003678:	0028      	movs	r0, r5
 800367a:	425b      	negs	r3, r3
 800367c:	f002 f8f4 	bl	8005868 <HAL_UART_Receive>
	mapInfo->row_count = row_count;
 8003680:	464b      	mov	r3, r9
 8003682:	4642      	mov	r2, r8
 8003684:	809a      	strh	r2, [r3, #4]
	mapInfo->map = map_rows;
 8003686:	4652      	mov	r2, sl
	mapInfo->column_count = column_count;
 8003688:	80de      	strh	r6, [r3, #6]
	mapInfo->map = map_rows;
 800368a:	601a      	str	r2, [r3, #0]
}
 800368c:	b003      	add	sp, #12
 800368e:	bcf0      	pop	{r4, r5, r6, r7}
 8003690:	46bb      	mov	fp, r7
 8003692:	46b2      	mov	sl, r6
 8003694:	46a9      	mov	r9, r5
 8003696:	46a0      	mov	r8, r4
 8003698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)

0800369c <send_start_command>:

void send_start_command(UART_HandleTypeDef *huart) {
 800369c:	b510      	push	{r4, lr}
	const char* command_id = "START{}";
	send_command(huart, command_id);
 800369e:	4902      	ldr	r1, [pc, #8]	; (80036a8 <send_start_command+0xc>)
 80036a0:	f7ff ff76 	bl	8003590 <send_command>
}
 80036a4:	bd10      	pop	{r4, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	08007288 	.word	0x08007288

080036ac <send_end_command>:

void send_end_command(UART_HandleTypeDef *huart, uint8_t return_code) {
 80036ac:	b510      	push	{r4, lr}
 80036ae:	0004      	movs	r4, r0
 80036b0:	b08a      	sub	sp, #40	; 0x28
 80036b2:	000b      	movs	r3, r1
	const size_t BUFFER_LENGTH = 40;
	char command_id[BUFFER_LENGTH];

	snprintf(command_id, BUFFER_LENGTH, "END{'ret_code':%hu}", return_code);
 80036b4:	4a05      	ldr	r2, [pc, #20]	; (80036cc <send_end_command+0x20>)
 80036b6:	2128      	movs	r1, #40	; 0x28
 80036b8:	4668      	mov	r0, sp
 80036ba:	f002 fe43 	bl	8006344 <sniprintf>
	send_command(huart, command_id);
 80036be:	4669      	mov	r1, sp
 80036c0:	0020      	movs	r0, r4
 80036c2:	f7ff ff65 	bl	8003590 <send_command>
}
 80036c6:	b00a      	add	sp, #40	; 0x28
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	08007290 	.word	0x08007290

080036d0 <send_new_cleaner_position_command>:

void send_new_cleaner_position_command(UART_HandleTypeDef *huart, uint16_t r, uint16_t c, bool cleaning_enabled) {
 80036d0:	b510      	push	{r4, lr}
 80036d2:	0004      	movs	r4, r0
 80036d4:	b096      	sub	sp, #88	; 0x58
	const size_t BUFFER_LENGTH = 80;
	char command_id[BUFFER_LENGTH];

	snprintf(command_id, BUFFER_LENGTH, "MOVE{'r':%hu,'c':%hu,'cleaning_enabled':%s}",
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <send_new_cleaner_position_command+0x28>
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <send_new_cleaner_position_command+0x2c>)
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	9200      	str	r2, [sp, #0]
 80036e0:	000b      	movs	r3, r1
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <send_new_cleaner_position_command+0x30>)
 80036e4:	2150      	movs	r1, #80	; 0x50
 80036e6:	a802      	add	r0, sp, #8
 80036e8:	f002 fe2c 	bl	8006344 <sniprintf>
			r, c, cleaning_enabled == true ? "True" : "False");
	send_command(huart, command_id);
 80036ec:	0020      	movs	r0, r4
 80036ee:	a902      	add	r1, sp, #8
 80036f0:	f7ff ff4e 	bl	8003590 <send_command>
}
 80036f4:	b016      	add	sp, #88	; 0x58
 80036f6:	bd10      	pop	{r4, pc}
	snprintf(command_id, BUFFER_LENGTH, "MOVE{'r':%hu,'c':%hu,'cleaning_enabled':%s}",
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <send_new_cleaner_position_command+0x34>)
 80036fa:	e7ef      	b.n	80036dc <send_new_cleaner_position_command+0xc>
 80036fc:	080072ac 	.word	0x080072ac
 8003700:	080072b4 	.word	0x080072b4
 8003704:	080072a4 	.word	0x080072a4

08003708 <send_obstacle_command>:

void send_obstacle_command(UART_HandleTypeDef *huart, uint16_t r, uint16_t c) {
 8003708:	b510      	push	{r4, lr}
 800370a:	0004      	movs	r4, r0
 800370c:	b092      	sub	sp, #72	; 0x48
 800370e:	000b      	movs	r3, r1
	const size_t BUFFER_LENGTH = 64;
	char command_id[BUFFER_LENGTH];

	snprintf(command_id, BUFFER_LENGTH, "OBSTACLE{'r':%hu,'c':%hu}", r, c);
 8003710:	9200      	str	r2, [sp, #0]
 8003712:	2140      	movs	r1, #64	; 0x40
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <send_obstacle_command+0x20>)
 8003716:	a802      	add	r0, sp, #8
 8003718:	f002 fe14 	bl	8006344 <sniprintf>
	send_command(huart, command_id);
 800371c:	0020      	movs	r0, r4
 800371e:	a902      	add	r1, sp, #8
 8003720:	f7ff ff36 	bl	8003590 <send_command>
}
 8003724:	b012      	add	sp, #72	; 0x48
 8003726:	bd10      	pop	{r4, pc}
 8003728:	080072e0 	.word	0x080072e0

0800372c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372c:	2101      	movs	r1, #1
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_MspInit+0x18>)
 8003730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003732:	430a      	orrs	r2, r1
 8003734:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800373a:	0552      	lsls	r2, r2, #21
 800373c:	430a      	orrs	r2, r1
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003740:	4770      	bx	lr
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	40021000 	.word	0x40021000

08003748 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	6802      	ldr	r2, [r0, #0]
 800374c:	05db      	lsls	r3, r3, #23
 800374e:	429a      	cmp	r2, r3
 8003750:	d000      	beq.n	8003754 <HAL_TIM_PWM_MspInit+0xc>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003752:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003754:	2101      	movs	r1, #1
 8003756:	4a02      	ldr	r2, [pc, #8]	; (8003760 <HAL_TIM_PWM_MspInit+0x18>)
 8003758:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800375a:	430b      	orrs	r3, r1
 800375c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800375e:	e7f8      	b.n	8003752 <HAL_TIM_PWM_MspInit+0xa>
 8003760:	40021000 	.word	0x40021000

08003764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003764:	b510      	push	{r4, lr}
 8003766:	0004      	movs	r4, r0
 8003768:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376a:	2214      	movs	r2, #20
 800376c:	2100      	movs	r1, #0
 800376e:	a801      	add	r0, sp, #4
 8003770:	f002 fa2a 	bl	8005bc8 <memset>
  if(htim->Instance==TIM2)
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	05db      	lsls	r3, r3, #23
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800377e:	b006      	add	sp, #24
 8003780:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	2301      	movs	r3, #1
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_TIM_MspPostInit+0x4c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003786:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003788:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378c:	4319      	orrs	r1, r3
 800378e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003790:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003792:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003794:	4013      	ands	r3, r2
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MOTOR_1___Speed_Pin|MOTOR_2___Speed_Pin;
 800379a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = MOTOR_1___Speed_Pin|MOTOR_2___Speed_Pin;
 800379e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	3b01      	subs	r3, #1
 80037a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80037a8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	f000 fb95 	bl	8003ed8 <HAL_GPIO_Init>
}
 80037ae:	e7e6      	b.n	800377e <HAL_TIM_MspPostInit+0x1a>
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	0004      	movs	r4, r0
 80037b8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ba:	2214      	movs	r2, #20
 80037bc:	2100      	movs	r1, #0
 80037be:	a801      	add	r0, sp, #4
 80037c0:	f002 fa02 	bl	8005bc8 <memset>
  if(huart->Instance==USART2)
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <HAL_UART_MspInit+0x98>)
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037cc:	b007      	add	sp, #28
 80037ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <HAL_UART_MspInit+0x9c>)
 80037d4:	0292      	lsls	r2, r2, #10
 80037d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80037da:	430a      	orrs	r2, r1
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	2201      	movs	r2, #1
 80037e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e4:	4311      	orrs	r1, r2
 80037e6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80037ea:	2704      	movs	r7, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ec:	401a      	ands	r2, r3
 80037ee:	9200      	str	r2, [sp, #0]
 80037f0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037f2:	230c      	movs	r3, #12
 80037f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	3b0a      	subs	r3, #10
 80037f8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fa:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fc:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fe:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003800:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003804:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003806:	f000 fb67 	bl	8003ed8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800380a:	4d12      	ldr	r5, [pc, #72]	; (8003854 <HAL_UART_MspInit+0xa0>)
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_UART_MspInit+0xa4>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800380e:	0028      	movs	r0, r5
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8003810:	602b      	str	r3, [r5, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003812:	2310      	movs	r3, #16
 8003814:	60ab      	str	r3, [r5, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003816:	3370      	adds	r3, #112	; 0x70
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 8003818:	606f      	str	r7, [r5, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800381a:	60ee      	str	r6, [r5, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800381c:	612b      	str	r3, [r5, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800381e:	616e      	str	r6, [r5, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003820:	61ae      	str	r6, [r5, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003822:	61ee      	str	r6, [r5, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003824:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003826:	f000 f9bf 	bl	8003ba8 <HAL_DMA_Init>
 800382a:	2800      	cmp	r0, #0
 800382c:	d10a      	bne.n	8003844 <HAL_UART_MspInit+0x90>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003834:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003836:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003838:	f000 f940 	bl	8003abc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800383c:	201c      	movs	r0, #28
 800383e:	f000 f96f 	bl	8003b20 <HAL_NVIC_EnableIRQ>
}
 8003842:	e7c3      	b.n	80037cc <HAL_UART_MspInit+0x18>
      Error_Handler();
 8003844:	f7ff fe7e 	bl	8003544 <Error_Handler>
 8003848:	e7f1      	b.n	800382e <HAL_UART_MspInit+0x7a>
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	40004400 	.word	0x40004400
 8003850:	40021000 	.word	0x40021000
 8003854:	2000010c 	.word	0x2000010c
 8003858:	40020044 	.word	0x40020044

0800385c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800385c:	e7fe      	b.n	800385c <NMI_Handler>
 800385e:	46c0      	nop			; (mov r8, r8)

08003860 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003860:	e7fe      	b.n	8003860 <HardFault_Handler>
 8003862:	46c0      	nop			; (mov r8, r8)

08003864 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003864:	4770      	bx	lr
 8003866:	46c0      	nop			; (mov r8, r8)

08003868 <PendSV_Handler>:
 8003868:	4770      	bx	lr
 800386a:	46c0      	nop			; (mov r8, r8)

0800386c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800386c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800386e:	f000 f901 	bl	8003a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003872:	bd10      	pop	{r4, pc}

08003874 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DISTANCE_SENSOR_Pin);
 8003874:	2080      	movs	r0, #128	; 0x80
{
 8003876:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(DISTANCE_SENSOR_Pin);
 8003878:	0080      	lsls	r0, r0, #2
 800387a:	f000 fc33 	bl	80040e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800387e:	bd10      	pop	{r4, pc}

08003880 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8003880:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003882:	4802      	ldr	r0, [pc, #8]	; (800388c <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8003884:	f000 fad8 	bl	8003e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003888:	bd10      	pop	{r4, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	2000010c 	.word	0x2000010c

08003890 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003890:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003892:	4802      	ldr	r0, [pc, #8]	; (800389c <USART2_IRQHandler+0xc>)
 8003894:	f001 fc70 	bl	8005178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003898:	bd10      	pop	{r4, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	20000194 	.word	0x20000194

080038a0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80038a0:	2001      	movs	r0, #1
 80038a2:	4770      	bx	lr

080038a4 <_kill>:

int _kill(int pid, int sig)
{
 80038a4:	b510      	push	{r4, lr}
	errno = EINVAL;
 80038a6:	f002 f917 	bl	8005ad8 <__errno>
 80038aa:	2316      	movs	r3, #22
 80038ac:	6003      	str	r3, [r0, #0]
	return -1;
 80038ae:	2001      	movs	r0, #1
}
 80038b0:	4240      	negs	r0, r0
 80038b2:	bd10      	pop	{r4, pc}

080038b4 <_exit>:

void _exit (int status)
{
 80038b4:	b510      	push	{r4, lr}
	errno = EINVAL;
 80038b6:	f002 f90f 	bl	8005ad8 <__errno>
 80038ba:	2316      	movs	r3, #22
 80038bc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80038be:	e7fe      	b.n	80038be <_exit+0xa>

080038c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c4:	dd07      	ble.n	80038d6 <_read+0x16>
 80038c6:	000c      	movs	r4, r1
 80038c8:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 80038ca:	e000      	b.n	80038ce <_read+0xe>
 80038cc:	bf00      	nop
 80038ce:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d0:	3401      	adds	r4, #1
 80038d2:	42ac      	cmp	r4, r5
 80038d4:	d1f9      	bne.n	80038ca <_read+0xa>
	}

return len;
}
 80038d6:	0030      	movs	r0, r6
 80038d8:	bd70      	pop	{r4, r5, r6, pc}
 80038da:	46c0      	nop			; (mov r8, r8)

080038dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e0:	dd07      	ble.n	80038f2 <_write+0x16>
 80038e2:	000c      	movs	r4, r1
 80038e4:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 80038e6:	7820      	ldrb	r0, [r4, #0]
 80038e8:	3401      	adds	r4, #1
 80038ea:	e000      	b.n	80038ee <_write+0x12>
 80038ec:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ee:	42ac      	cmp	r4, r5
 80038f0:	d1f9      	bne.n	80038e6 <_write+0xa>
	}
	return len;
}
 80038f2:	0030      	movs	r0, r6
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)

080038f8 <_close>:

int _close(int file)
{
	return -1;
 80038f8:	2001      	movs	r0, #1
}
 80038fa:	4240      	negs	r0, r0
 80038fc:	4770      	bx	lr
 80038fe:	46c0      	nop			; (mov r8, r8)

08003900 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	019b      	lsls	r3, r3, #6
	return 0;
}
 8003904:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003906:	604b      	str	r3, [r1, #4]
}
 8003908:	4770      	bx	lr
 800390a:	46c0      	nop			; (mov r8, r8)

0800390c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800390c:	2001      	movs	r0, #1
 800390e:	4770      	bx	lr

08003910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003910:	2000      	movs	r0, #0
 8003912:	4770      	bx	lr

08003914 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003914:	490c      	ldr	r1, [pc, #48]	; (8003948 <_sbrk+0x34>)
 8003916:	4a0d      	ldr	r2, [pc, #52]	; (800394c <_sbrk+0x38>)
{
 8003918:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800391a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <_sbrk+0x3c>)
{
 800391e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003920:	6808      	ldr	r0, [r1, #0]
 8003922:	2800      	cmp	r0, #0
 8003924:	d004      	beq.n	8003930 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003926:	18c3      	adds	r3, r0, r3
 8003928:	4293      	cmp	r3, r2
 800392a:	d806      	bhi.n	800393a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800392c:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800392e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003930:	4808      	ldr	r0, [pc, #32]	; (8003954 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8003932:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8003934:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003936:	4293      	cmp	r3, r2
 8003938:	d9f8      	bls.n	800392c <_sbrk+0x18>
    errno = ENOMEM;
 800393a:	f002 f8cd 	bl	8005ad8 <__errno>
 800393e:	230c      	movs	r3, #12
 8003940:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003942:	2001      	movs	r0, #1
 8003944:	4240      	negs	r0, r0
 8003946:	e7f2      	b.n	800392e <_sbrk+0x1a>
 8003948:	00000400 	.word	0x00000400
 800394c:	20002000 	.word	0x20002000
 8003950:	20000100 	.word	0x20000100
 8003954:	20000230 	.word	0x20000230

08003958 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003958:	4770      	bx	lr
 800395a:	46c0      	nop			; (mov r8, r8)

0800395c <is_row_valid>:
 */

#include "types/map.h"

inline bool is_row_valid(const MapInfo* mapInfo, uint16_t row) {
	return row >= 0 && row < mapInfo->row_count;
 800395c:	8880      	ldrh	r0, [r0, #4]
 800395e:	4281      	cmp	r1, r0
 8003960:	4180      	sbcs	r0, r0
 8003962:	4240      	negs	r0, r0
}
 8003964:	4770      	bx	lr
 8003966:	46c0      	nop			; (mov r8, r8)

08003968 <is_column_valid>:

inline bool is_column_valid(const MapInfo* mapInfo, uint16_t column) {
	return column >= 0 && column < mapInfo->column_count;
 8003968:	88c0      	ldrh	r0, [r0, #6]
 800396a:	4281      	cmp	r1, r0
 800396c:	4180      	sbcs	r0, r0
 800396e:	4240      	negs	r0, r0
}
 8003970:	4770      	bx	lr
 8003972:	46c0      	nop			; (mov r8, r8)

08003974 <is_cell_valid>:

inline bool is_cell_valid(const MapInfo* mapInfo, const MapPosition* cell) {
 8003974:	b510      	push	{r4, lr}
	return is_row_valid(mapInfo, cell->row) && is_column_valid(mapInfo, cell->col);
 8003976:	880c      	ldrh	r4, [r1, #0]
 8003978:	8883      	ldrh	r3, [r0, #4]
inline bool is_cell_valid(const MapInfo* mapInfo, const MapPosition* cell) {
 800397a:	0002      	movs	r2, r0
 800397c:	2000      	movs	r0, #0
	return is_row_valid(mapInfo, cell->row) && is_column_valid(mapInfo, cell->col);
 800397e:	429c      	cmp	r4, r3
 8003980:	d204      	bcs.n	800398c <is_cell_valid+0x18>
 8003982:	884b      	ldrh	r3, [r1, #2]
 8003984:	88d0      	ldrh	r0, [r2, #6]
 8003986:	4283      	cmp	r3, r0
 8003988:	4180      	sbcs	r0, r0
 800398a:	4240      	negs	r0, r0
}
 800398c:	bd10      	pop	{r4, pc}
 800398e:	46c0      	nop			; (mov r8, r8)

08003990 <are_MapPositions_equal>:

inline bool are_MapPositions_equal(const MapPosition* mp1, const MapPosition* mp2) {
 8003990:	b510      	push	{r4, lr}
	return mp1->row == mp2->row && mp1->col == mp2->col;
 8003992:	880a      	ldrh	r2, [r1, #0]
 8003994:	8804      	ldrh	r4, [r0, #0]
inline bool are_MapPositions_equal(const MapPosition* mp1, const MapPosition* mp2) {
 8003996:	0003      	movs	r3, r0
 8003998:	2000      	movs	r0, #0
	return mp1->row == mp2->row && mp1->col == mp2->col;
 800399a:	4294      	cmp	r4, r2
 800399c:	d105      	bne.n	80039aa <are_MapPositions_equal+0x1a>
 800399e:	8858      	ldrh	r0, [r3, #2]
 80039a0:	884b      	ldrh	r3, [r1, #2]
 80039a2:	1ac0      	subs	r0, r0, r3
 80039a4:	4243      	negs	r3, r0
 80039a6:	4158      	adcs	r0, r3
 80039a8:	b2c0      	uxtb	r0, r0
}
 80039aa:	bd10      	pop	{r4, pc}

080039ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80039ac:	480d      	ldr	r0, [pc, #52]	; (80039e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039b0:	480d      	ldr	r0, [pc, #52]	; (80039e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80039b2:	490e      	ldr	r1, [pc, #56]	; (80039ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80039b4:	4a0e      	ldr	r2, [pc, #56]	; (80039f0 <LoopForever+0xe>)
  movs r3, #0
 80039b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039b8:	e002      	b.n	80039c0 <LoopCopyDataInit>

080039ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039be:	3304      	adds	r3, #4

080039c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039c4:	d3f9      	bcc.n	80039ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039c8:	4c0b      	ldr	r4, [pc, #44]	; (80039f8 <LoopForever+0x16>)
  movs r3, #0
 80039ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039cc:	e001      	b.n	80039d2 <LoopFillZerobss>

080039ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039d0:	3204      	adds	r2, #4

080039d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039d4:	d3fb      	bcc.n	80039ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80039d6:	f7ff ffbf 	bl	8003958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039da:	f002 f893 	bl	8005b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039de:	f7ff fbdf 	bl	80031a0 <main>

080039e2 <LoopForever>:

LoopForever:
    b LoopForever
 80039e2:	e7fe      	b.n	80039e2 <LoopForever>
  ldr   r0, =_estack
 80039e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80039e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80039f0:	08007560 	.word	0x08007560
  ldr r2, =_sbss
 80039f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80039f8:	2000022c 	.word	0x2000022c

080039fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039fc:	e7fe      	b.n	80039fc <ADC1_COMP_IRQHandler>
	...

08003a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a00:	b510      	push	{r4, lr}
 8003a02:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a04:	20fa      	movs	r0, #250	; 0xfa
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <HAL_InitTick+0x40>)
 8003a08:	0080      	lsls	r0, r0, #2
 8003a0a:	7819      	ldrb	r1, [r3, #0]
 8003a0c:	f7fc fb8e 	bl	800012c <__udivsi3>
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_InitTick+0x44>)
 8003a12:	0001      	movs	r1, r0
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	f7fc fb89 	bl	800012c <__udivsi3>
 8003a1a:	f000 f89d 	bl	8003b58 <HAL_SYSTICK_Config>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8003a22:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a24:	2c03      	cmp	r4, #3
 8003a26:	d900      	bls.n	8003a2a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003a28:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a2a:	3802      	subs	r0, #2
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	0021      	movs	r1, r4
 8003a30:	f000 f844 	bl	8003abc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_InitTick+0x48>)
 8003a36:	2000      	movs	r0, #0
 8003a38:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8003a3a:	e7f5      	b.n	8003a28 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	e7f3      	b.n	8003a28 <HAL_InitTick+0x28>
 8003a40:	2000000c 	.word	0x2000000c
 8003a44:	20000008 	.word	0x20000008
 8003a48:	20000010 	.word	0x20000010

08003a4c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <HAL_Init+0x24>)
{
 8003a50:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003a52:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a54:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a5a:	f7ff ffd1 	bl	8003a00 <HAL_InitTick>
 8003a5e:	1e04      	subs	r4, r0, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8003a62:	2401      	movs	r4, #1
}
 8003a64:	0020      	movs	r0, r4
 8003a66:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8003a68:	f7ff fe60 	bl	800372c <HAL_MspInit>
 8003a6c:	e7fa      	b.n	8003a64 <HAL_Init+0x18>
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	40022000 	.word	0x40022000

08003a74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a74:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <HAL_IncTick+0x10>)
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <HAL_IncTick+0x14>)
 8003a78:	6811      	ldr	r1, [r2, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	185b      	adds	r3, r3, r1
 8003a7e:	6013      	str	r3, [r2, #0]
}
 8003a80:	4770      	bx	lr
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	20000218 	.word	0x20000218
 8003a88:	2000000c 	.word	0x2000000c

08003a8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a8c:	4b01      	ldr	r3, [pc, #4]	; (8003a94 <HAL_GetTick+0x8>)
 8003a8e:	6818      	ldr	r0, [r3, #0]
}
 8003a90:	4770      	bx	lr
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	20000218 	.word	0x20000218

08003a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7ff fff6 	bl	8003a8c <HAL_GetTick>
 8003aa0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa2:	1c63      	adds	r3, r4, #1
 8003aa4:	d002      	beq.n	8003aac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <HAL_Delay+0x20>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aac:	f7ff ffee 	bl	8003a8c <HAL_GetTick>
 8003ab0:	1b40      	subs	r0, r0, r5
 8003ab2:	42a0      	cmp	r0, r4
 8003ab4:	d3fa      	bcc.n	8003aac <HAL_Delay+0x14>
  {
  }
}
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	2000000c 	.word	0x2000000c

08003abc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abc:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	db14      	blt.n	8003aec <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_NVIC_SetPriority+0x5c>)
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	469c      	mov	ip, r3
 8003ac8:	23ff      	movs	r3, #255	; 0xff
 8003aca:	0884      	lsrs	r4, r0, #2
 8003acc:	4010      	ands	r0, r2
 8003ace:	001a      	movs	r2, r3
 8003ad0:	26c0      	movs	r6, #192	; 0xc0
 8003ad2:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ad4:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ad6:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ad8:	400b      	ands	r3, r1
 8003ada:	4083      	lsls	r3, r0
 8003adc:	00a4      	lsls	r4, r4, #2
 8003ade:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ae0:	00b6      	lsls	r6, r6, #2
 8003ae2:	59a5      	ldr	r5, [r4, r6]
 8003ae4:	4395      	bics	r5, r2
 8003ae6:	432b      	orrs	r3, r5
 8003ae8:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aec:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <HAL_NVIC_SetPriority+0x60>)
 8003aee:	230f      	movs	r3, #15
 8003af0:	4694      	mov	ip, r2
 8003af2:	2203      	movs	r2, #3
 8003af4:	4003      	ands	r3, r0
 8003af6:	4010      	ands	r0, r2
 8003af8:	32fc      	adds	r2, #252	; 0xfc
 8003afa:	0015      	movs	r5, r2
 8003afc:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003afe:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b00:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b02:	400a      	ands	r2, r1
 8003b04:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b06:	3b08      	subs	r3, #8
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4463      	add	r3, ip
 8003b0e:	69dc      	ldr	r4, [r3, #28]
 8003b10:	43ac      	bics	r4, r5
 8003b12:	4322      	orrs	r2, r4
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	e7e8      	b.n	8003aea <HAL_NVIC_SetPriority+0x2e>
 8003b18:	e000e100 	.word	0xe000e100
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b20:	2800      	cmp	r0, #0
 8003b22:	db05      	blt.n	8003b30 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b24:	231f      	movs	r3, #31
 8003b26:	4018      	ands	r0, r3
 8003b28:	3b1e      	subs	r3, #30
 8003b2a:	4083      	lsls	r3, r0
 8003b2c:	4a01      	ldr	r2, [pc, #4]	; (8003b34 <HAL_NVIC_EnableIRQ+0x14>)
 8003b2e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003b30:	4770      	bx	lr
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	db0a      	blt.n	8003b52 <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3c:	231f      	movs	r3, #31
 8003b3e:	4018      	ands	r0, r3
 8003b40:	3b1e      	subs	r3, #30
 8003b42:	4083      	lsls	r3, r0
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_NVIC_DisableIRQ+0x1c>)
 8003b48:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b4e:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	1e43      	subs	r3, r0, #1
 8003b5c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b5e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d20e      	bcs.n	8003b82 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b64:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b66:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b68:	4807      	ldr	r0, [pc, #28]	; (8003b88 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b6c:	6a03      	ldr	r3, [r0, #32]
 8003b6e:	0609      	lsls	r1, r1, #24
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b78:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b7a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b7c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7e:	3307      	adds	r3, #7
 8003b80:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003b82:	4770      	bx	lr
 8003b84:	e000e010 	.word	0xe000e010
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	db07      	blt.n	8003ba0 <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b90:	231f      	movs	r3, #31
 8003b92:	22c0      	movs	r2, #192	; 0xc0
 8003b94:	4018      	ands	r0, r3
 8003b96:	3b1e      	subs	r3, #30
 8003b98:	4083      	lsls	r3, r0
 8003b9a:	4902      	ldr	r1, [pc, #8]	; (8003ba4 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8003b9c:	0052      	lsls	r2, r2, #1
 8003b9e:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8003ba0:	4770      	bx	lr
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	e000e100 	.word	0xe000e100

08003ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003bac:	d038      	beq.n	8003c20 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bae:	6805      	ldr	r5, [r0, #0]
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_DMA_Init+0x7c>)
 8003bb2:	2114      	movs	r1, #20
 8003bb4:	18e8      	adds	r0, r5, r3
 8003bb6:	f7fc fab9 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003bba:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_DMA_Init+0x80>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bbc:	2202      	movs	r2, #2
  hdma->DmaBaseAddress = DMA1;
 8003bbe:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bc0:	2325      	movs	r3, #37	; 0x25
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bc2:	0080      	lsls	r0, r0, #2
 8003bc4:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bc6:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bc8:	682b      	ldr	r3, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_DMA_Init+0x84>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bcc:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bce:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8003bd0:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	6926      	ldr	r6, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003bd4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd6:	4333      	orrs	r3, r6
 8003bd8:	6966      	ldr	r6, [r4, #20]
 8003bda:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bdc:	69a6      	ldr	r6, [r4, #24]
 8003bde:	4333      	orrs	r3, r6
 8003be0:	69e6      	ldr	r6, [r4, #28]
 8003be2:	4333      	orrs	r3, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be4:	6a26      	ldr	r6, [r4, #32]
 8003be6:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8003be8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bea:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	01db      	lsls	r3, r3, #7
 8003bf0:	4299      	cmp	r1, r3
 8003bf2:	d00c      	beq.n	8003c0e <HAL_DMA_Init+0x66>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bf4:	231c      	movs	r3, #28
 8003bf6:	4018      	ands	r0, r3
 8003bf8:	3b0d      	subs	r3, #13
 8003bfa:	4083      	lsls	r3, r0
 8003bfc:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <HAL_DMA_Init+0x88>)
 8003bfe:	6811      	ldr	r1, [r2, #0]
 8003c00:	4399      	bics	r1, r3
 8003c02:	6011      	str	r1, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	6811      	ldr	r1, [r2, #0]
 8003c08:	4083      	lsls	r3, r0
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0e:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c10:	2225      	movs	r2, #37	; 0x25
 8003c12:	2101      	movs	r1, #1

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8003c14:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c16:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8003c18:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8003c1a:	3a01      	subs	r2, #1
 8003c1c:	54a3      	strb	r3, [r4, r2]
}
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003c20:	2001      	movs	r0, #1
 8003c22:	e7fc      	b.n	8003c1e <HAL_DMA_Init+0x76>
 8003c24:	bffdfff8 	.word	0xbffdfff8
 8003c28:	40020000 	.word	0x40020000
 8003c2c:	ffff800f 	.word	0xffff800f
 8003c30:	400200a8 	.word	0x400200a8

08003c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c34:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c36:	2424      	movs	r4, #36	; 0x24
 8003c38:	5d05      	ldrb	r5, [r0, r4]
{
 8003c3a:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 8003c3c:	2d01      	cmp	r5, #1
 8003c3e:	d03c      	beq.n	8003cba <HAL_DMA_Start_IT+0x86>
 8003c40:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c42:	2725      	movs	r7, #37	; 0x25
  __HAL_LOCK(hdma);
 8003c44:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c46:	5dc5      	ldrb	r5, [r0, r7]
 8003c48:	b2ee      	uxtb	r6, r5
 8003c4a:	2d01      	cmp	r5, #1
 8003c4c:	d004      	beq.n	8003c58 <HAL_DMA_Start_IT+0x24>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	5503      	strb	r3, [r0, r4]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c52:	2002      	movs	r0, #2
  }
  return status;
}
 8003c54:	b003      	add	sp, #12
 8003c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c58:	3c22      	subs	r4, #34	; 0x22
 8003c5a:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5c:	2400      	movs	r4, #0
 8003c5e:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003c60:	6804      	ldr	r4, [r0, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c62:	3f09      	subs	r7, #9
    __HAL_DMA_DISABLE(hdma);
 8003c64:	6825      	ldr	r5, [r4, #0]
 8003c66:	43b5      	bics	r5, r6
 8003c68:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c6a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003c6c:	9501      	str	r5, [sp, #4]
 8003c6e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8003c70:	402f      	ands	r7, r5
 8003c72:	40be      	lsls	r6, r7
 8003c74:	9d01      	ldr	r5, [sp, #4]
 8003c76:	606e      	str	r6, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c78:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c7a:	6883      	ldr	r3, [r0, #8]
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d00e      	beq.n	8003c9e <HAL_DMA_Start_IT+0x6a>
    if(NULL != hdma->XferHalfCpltCallback )
 8003c80:	6b03      	ldr	r3, [r0, #48]	; 0x30
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003c82:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003c84:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c8a:	220e      	movs	r2, #14
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003c92:	2201      	movs	r2, #1
 8003c94:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	e7da      	b.n	8003c54 <HAL_DMA_Start_IT+0x20>
    if(NULL != hdma->XferHalfCpltCallback )
 8003c9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8003ca0:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003ca2:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_DMA_Start_IT+0x56>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ca8:	2204      	movs	r2, #4
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	4393      	bics	r3, r2
 8003cae:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	3206      	adds	r2, #6
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	e7eb      	b.n	8003c92 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8003cba:	2002      	movs	r0, #2
 8003cbc:	e7ca      	b.n	8003c54 <HAL_DMA_Start_IT+0x20>
 8003cbe:	46c0      	nop			; (mov r8, r8)

08003cc0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc0:	2325      	movs	r3, #37	; 0x25
{
 8003cc2:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc4:	5cc2      	ldrb	r2, [r0, r3]
 8003cc6:	2a02      	cmp	r2, #2
 8003cc8:	d006      	beq.n	8003cd8 <HAL_DMA_Abort+0x18>
    __HAL_UNLOCK(hdma);
 8003cca:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ccc:	3b21      	subs	r3, #33	; 0x21
 8003cce:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003cd0:	3320      	adds	r3, #32
 8003cd2:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003cd4:	2001      	movs	r0, #1
}
 8003cd6:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cd8:	240e      	movs	r4, #14
 8003cda:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cdc:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cde:	6811      	ldr	r1, [r2, #0]
 8003ce0:	43a1      	bics	r1, r4
 8003ce2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	6814      	ldr	r4, [r2, #0]
 8003ce8:	438c      	bics	r4, r1
 8003cea:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cec:	221c      	movs	r2, #28
 8003cee:	402a      	ands	r2, r5
 8003cf0:	000d      	movs	r5, r1
 8003cf2:	4095      	lsls	r5, r2
 8003cf4:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8003cf6:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cf8:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003cfc:	2324      	movs	r3, #36	; 0x24
 8003cfe:	54c2      	strb	r2, [r0, r3]
    return status;
 8003d00:	2000      	movs	r0, #0
 8003d02:	e7e8      	b.n	8003cd6 <HAL_DMA_Abort+0x16>

08003d04 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d04:	2325      	movs	r3, #37	; 0x25
{
 8003d06:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d08:	5cc2      	ldrb	r2, [r0, r3]
 8003d0a:	2a02      	cmp	r2, #2
 8003d0c:	d003      	beq.n	8003d16 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0e:	3b21      	subs	r3, #33	; 0x21
 8003d10:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003d12:	2001      	movs	r0, #1
}
 8003d14:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d16:	240e      	movs	r4, #14
 8003d18:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d1a:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1c:	6811      	ldr	r1, [r2, #0]
 8003d1e:	43a1      	bics	r1, r4
 8003d20:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003d22:	2101      	movs	r1, #1
 8003d24:	6814      	ldr	r4, [r2, #0]
 8003d26:	438c      	bics	r4, r1
 8003d28:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d2a:	221c      	movs	r2, #28
 8003d2c:	402a      	ands	r2, r5
 8003d2e:	000d      	movs	r5, r1
 8003d30:	4095      	lsls	r5, r2
 8003d32:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8003d34:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d36:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003d38:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003d3a:	2324      	movs	r3, #36	; 0x24
 8003d3c:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8003d3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8003d44:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2000      	movs	r0, #0
 8003d48:	e7e4      	b.n	8003d14 <HAL_DMA_Abort_IT+0x10>
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	e7e2      	b.n	8003d14 <HAL_DMA_Abort_IT+0x10>
 8003d4e:	46c0      	nop			; (mov r8, r8)

08003d50 <HAL_DMA_PollForTransfer>:
{
 8003d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d52:	464f      	mov	r7, r9
 8003d54:	4646      	mov	r6, r8
 8003d56:	46d6      	mov	lr, sl
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d58:	2325      	movs	r3, #37	; 0x25
{
 8003d5a:	b5c0      	push	{r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d5c:	5cc3      	ldrb	r3, [r0, r3]
{
 8003d5e:	0005      	movs	r5, r0
 8003d60:	000f      	movs	r7, r1
 8003d62:	0016      	movs	r6, r2
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d64:	b2dc      	uxtb	r4, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d00a      	beq.n	8003d80 <HAL_DMA_PollForTransfer+0x30>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d6a:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8003d6c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d6e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003d70:	3320      	adds	r3, #32
 8003d72:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
}
 8003d76:	bce0      	pop	{r5, r6, r7}
 8003d78:	46ba      	mov	sl, r7
 8003d7a:	46b1      	mov	r9, r6
 8003d7c:	46a8      	mov	r8, r5
 8003d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (0U != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8003d80:	6803      	ldr	r3, [r0, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	069b      	lsls	r3, r3, #26
 8003d86:	d42c      	bmi.n	8003de2 <HAL_DMA_PollForTransfer+0x92>
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU);
 8003d88:	231c      	movs	r3, #28
 8003d8a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d8c:	4013      	ands	r3, r2
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8003d8e:	2900      	cmp	r1, #0
 8003d90:	d12c      	bne.n	8003dec <HAL_DMA_PollForTransfer+0x9c>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU);
 8003d92:	409c      	lsls	r4, r3
  tickstart = HAL_GetTick();
 8003d94:	f7ff fe7a 	bl	8003a8c <HAL_GetTick>
 8003d98:	231c      	movs	r3, #28
 8003d9a:	469a      	mov	sl, r3
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 8003d9c:	3b14      	subs	r3, #20
  tickstart = HAL_GetTick();
 8003d9e:	4680      	mov	r8, r0
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 8003da0:	4699      	mov	r9, r3
 8003da2:	4651      	mov	r1, sl
 8003da4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  while(0U == (hdma->DmaBaseAddress->ISR & temp))
 8003da6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003da8:	400b      	ands	r3, r1
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 8003daa:	4649      	mov	r1, r9
 8003dac:	469c      	mov	ip, r3
 8003dae:	4099      	lsls	r1, r3
 8003db0:	e004      	b.n	8003dbc <HAL_DMA_PollForTransfer+0x6c>
 8003db2:	6813      	ldr	r3, [r2, #0]
 8003db4:	4219      	tst	r1, r3
 8003db6:	d11b      	bne.n	8003df0 <HAL_DMA_PollForTransfer+0xa0>
    if(Timeout != HAL_MAX_DELAY)
 8003db8:	1c73      	adds	r3, r6, #1
 8003dba:	d125      	bne.n	8003e08 <HAL_DMA_PollForTransfer+0xb8>
  while(0U == (hdma->DmaBaseAddress->ISR & temp))
 8003dbc:	0020      	movs	r0, r4
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	4018      	ands	r0, r3
 8003dc2:	421c      	tst	r4, r3
 8003dc4:	d0f5      	beq.n	8003db2 <HAL_DMA_PollForTransfer+0x62>
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8003dc6:	2f00      	cmp	r7, #0
 8003dc8:	d130      	bne.n	8003e2c <HAL_DMA_PollForTransfer+0xdc>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1cU));
 8003dca:	2302      	movs	r3, #2
 8003dcc:	4661      	mov	r1, ip
 8003dce:	408b      	lsls	r3, r1
 8003dd0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	2325      	movs	r3, #37	; 0x25
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	54ea      	strb	r2, [r5, r3]
  __HAL_UNLOCK(hdma);
 8003dd8:	2324      	movs	r3, #36	; 0x24
 8003dda:	2200      	movs	r2, #0
  return HAL_OK;
 8003ddc:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 8003dde:	54ea      	strb	r2, [r5, r3]
  return HAL_OK;
 8003de0:	e7c9      	b.n	8003d76 <HAL_DMA_PollForTransfer+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	63c3      	str	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003de8:	2001      	movs	r0, #1
 8003dea:	e7c4      	b.n	8003d76 <HAL_DMA_PollForTransfer+0x26>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU);
 8003dec:	2404      	movs	r4, #4
 8003dee:	e7d0      	b.n	8003d92 <HAL_DMA_PollForTransfer+0x42>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003df0:	2301      	movs	r3, #1
 8003df2:	4664      	mov	r4, ip
 8003df4:	0019      	movs	r1, r3
 8003df6:	40a1      	lsls	r1, r4
 8003df8:	6051      	str	r1, [r2, #4]
      hdma->State= HAL_DMA_STATE_READY;
 8003dfa:	2225      	movs	r2, #37	; 0x25
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dfc:	63eb      	str	r3, [r5, #60]	; 0x3c
      hdma->State= HAL_DMA_STATE_READY;
 8003dfe:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hdma);
 8003e00:	3323      	adds	r3, #35	; 0x23
 8003e02:	54e8      	strb	r0, [r5, r3]
      return HAL_ERROR;
 8003e04:	2001      	movs	r0, #1
 8003e06:	e7b6      	b.n	8003d76 <HAL_DMA_PollForTransfer+0x26>
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 8003e08:	f7ff fe40 	bl	8003a8c <HAL_GetTick>
 8003e0c:	4643      	mov	r3, r8
 8003e0e:	1ac0      	subs	r0, r0, r3
 8003e10:	42b0      	cmp	r0, r6
 8003e12:	d801      	bhi.n	8003e18 <HAL_DMA_PollForTransfer+0xc8>
 8003e14:	2e00      	cmp	r6, #0
 8003e16:	d1c4      	bne.n	8003da2 <HAL_DMA_PollForTransfer+0x52>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e18:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	2201      	movs	r2, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e1c:	63eb      	str	r3, [r5, #60]	; 0x3c
        hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	3305      	adds	r3, #5
 8003e20:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hdma);
 8003e22:	2200      	movs	r2, #0
 8003e24:	3b01      	subs	r3, #1
        return HAL_ERROR;
 8003e26:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma);
 8003e28:	54ea      	strb	r2, [r5, r3]
        return HAL_ERROR;
 8003e2a:	e7a4      	b.n	8003d76 <HAL_DMA_PollForTransfer+0x26>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU));
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	4661      	mov	r1, ip
 8003e30:	408b      	lsls	r3, r1
 8003e32:	6053      	str	r3, [r2, #4]
 8003e34:	e7d0      	b.n	8003dd8 <HAL_DMA_PollForTransfer+0x88>
 8003e36:	46c0      	nop			; (mov r8, r8)

08003e38 <HAL_DMA_IRQHandler>:
{
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e3a:	231c      	movs	r3, #28
 8003e3c:	6c44      	ldr	r4, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e3e:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e40:	4023      	ands	r3, r4
 8003e42:	2404      	movs	r4, #4
 8003e44:	0026      	movs	r6, r4
 8003e46:	409e      	lsls	r6, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e48:	682a      	ldr	r2, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003e4a:	6801      	ldr	r1, [r0, #0]
 8003e4c:	680f      	ldr	r7, [r1, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003e4e:	4232      	tst	r2, r6
 8003e50:	d00d      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x36>
 8003e52:	423c      	tst	r4, r7
 8003e54:	d00b      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e56:	680b      	ldr	r3, [r1, #0]
 8003e58:	069b      	lsls	r3, r3, #26
 8003e5a:	d402      	bmi.n	8003e62 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e5c:	680b      	ldr	r3, [r1, #0]
 8003e5e:	43a3      	bics	r3, r4
 8003e60:	600b      	str	r3, [r1, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003e62:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003e64:	606e      	str	r6, [r5, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d000      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8003e6a:	4798      	blx	r3
}
 8003e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003e6e:	2402      	movs	r4, #2
 8003e70:	0026      	movs	r6, r4
 8003e72:	409e      	lsls	r6, r3
 8003e74:	4232      	tst	r2, r6
 8003e76:	d014      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x6a>
 8003e78:	423c      	tst	r4, r7
 8003e7a:	d012      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e7c:	680b      	ldr	r3, [r1, #0]
 8003e7e:	069b      	lsls	r3, r3, #26
 8003e80:	d406      	bmi.n	8003e90 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e82:	220a      	movs	r2, #10
 8003e84:	680b      	ldr	r3, [r1, #0]
 8003e86:	4393      	bics	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003e8a:	2325      	movs	r3, #37	; 0x25
 8003e8c:	3a09      	subs	r2, #9
 8003e8e:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003e90:	2324      	movs	r3, #36	; 0x24
 8003e92:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e94:	606e      	str	r6, [r5, #4]
    __HAL_UNLOCK(hdma);
 8003e96:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8003e98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0e6      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8003e9e:	4798      	blx	r3
  return;
 8003ea0:	e7e4      	b.n	8003e6c <HAL_DMA_IRQHandler+0x34>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003ea2:	2408      	movs	r4, #8
 8003ea4:	0026      	movs	r6, r4
 8003ea6:	409e      	lsls	r6, r3
 8003ea8:	4232      	tst	r2, r6
 8003eaa:	d0df      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x34>
 8003eac:	423c      	tst	r4, r7
 8003eae:	d0dd      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x34>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eb0:	680a      	ldr	r2, [r1, #0]
 8003eb2:	3406      	adds	r4, #6
 8003eb4:	43a2      	bics	r2, r4
 8003eb6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eb8:	2201      	movs	r2, #1
 8003eba:	0011      	movs	r1, r2
 8003ebc:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8003ebe:	2325      	movs	r3, #37	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ec0:	6069      	str	r1, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ec2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003ec4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003ecc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0cc      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8003ed2:	4798      	blx	r3
  return;
 8003ed4:	e7ca      	b.n	8003e6c <HAL_DMA_IRQHandler+0x34>
 8003ed6:	46c0      	nop			; (mov r8, r8)

08003ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	464e      	mov	r6, r9
 8003edc:	46de      	mov	lr, fp
 8003ede:	4657      	mov	r7, sl
 8003ee0:	4645      	mov	r5, r8
 8003ee2:	b5e0      	push	{r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003ee4:	680a      	ldr	r2, [r1, #0]
{
 8003ee6:	4689      	mov	r9, r1
  uint32_t position = 0x00U;
 8003ee8:	2300      	movs	r3, #0
{
 8003eea:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 8003eec:	2a00      	cmp	r2, #0
 8003eee:	d06c      	beq.n	8003fca <HAL_GPIO_Init+0xf2>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	468b      	mov	fp, r1
 8003ef4:	465c      	mov	r4, fp
 8003ef6:	0015      	movs	r5, r2
 8003ef8:	409c      	lsls	r4, r3
 8003efa:	4025      	ands	r5, r4
 8003efc:	46aa      	mov	sl, r5

    if (iocurrent)
 8003efe:	4222      	tst	r2, r4
 8003f00:	d05f      	beq.n	8003fc2 <HAL_GPIO_Init+0xea>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f02:	464d      	mov	r5, r9
 8003f04:	2703      	movs	r7, #3
 8003f06:	686d      	ldr	r5, [r5, #4]
 8003f08:	402f      	ands	r7, r5
 8003f0a:	1e7e      	subs	r6, r7, #1
 8003f0c:	2e01      	cmp	r6, #1
 8003f0e:	d963      	bls.n	8003fd8 <HAL_GPIO_Init+0x100>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f10:	0059      	lsls	r1, r3, #1
 8003f12:	468c      	mov	ip, r1
 8003f14:	2f03      	cmp	r7, #3
 8003f16:	d000      	beq.n	8003f1a <HAL_GPIO_Init+0x42>
 8003f18:	e0a7      	b.n	800406a <HAL_GPIO_Init+0x192>
 8003f1a:	003c      	movs	r4, r7
 8003f1c:	408c      	lsls	r4, r1
 8003f1e:	43e1      	mvns	r1, r4
 8003f20:	9100      	str	r1, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f22:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f24:	9e00      	ldr	r6, [sp, #0]
 8003f26:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f28:	4326      	orrs	r6, r4
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f2a:	24c0      	movs	r4, #192	; 0xc0
 8003f2c:	02a4      	lsls	r4, r4, #10
      GPIOx->MODER = temp;
 8003f2e:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f30:	4225      	tst	r5, r4
 8003f32:	d046      	beq.n	8003fc2 <HAL_GPIO_Init+0xea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f34:	465e      	mov	r6, fp
 8003f36:	495e      	ldr	r1, [pc, #376]	; (80040b0 <HAL_GPIO_Init+0x1d8>)

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003f38:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f3a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003f3c:	401f      	ands	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f3e:	4334      	orrs	r4, r6
 8003f40:	634c      	str	r4, [r1, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f42:	495c      	ldr	r1, [pc, #368]	; (80040b4 <HAL_GPIO_Init+0x1dc>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003f44:	00bf      	lsls	r7, r7, #2
 8003f46:	468c      	mov	ip, r1
 8003f48:	210f      	movs	r1, #15
 8003f4a:	40b9      	lsls	r1, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4c:	089c      	lsrs	r4, r3, #2
 8003f4e:	00a4      	lsls	r4, r4, #2
 8003f50:	4464      	add	r4, ip
 8003f52:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003f54:	438e      	bics	r6, r1
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003f56:	21a0      	movs	r1, #160	; 0xa0
 8003f58:	05c9      	lsls	r1, r1, #23
 8003f5a:	4288      	cmp	r0, r1
 8003f5c:	d012      	beq.n	8003f84 <HAL_GPIO_Init+0xac>
 8003f5e:	4956      	ldr	r1, [pc, #344]	; (80040b8 <HAL_GPIO_Init+0x1e0>)
 8003f60:	4288      	cmp	r0, r1
 8003f62:	d100      	bne.n	8003f66 <HAL_GPIO_Init+0x8e>
 8003f64:	e097      	b.n	8004096 <HAL_GPIO_Init+0x1be>
 8003f66:	4955      	ldr	r1, [pc, #340]	; (80040bc <HAL_GPIO_Init+0x1e4>)
 8003f68:	4288      	cmp	r0, r1
 8003f6a:	d100      	bne.n	8003f6e <HAL_GPIO_Init+0x96>
 8003f6c:	e097      	b.n	800409e <HAL_GPIO_Init+0x1c6>
 8003f6e:	4954      	ldr	r1, [pc, #336]	; (80040c0 <HAL_GPIO_Init+0x1e8>)
 8003f70:	4288      	cmp	r0, r1
 8003f72:	d100      	bne.n	8003f76 <HAL_GPIO_Init+0x9e>
 8003f74:	e08b      	b.n	800408e <HAL_GPIO_Init+0x1b6>
 8003f76:	4953      	ldr	r1, [pc, #332]	; (80040c4 <HAL_GPIO_Init+0x1ec>)
 8003f78:	4288      	cmp	r0, r1
 8003f7a:	d100      	bne.n	8003f7e <HAL_GPIO_Init+0xa6>
 8003f7c:	e093      	b.n	80040a6 <HAL_GPIO_Init+0x1ce>
 8003f7e:	2106      	movs	r1, #6
 8003f80:	40b9      	lsls	r1, r7
 8003f82:	430e      	orrs	r6, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f84:	4950      	ldr	r1, [pc, #320]	; (80040c8 <HAL_GPIO_Init+0x1f0>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f86:	60a6      	str	r6, [r4, #8]
        temp = EXTI->IMR;
 8003f88:	680c      	ldr	r4, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	43cf      	mvns	r7, r1
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f8e:	2180      	movs	r1, #128	; 0x80
 8003f90:	0249      	lsls	r1, r1, #9
 8003f92:	420d      	tst	r5, r1
 8003f94:	d000      	beq.n	8003f98 <HAL_GPIO_Init+0xc0>
 8003f96:	e077      	b.n	8004088 <HAL_GPIO_Init+0x1b0>
        temp &= ~((uint32_t)iocurrent);
 8003f98:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003f9a:	494b      	ldr	r1, [pc, #300]	; (80040c8 <HAL_GPIO_Init+0x1f0>)
 8003f9c:	600c      	str	r4, [r1, #0]

        temp = EXTI->EMR;
 8003f9e:	684e      	ldr	r6, [r1, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fa0:	03a9      	lsls	r1, r5, #14
 8003fa2:	d46e      	bmi.n	8004082 <HAL_GPIO_Init+0x1aa>
        temp &= ~((uint32_t)iocurrent);
 8003fa4:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003fa6:	4948      	ldr	r1, [pc, #288]	; (80040c8 <HAL_GPIO_Init+0x1f0>)
 8003fa8:	604e      	str	r6, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003faa:	688e      	ldr	r6, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fac:	02e9      	lsls	r1, r5, #11
 8003fae:	d465      	bmi.n	800407c <HAL_GPIO_Init+0x1a4>
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003fb2:	4945      	ldr	r1, [pc, #276]	; (80040c8 <HAL_GPIO_Init+0x1f0>)
 8003fb4:	608e      	str	r6, [r1, #8]

        temp = EXTI->FTSR;
 8003fb6:	68cc      	ldr	r4, [r1, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fb8:	02a9      	lsls	r1, r5, #10
 8003fba:	d45b      	bmi.n	8004074 <HAL_GPIO_Init+0x19c>
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003fbe:	4942      	ldr	r1, [pc, #264]	; (80040c8 <HAL_GPIO_Init+0x1f0>)
 8003fc0:	60cc      	str	r4, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003fc2:	0014      	movs	r4, r2
      }
    }
    position++;
 8003fc4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8003fc6:	40dc      	lsrs	r4, r3
 8003fc8:	d194      	bne.n	8003ef4 <HAL_GPIO_Init+0x1c>
  }
}
 8003fca:	b003      	add	sp, #12
 8003fcc:	bcf0      	pop	{r4, r5, r6, r7}
 8003fce:	46bb      	mov	fp, r7
 8003fd0:	46b2      	mov	sl, r6
 8003fd2:	46a9      	mov	r9, r5
 8003fd4:	46a0      	mov	r8, r4
 8003fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd8:	005e      	lsls	r6, r3, #1
 8003fda:	46b4      	mov	ip, r6
        temp = GPIOx->OSPEEDR;
 8003fdc:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fde:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR;
 8003fe0:	9101      	str	r1, [sp, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fe2:	4661      	mov	r1, ip
 8003fe4:	408e      	lsls	r6, r1
 8003fe6:	43f1      	mvns	r1, r6
 8003fe8:	9100      	str	r1, [sp, #0]
 8003fea:	9901      	ldr	r1, [sp, #4]
 8003fec:	43b1      	bics	r1, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fee:	464e      	mov	r6, r9
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003ff0:	9101      	str	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff2:	68f1      	ldr	r1, [r6, #12]
 8003ff4:	4666      	mov	r6, ip
 8003ff6:	40b1      	lsls	r1, r6
 8003ff8:	4688      	mov	r8, r1
 8003ffa:	4646      	mov	r6, r8
 8003ffc:	9901      	ldr	r1, [sp, #4]
 8003ffe:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8004000:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 8004002:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004004:	43a1      	bics	r1, r4
 8004006:	4688      	mov	r8, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004008:	4659      	mov	r1, fp
 800400a:	092c      	lsrs	r4, r5, #4
 800400c:	400c      	ands	r4, r1
 800400e:	409c      	lsls	r4, r3
 8004010:	4641      	mov	r1, r8
 8004012:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 8004014:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8004016:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004018:	9900      	ldr	r1, [sp, #0]
 800401a:	400c      	ands	r4, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800401c:	4649      	mov	r1, r9
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800401e:	46a0      	mov	r8, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004020:	688c      	ldr	r4, [r1, #8]
 8004022:	4661      	mov	r1, ip
 8004024:	408c      	lsls	r4, r1
 8004026:	4641      	mov	r1, r8
 8004028:	430c      	orrs	r4, r1
        GPIOx->PUPDR = temp;
 800402a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402c:	4661      	mov	r1, ip
 800402e:	003c      	movs	r4, r7
 8004030:	408c      	lsls	r4, r1
 8004032:	2f02      	cmp	r7, #2
 8004034:	d000      	beq.n	8004038 <HAL_GPIO_Init+0x160>
 8004036:	e774      	b.n	8003f22 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8004038:	08df      	lsrs	r7, r3, #3
 800403a:	00bf      	lsls	r7, r7, #2
 800403c:	19c7      	adds	r7, r0, r7
 800403e:	6a39      	ldr	r1, [r7, #32]
 8004040:	4688      	mov	r8, r1
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004042:	2107      	movs	r1, #7
 8004044:	4019      	ands	r1, r3
 8004046:	0089      	lsls	r1, r1, #2
 8004048:	468c      	mov	ip, r1
 800404a:	210f      	movs	r1, #15
 800404c:	4666      	mov	r6, ip
 800404e:	40b1      	lsls	r1, r6
 8004050:	4646      	mov	r6, r8
 8004052:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004054:	4649      	mov	r1, r9
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004056:	46b0      	mov	r8, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004058:	4666      	mov	r6, ip
 800405a:	6909      	ldr	r1, [r1, #16]
 800405c:	40b1      	lsls	r1, r6
 800405e:	468c      	mov	ip, r1
 8004060:	4641      	mov	r1, r8
 8004062:	4666      	mov	r6, ip
 8004064:	4331      	orrs	r1, r6
        GPIOx->AFR[position >> 3U] = temp;
 8004066:	6239      	str	r1, [r7, #32]
 8004068:	e75b      	b.n	8003f22 <HAL_GPIO_Init+0x4a>
 800406a:	2603      	movs	r6, #3
 800406c:	408e      	lsls	r6, r1
 800406e:	43f1      	mvns	r1, r6
 8004070:	9100      	str	r1, [sp, #0]
 8004072:	e7d0      	b.n	8004016 <HAL_GPIO_Init+0x13e>
          temp |= iocurrent;
 8004074:	4651      	mov	r1, sl
 8004076:	4321      	orrs	r1, r4
 8004078:	000c      	movs	r4, r1
 800407a:	e7a0      	b.n	8003fbe <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 800407c:	4651      	mov	r1, sl
 800407e:	430e      	orrs	r6, r1
 8004080:	e797      	b.n	8003fb2 <HAL_GPIO_Init+0xda>
          temp |= iocurrent;
 8004082:	4651      	mov	r1, sl
 8004084:	430e      	orrs	r6, r1
 8004086:	e78e      	b.n	8003fa6 <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 8004088:	4651      	mov	r1, sl
 800408a:	430c      	orrs	r4, r1
 800408c:	e785      	b.n	8003f9a <HAL_GPIO_Init+0xc2>
 800408e:	2103      	movs	r1, #3
 8004090:	40b9      	lsls	r1, r7
 8004092:	430e      	orrs	r6, r1
 8004094:	e776      	b.n	8003f84 <HAL_GPIO_Init+0xac>
 8004096:	4659      	mov	r1, fp
 8004098:	40b9      	lsls	r1, r7
 800409a:	430e      	orrs	r6, r1
 800409c:	e772      	b.n	8003f84 <HAL_GPIO_Init+0xac>
 800409e:	2102      	movs	r1, #2
 80040a0:	40b9      	lsls	r1, r7
 80040a2:	430e      	orrs	r6, r1
 80040a4:	e76e      	b.n	8003f84 <HAL_GPIO_Init+0xac>
 80040a6:	2105      	movs	r1, #5
 80040a8:	40b9      	lsls	r1, r7
 80040aa:	430e      	orrs	r6, r1
 80040ac:	e76a      	b.n	8003f84 <HAL_GPIO_Init+0xac>
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40010000 	.word	0x40010000
 80040b8:	50000400 	.word	0x50000400
 80040bc:	50000800 	.word	0x50000800
 80040c0:	50000c00 	.word	0x50000c00
 80040c4:	50001c00 	.word	0x50001c00
 80040c8:	40010400 	.word	0x40010400

080040cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040cc:	6900      	ldr	r0, [r0, #16]
 80040ce:	4008      	ands	r0, r1
 80040d0:	1e41      	subs	r1, r0, #1
 80040d2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80040d4:	b2c0      	uxtb	r0, r0
}
 80040d6:	4770      	bx	lr

080040d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d8:	2a00      	cmp	r2, #0
 80040da:	d001      	beq.n	80040e0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040dc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80040de:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80040e0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80040e2:	e7fc      	b.n	80040de <HAL_GPIO_WritePin+0x6>

080040e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040e4:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80040e6:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	4210      	tst	r0, r2
 80040ec:	d100      	bne.n	80040f0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80040ee:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040f0:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040f2:	f7ff fa11 	bl	8003518 <HAL_GPIO_EXTI_Callback>
}
 80040f6:	e7fa      	b.n	80040ee <HAL_GPIO_EXTI_IRQHandler+0xa>
 80040f8:	40010400 	.word	0x40010400

080040fc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040fc:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80040fe:	491c      	ldr	r1, [pc, #112]	; (8004170 <HAL_RCC_GetSysClockFreq+0x74>)
{
 8004100:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8004102:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004104:	4013      	ands	r3, r2
 8004106:	2b08      	cmp	r3, #8
 8004108:	d00b      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x26>
 800410a:	2b0c      	cmp	r3, #12
 800410c:	d014      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x3c>
 800410e:	2b04      	cmp	r3, #4
 8004110:	d009      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004112:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004114:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004116:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800411c:	3301      	adds	r3, #1
 800411e:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8004120:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8004122:	4814      	ldr	r0, [pc, #80]	; (8004174 <HAL_RCC_GetSysClockFreq+0x78>)
 8004124:	e7fc      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004126:	6808      	ldr	r0, [r1, #0]
        sysclockfreq =  HSI_VALUE;
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800412a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800412c:	17c0      	asrs	r0, r0, #31
 800412e:	4018      	ands	r0, r3
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_RCC_GetSysClockFreq+0x80>)
 8004132:	469c      	mov	ip, r3
 8004134:	4460      	add	r0, ip
 8004136:	e7f3      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004138:	0293      	lsls	r3, r2, #10
 800413a:	4811      	ldr	r0, [pc, #68]	; (8004180 <HAL_RCC_GetSysClockFreq+0x84>)
 800413c:	0f1b      	lsrs	r3, r3, #28
 800413e:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004140:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004142:	68cb      	ldr	r3, [r1, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004144:	0f92      	lsrs	r2, r2, #30
 8004146:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004148:	03db      	lsls	r3, r3, #15
 800414a:	d40c      	bmi.n	8004166 <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800414c:	680b      	ldr	r3, [r1, #0]
 800414e:	06db      	lsls	r3, r3, #27
 8004150:	d50b      	bpl.n	800416a <HAL_RCC_GetSysClockFreq+0x6e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004152:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <HAL_RCC_GetSysClockFreq+0x88>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004154:	2300      	movs	r3, #0
 8004156:	2100      	movs	r1, #0
 8004158:	f7fc f8ce 	bl	80002f8 <__aeabi_lmul>
 800415c:	0022      	movs	r2, r4
 800415e:	2300      	movs	r3, #0
 8004160:	f7fc f8aa 	bl	80002b8 <__aeabi_uldivmod>
 8004164:	e7dc      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004166:	4a03      	ldr	r2, [pc, #12]	; (8004174 <HAL_RCC_GetSysClockFreq+0x78>)
 8004168:	e7f4      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x58>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800416a:	4a04      	ldr	r2, [pc, #16]	; (800417c <HAL_RCC_GetSysClockFreq+0x80>)
 800416c:	e7f2      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x58>
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	40021000 	.word	0x40021000
 8004174:	007a1200 	.word	0x007a1200
 8004178:	ff48e500 	.word	0xff48e500
 800417c:	00f42400 	.word	0x00f42400
 8004180:	08007314 	.word	0x08007314
 8004184:	003d0900 	.word	0x003d0900

08004188 <HAL_RCC_OscConfig>:
{
 8004188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800418a:	46d6      	mov	lr, sl
 800418c:	464f      	mov	r7, r9
 800418e:	4646      	mov	r6, r8
 8004190:	b5c0      	push	{r6, r7, lr}
 8004192:	0004      	movs	r4, r0
 8004194:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8004196:	2800      	cmp	r0, #0
 8004198:	d100      	bne.n	800419c <HAL_RCC_OscConfig+0x14>
 800419a:	e146      	b.n	800442a <HAL_RCC_OscConfig+0x2a2>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419c:	4bc8      	ldr	r3, [pc, #800]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 800419e:	250c      	movs	r5, #12
 80041a0:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a2:	68de      	ldr	r6, [r3, #12]
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	025b      	lsls	r3, r3, #9
 80041a8:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ac:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	07da      	lsls	r2, r3, #31
 80041b0:	d533      	bpl.n	800421a <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b2:	2d08      	cmp	r5, #8
 80041b4:	d100      	bne.n	80041b8 <HAL_RCC_OscConfig+0x30>
 80041b6:	e12f      	b.n	8004418 <HAL_RCC_OscConfig+0x290>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041b8:	2d0c      	cmp	r5, #12
 80041ba:	d100      	bne.n	80041be <HAL_RCC_OscConfig+0x36>
 80041bc:	e129      	b.n	8004412 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041be:	2080      	movs	r0, #128	; 0x80
 80041c0:	6861      	ldr	r1, [r4, #4]
 80041c2:	0240      	lsls	r0, r0, #9
 80041c4:	4281      	cmp	r1, r0
 80041c6:	d100      	bne.n	80041ca <HAL_RCC_OscConfig+0x42>
 80041c8:	e161      	b.n	800448e <HAL_RCC_OscConfig+0x306>
 80041ca:	22a0      	movs	r2, #160	; 0xa0
 80041cc:	02d2      	lsls	r2, r2, #11
 80041ce:	4291      	cmp	r1, r2
 80041d0:	d100      	bne.n	80041d4 <HAL_RCC_OscConfig+0x4c>
 80041d2:	e245      	b.n	8004660 <HAL_RCC_OscConfig+0x4d8>
 80041d4:	4fba      	ldr	r7, [pc, #744]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 80041d6:	4bbb      	ldr	r3, [pc, #748]	; (80044c4 <HAL_RCC_OscConfig+0x33c>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	401a      	ands	r2, r3
 80041dc:	603a      	str	r2, [r7, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	4ab9      	ldr	r2, [pc, #740]	; (80044c8 <HAL_RCC_OscConfig+0x340>)
 80041e2:	4003      	ands	r3, r0
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4013      	ands	r3, r2
 80041ec:	603b      	str	r3, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d000      	beq.n	80041f4 <HAL_RCC_OscConfig+0x6c>
 80041f2:	e150      	b.n	8004496 <HAL_RCC_OscConfig+0x30e>
        tickstart = HAL_GetTick();
 80041f4:	f7ff fc4a 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 80041fc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041fe:	4699      	mov	r9, r3
 8004200:	e006      	b.n	8004210 <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004202:	f7ff fc43 	bl	8003a8c <HAL_GetTick>
 8004206:	4643      	mov	r3, r8
 8004208:	1ac0      	subs	r0, r0, r3
 800420a:	2864      	cmp	r0, #100	; 0x64
 800420c:	d900      	bls.n	8004210 <HAL_RCC_OscConfig+0x88>
 800420e:	e1cc      	b.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004210:	464a      	mov	r2, r9
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	4213      	tst	r3, r2
 8004216:	d1f4      	bne.n	8004202 <HAL_RCC_OscConfig+0x7a>
 8004218:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421a:	079a      	lsls	r2, r3, #30
 800421c:	d527      	bpl.n	800426e <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 800421e:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004220:	2d04      	cmp	r5, #4
 8004222:	d100      	bne.n	8004226 <HAL_RCC_OscConfig+0x9e>
 8004224:	e16b      	b.n	80044fe <HAL_RCC_OscConfig+0x376>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004226:	2d0c      	cmp	r5, #12
 8004228:	d100      	bne.n	800422c <HAL_RCC_OscConfig+0xa4>
 800422a:	e165      	b.n	80044f8 <HAL_RCC_OscConfig+0x370>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800422c:	4ea4      	ldr	r6, [pc, #656]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
      if(hsi_state != RCC_HSI_OFF)
 800422e:	2b00      	cmp	r3, #0
 8004230:	d100      	bne.n	8004234 <HAL_RCC_OscConfig+0xac>
 8004232:	e1d1      	b.n	80045d8 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004234:	2109      	movs	r1, #9
 8004236:	6832      	ldr	r2, [r6, #0]
 8004238:	438a      	bics	r2, r1
 800423a:	4313      	orrs	r3, r2
 800423c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800423e:	f7ff fc25 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004242:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8004244:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004246:	4698      	mov	r8, r3
 8004248:	e005      	b.n	8004256 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424a:	f7ff fc1f 	bl	8003a8c <HAL_GetTick>
 800424e:	1bc0      	subs	r0, r0, r7
 8004250:	2802      	cmp	r0, #2
 8004252:	d900      	bls.n	8004256 <HAL_RCC_OscConfig+0xce>
 8004254:	e1a9      	b.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004256:	4642      	mov	r2, r8
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	421a      	tst	r2, r3
 800425c:	d0f5      	beq.n	800424a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425e:	6872      	ldr	r2, [r6, #4]
 8004260:	6923      	ldr	r3, [r4, #16]
 8004262:	499a      	ldr	r1, [pc, #616]	; (80044cc <HAL_RCC_OscConfig+0x344>)
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	400a      	ands	r2, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	6073      	str	r3, [r6, #4]
 800426c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800426e:	06da      	lsls	r2, r3, #27
 8004270:	d52b      	bpl.n	80042ca <HAL_RCC_OscConfig+0x142>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004272:	2d00      	cmp	r5, #0
 8004274:	d100      	bne.n	8004278 <HAL_RCC_OscConfig+0xf0>
 8004276:	e0df      	b.n	8004438 <HAL_RCC_OscConfig+0x2b0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004278:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 800427a:	4e91      	ldr	r6, [pc, #580]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800427c:	2b00      	cmp	r3, #0
 800427e:	d100      	bne.n	8004282 <HAL_RCC_OscConfig+0xfa>
 8004280:	e1bf      	b.n	8004602 <HAL_RCC_OscConfig+0x47a>
        __HAL_RCC_MSI_ENABLE();
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	6832      	ldr	r2, [r6, #0]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4313      	orrs	r3, r2
 800428a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800428c:	f7ff fbfe 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8004294:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004296:	4698      	mov	r8, r3
 8004298:	e005      	b.n	80042a6 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800429a:	f7ff fbf7 	bl	8003a8c <HAL_GetTick>
 800429e:	1bc0      	subs	r0, r0, r7
 80042a0:	2802      	cmp	r0, #2
 80042a2:	d900      	bls.n	80042a6 <HAL_RCC_OscConfig+0x11e>
 80042a4:	e181      	b.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042a6:	4642      	mov	r2, r8
 80042a8:	6833      	ldr	r3, [r6, #0]
 80042aa:	4213      	tst	r3, r2
 80042ac:	d0f5      	beq.n	800429a <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ae:	6873      	ldr	r3, [r6, #4]
 80042b0:	4a87      	ldr	r2, [pc, #540]	; (80044d0 <HAL_RCC_OscConfig+0x348>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042b6:	4313      	orrs	r3, r2
 80042b8:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ba:	6872      	ldr	r2, [r6, #4]
 80042bc:	6a23      	ldr	r3, [r4, #32]
 80042be:	0212      	lsls	r2, r2, #8
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	0a12      	lsrs	r2, r2, #8
 80042c4:	4313      	orrs	r3, r2
 80042c6:	6073      	str	r3, [r6, #4]
 80042c8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ca:	071a      	lsls	r2, r3, #28
 80042cc:	d519      	bpl.n	8004302 <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ce:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80042d0:	4e7b      	ldr	r6, [pc, #492]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d100      	bne.n	80042d8 <HAL_RCC_OscConfig+0x150>
 80042d6:	e16a      	b.n	80045ae <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_LSI_ENABLE();
 80042d8:	2201      	movs	r2, #1
 80042da:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80042dc:	4313      	orrs	r3, r2
 80042de:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 80042e0:	f7ff fbd4 	bl	8003a8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042e4:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80042e6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042e8:	4698      	mov	r8, r3
 80042ea:	e005      	b.n	80042f8 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ec:	f7ff fbce 	bl	8003a8c <HAL_GetTick>
 80042f0:	1bc0      	subs	r0, r0, r7
 80042f2:	2802      	cmp	r0, #2
 80042f4:	d900      	bls.n	80042f8 <HAL_RCC_OscConfig+0x170>
 80042f6:	e158      	b.n	80045aa <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042f8:	4642      	mov	r2, r8
 80042fa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80042fc:	421a      	tst	r2, r3
 80042fe:	d0f5      	beq.n	80042ec <HAL_RCC_OscConfig+0x164>
 8004300:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004302:	075a      	lsls	r2, r3, #29
 8004304:	d543      	bpl.n	800438e <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004306:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004308:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430a:	4a6d      	ldr	r2, [pc, #436]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 800430c:	055b      	lsls	r3, r3, #21
 800430e:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8004310:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004312:	4219      	tst	r1, r3
 8004314:	d104      	bne.n	8004320 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004318:	430b      	orrs	r3, r1
 800431a:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 800431c:	2301      	movs	r3, #1
 800431e:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	2780      	movs	r7, #128	; 0x80
 8004322:	4e6c      	ldr	r6, [pc, #432]	; (80044d4 <HAL_RCC_OscConfig+0x34c>)
 8004324:	007f      	lsls	r7, r7, #1
 8004326:	6833      	ldr	r3, [r6, #0]
 8004328:	423b      	tst	r3, r7
 800432a:	d100      	bne.n	800432e <HAL_RCC_OscConfig+0x1a6>
 800432c:	e12d      	b.n	800458a <HAL_RCC_OscConfig+0x402>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	68a3      	ldr	r3, [r4, #8]
 8004332:	0052      	lsls	r2, r2, #1
 8004334:	4293      	cmp	r3, r2
 8004336:	d100      	bne.n	800433a <HAL_RCC_OscConfig+0x1b2>
 8004338:	e1d7      	b.n	80046ea <HAL_RCC_OscConfig+0x562>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d100      	bne.n	8004340 <HAL_RCC_OscConfig+0x1b8>
 800433e:	e108      	b.n	8004552 <HAL_RCC_OscConfig+0x3ca>
 8004340:	21a0      	movs	r1, #160	; 0xa0
 8004342:	00c9      	lsls	r1, r1, #3
 8004344:	428b      	cmp	r3, r1
 8004346:	d100      	bne.n	800434a <HAL_RCC_OscConfig+0x1c2>
 8004348:	e1f1      	b.n	800472e <HAL_RCC_OscConfig+0x5a6>
 800434a:	4b5d      	ldr	r3, [pc, #372]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 800434c:	4962      	ldr	r1, [pc, #392]	; (80044d8 <HAL_RCC_OscConfig+0x350>)
 800434e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004350:	400a      	ands	r2, r1
 8004352:	651a      	str	r2, [r3, #80]	; 0x50
 8004354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004356:	4961      	ldr	r1, [pc, #388]	; (80044dc <HAL_RCC_OscConfig+0x354>)
 8004358:	400a      	ands	r2, r1
 800435a:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 800435c:	f7ff fb96 	bl	8003a8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004360:	2780      	movs	r7, #128	; 0x80
 8004362:	4b57      	ldr	r3, [pc, #348]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 8004364:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004366:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	4b5d      	ldr	r3, [pc, #372]	; (80044e0 <HAL_RCC_OscConfig+0x358>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800436a:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436c:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800436e:	e005      	b.n	800437c <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7ff fb8c 	bl	8003a8c <HAL_GetTick>
 8004374:	1b80      	subs	r0, r0, r6
 8004376:	4548      	cmp	r0, r9
 8004378:	d900      	bls.n	800437c <HAL_RCC_OscConfig+0x1f4>
 800437a:	e116      	b.n	80045aa <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800437c:	4643      	mov	r3, r8
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	423b      	tst	r3, r7
 8004382:	d0f5      	beq.n	8004370 <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 8004384:	4653      	mov	r3, sl
 8004386:	2b01      	cmp	r3, #1
 8004388:	d100      	bne.n	800438c <HAL_RCC_OscConfig+0x204>
 800438a:	e173      	b.n	8004674 <HAL_RCC_OscConfig+0x4ec>
 800438c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800438e:	069b      	lsls	r3, r3, #26
 8004390:	d520      	bpl.n	80043d4 <HAL_RCC_OscConfig+0x24c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004392:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_HSI48_ENABLE();
 8004394:	4e4a      	ldr	r6, [pc, #296]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004396:	2b00      	cmp	r3, #0
 8004398:	d100      	bne.n	800439c <HAL_RCC_OscConfig+0x214>
 800439a:	e148      	b.n	800462e <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_HSI48_ENABLE();
 800439c:	2101      	movs	r1, #1
 800439e:	68b2      	ldr	r2, [r6, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043a0:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 80043a2:	430a      	orrs	r2, r1
 80043a4:	60b2      	str	r2, [r6, #8]
 80043a6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80043a8:	4a4e      	ldr	r2, [pc, #312]	; (80044e4 <HAL_RCC_OscConfig+0x35c>)
 80043aa:	430b      	orrs	r3, r1
 80043ac:	6373      	str	r3, [r6, #52]	; 0x34
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	6a11      	ldr	r1, [r2, #32]
 80043b2:	019b      	lsls	r3, r3, #6
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80043b8:	f7ff fb68 	bl	8003a8c <HAL_GetTick>
 80043bc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043be:	e006      	b.n	80043ce <HAL_RCC_OscConfig+0x246>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043c0:	f7ff fb64 	bl	8003a8c <HAL_GetTick>
 80043c4:	4643      	mov	r3, r8
 80043c6:	1ac0      	subs	r0, r0, r3
 80043c8:	2802      	cmp	r0, #2
 80043ca:	d900      	bls.n	80043ce <HAL_RCC_OscConfig+0x246>
 80043cc:	e0ed      	b.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043ce:	68b3      	ldr	r3, [r6, #8]
 80043d0:	421f      	tst	r7, r3
 80043d2:	d0f5      	beq.n	80043c0 <HAL_RCC_OscConfig+0x238>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d019      	beq.n	800440e <HAL_RCC_OscConfig+0x286>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043da:	2d0c      	cmp	r5, #12
 80043dc:	d100      	bne.n	80043e0 <HAL_RCC_OscConfig+0x258>
 80043de:	e189      	b.n	80046f4 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d100      	bne.n	80043e6 <HAL_RCC_OscConfig+0x25e>
 80043e4:	e14d      	b.n	8004682 <HAL_RCC_OscConfig+0x4fa>
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4c36      	ldr	r4, [pc, #216]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 80043e8:	4a3f      	ldr	r2, [pc, #252]	; (80044e8 <HAL_RCC_OscConfig+0x360>)
 80043ea:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043ec:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4013      	ands	r3, r2
 80043f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043f2:	f7ff fb4b 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043f6:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80043f8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043fa:	e005      	b.n	8004408 <HAL_RCC_OscConfig+0x280>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fc:	f7ff fb46 	bl	8003a8c <HAL_GetTick>
 8004400:	1b40      	subs	r0, r0, r5
 8004402:	2802      	cmp	r0, #2
 8004404:	d900      	bls.n	8004408 <HAL_RCC_OscConfig+0x280>
 8004406:	e0d0      	b.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	4233      	tst	r3, r6
 800440c:	d1f6      	bne.n	80043fc <HAL_RCC_OscConfig+0x274>
  return HAL_OK;
 800440e:	2000      	movs	r0, #0
 8004410:	e00c      	b.n	800442c <HAL_RCC_OscConfig+0x2a4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004412:	2e00      	cmp	r6, #0
 8004414:	d100      	bne.n	8004418 <HAL_RCC_OscConfig+0x290>
 8004416:	e6d2      	b.n	80041be <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	0392      	lsls	r2, r2, #14
 800441e:	d400      	bmi.n	8004422 <HAL_RCC_OscConfig+0x29a>
 8004420:	e6fb      	b.n	800421a <HAL_RCC_OscConfig+0x92>
 8004422:	6862      	ldr	r2, [r4, #4]
 8004424:	2a00      	cmp	r2, #0
 8004426:	d000      	beq.n	800442a <HAL_RCC_OscConfig+0x2a2>
 8004428:	e6f7      	b.n	800421a <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 800442a:	2001      	movs	r0, #1
}
 800442c:	b002      	add	sp, #8
 800442e:	bce0      	pop	{r5, r6, r7}
 8004430:	46ba      	mov	sl, r7
 8004432:	46b1      	mov	r9, r6
 8004434:	46a8      	mov	r8, r5
 8004436:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	059b      	lsls	r3, r3, #22
 800443e:	d502      	bpl.n	8004446 <HAL_RCC_OscConfig+0x2be>
 8004440:	69e3      	ldr	r3, [r4, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f1      	beq.n	800442a <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004446:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 8004448:	4821      	ldr	r0, [pc, #132]	; (80044d0 <HAL_RCC_OscConfig+0x348>)
 800444a:	6851      	ldr	r1, [r2, #4]
 800444c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800444e:	4001      	ands	r1, r0
 8004450:	4319      	orrs	r1, r3
 8004452:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004454:	6850      	ldr	r0, [r2, #4]
 8004456:	6a21      	ldr	r1, [r4, #32]
 8004458:	0200      	lsls	r0, r0, #8
 800445a:	0a00      	lsrs	r0, r0, #8
 800445c:	0609      	lsls	r1, r1, #24
 800445e:	4301      	orrs	r1, r0
 8004460:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004462:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004464:	2280      	movs	r2, #128	; 0x80
 8004466:	0b5b      	lsrs	r3, r3, #13
 8004468:	3301      	adds	r3, #1
 800446a:	0212      	lsls	r2, r2, #8
 800446c:	409a      	lsls	r2, r3
 800446e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004470:	060a      	lsls	r2, r1, #24
 8004472:	491e      	ldr	r1, [pc, #120]	; (80044ec <HAL_RCC_OscConfig+0x364>)
 8004474:	0f12      	lsrs	r2, r2, #28
 8004476:	5c8a      	ldrb	r2, [r1, r2]
 8004478:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800447a:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_RCC_OscConfig+0x368>)
 800447c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_RCC_OscConfig+0x36c>)
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	f7ff fabd 	bl	8003a00 <HAL_InitTick>
        if(status != HAL_OK)
 8004486:	2800      	cmp	r0, #0
 8004488:	d1d0      	bne.n	800442c <HAL_RCC_OscConfig+0x2a4>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	e71d      	b.n	80042ca <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448e:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
 8004490:	6813      	ldr	r3, [r2, #0]
 8004492:	430b      	orrs	r3, r1
 8004494:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004496:	f7ff faf9 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_OscConfig+0x338>)
        tickstart = HAL_GetTick();
 800449c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800449e:	4699      	mov	r9, r3
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	029b      	lsls	r3, r3, #10
 80044a4:	4698      	mov	r8, r3
 80044a6:	e004      	b.n	80044b2 <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a8:	f7ff faf0 	bl	8003a8c <HAL_GetTick>
 80044ac:	1bc0      	subs	r0, r0, r7
 80044ae:	2864      	cmp	r0, #100	; 0x64
 80044b0:	d87b      	bhi.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044b2:	464b      	mov	r3, r9
 80044b4:	4642      	mov	r2, r8
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4213      	tst	r3, r2
 80044ba:	d0f5      	beq.n	80044a8 <HAL_RCC_OscConfig+0x320>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	e6ac      	b.n	800421a <HAL_RCC_OscConfig+0x92>
 80044c0:	40021000 	.word	0x40021000
 80044c4:	fffeffff 	.word	0xfffeffff
 80044c8:	fffbffff 	.word	0xfffbffff
 80044cc:	ffffe0ff 	.word	0xffffe0ff
 80044d0:	ffff1fff 	.word	0xffff1fff
 80044d4:	40007000 	.word	0x40007000
 80044d8:	fffffeff 	.word	0xfffffeff
 80044dc:	fffffbff 	.word	0xfffffbff
 80044e0:	00001388 	.word	0x00001388
 80044e4:	40010000 	.word	0x40010000
 80044e8:	feffffff 	.word	0xfeffffff
 80044ec:	080072fc 	.word	0x080072fc
 80044f0:	20000008 	.word	0x20000008
 80044f4:	20000010 	.word	0x20000010
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044f8:	2e00      	cmp	r6, #0
 80044fa:	d000      	beq.n	80044fe <HAL_RCC_OscConfig+0x376>
 80044fc:	e696      	b.n	800422c <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80044fe:	4a91      	ldr	r2, [pc, #580]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	0752      	lsls	r2, r2, #29
 8004504:	d502      	bpl.n	800450c <HAL_RCC_OscConfig+0x384>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d100      	bne.n	800450c <HAL_RCC_OscConfig+0x384>
 800450a:	e78e      	b.n	800442a <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4e8d      	ldr	r6, [pc, #564]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
 800450e:	6922      	ldr	r2, [r4, #16]
 8004510:	6871      	ldr	r1, [r6, #4]
 8004512:	488d      	ldr	r0, [pc, #564]	; (8004748 <HAL_RCC_OscConfig+0x5c0>)
 8004514:	0212      	lsls	r2, r2, #8
 8004516:	4001      	ands	r1, r0
 8004518:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800451a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451c:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800451e:	6832      	ldr	r2, [r6, #0]
 8004520:	438a      	bics	r2, r1
 8004522:	4313      	orrs	r3, r2
 8004524:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004526:	f7ff fde9 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 800452a:	68f3      	ldr	r3, [r6, #12]
 800452c:	4a87      	ldr	r2, [pc, #540]	; (800474c <HAL_RCC_OscConfig+0x5c4>)
 800452e:	061b      	lsls	r3, r3, #24
 8004530:	0f1b      	lsrs	r3, r3, #28
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	40d8      	lsrs	r0, r3
 8004536:	4b86      	ldr	r3, [pc, #536]	; (8004750 <HAL_RCC_OscConfig+0x5c8>)
 8004538:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800453a:	4b86      	ldr	r3, [pc, #536]	; (8004754 <HAL_RCC_OscConfig+0x5cc>)
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	f7ff fa5f 	bl	8003a00 <HAL_InitTick>
      if(status != HAL_OK)
 8004542:	2800      	cmp	r0, #0
 8004544:	d000      	beq.n	8004548 <HAL_RCC_OscConfig+0x3c0>
 8004546:	e771      	b.n	800442c <HAL_RCC_OscConfig+0x2a4>
 8004548:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800454a:	06da      	lsls	r2, r3, #27
 800454c:	d400      	bmi.n	8004550 <HAL_RCC_OscConfig+0x3c8>
 800454e:	e6bc      	b.n	80042ca <HAL_RCC_OscConfig+0x142>
 8004550:	e68f      	b.n	8004272 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004552:	4e7c      	ldr	r6, [pc, #496]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
 8004554:	4a80      	ldr	r2, [pc, #512]	; (8004758 <HAL_RCC_OscConfig+0x5d0>)
 8004556:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8004558:	4013      	ands	r3, r2
 800455a:	6533      	str	r3, [r6, #80]	; 0x50
 800455c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800455e:	4a7f      	ldr	r2, [pc, #508]	; (800475c <HAL_RCC_OscConfig+0x5d4>)
 8004560:	4013      	ands	r3, r2
 8004562:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004564:	f7ff fa92 	bl	8003a8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	4b7c      	ldr	r3, [pc, #496]	; (8004760 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8004570:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004574:	e004      	b.n	8004580 <HAL_RCC_OscConfig+0x3f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7ff fa89 	bl	8003a8c <HAL_GetTick>
 800457a:	1bc0      	subs	r0, r0, r7
 800457c:	4548      	cmp	r0, r9
 800457e:	d814      	bhi.n	80045aa <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004580:	4642      	mov	r2, r8
 8004582:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8004584:	4213      	tst	r3, r2
 8004586:	d1f6      	bne.n	8004576 <HAL_RCC_OscConfig+0x3ee>
 8004588:	e6fc      	b.n	8004384 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458a:	6833      	ldr	r3, [r6, #0]
 800458c:	433b      	orrs	r3, r7
 800458e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004590:	f7ff fa7c 	bl	8003a8c <HAL_GetTick>
 8004594:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004596:	6833      	ldr	r3, [r6, #0]
 8004598:	423b      	tst	r3, r7
 800459a:	d000      	beq.n	800459e <HAL_RCC_OscConfig+0x416>
 800459c:	e6c7      	b.n	800432e <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7ff fa75 	bl	8003a8c <HAL_GetTick>
 80045a2:	4643      	mov	r3, r8
 80045a4:	1ac0      	subs	r0, r0, r3
 80045a6:	2864      	cmp	r0, #100	; 0x64
 80045a8:	d9f5      	bls.n	8004596 <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 80045aa:	2003      	movs	r0, #3
 80045ac:	e73e      	b.n	800442c <HAL_RCC_OscConfig+0x2a4>
      __HAL_RCC_LSI_DISABLE();
 80045ae:	2201      	movs	r2, #1
 80045b0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80045b2:	4393      	bics	r3, r2
 80045b4:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 80045b6:	f7ff fa69 	bl	8003a8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045ba:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80045bc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045be:	4698      	mov	r8, r3
 80045c0:	e004      	b.n	80045cc <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c2:	f7ff fa63 	bl	8003a8c <HAL_GetTick>
 80045c6:	1bc0      	subs	r0, r0, r7
 80045c8:	2802      	cmp	r0, #2
 80045ca:	d8ee      	bhi.n	80045aa <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045cc:	4642      	mov	r2, r8
 80045ce:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80045d0:	421a      	tst	r2, r3
 80045d2:	d1f6      	bne.n	80045c2 <HAL_RCC_OscConfig+0x43a>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	e694      	b.n	8004302 <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 80045d8:	2201      	movs	r2, #1
 80045da:	6833      	ldr	r3, [r6, #0]
 80045dc:	4393      	bics	r3, r2
 80045de:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80045e0:	f7ff fa54 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e4:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 80045e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e8:	4698      	mov	r8, r3
 80045ea:	e004      	b.n	80045f6 <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ec:	f7ff fa4e 	bl	8003a8c <HAL_GetTick>
 80045f0:	1bc0      	subs	r0, r0, r7
 80045f2:	2802      	cmp	r0, #2
 80045f4:	d8d9      	bhi.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045f6:	4642      	mov	r2, r8
 80045f8:	6833      	ldr	r3, [r6, #0]
 80045fa:	421a      	tst	r2, r3
 80045fc:	d1f6      	bne.n	80045ec <HAL_RCC_OscConfig+0x464>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	e7a3      	b.n	800454a <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_MSI_DISABLE();
 8004602:	6833      	ldr	r3, [r6, #0]
 8004604:	4a54      	ldr	r2, [pc, #336]	; (8004758 <HAL_RCC_OscConfig+0x5d0>)
 8004606:	4013      	ands	r3, r2
 8004608:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800460a:	f7ff fa3f 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8004612:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004614:	4698      	mov	r8, r3
 8004616:	e004      	b.n	8004622 <HAL_RCC_OscConfig+0x49a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004618:	f7ff fa38 	bl	8003a8c <HAL_GetTick>
 800461c:	1bc0      	subs	r0, r0, r7
 800461e:	2802      	cmp	r0, #2
 8004620:	d8c3      	bhi.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004622:	4642      	mov	r2, r8
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	4213      	tst	r3, r2
 8004628:	d1f6      	bne.n	8004618 <HAL_RCC_OscConfig+0x490>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	e64d      	b.n	80042ca <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI48_DISABLE();
 800462e:	2201      	movs	r2, #1
 8004630:	68b3      	ldr	r3, [r6, #8]
 8004632:	494c      	ldr	r1, [pc, #304]	; (8004764 <HAL_RCC_OscConfig+0x5dc>)
 8004634:	4393      	bics	r3, r2
 8004636:	4a4c      	ldr	r2, [pc, #304]	; (8004768 <HAL_RCC_OscConfig+0x5e0>)
 8004638:	60b3      	str	r3, [r6, #8]
 800463a:	6a13      	ldr	r3, [r2, #32]
 800463c:	400b      	ands	r3, r1
 800463e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004640:	f7ff fa24 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004644:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8004646:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004648:	4698      	mov	r8, r3
 800464a:	e004      	b.n	8004656 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800464c:	f7ff fa1e 	bl	8003a8c <HAL_GetTick>
 8004650:	1bc0      	subs	r0, r0, r7
 8004652:	2802      	cmp	r0, #2
 8004654:	d8a9      	bhi.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004656:	4642      	mov	r2, r8
 8004658:	68b3      	ldr	r3, [r6, #8]
 800465a:	421a      	tst	r2, r3
 800465c:	d1f6      	bne.n	800464c <HAL_RCC_OscConfig+0x4c4>
 800465e:	e6b9      	b.n	80043d4 <HAL_RCC_OscConfig+0x24c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	4a38      	ldr	r2, [pc, #224]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
 8004664:	02db      	lsls	r3, r3, #11
 8004666:	6811      	ldr	r1, [r2, #0]
 8004668:	430b      	orrs	r3, r1
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	6813      	ldr	r3, [r2, #0]
 800466e:	4303      	orrs	r3, r0
 8004670:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004672:	e710      	b.n	8004496 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004674:	4a33      	ldr	r2, [pc, #204]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
 8004676:	493d      	ldr	r1, [pc, #244]	; (800476c <HAL_RCC_OscConfig+0x5e4>)
 8004678:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800467a:	400b      	ands	r3, r1
 800467c:	6393      	str	r3, [r2, #56]	; 0x38
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	e685      	b.n	800438e <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_PLL_DISABLE();
 8004682:	4d30      	ldr	r5, [pc, #192]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
 8004684:	4a3a      	ldr	r2, [pc, #232]	; (8004770 <HAL_RCC_OscConfig+0x5e8>)
 8004686:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004688:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800468a:	4013      	ands	r3, r2
 800468c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800468e:	f7ff f9fd 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004692:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004694:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004696:	e004      	b.n	80046a2 <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004698:	f7ff f9f8 	bl	8003a8c <HAL_GetTick>
 800469c:	1b80      	subs	r0, r0, r6
 800469e:	2802      	cmp	r0, #2
 80046a0:	d883      	bhi.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046a2:	682b      	ldr	r3, [r5, #0]
 80046a4:	423b      	tst	r3, r7
 80046a6:	d1f7      	bne.n	8004698 <HAL_RCC_OscConfig+0x510>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80046aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046ac:	68ea      	ldr	r2, [r5, #12]
 80046ae:	430b      	orrs	r3, r1
 80046b0:	4930      	ldr	r1, [pc, #192]	; (8004774 <HAL_RCC_OscConfig+0x5ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046b2:	4e24      	ldr	r6, [pc, #144]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b4:	400a      	ands	r2, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	682a      	ldr	r2, [r5, #0]
 80046c2:	045b      	lsls	r3, r3, #17
 80046c4:	4313      	orrs	r3, r2
 80046c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046c8:	f7ff f9e0 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046cc:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80046ce:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046d0:	04ad      	lsls	r5, r5, #18
 80046d2:	e005      	b.n	80046e0 <HAL_RCC_OscConfig+0x558>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d4:	f7ff f9da 	bl	8003a8c <HAL_GetTick>
 80046d8:	1b00      	subs	r0, r0, r4
 80046da:	2802      	cmp	r0, #2
 80046dc:	d900      	bls.n	80046e0 <HAL_RCC_OscConfig+0x558>
 80046de:	e764      	b.n	80045aa <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046e0:	6833      	ldr	r3, [r6, #0]
 80046e2:	422b      	tst	r3, r5
 80046e4:	d0f6      	beq.n	80046d4 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 80046e6:	2000      	movs	r0, #0
 80046e8:	e6a0      	b.n	800442c <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ea:	4a16      	ldr	r2, [pc, #88]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
 80046ec:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f2:	e633      	b.n	800435c <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d100      	bne.n	80046fa <HAL_RCC_OscConfig+0x572>
 80046f8:	e697      	b.n	800442a <HAL_RCC_OscConfig+0x2a2>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 8004700:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 8004704:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	401a      	ands	r2, r3
 8004708:	428a      	cmp	r2, r1
 800470a:	d000      	beq.n	800470e <HAL_RCC_OscConfig+0x586>
 800470c:	e68e      	b.n	800442c <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800470e:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004710:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004712:	0392      	lsls	r2, r2, #14
 8004714:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	428a      	cmp	r2, r1
 8004718:	d000      	beq.n	800471c <HAL_RCC_OscConfig+0x594>
 800471a:	e687      	b.n	800442c <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800471c:	20c0      	movs	r0, #192	; 0xc0
 800471e:	0400      	lsls	r0, r0, #16
 8004720:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004722:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004724:	1a18      	subs	r0, r3, r0
 8004726:	1e43      	subs	r3, r0, #1
 8004728:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 800472a:	b2c0      	uxtb	r0, r0
 800472c:	e67e      	b.n	800442c <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <HAL_RCC_OscConfig+0x5bc>)
 8004730:	3901      	subs	r1, #1
 8004732:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004734:	39ff      	subs	r1, #255	; 0xff
 8004736:	4301      	orrs	r1, r0
 8004738:	6519      	str	r1, [r3, #80]	; 0x50
 800473a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800473c:	430a      	orrs	r2, r1
 800473e:	651a      	str	r2, [r3, #80]	; 0x50
 8004740:	e60c      	b.n	800435c <HAL_RCC_OscConfig+0x1d4>
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	40021000 	.word	0x40021000
 8004748:	ffffe0ff 	.word	0xffffe0ff
 800474c:	080072fc 	.word	0x080072fc
 8004750:	20000008 	.word	0x20000008
 8004754:	20000010 	.word	0x20000010
 8004758:	fffffeff 	.word	0xfffffeff
 800475c:	fffffbff 	.word	0xfffffbff
 8004760:	00001388 	.word	0x00001388
 8004764:	ffffdfff 	.word	0xffffdfff
 8004768:	40010000 	.word	0x40010000
 800476c:	efffffff 	.word	0xefffffff
 8004770:	feffffff 	.word	0xfeffffff
 8004774:	ff02ffff 	.word	0xff02ffff

08004778 <HAL_RCC_ClockConfig>:
{
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	46ce      	mov	lr, r9
 800477c:	4647      	mov	r7, r8
 800477e:	0005      	movs	r5, r0
 8004780:	000c      	movs	r4, r1
 8004782:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8004784:	2800      	cmp	r0, #0
 8004786:	d066      	beq.n	8004856 <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	2201      	movs	r2, #1
 800478a:	4e6b      	ldr	r6, [pc, #428]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	4013      	ands	r3, r2
 8004790:	428b      	cmp	r3, r1
 8004792:	d362      	bcc.n	800485a <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	079a      	lsls	r2, r3, #30
 8004798:	d506      	bpl.n	80047a8 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479a:	20f0      	movs	r0, #240	; 0xf0
 800479c:	4967      	ldr	r1, [pc, #412]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	68ca      	ldr	r2, [r1, #12]
 80047a0:	4382      	bics	r2, r0
 80047a2:	68a8      	ldr	r0, [r5, #8]
 80047a4:	4302      	orrs	r2, r0
 80047a6:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a8:	07db      	lsls	r3, r3, #31
 80047aa:	d52d      	bpl.n	8004808 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ac:	4b63      	ldr	r3, [pc, #396]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047b0:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b2:	2a02      	cmp	r2, #2
 80047b4:	d04d      	beq.n	8004852 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b6:	2a03      	cmp	r2, #3
 80047b8:	d100      	bne.n	80047bc <HAL_RCC_ClockConfig+0x44>
 80047ba:	e06f      	b.n	800489c <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047bc:	2a01      	cmp	r2, #1
 80047be:	d100      	bne.n	80047c2 <HAL_RCC_ClockConfig+0x4a>
 80047c0:	e0a4      	b.n	800490c <HAL_RCC_ClockConfig+0x194>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047c2:	059b      	lsls	r3, r3, #22
 80047c4:	d547      	bpl.n	8004856 <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c6:	2103      	movs	r1, #3
 80047c8:	4e5c      	ldr	r6, [pc, #368]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	68f3      	ldr	r3, [r6, #12]
 80047cc:	438b      	bics	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80047d2:	f7ff f95b 	bl	8003a8c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80047d8:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d100      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x68>
 80047de:	e075      	b.n	80048cc <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d100      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x6e>
 80047e4:	e082      	b.n	80048ec <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d100      	bne.n	80047ec <HAL_RCC_ClockConfig+0x74>
 80047ea:	e094      	b.n	8004916 <HAL_RCC_ClockConfig+0x19e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047ec:	230c      	movs	r3, #12
 80047ee:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	4b53      	ldr	r3, [pc, #332]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 80047f2:	4699      	mov	r9, r3
 80047f4:	e004      	b.n	8004800 <HAL_RCC_ClockConfig+0x88>
 80047f6:	f7ff f949 	bl	8003a8c <HAL_GetTick>
 80047fa:	1bc0      	subs	r0, r0, r7
 80047fc:	4548      	cmp	r0, r9
 80047fe:	d842      	bhi.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004800:	4642      	mov	r2, r8
 8004802:	68f3      	ldr	r3, [r6, #12]
 8004804:	421a      	tst	r2, r3
 8004806:	d1f6      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004808:	2201      	movs	r2, #1
 800480a:	4e4b      	ldr	r6, [pc, #300]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	6833      	ldr	r3, [r6, #0]
 800480e:	4013      	ands	r3, r2
 8004810:	42a3      	cmp	r3, r4
 8004812:	d847      	bhi.n	80048a4 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	075a      	lsls	r2, r3, #29
 8004818:	d506      	bpl.n	8004828 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481a:	4948      	ldr	r1, [pc, #288]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	4849      	ldr	r0, [pc, #292]	; (8004944 <HAL_RCC_ClockConfig+0x1cc>)
 800481e:	68ca      	ldr	r2, [r1, #12]
 8004820:	4002      	ands	r2, r0
 8004822:	68e8      	ldr	r0, [r5, #12]
 8004824:	4302      	orrs	r2, r0
 8004826:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	071b      	lsls	r3, r3, #28
 800482a:	d42e      	bmi.n	800488a <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800482c:	f7ff fc66 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 8004830:	4b42      	ldr	r3, [pc, #264]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	4a45      	ldr	r2, [pc, #276]	; (8004948 <HAL_RCC_ClockConfig+0x1d0>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	0f1b      	lsrs	r3, r3, #28
 800483a:	5cd3      	ldrb	r3, [r2, r3]
 800483c:	40d8      	lsrs	r0, r3
 800483e:	4b43      	ldr	r3, [pc, #268]	; (800494c <HAL_RCC_ClockConfig+0x1d4>)
 8004840:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004842:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_RCC_ClockConfig+0x1d8>)
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	f7ff f8db 	bl	8003a00 <HAL_InitTick>
}
 800484a:	bcc0      	pop	{r6, r7}
 800484c:	46b9      	mov	r9, r7
 800484e:	46b0      	mov	r8, r6
 8004850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004852:	039b      	lsls	r3, r3, #14
 8004854:	d4b7      	bmi.n	80047c6 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8004856:	2001      	movs	r0, #1
 8004858:	e7f7      	b.n	800484a <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	6833      	ldr	r3, [r6, #0]
 800485c:	4393      	bics	r3, r2
 800485e:	430b      	orrs	r3, r1
 8004860:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004862:	f7ff f913 	bl	8003a8c <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	2301      	movs	r3, #1
 8004868:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486a:	4b35      	ldr	r3, [pc, #212]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 800486c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486e:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004870:	4642      	mov	r2, r8
 8004872:	6833      	ldr	r3, [r6, #0]
 8004874:	4013      	ands	r3, r2
 8004876:	42a3      	cmp	r3, r4
 8004878:	d100      	bne.n	800487c <HAL_RCC_ClockConfig+0x104>
 800487a:	e78b      	b.n	8004794 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487c:	f7ff f906 	bl	8003a8c <HAL_GetTick>
 8004880:	1bc0      	subs	r0, r0, r7
 8004882:	4548      	cmp	r0, r9
 8004884:	d9f4      	bls.n	8004870 <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8004886:	2003      	movs	r0, #3
 8004888:	e7df      	b.n	800484a <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800488a:	492c      	ldr	r1, [pc, #176]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	692b      	ldr	r3, [r5, #16]
 800488e:	68ca      	ldr	r2, [r1, #12]
 8004890:	4830      	ldr	r0, [pc, #192]	; (8004954 <HAL_RCC_ClockConfig+0x1dc>)
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4002      	ands	r2, r0
 8004896:	4313      	orrs	r3, r2
 8004898:	60cb      	str	r3, [r1, #12]
 800489a:	e7c7      	b.n	800482c <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800489c:	019b      	lsls	r3, r3, #6
 800489e:	d492      	bmi.n	80047c6 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80048a0:	2001      	movs	r0, #1
 80048a2:	e7d2      	b.n	800484a <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a4:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	0034      	movs	r4, r6
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a8:	4393      	bics	r3, r2
 80048aa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80048ac:	f7ff f8ee 	bl	8003a8c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b0:	4b23      	ldr	r3, [pc, #140]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 80048b2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b4:	2601      	movs	r6, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b6:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	421e      	tst	r6, r3
 80048bc:	d0aa      	beq.n	8004814 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048be:	f7ff f8e5 	bl	8003a8c <HAL_GetTick>
 80048c2:	1bc0      	subs	r0, r0, r7
 80048c4:	4540      	cmp	r0, r8
 80048c6:	d9f7      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x140>
        return HAL_TIMEOUT;
 80048c8:	2003      	movs	r0, #3
 80048ca:	e7be      	b.n	800484a <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048cc:	330a      	adds	r3, #10
 80048ce:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	4699      	mov	r9, r3
 80048d4:	e004      	b.n	80048e0 <HAL_RCC_ClockConfig+0x168>
 80048d6:	f7ff f8d9 	bl	8003a8c <HAL_GetTick>
 80048da:	1bc0      	subs	r0, r0, r7
 80048dc:	4548      	cmp	r0, r9
 80048de:	d8d2      	bhi.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048e0:	4642      	mov	r2, r8
 80048e2:	68f3      	ldr	r3, [r6, #12]
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d1f5      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x15e>
 80048ea:	e78d      	b.n	8004808 <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ec:	3309      	adds	r3, #9
 80048ee:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	4699      	mov	r9, r3
 80048f4:	e004      	b.n	8004900 <HAL_RCC_ClockConfig+0x188>
 80048f6:	f7ff f8c9 	bl	8003a8c <HAL_GetTick>
 80048fa:	1bc0      	subs	r0, r0, r7
 80048fc:	4548      	cmp	r0, r9
 80048fe:	d8c2      	bhi.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004900:	4642      	mov	r2, r8
 8004902:	68f3      	ldr	r3, [r6, #12]
 8004904:	4013      	ands	r3, r2
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d1f5      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x17e>
 800490a:	e77d      	b.n	8004808 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800490c:	075b      	lsls	r3, r3, #29
 800490e:	d500      	bpl.n	8004912 <HAL_RCC_ClockConfig+0x19a>
 8004910:	e759      	b.n	80047c6 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
 8004914:	e799      	b.n	800484a <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004916:	330b      	adds	r3, #11
 8004918:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	4699      	mov	r9, r3
 800491e:	e004      	b.n	800492a <HAL_RCC_ClockConfig+0x1b2>
 8004920:	f7ff f8b4 	bl	8003a8c <HAL_GetTick>
 8004924:	1bc0      	subs	r0, r0, r7
 8004926:	4548      	cmp	r0, r9
 8004928:	d8ad      	bhi.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800492a:	4642      	mov	r2, r8
 800492c:	68f3      	ldr	r3, [r6, #12]
 800492e:	4013      	ands	r3, r2
 8004930:	2b04      	cmp	r3, #4
 8004932:	d1f5      	bne.n	8004920 <HAL_RCC_ClockConfig+0x1a8>
 8004934:	e768      	b.n	8004808 <HAL_RCC_ClockConfig+0x90>
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	40022000 	.word	0x40022000
 800493c:	40021000 	.word	0x40021000
 8004940:	00001388 	.word	0x00001388
 8004944:	fffff8ff 	.word	0xfffff8ff
 8004948:	080072fc 	.word	0x080072fc
 800494c:	20000008 	.word	0x20000008
 8004950:	20000010 	.word	0x20000010
 8004954:	ffffc7ff 	.word	0xffffc7ff

08004958 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004958:	4b04      	ldr	r3, [pc, #16]	; (800496c <HAL_RCC_GetPCLK1Freq+0x14>)
 800495a:	4a05      	ldr	r2, [pc, #20]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x18>)
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	055b      	lsls	r3, r3, #21
 8004960:	0f5b      	lsrs	r3, r3, #29
 8004962:	5cd3      	ldrb	r3, [r2, r3]
 8004964:	4a03      	ldr	r2, [pc, #12]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004966:	6810      	ldr	r0, [r2, #0]
 8004968:	40d8      	lsrs	r0, r3
}
 800496a:	4770      	bx	lr
 800496c:	40021000 	.word	0x40021000
 8004970:	0800730c 	.word	0x0800730c
 8004974:	20000008 	.word	0x20000008

08004978 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <HAL_RCC_GetPCLK2Freq+0x14>)
 800497a:	4a05      	ldr	r2, [pc, #20]	; (8004990 <HAL_RCC_GetPCLK2Freq+0x18>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	049b      	lsls	r3, r3, #18
 8004980:	0f5b      	lsrs	r3, r3, #29
 8004982:	5cd3      	ldrb	r3, [r2, r3]
 8004984:	4a03      	ldr	r2, [pc, #12]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004986:	6810      	ldr	r0, [r2, #0]
 8004988:	40d8      	lsrs	r0, r3
}
 800498a:	4770      	bx	lr
 800498c:	40021000 	.word	0x40021000
 8004990:	0800730c 	.word	0x0800730c
 8004994:	20000008 	.word	0x20000008

08004998 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004998:	2282      	movs	r2, #130	; 0x82
{
 800499a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499c:	46ce      	mov	lr, r9
 800499e:	4647      	mov	r7, r8
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80049a0:	6803      	ldr	r3, [r0, #0]
 80049a2:	0112      	lsls	r2, r2, #4
{
 80049a4:	0004      	movs	r4, r0
 80049a6:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049a8:	4213      	tst	r3, r2
 80049aa:	d059      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	4a7e      	ldr	r2, [pc, #504]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049b0:	055b      	lsls	r3, r3, #21
 80049b2:	6b91      	ldr	r1, [r2, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80049b4:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b6:	4219      	tst	r1, r3
 80049b8:	d100      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x24>
 80049ba:	e08c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	2680      	movs	r6, #128	; 0x80
 80049be:	4d7b      	ldr	r5, [pc, #492]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80049c0:	0076      	lsls	r6, r6, #1
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	4233      	tst	r3, r6
 80049c6:	d100      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049c8:	e090      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049ca:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049cc:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049ce:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049d0:	4d75      	ldr	r5, [pc, #468]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049d2:	0392      	lsls	r2, r2, #14
 80049d4:	682b      	ldr	r3, [r5, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049d6:	4010      	ands	r0, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049d8:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049da:	4298      	cmp	r0, r3
 80049dc:	d100      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80049de:	e0a5      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x194>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80049e0:	23c0      	movs	r3, #192	; 0xc0
 80049e2:	000a      	movs	r2, r1
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	401a      	ands	r2, r3
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d100      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049ec:	e0b7      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80049ee:	486e      	ldr	r0, [pc, #440]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80049f2:	0005      	movs	r5, r0
 80049f4:	401d      	ands	r5, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80049f6:	4218      	tst	r0, r3
 80049f8:	d100      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049fa:	e089      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x178>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049fc:	6823      	ldr	r3, [r4, #0]
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80049fe:	4295      	cmp	r5, r2
 8004a00:	d100      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004a02:	e0a1      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a04:	0698      	lsls	r0, r3, #26
 8004a06:	d400      	bmi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004a08:	e09e      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a0a:	4d67      	ldr	r5, [pc, #412]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a0c:	4b68      	ldr	r3, [pc, #416]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004a0e:	6d2e      	ldr	r6, [r5, #80]	; 0x50

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a10:	6d28      	ldr	r0, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a12:	4033      	ands	r3, r6
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a14:	4684      	mov	ip, r0
 8004a16:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a18:	4698      	mov	r8, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a1a:	4663      	mov	r3, ip
 8004a1c:	0300      	lsls	r0, r0, #12
 8004a1e:	4318      	orrs	r0, r3
 8004a20:	6528      	str	r0, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a22:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004a24:	4b63      	ldr	r3, [pc, #396]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004a26:	4018      	ands	r0, r3

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a28:	4643      	mov	r3, r8
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a2a:	6528      	str	r0, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004a2c:	652b      	str	r3, [r5, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a2e:	05f3      	lsls	r3, r6, #23
 8004a30:	d500      	bpl.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004a32:	e0a0      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8004a34:	6823      	ldr	r3, [r4, #0]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a36:	20c0      	movs	r0, #192	; 0xc0
 8004a38:	0280      	lsls	r0, r0, #10
 8004a3a:	4282      	cmp	r2, r0
 8004a3c:	d169      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004a3e:	20c0      	movs	r0, #192	; 0xc0
 8004a40:	0380      	lsls	r0, r0, #14
 8004a42:	4008      	ands	r0, r1
 8004a44:	4958      	ldr	r1, [pc, #352]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a46:	4d5c      	ldr	r5, [pc, #368]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a48:	680a      	ldr	r2, [r1, #0]
 8004a4a:	402a      	ands	r2, r5
 8004a4c:	4310      	orrs	r0, r2
 8004a4e:	22c0      	movs	r2, #192	; 0xc0
 8004a50:	6008      	str	r0, [r1, #0]
 8004a52:	4855      	ldr	r0, [pc, #340]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a54:	0292      	lsls	r2, r2, #10
 8004a56:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	6502      	str	r2, [r0, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a5c:	2f01      	cmp	r7, #1
 8004a5e:	d05e      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a60:	07da      	lsls	r2, r3, #31
 8004a62:	d506      	bpl.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a64:	2003      	movs	r0, #3
 8004a66:	4950      	ldr	r1, [pc, #320]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a68:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a6a:	4382      	bics	r2, r0
 8004a6c:	68e0      	ldr	r0, [r4, #12]
 8004a6e:	4302      	orrs	r2, r0
 8004a70:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a72:	079a      	lsls	r2, r3, #30
 8004a74:	d506      	bpl.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a76:	200c      	movs	r0, #12
 8004a78:	494b      	ldr	r1, [pc, #300]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a7a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a7c:	4382      	bics	r2, r0
 8004a7e:	6920      	ldr	r0, [r4, #16]
 8004a80:	4302      	orrs	r2, r0
 8004a82:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a84:	075a      	lsls	r2, r3, #29
 8004a86:	d506      	bpl.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a88:	4947      	ldr	r1, [pc, #284]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a8a:	484c      	ldr	r0, [pc, #304]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a8c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004a8e:	4002      	ands	r2, r0
 8004a90:	6960      	ldr	r0, [r4, #20]
 8004a92:	4302      	orrs	r2, r0
 8004a94:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a96:	071a      	lsls	r2, r3, #28
 8004a98:	d506      	bpl.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a9a:	4943      	ldr	r1, [pc, #268]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a9c:	4848      	ldr	r0, [pc, #288]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004a9e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004aa0:	4002      	ands	r2, r0
 8004aa2:	69a0      	ldr	r0, [r4, #24]
 8004aa4:	4302      	orrs	r2, r0
 8004aa6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aa8:	065a      	lsls	r2, r3, #25
 8004aaa:	d506      	bpl.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aac:	493e      	ldr	r1, [pc, #248]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004aae:	4845      	ldr	r0, [pc, #276]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ab0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004ab2:	4002      	ands	r2, r0
 8004ab4:	6a20      	ldr	r0, [r4, #32]
 8004ab6:	4302      	orrs	r2, r0
 8004ab8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004aba:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	d506      	bpl.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004ac0:	4a39      	ldr	r2, [pc, #228]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ac2:	4941      	ldr	r1, [pc, #260]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ac4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004ac6:	400b      	ands	r3, r1
 8004ac8:	69e1      	ldr	r1, [r4, #28]
 8004aca:	430b      	orrs	r3, r1
 8004acc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004ace:	bcc0      	pop	{r6, r7}
 8004ad0:	46b9      	mov	r9, r7
 8004ad2:	46b0      	mov	r8, r6
 8004ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad8:	6b91      	ldr	r1, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ada:	4d34      	ldr	r5, [pc, #208]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x214>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6393      	str	r3, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	0076      	lsls	r6, r6, #1
      pwrclkchanged = SET;
 8004ae4:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae6:	4233      	tst	r3, r6
 8004ae8:	d000      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004aea:	e76e      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	4333      	orrs	r3, r6
 8004af0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004af2:	f7fe ffcb 	bl	8003a8c <HAL_GetTick>
 8004af6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	4233      	tst	r3, r6
 8004afc:	d000      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004afe:	e764      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b00:	f7fe ffc4 	bl	8003a8c <HAL_GetTick>
 8004b04:	4643      	mov	r3, r8
 8004b06:	1ac0      	subs	r0, r0, r3
 8004b08:	2864      	cmp	r0, #100	; 0x64
 8004b0a:	d9f5      	bls.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          return HAL_TIMEOUT;
 8004b0c:	2003      	movs	r0, #3
 8004b0e:	e7de      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	4825      	ldr	r0, [pc, #148]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b14:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004b16:	430a      	orrs	r2, r1
 8004b18:	6502      	str	r2, [r0, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004b1a:	2f01      	cmp	r7, #1
 8004b1c:	d1a0      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004b20:	492a      	ldr	r1, [pc, #168]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004b22:	400a      	ands	r2, r1
 8004b24:	6382      	str	r2, [r0, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b26:	07da      	lsls	r2, r3, #31
 8004b28:	d5a3      	bpl.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004b2a:	e79b      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004b2c:	68a3      	ldr	r3, [r4, #8]
 8004b2e:	401a      	ands	r2, r3
 8004b30:	4282      	cmp	r2, r0
 8004b32:	d000      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004b34:	e754      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004b36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004b38:	22c0      	movs	r2, #192	; 0xc0
 8004b3a:	001d      	movs	r5, r3
 8004b3c:	0292      	lsls	r2, r2, #10
 8004b3e:	4015      	ands	r5, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004b40:	4213      	tst	r3, r2
 8004b42:	d02d      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004b44:	400a      	ands	r2, r1
 8004b46:	e759      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x64>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004b48:	20c0      	movs	r0, #192	; 0xc0
 8004b4a:	68a6      	ldr	r6, [r4, #8]
 8004b4c:	0280      	lsls	r0, r0, #10
 8004b4e:	4030      	ands	r0, r6
 8004b50:	42a8      	cmp	r0, r5
 8004b52:	d100      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004b54:	e76f      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004b56:	0518      	lsls	r0, r3, #20
 8004b58:	d400      	bmi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8004b5a:	e76c      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004b5c:	e755      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b60:	681d      	ldr	r5, [r3, #0]
 8004b62:	03ad      	lsls	r5, r5, #14
 8004b64:	d41e      	bmi.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	001d      	movs	r5, r3
 8004b6a:	4015      	ands	r5, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004b6c:	4213      	tst	r3, r2
 8004b6e:	d000      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004b70:	e744      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	e766      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 8004b76:	f7fe ff89 	bl	8003a8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
        tickstart = HAL_GetTick();
 8004b82:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b86:	e004      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b88:	f7fe ff80 	bl	8003a8c <HAL_GetTick>
 8004b8c:	1b80      	subs	r0, r0, r6
 8004b8e:	4548      	cmp	r0, r9
 8004b90:	d8bc      	bhi.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x174>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b92:	4642      	mov	r2, r8
 8004b94:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004b96:	4213      	tst	r3, r2
 8004b98:	d0f6      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004b9a:	22c0      	movs	r2, #192	; 0xc0
 8004b9c:	6861      	ldr	r1, [r4, #4]
 8004b9e:	0292      	lsls	r2, r2, #10
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	e747      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          return HAL_ERROR;
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	e792      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	fffcffff 	.word	0xfffcffff
 8004bb4:	fff7ffff 	.word	0xfff7ffff
 8004bb8:	ffcfffff 	.word	0xffcfffff
 8004bbc:	fffff3ff 	.word	0xfffff3ff
 8004bc0:	ffffcfff 	.word	0xffffcfff
 8004bc4:	fbffffff 	.word	0xfbffffff
 8004bc8:	fff3ffff 	.word	0xfff3ffff
 8004bcc:	efffffff 	.word	0xefffffff
 8004bd0:	00001388 	.word	0x00001388

08004bd4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd4:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 8004bd6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	05d2      	lsls	r2, r2, #23
 8004bda:	4290      	cmp	r0, r2
 8004bdc:	d005      	beq.n	8004bea <TIM_Base_SetConfig+0x16>
 8004bde:	4a0d      	ldr	r2, [pc, #52]	; (8004c14 <TIM_Base_SetConfig+0x40>)
 8004be0:	4290      	cmp	r0, r2
 8004be2:	d002      	beq.n	8004bea <TIM_Base_SetConfig+0x16>
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <TIM_Base_SetConfig+0x44>)
 8004be6:	4290      	cmp	r0, r2
 8004be8:	d107      	bne.n	8004bfa <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bea:	2270      	movs	r2, #112	; 0x70
 8004bec:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004bee:	684a      	ldr	r2, [r1, #4]
 8004bf0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <TIM_Base_SetConfig+0x48>)
 8004bf4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf6:	68ca      	ldr	r2, [r1, #12]
 8004bf8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bfa:	2280      	movs	r2, #128	; 0x80
 8004bfc:	4393      	bics	r3, r2
 8004bfe:	690a      	ldr	r2, [r1, #16]
 8004c00:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004c02:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c04:	688b      	ldr	r3, [r1, #8]
 8004c06:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c08:	680b      	ldr	r3, [r1, #0]
 8004c0a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	6143      	str	r3, [r0, #20]
}
 8004c10:	4770      	bx	lr
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	40010800 	.word	0x40010800
 8004c18:	40011400 	.word	0x40011400
 8004c1c:	fffffcff 	.word	0xfffffcff

08004c20 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004c20:	2239      	movs	r2, #57	; 0x39
 8004c22:	5c81      	ldrb	r1, [r0, r2]
{
 8004c24:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004c26:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004c28:	2901      	cmp	r1, #1
 8004c2a:	d110      	bne.n	8004c4e <HAL_TIM_Base_Start+0x2e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	3101      	adds	r1, #1
 8004c2e:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	05d2      	lsls	r2, r2, #23
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00a      	beq.n	8004c50 <HAL_TIM_Base_Start+0x30>
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <HAL_TIM_Base_Start+0x4c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_Base_Start+0x30>
 8004c40:	4a0b      	ldr	r2, [pc, #44]	; (8004c70 <HAL_TIM_Base_Start+0x50>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d004      	beq.n	8004c50 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4310      	orrs	r0, r2
 8004c4a:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004c4c:	2000      	movs	r0, #0
}
 8004c4e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c50:	2207      	movs	r2, #7
 8004c52:	6899      	ldr	r1, [r3, #8]
 8004c54:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c56:	2a06      	cmp	r2, #6
 8004c58:	d005      	beq.n	8004c66 <HAL_TIM_Base_Start+0x46>
      __HAL_TIM_ENABLE(htim);
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004c5e:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004c60:	430a      	orrs	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e7f3      	b.n	8004c4e <HAL_TIM_Base_Start+0x2e>
  return HAL_OK;
 8004c66:	2000      	movs	r0, #0
 8004c68:	e7f1      	b.n	8004c4e <HAL_TIM_Base_Start+0x2e>
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	40010800 	.word	0x40010800
 8004c70:	40011400 	.word	0x40011400

08004c74 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c74:	2900      	cmp	r1, #0
 8004c76:	d120      	bne.n	8004cba <HAL_TIM_OC_Start+0x46>
 8004c78:	233a      	movs	r3, #58	; 0x3a
 8004c7a:	5cc2      	ldrb	r2, [r0, r3]
 8004c7c:	2a01      	cmp	r2, #1
 8004c7e:	d124      	bne.n	8004cca <HAL_TIM_OC_Start+0x56>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c80:	2202      	movs	r2, #2
 8004c82:	54c2      	strb	r2, [r0, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c84:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c86:	221f      	movs	r2, #31
 8004c88:	2001      	movs	r0, #1
 8004c8a:	4011      	ands	r1, r2
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	408a      	lsls	r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c90:	6a19      	ldr	r1, [r3, #32]
 8004c92:	4391      	bics	r1, r2
 8004c94:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c96:	6a19      	ldr	r1, [r3, #32]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	621a      	str	r2, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	05d2      	lsls	r2, r2, #23
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d014      	beq.n	8004cce <HAL_TIM_OC_Start+0x5a>
 8004ca4:	4a15      	ldr	r2, [pc, #84]	; (8004cfc <HAL_TIM_OC_Start+0x88>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d011      	beq.n	8004cce <HAL_TIM_OC_Start+0x5a>
 8004caa:	4a15      	ldr	r2, [pc, #84]	; (8004d00 <HAL_TIM_OC_Start+0x8c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_TIM_OC_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4310      	orrs	r0, r2
 8004cb4:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004cb6:	2000      	movs	r0, #0
}
 8004cb8:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cba:	2904      	cmp	r1, #4
 8004cbc:	d012      	beq.n	8004ce4 <HAL_TIM_OC_Start+0x70>
 8004cbe:	2908      	cmp	r1, #8
 8004cc0:	d017      	beq.n	8004cf2 <HAL_TIM_OC_Start+0x7e>
 8004cc2:	233d      	movs	r3, #61	; 0x3d
 8004cc4:	5cc2      	ldrb	r2, [r0, r3]
 8004cc6:	2a01      	cmp	r2, #1
 8004cc8:	d0da      	beq.n	8004c80 <HAL_TIM_OC_Start+0xc>
    return HAL_ERROR;
 8004cca:	2001      	movs	r0, #1
 8004ccc:	e7f4      	b.n	8004cb8 <HAL_TIM_OC_Start+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cce:	2207      	movs	r2, #7
 8004cd0:	6899      	ldr	r1, [r3, #8]
 8004cd2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	2a06      	cmp	r2, #6
 8004cd6:	d00a      	beq.n	8004cee <HAL_TIM_OC_Start+0x7a>
      __HAL_TIM_ENABLE(htim);
 8004cd8:	2101      	movs	r1, #1
 8004cda:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004cdc:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e7e9      	b.n	8004cb8 <HAL_TIM_OC_Start+0x44>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ce4:	233b      	movs	r3, #59	; 0x3b
 8004ce6:	5cc2      	ldrb	r2, [r0, r3]
 8004ce8:	2a01      	cmp	r2, #1
 8004cea:	d0c9      	beq.n	8004c80 <HAL_TIM_OC_Start+0xc>
 8004cec:	e7ed      	b.n	8004cca <HAL_TIM_OC_Start+0x56>
  return HAL_OK;
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e7e2      	b.n	8004cb8 <HAL_TIM_OC_Start+0x44>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cf2:	233c      	movs	r3, #60	; 0x3c
 8004cf4:	5cc2      	ldrb	r2, [r0, r3]
 8004cf6:	2a01      	cmp	r2, #1
 8004cf8:	d0c2      	beq.n	8004c80 <HAL_TIM_OC_Start+0xc>
 8004cfa:	e7e6      	b.n	8004cca <HAL_TIM_OC_Start+0x56>
 8004cfc:	40010800 	.word	0x40010800
 8004d00:	40011400 	.word	0x40011400

08004d04 <HAL_TIM_OC_Stop>:
{
 8004d04:	b570      	push	{r4, r5, r6, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d06:	2501      	movs	r5, #1
 8004d08:	241f      	movs	r4, #31
 8004d0a:	002e      	movs	r6, r5
 8004d0c:	400c      	ands	r4, r1
 8004d0e:	40a6      	lsls	r6, r4
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d10:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	43b2      	bics	r2, r6
 8004d16:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 8004d1c:	6a1c      	ldr	r4, [r3, #32]
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <HAL_TIM_OC_Stop+0x54>)
 8004d20:	4214      	tst	r4, r2
 8004d22:	d102      	bne.n	8004d2a <HAL_TIM_OC_Stop+0x26>
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	43aa      	bics	r2, r5
 8004d28:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d2a:	2900      	cmp	r1, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_TIM_OC_Stop+0x34>
 8004d2e:	233a      	movs	r3, #58	; 0x3a
 8004d30:	2201      	movs	r2, #1
 8004d32:	54c2      	strb	r2, [r0, r3]
}
 8004d34:	2000      	movs	r0, #0
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	2904      	cmp	r1, #4
 8004d3a:	d005      	beq.n	8004d48 <HAL_TIM_OC_Stop+0x44>
 8004d3c:	2908      	cmp	r1, #8
 8004d3e:	d007      	beq.n	8004d50 <HAL_TIM_OC_Stop+0x4c>
 8004d40:	233d      	movs	r3, #61	; 0x3d
 8004d42:	2201      	movs	r2, #1
 8004d44:	54c2      	strb	r2, [r0, r3]
 8004d46:	e7f5      	b.n	8004d34 <HAL_TIM_OC_Stop+0x30>
 8004d48:	233b      	movs	r3, #59	; 0x3b
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	54c2      	strb	r2, [r0, r3]
 8004d4e:	e7f1      	b.n	8004d34 <HAL_TIM_OC_Stop+0x30>
 8004d50:	233c      	movs	r3, #60	; 0x3c
 8004d52:	2201      	movs	r2, #1
 8004d54:	54c2      	strb	r2, [r0, r3]
 8004d56:	e7ed      	b.n	8004d34 <HAL_TIM_OC_Stop+0x30>
 8004d58:	00001111 	.word	0x00001111

08004d5c <HAL_TIM_PWM_Init>:
{
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004d60:	d01e      	beq.n	8004da0 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d62:	2339      	movs	r3, #57	; 0x39
 8004d64:	5cc3      	ldrb	r3, [r0, r3]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d014      	beq.n	8004d96 <HAL_TIM_PWM_Init+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d70:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d74:	c901      	ldmia	r1!, {r0}
 8004d76:	f7ff ff2d 	bl	8004bd4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	223e      	movs	r2, #62	; 0x3e
  return HAL_OK;
 8004d7e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d80:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d82:	3a04      	subs	r2, #4
 8004d84:	54a3      	strb	r3, [r4, r2]
 8004d86:	3201      	adds	r2, #1
 8004d88:	54a3      	strb	r3, [r4, r2]
 8004d8a:	3201      	adds	r2, #1
 8004d8c:	54a3      	strb	r3, [r4, r2]
 8004d8e:	3201      	adds	r2, #1
 8004d90:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004d92:	5563      	strb	r3, [r4, r5]
}
 8004d94:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d96:	3338      	adds	r3, #56	; 0x38
 8004d98:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004d9a:	f7fe fcd5 	bl	8003748 <HAL_TIM_PWM_MspInit>
 8004d9e:	e7e5      	b.n	8004d6c <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8004da0:	2001      	movs	r0, #1
 8004da2:	e7f7      	b.n	8004d94 <HAL_TIM_PWM_Init+0x38>

08004da4 <HAL_TIM_PWM_Start>:
 8004da4:	b510      	push	{r4, lr}
 8004da6:	f7ff ff65 	bl	8004c74 <HAL_TIM_OC_Start>
 8004daa:	bd10      	pop	{r4, pc}

08004dac <HAL_TIM_PWM_Stop>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	f7ff ffa9 	bl	8004d04 <HAL_TIM_OC_Stop>
 8004db2:	bd10      	pop	{r4, pc}

08004db4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004db4:	2338      	movs	r3, #56	; 0x38
{
 8004db6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004db8:	5cc4      	ldrb	r4, [r0, r3]
{
 8004dba:	0005      	movs	r5, r0
  __HAL_LOCK(htim);
 8004dbc:	2c01      	cmp	r4, #1
 8004dbe:	d100      	bne.n	8004dc2 <HAL_TIM_PWM_ConfigChannel+0xe>
 8004dc0:	e0a3      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x156>
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	54e8      	strb	r0, [r5, r3]
  switch (Channel)
 8004dc6:	2a08      	cmp	r2, #8
 8004dc8:	d05a      	beq.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8004dca:	d82f      	bhi.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x78>
 8004dcc:	2a00      	cmp	r2, #0
 8004dce:	d100      	bne.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dd0:	e079      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x112>
 8004dd2:	2a04      	cmp	r2, #4
 8004dd4:	d126      	bne.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x70>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd6:	2010      	movs	r0, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd8:	682b      	ldr	r3, [r5, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dda:	4c4d      	ldr	r4, [pc, #308]	; (8004f10 <HAL_TIM_PWM_ConfigChannel+0x15c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ddc:	6a1a      	ldr	r2, [r3, #32]
 8004dde:	4382      	bics	r2, r0
 8004de0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004de2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004de4:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004de6:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de8:	4004      	ands	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dea:	6808      	ldr	r0, [r1, #0]
 8004dec:	0200      	lsls	r0, r0, #8
 8004dee:	4320      	orrs	r0, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8004df0:	2420      	movs	r4, #32
 8004df2:	43a2      	bics	r2, r4
 8004df4:	0014      	movs	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004df6:	688a      	ldr	r2, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8004df8:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dfa:	0112      	lsls	r2, r2, #4
  TIMx->CCMR1 = tmpccmrx;
 8004dfc:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004dfe:	6848      	ldr	r0, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e00:	4322      	orrs	r2, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8004e02:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004e04:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e06:	2280      	movs	r2, #128	; 0x80
 8004e08:	6998      	ldr	r0, [r3, #24]
 8004e0a:	0112      	lsls	r2, r2, #4
 8004e0c:	4302      	orrs	r2, r0
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	4840      	ldr	r0, [pc, #256]	; (8004f14 <HAL_TIM_PWM_ConfigChannel+0x160>)
 8004e14:	4002      	ands	r2, r0
 8004e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e18:	68ca      	ldr	r2, [r1, #12]
 8004e1a:	6998      	ldr	r0, [r3, #24]
 8004e1c:	0212      	lsls	r2, r2, #8
 8004e1e:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004e20:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e22:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004e24:	2338      	movs	r3, #56	; 0x38
 8004e26:	2200      	movs	r2, #0
 8004e28:	54ea      	strb	r2, [r5, r3]
}
 8004e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	2a0c      	cmp	r2, #12
 8004e30:	d1f8      	bne.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e32:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e34:	4838      	ldr	r0, [pc, #224]	; (8004f18 <HAL_TIM_PWM_ConfigChannel+0x164>)
 8004e36:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e38:	4c35      	ldr	r4, [pc, #212]	; (8004f10 <HAL_TIM_PWM_ConfigChannel+0x15c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e3a:	4002      	ands	r2, r0
 8004e3c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004e3e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004e40:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004e42:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e44:	4004      	ands	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e46:	6808      	ldr	r0, [r1, #0]
 8004e48:	0200      	lsls	r0, r0, #8
 8004e4a:	4320      	orrs	r0, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8004e4c:	4c33      	ldr	r4, [pc, #204]	; (8004f1c <HAL_TIM_PWM_ConfigChannel+0x168>)
 8004e4e:	4014      	ands	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e50:	688a      	ldr	r2, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8004e52:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e54:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8004e56:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004e58:	6848      	ldr	r0, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e5a:	4322      	orrs	r2, r4
  TIMx->CCR4 = OC_Config->Pulse;
 8004e5c:	6418      	str	r0, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004e5e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e60:	2280      	movs	r2, #128	; 0x80
 8004e62:	69d8      	ldr	r0, [r3, #28]
 8004e64:	0112      	lsls	r2, r2, #4
 8004e66:	4302      	orrs	r2, r0
 8004e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	4829      	ldr	r0, [pc, #164]	; (8004f14 <HAL_TIM_PWM_ConfigChannel+0x160>)
 8004e6e:	4002      	ands	r2, r0
 8004e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e72:	68ca      	ldr	r2, [r1, #12]
 8004e74:	69d8      	ldr	r0, [r3, #28]
 8004e76:	0212      	lsls	r2, r2, #8
 8004e78:	4302      	orrs	r2, r0
 8004e7a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2000      	movs	r0, #0
      break;
 8004e7e:	e7d1      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x70>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e80:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e82:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e84:	4c26      	ldr	r4, [pc, #152]	; (8004f20 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8004e86:	6a18      	ldr	r0, [r3, #32]
 8004e88:	4020      	ands	r0, r4
 8004e8a:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004e8c:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004e8e:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004e90:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e92:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8004e94:	680e      	ldr	r6, [r1, #0]
 8004e96:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC3P;
 8004e98:	4e22      	ldr	r6, [pc, #136]	; (8004f24 <HAL_TIM_PWM_ConfigChannel+0x170>)
 8004e9a:	4006      	ands	r6, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e9c:	6888      	ldr	r0, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8004e9e:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ea0:	0200      	lsls	r0, r0, #8
  TIMx->CCMR2 = tmpccmrx;
 8004ea2:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004ea4:	684c      	ldr	r4, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ea6:	4330      	orrs	r0, r6
  TIMx->CCR3 = OC_Config->Pulse;
 8004ea8:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004eaa:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eac:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eae:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eb0:	4302      	orrs	r2, r0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eb2:	2004      	movs	r0, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	4382      	bics	r2, r0
 8004eba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ebc:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	61da      	str	r2, [r3, #28]
      break;
 8004ec4:	e7ae      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x70>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ec6:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ec8:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	4382      	bics	r2, r0
 8004ece:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004ed0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004ed2:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004ed4:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ed6:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 8004ed8:	680e      	ldr	r6, [r1, #0]
 8004eda:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8004edc:	2602      	movs	r6, #2
 8004ede:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8004ee0:	688e      	ldr	r6, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8004ee2:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ee4:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004ee6:	6848      	ldr	r0, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8004ee8:	4332      	orrs	r2, r6
  TIMx->CCR1 = OC_Config->Pulse;
 8004eea:	6358      	str	r0, [r3, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eec:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 8004eee:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef0:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef2:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef4:	4302      	orrs	r2, r0
 8004ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	3804      	subs	r0, #4
 8004efc:	4382      	bics	r2, r0
 8004efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f00:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004f02:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f04:	430a      	orrs	r2, r1
 8004f06:	619a      	str	r2, [r3, #24]
      break;
 8004f08:	e78c      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 8004f0a:	2002      	movs	r0, #2
 8004f0c:	e78d      	b.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x76>
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	ffff8cff 	.word	0xffff8cff
 8004f14:	fffffbff 	.word	0xfffffbff
 8004f18:	ffffefff 	.word	0xffffefff
 8004f1c:	ffffdfff 	.word	0xffffdfff
 8004f20:	fffffeff 	.word	0xfffffeff
 8004f24:	fffffdff 	.word	0xfffffdff

08004f28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f28:	2338      	movs	r3, #56	; 0x38
{
 8004f2a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004f2c:	5cc3      	ldrb	r3, [r0, r3]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d021      	beq.n	8004f76 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f32:	2339      	movs	r3, #57	; 0x39
 8004f34:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f36:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004f3e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f40:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f42:	680d      	ldr	r5, [r1, #0]
 8004f44:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	05d2      	lsls	r2, r2, #23
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d005      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004f50:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d002      	beq.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004f56:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d104      	bne.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5c:	2280      	movs	r2, #128	; 0x80
 8004f5e:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f60:	684a      	ldr	r2, [r1, #4]
 8004f62:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f64:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f66:	2339      	movs	r3, #57	; 0x39
 8004f68:	2201      	movs	r2, #1
 8004f6a:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004f72:	2000      	movs	r0, #0
}
 8004f74:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004f76:	2002      	movs	r0, #2
 8004f78:	e7fc      	b.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	40010800 	.word	0x40010800
 8004f80:	40011400 	.word	0x40011400

08004f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f84:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f86:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f90:	6801      	ldr	r1, [r0, #0]
 8004f92:	4d12      	ldr	r5, [pc, #72]	; (8004fdc <UART_EndRxTransfer+0x58>)
 8004f94:	680b      	ldr	r3, [r1, #0]
 8004f96:	402b      	ands	r3, r5
 8004f98:	600b      	str	r3, [r1, #0]
 8004f9a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	6801      	ldr	r1, [r0, #0]
 8004fa8:	688b      	ldr	r3, [r1, #8]
 8004faa:	4393      	bics	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10a      	bne.n	8004fce <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbc:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc0:	2410      	movs	r4, #16
 8004fc2:	6802      	ldr	r2, [r0, #0]
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	43a3      	bics	r3, r4
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fce:	2320      	movs	r3, #32
 8004fd0:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fd6:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004fd8:	bd30      	pop	{r4, r5, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	fffffedf 	.word	0xfffffedf

08004fe0 <HAL_UART_Transmit_DMA>:
{
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe4:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8004fe6:	0004      	movs	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe8:	2a20      	cmp	r2, #32
 8004fea:	d136      	bne.n	800505a <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d032      	beq.n	8005056 <HAL_UART_Transmit_DMA+0x76>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d030      	beq.n	8005056 <HAL_UART_Transmit_DMA+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff4:	2280      	movs	r2, #128	; 0x80
 8004ff6:	6880      	ldr	r0, [r0, #8]
 8004ff8:	0152      	lsls	r2, r2, #5
 8004ffa:	4290      	cmp	r0, r2
 8004ffc:	d026      	beq.n	800504c <HAL_UART_Transmit_DMA+0x6c>
    __HAL_LOCK(huart);
 8004ffe:	2574      	movs	r5, #116	; 0x74
 8005000:	5d62      	ldrb	r2, [r4, r5]
 8005002:	2a01      	cmp	r2, #1
 8005004:	d029      	beq.n	800505a <HAL_UART_Transmit_DMA+0x7a>
 8005006:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	2780      	movs	r7, #128	; 0x80
 800500a:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 800500c:	5562      	strb	r2, [r4, r5]
    huart->TxXferSize  = Size;
 800500e:	324f      	adds	r2, #79	; 0x4f
    huart->pTxBuffPtr  = pData;
 8005010:	64e1      	str	r1, [r4, #76]	; 0x4c
    if (huart->hdmatx != NULL)
 8005012:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferSize  = Size;
 8005014:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8005016:	3202      	adds	r2, #2
 8005018:	52a3      	strh	r3, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501a:	3a31      	subs	r2, #49	; 0x31
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	51e6      	str	r6, [r4, r7]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501e:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8005020:	2800      	cmp	r0, #0
 8005022:	d01c      	beq.n	800505e <HAL_UART_Transmit_DMA+0x7e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005024:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_UART_Transmit_DMA+0xa8>)
      huart->hdmatx->XferAbortCallback = NULL;
 8005026:	6386      	str	r6, [r0, #56]	; 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005028:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800502a:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_UART_Transmit_DMA+0xac>)
 800502c:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800502e:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_UART_Transmit_DMA+0xb0>)
 8005030:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	3228      	adds	r2, #40	; 0x28
 8005036:	f7fe fdfd 	bl	8003c34 <HAL_DMA_Start_IT>
 800503a:	2800      	cmp	r0, #0
 800503c:	d00f      	beq.n	800505e <HAL_UART_Transmit_DMA+0x7e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800503e:	2310      	movs	r3, #16
 8005040:	51e3      	str	r3, [r4, r7]
        huart->gState = HAL_UART_STATE_READY;
 8005042:	3310      	adds	r3, #16
        __HAL_UNLOCK(huart);
 8005044:	5566      	strb	r6, [r4, r5]
        return HAL_ERROR;
 8005046:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 8005048:	67a3      	str	r3, [r4, #120]	; 0x78
        return HAL_ERROR;
 800504a:	e005      	b.n	8005058 <HAL_UART_Transmit_DMA+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504c:	6922      	ldr	r2, [r4, #16]
 800504e:	2a00      	cmp	r2, #0
 8005050:	d1d5      	bne.n	8004ffe <HAL_UART_Transmit_DMA+0x1e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005052:	07ca      	lsls	r2, r1, #31
 8005054:	d5d3      	bpl.n	8004ffe <HAL_UART_Transmit_DMA+0x1e>
      return HAL_ERROR;
 8005056:	2001      	movs	r0, #1
}
 8005058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800505a:	2002      	movs	r0, #2
 800505c:	e7fc      	b.n	8005058 <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800505e:	2240      	movs	r2, #64	; 0x40
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005064:	2374      	movs	r3, #116	; 0x74
 8005066:	2200      	movs	r2, #0
 8005068:	54e2      	strb	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506e:	3b73      	subs	r3, #115	; 0x73
 8005070:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005074:	2080      	movs	r0, #128	; 0x80
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	6893      	ldr	r3, [r2, #8]
 800507a:	4303      	orrs	r3, r0
 800507c:	6093      	str	r3, [r2, #8]
 800507e:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 8005082:	2000      	movs	r0, #0
 8005084:	e7e8      	b.n	8005058 <HAL_UART_Transmit_DMA+0x78>
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	08005099 	.word	0x08005099
 800508c:	080050ed 	.word	0x080050ed
 8005090:	080050fd 	.word	0x080050fd

08005094 <HAL_UART_TxCpltCallback>:
 8005094:	4770      	bx	lr
 8005096:	46c0      	nop			; (mov r8, r8)

08005098 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005098:	2220      	movs	r2, #32
{
 800509a:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800509c:	0011      	movs	r1, r2
 800509e:	681b      	ldr	r3, [r3, #0]
{
 80050a0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80050a2:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80050a6:	4019      	ands	r1, r3
 80050a8:	421a      	tst	r2, r3
 80050aa:	d119      	bne.n	80050e0 <UART_DMATransmitCplt+0x48>
  {
    huart->TxXferCount = 0U;
 80050ac:	2352      	movs	r3, #82	; 0x52
 80050ae:	52c1      	strh	r1, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b4:	3a1f      	subs	r2, #31
 80050b6:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ba:	2580      	movs	r5, #128	; 0x80
 80050bc:	6801      	ldr	r1, [r0, #0]
 80050be:	688b      	ldr	r3, [r1, #8]
 80050c0:	43ab      	bics	r3, r5
 80050c2:	608b      	str	r3, [r1, #8]
 80050c4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d0:	6802      	ldr	r2, [r0, #0]
 80050d2:	2040      	movs	r0, #64	; 0x40
 80050d4:	6813      	ldr	r3, [r2, #0]
 80050d6:	4303      	orrs	r3, r0
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050de:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_TxCpltCallback(huart);
 80050e0:	f7ff ffd8 	bl	8005094 <HAL_UART_TxCpltCallback>
}
 80050e4:	e7fb      	b.n	80050de <UART_DMATransmitCplt+0x46>
 80050e6:	46c0      	nop			; (mov r8, r8)

080050e8 <HAL_UART_TxHalfCpltCallback>:
 80050e8:	4770      	bx	lr
 80050ea:	46c0      	nop			; (mov r8, r8)

080050ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050ec:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80050ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80050f0:	f7ff fffa 	bl	80050e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)

080050f8 <HAL_UART_ErrorCallback>:
 80050f8:	4770      	bx	lr
 80050fa:	46c0      	nop			; (mov r8, r8)

080050fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050fc:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050fe:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005100:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005102:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005104:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	0612      	lsls	r2, r2, #24
 800510a:	d501      	bpl.n	8005110 <UART_DMAError+0x14>
 800510c:	2821      	cmp	r0, #33	; 0x21
 800510e:	d00d      	beq.n	800512c <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	065b      	lsls	r3, r3, #25
 8005114:	d501      	bpl.n	800511a <UART_DMAError+0x1e>
 8005116:	2922      	cmp	r1, #34	; 0x22
 8005118:	d01b      	beq.n	8005152 <UART_DMAError+0x56>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800511a:	2280      	movs	r2, #128	; 0x80
 800511c:	2110      	movs	r1, #16
 800511e:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005120:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005122:	430b      	orrs	r3, r1
 8005124:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 8005126:	f7ff ffe7 	bl	80050f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800512a:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 800512c:	2352      	movs	r3, #82	; 0x52
 800512e:	2200      	movs	r2, #0
 8005130:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005132:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005136:	3b51      	subs	r3, #81	; 0x51
 8005138:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800513c:	25c0      	movs	r5, #192	; 0xc0
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	6813      	ldr	r3, [r2, #0]
 8005142:	43ab      	bics	r3, r5
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 800514a:	2320      	movs	r3, #32
 800514c:	67a3      	str	r3, [r4, #120]	; 0x78
 800514e:	6823      	ldr	r3, [r4, #0]
}
 8005150:	e7de      	b.n	8005110 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8005152:	235a      	movs	r3, #90	; 0x5a
 8005154:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 8005156:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8005158:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 800515a:	f7ff ff13 	bl	8004f84 <UART_EndRxTransfer>
 800515e:	e7dc      	b.n	800511a <UART_DMAError+0x1e>

08005160 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	225a      	movs	r2, #90	; 0x5a
{
 8005164:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005166:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005168:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800516a:	3a08      	subs	r2, #8
 800516c:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800516e:	f7ff ffc3 	bl	80050f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005172:	bd10      	pop	{r4, pc}

08005174 <HAL_UARTEx_RxEventCallback>:
}
 8005174:	4770      	bx	lr
 8005176:	46c0      	nop			; (mov r8, r8)

08005178 <HAL_UART_IRQHandler>:
{
 8005178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517a:	46d6      	mov	lr, sl
 800517c:	464f      	mov	r7, r9
 800517e:	4646      	mov	r6, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005180:	6802      	ldr	r2, [r0, #0]
{
 8005182:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005184:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005186:	48b1      	ldr	r0, [pc, #708]	; (800544c <HAL_UART_IRQHandler+0x2d4>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005188:	6811      	ldr	r1, [r2, #0]
{
 800518a:	b5c0      	push	{r6, r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800518c:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 800518e:	4203      	tst	r3, r0
 8005190:	d14f      	bne.n	8005232 <HAL_UART_IRQHandler+0xba>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005192:	2020      	movs	r0, #32
 8005194:	4218      	tst	r0, r3
 8005196:	d002      	beq.n	800519e <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005198:	4208      	tst	r0, r1
 800519a:	d000      	beq.n	800519e <HAL_UART_IRQHandler+0x26>
 800519c:	e0be      	b.n	800531c <HAL_UART_IRQHandler+0x1a4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80051a0:	2801      	cmp	r0, #1
 80051a2:	d01c      	beq.n	80051de <HAL_UART_IRQHandler+0x66>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051a4:	2080      	movs	r0, #128	; 0x80
 80051a6:	0340      	lsls	r0, r0, #13
 80051a8:	4203      	tst	r3, r0
 80051aa:	d002      	beq.n	80051b2 <HAL_UART_IRQHandler+0x3a>
 80051ac:	026d      	lsls	r5, r5, #9
 80051ae:	d500      	bpl.n	80051b2 <HAL_UART_IRQHandler+0x3a>
 80051b0:	e0b9      	b.n	8005326 <HAL_UART_IRQHandler+0x1ae>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	421a      	tst	r2, r3
 80051b6:	d10a      	bne.n	80051ce <HAL_UART_IRQHandler+0x56>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051b8:	2240      	movs	r2, #64	; 0x40
 80051ba:	421a      	tst	r2, r3
 80051bc:	d002      	beq.n	80051c4 <HAL_UART_IRQHandler+0x4c>
 80051be:	420a      	tst	r2, r1
 80051c0:	d000      	beq.n	80051c4 <HAL_UART_IRQHandler+0x4c>
 80051c2:	e0b9      	b.n	8005338 <HAL_UART_IRQHandler+0x1c0>
}
 80051c4:	bce0      	pop	{r5, r6, r7}
 80051c6:	46ba      	mov	sl, r7
 80051c8:	46b1      	mov	r9, r6
 80051ca:	46a8      	mov	r8, r5
 80051cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051ce:	420a      	tst	r2, r1
 80051d0:	d0f2      	beq.n	80051b8 <HAL_UART_IRQHandler+0x40>
    if (huart->TxISR != NULL)
 80051d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f5      	beq.n	80051c4 <HAL_UART_IRQHandler+0x4c>
      huart->TxISR(huart);
 80051d8:	0020      	movs	r0, r4
 80051da:	4798      	blx	r3
 80051dc:	e7f2      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051de:	2610      	movs	r6, #16
 80051e0:	421e      	tst	r6, r3
 80051e2:	d0df      	beq.n	80051a4 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051e4:	420e      	tst	r6, r1
 80051e6:	d0dd      	beq.n	80051a4 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	2340      	movs	r3, #64	; 0x40
 80051ea:	001d      	movs	r5, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ec:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ee:	6892      	ldr	r2, [r2, #8]
 80051f0:	4015      	ands	r5, r2
 80051f2:	4213      	tst	r3, r2
 80051f4:	d100      	bne.n	80051f8 <HAL_UART_IRQHandler+0x80>
 80051f6:	e0b9      	b.n	800536c <HAL_UART_IRQHandler+0x1f4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051f8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80051fa:	6815      	ldr	r5, [r2, #0]
 80051fc:	686a      	ldr	r2, [r5, #4]
 80051fe:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005200:	2a00      	cmp	r2, #0
 8005202:	d0df      	beq.n	80051c4 <HAL_UART_IRQHandler+0x4c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005204:	2158      	movs	r1, #88	; 0x58
 8005206:	468a      	mov	sl, r1
 8005208:	5a61      	ldrh	r1, [r4, r1]
 800520a:	4291      	cmp	r1, r2
 800520c:	d9da      	bls.n	80051c4 <HAL_UART_IRQHandler+0x4c>
        huart->RxXferCount = nb_remaining_rx_data;
 800520e:	275a      	movs	r7, #90	; 0x5a
 8005210:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005212:	2220      	movs	r2, #32
 8005214:	0017      	movs	r7, r2
 8005216:	682d      	ldr	r5, [r5, #0]
 8005218:	402f      	ands	r7, r5
 800521a:	46bc      	mov	ip, r7
 800521c:	422a      	tst	r2, r5
 800521e:	d100      	bne.n	8005222 <HAL_UART_IRQHandler+0xaa>
 8005220:	e0e2      	b.n	80053e8 <HAL_UART_IRQHandler+0x270>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005222:	235a      	movs	r3, #90	; 0x5a
 8005224:	5ae3      	ldrh	r3, [r4, r3]
 8005226:	0020      	movs	r0, r4
 8005228:	1ac9      	subs	r1, r1, r3
 800522a:	b289      	uxth	r1, r1
 800522c:	f7ff ffa2 	bl	8005174 <HAL_UARTEx_RxEventCallback>
 8005230:	e7c8      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005232:	2601      	movs	r6, #1
 8005234:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005236:	4886      	ldr	r0, [pc, #536]	; (8005450 <HAL_UART_IRQHandler+0x2d8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005238:	402f      	ands	r7, r5
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800523a:	4008      	ands	r0, r1
 800523c:	4338      	orrs	r0, r7
 800523e:	d0ae      	beq.n	800519e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005240:	421e      	tst	r6, r3
 8005242:	d006      	beq.n	8005252 <HAL_UART_IRQHandler+0xda>
 8005244:	05c8      	lsls	r0, r1, #23
 8005246:	d504      	bpl.n	8005252 <HAL_UART_IRQHandler+0xda>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005248:	2580      	movs	r5, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800524a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800524c:	5960      	ldr	r0, [r4, r5]
 800524e:	4306      	orrs	r6, r0
 8005250:	5166      	str	r6, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005252:	2002      	movs	r0, #2
 8005254:	4218      	tst	r0, r3
 8005256:	d055      	beq.n	8005304 <HAL_UART_IRQHandler+0x18c>
 8005258:	2f00      	cmp	r7, #0
 800525a:	d007      	beq.n	800526c <HAL_UART_IRQHandler+0xf4>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800525c:	2680      	movs	r6, #128	; 0x80
 800525e:	2504      	movs	r5, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005260:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005262:	59a0      	ldr	r0, [r4, r6]
 8005264:	4328      	orrs	r0, r5
 8005266:	51a0      	str	r0, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005268:	421d      	tst	r5, r3
 800526a:	d14f      	bne.n	800530c <HAL_UART_IRQHandler+0x194>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800526c:	2508      	movs	r5, #8
 800526e:	421d      	tst	r5, r3
 8005270:	d008      	beq.n	8005284 <HAL_UART_IRQHandler+0x10c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005272:	2020      	movs	r0, #32
 8005274:	4008      	ands	r0, r1
 8005276:	4307      	orrs	r7, r0
 8005278:	d004      	beq.n	8005284 <HAL_UART_IRQHandler+0x10c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527a:	2680      	movs	r6, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800527c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527e:	59a0      	ldr	r0, [r4, r6]
 8005280:	4305      	orrs	r5, r0
 8005282:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005284:	2080      	movs	r0, #128	; 0x80
 8005286:	0100      	lsls	r0, r0, #4
 8005288:	4203      	tst	r3, r0
 800528a:	d007      	beq.n	800529c <HAL_UART_IRQHandler+0x124>
 800528c:	014d      	lsls	r5, r1, #5
 800528e:	d505      	bpl.n	800529c <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005290:	2580      	movs	r5, #128	; 0x80
 8005292:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005294:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005296:	5960      	ldr	r0, [r4, r5]
 8005298:	4330      	orrs	r0, r6
 800529a:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800529c:	2080      	movs	r0, #128	; 0x80
 800529e:	5820      	ldr	r0, [r4, r0]
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d100      	bne.n	80052a6 <HAL_UART_IRQHandler+0x12e>
 80052a4:	e78e      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052a6:	2020      	movs	r0, #32
 80052a8:	4218      	tst	r0, r3
 80052aa:	d001      	beq.n	80052b0 <HAL_UART_IRQHandler+0x138>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052ac:	4208      	tst	r0, r1
 80052ae:	d156      	bne.n	800535e <HAL_UART_IRQHandler+0x1e6>
      errorcode = huart->ErrorCode;
 80052b0:	2680      	movs	r6, #128	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052b2:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052b4:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 80052b6:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052b8:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052ba:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052bc:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 80052be:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052c0:	431d      	orrs	r5, r3
 80052c2:	d100      	bne.n	80052c6 <HAL_UART_IRQHandler+0x14e>
 80052c4:	e08c      	b.n	80053e0 <HAL_UART_IRQHandler+0x268>
        UART_EndRxTransfer(huart);
 80052c6:	f7ff fe5d 	bl	8004f84 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	421f      	tst	r7, r3
 80052d0:	d02e      	beq.n	8005330 <HAL_UART_IRQHandler+0x1b8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d6:	2301      	movs	r3, #1
 80052d8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	6893      	ldr	r3, [r2, #8]
 80052e0:	43bb      	bics	r3, r7
 80052e2:	6093      	str	r3, [r2, #8]
 80052e4:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80052e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d020      	beq.n	8005330 <HAL_UART_IRQHandler+0x1b8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052ee:	4b59      	ldr	r3, [pc, #356]	; (8005454 <HAL_UART_IRQHandler+0x2dc>)
 80052f0:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052f2:	f7fe fd07 	bl	8003d04 <HAL_DMA_Abort_IT>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d100      	bne.n	80052fc <HAL_UART_IRQHandler+0x184>
 80052fa:	e763      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80052fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005300:	4798      	blx	r3
 8005302:	e75f      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005304:	0758      	lsls	r0, r3, #29
 8005306:	d5b1      	bpl.n	800526c <HAL_UART_IRQHandler+0xf4>
 8005308:	2f00      	cmp	r7, #0
 800530a:	d0af      	beq.n	800526c <HAL_UART_IRQHandler+0xf4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800530c:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800530e:	2580      	movs	r5, #128	; 0x80
 8005310:	2602      	movs	r6, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005312:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005314:	5960      	ldr	r0, [r4, r5]
 8005316:	4330      	orrs	r0, r6
 8005318:	5160      	str	r0, [r4, r5]
 800531a:	e7a7      	b.n	800526c <HAL_UART_IRQHandler+0xf4>
      if (huart->RxISR != NULL)
 800531c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800531e:	2b00      	cmp	r3, #0
 8005320:	d000      	beq.n	8005324 <HAL_UART_IRQHandler+0x1ac>
 8005322:	e759      	b.n	80051d8 <HAL_UART_IRQHandler+0x60>
 8005324:	e74e      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005326:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005328:	0020      	movs	r0, r4
 800532a:	f000 fba5 	bl	8005a78 <HAL_UARTEx_WakeupCallback>
    return;
 800532e:	e749      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
            HAL_UART_ErrorCallback(huart);
 8005330:	0020      	movs	r0, r4
 8005332:	f7ff fee1 	bl	80050f8 <HAL_UART_ErrorCallback>
 8005336:	e745      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005338:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533c:	2301      	movs	r3, #1
 800533e:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005342:	6821      	ldr	r1, [r4, #0]
 8005344:	680b      	ldr	r3, [r1, #0]
 8005346:	4393      	bics	r3, r2
 8005348:	600b      	str	r3, [r1, #0]
 800534a:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800534e:	2320      	movs	r3, #32
 8005350:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005352:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005354:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8005356:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8005358:	f7ff fe9c 	bl	8005094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800535c:	e732      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
        if (huart->RxISR != NULL)
 800535e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0a5      	beq.n	80052b0 <HAL_UART_IRQHandler+0x138>
          huart->RxISR(huart);
 8005364:	0020      	movs	r0, r4
 8005366:	4798      	blx	r3
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	e7a1      	b.n	80052b0 <HAL_UART_IRQHandler+0x138>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800536c:	225a      	movs	r2, #90	; 0x5a
 800536e:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8005370:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005372:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8005374:	2a00      	cmp	r2, #0
 8005376:	d100      	bne.n	800537a <HAL_UART_IRQHandler+0x202>
 8005378:	e724      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800537a:	2258      	movs	r2, #88	; 0x58
 800537c:	5aa1      	ldrh	r1, [r4, r2]
 800537e:	1ac9      	subs	r1, r1, r3
 8005380:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005382:	2900      	cmp	r1, #0
 8005384:	d100      	bne.n	8005388 <HAL_UART_IRQHandler+0x210>
 8005386:	e71d      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	4699      	mov	r9, r3
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4698      	mov	r8, r3
 8005398:	4642      	mov	r2, r8
 800539a:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <HAL_UART_IRQHandler+0x2e0>)
 800539c:	401a      	ands	r2, r3
 800539e:	0013      	movs	r3, r2
 80053a0:	464a      	mov	r2, r9
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ac:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	6893      	ldr	r3, [r2, #8]
 80053b4:	4383      	bics	r3, r0
 80053b6:	6093      	str	r3, [r2, #8]
 80053b8:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 80053bc:	2320      	movs	r3, #32
        huart->RxISR = NULL;
 80053be:	6665      	str	r5, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 80053c0:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	6625      	str	r5, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c8:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	43b3      	bics	r3, r6
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	f385 8810 	msr	PRIMASK, r5
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053d8:	0020      	movs	r0, r4
 80053da:	f7ff fecb 	bl	8005174 <HAL_UARTEx_RxEventCallback>
 80053de:	e6f1      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
        HAL_UART_ErrorCallback(huart);
 80053e0:	f7ff fe8a 	bl	80050f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	51a5      	str	r5, [r4, r6]
 80053e6:	e6ed      	b.n	80051c4 <HAL_UART_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e8:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ec:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053f0:	6825      	ldr	r5, [r4, #0]
 80053f2:	4f1a      	ldr	r7, [pc, #104]	; (800545c <HAL_UART_IRQHandler+0x2e4>)
 80053f4:	6829      	ldr	r1, [r5, #0]
 80053f6:	4039      	ands	r1, r7
 80053f8:	6029      	str	r1, [r5, #0]
 80053fa:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fe:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005402:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	6825      	ldr	r5, [r4, #0]
 8005408:	68a9      	ldr	r1, [r5, #8]
 800540a:	4381      	bics	r1, r0
 800540c:	60a9      	str	r1, [r5, #8]
 800540e:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005412:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	68a9      	ldr	r1, [r5, #8]
 800541e:	4399      	bics	r1, r3
 8005420:	60a9      	str	r1, [r5, #8]
 8005422:	f388 8810 	msr	PRIMASK, r8
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	4663      	mov	r3, ip
          huart->RxState = HAL_UART_STATE_READY;
 8005428:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542a:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	43b3      	bics	r3, r6
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005440:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005442:	f7fe fc3d 	bl	8003cc0 <HAL_DMA_Abort>
 8005446:	4653      	mov	r3, sl
 8005448:	5ae1      	ldrh	r1, [r4, r3]
 800544a:	e6ea      	b.n	8005222 <HAL_UART_IRQHandler+0xaa>
 800544c:	0000080f 	.word	0x0000080f
 8005450:	04000120 	.word	0x04000120
 8005454:	08005161 	.word	0x08005161
 8005458:	fffffedf 	.word	0xfffffedf
 800545c:	fffffeff 	.word	0xfffffeff

08005460 <UART_SetConfig>:
{
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005464:	6925      	ldr	r5, [r4, #16]
 8005466:	68a3      	ldr	r3, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005468:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800546a:	432b      	orrs	r3, r5
 800546c:	6965      	ldr	r5, [r4, #20]
 800546e:	69c1      	ldr	r1, [r0, #28]
 8005470:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005472:	6810      	ldr	r0, [r2, #0]
 8005474:	4d76      	ldr	r5, [pc, #472]	; (8005650 <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005476:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005478:	4028      	ands	r0, r5
 800547a:	4303      	orrs	r3, r0
 800547c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800547e:	6853      	ldr	r3, [r2, #4]
 8005480:	4874      	ldr	r0, [pc, #464]	; (8005654 <UART_SetConfig+0x1f4>)
 8005482:	4003      	ands	r3, r0
 8005484:	68e0      	ldr	r0, [r4, #12]
 8005486:	4303      	orrs	r3, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005488:	4873      	ldr	r0, [pc, #460]	; (8005658 <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800548a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800548c:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800548e:	4282      	cmp	r2, r0
 8005490:	d061      	beq.n	8005556 <UART_SetConfig+0xf6>
    tmpreg |= huart->Init.OneBitSampling;
 8005492:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005494:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005496:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005498:	4d70      	ldr	r5, [pc, #448]	; (800565c <UART_SetConfig+0x1fc>)
 800549a:	4028      	ands	r0, r5
 800549c:	4303      	orrs	r3, r0
 800549e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054a0:	4b6f      	ldr	r3, [pc, #444]	; (8005660 <UART_SetConfig+0x200>)
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d007      	beq.n	80054b6 <UART_SetConfig+0x56>
 80054a6:	4b6f      	ldr	r3, [pc, #444]	; (8005664 <UART_SetConfig+0x204>)
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d014      	beq.n	80054d6 <UART_SetConfig+0x76>
        ret = HAL_ERROR;
 80054ac:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80054b2:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80054b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b6:	4b6c      	ldr	r3, [pc, #432]	; (8005668 <UART_SetConfig+0x208>)
 80054b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054ba:	2303      	movs	r3, #3
 80054bc:	4013      	ands	r3, r2
 80054be:	3b01      	subs	r3, #1
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d800      	bhi.n	80054c6 <UART_SetConfig+0x66>
 80054c4:	e098      	b.n	80055f8 <UART_SetConfig+0x198>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	4299      	cmp	r1, r3
 80054cc:	d100      	bne.n	80054d0 <UART_SetConfig+0x70>
 80054ce:	e0af      	b.n	8005630 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7ff fa52 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
        break;
 80054d4:	e07c      	b.n	80055d0 <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054d6:	4b64      	ldr	r3, [pc, #400]	; (8005668 <UART_SetConfig+0x208>)
 80054d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054da:	230c      	movs	r3, #12
 80054dc:	4013      	ands	r3, r2
 80054de:	4a63      	ldr	r2, [pc, #396]	; (800566c <UART_SetConfig+0x20c>)
 80054e0:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	0212      	lsls	r2, r2, #8
 80054e6:	4291      	cmp	r1, r2
 80054e8:	d018      	beq.n	800551c <UART_SetConfig+0xbc>
    switch (clocksource)
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d8de      	bhi.n	80054ac <UART_SetConfig+0x4c>
 80054ee:	4a60      	ldr	r2, [pc, #384]	; (8005670 <UART_SetConfig+0x210>)
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	58d3      	ldr	r3, [r2, r3]
 80054f4:	469f      	mov	pc, r3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f6:	2080      	movs	r0, #128	; 0x80
 80054f8:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	6861      	ldr	r1, [r4, #4]
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	1818      	adds	r0, r3, r0
 8005502:	f7fa fe13 	bl	800012c <__udivsi3>
 8005506:	0400      	lsls	r0, r0, #16
 8005508:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800550a:	0002      	movs	r2, r0
 800550c:	4b59      	ldr	r3, [pc, #356]	; (8005674 <UART_SetConfig+0x214>)
 800550e:	3a10      	subs	r2, #16
 8005510:	429a      	cmp	r2, r3
 8005512:	d8cb      	bhi.n	80054ac <UART_SetConfig+0x4c>
        huart->Instance->BRR = usartdiv;
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	60d8      	str	r0, [r3, #12]
 8005518:	2000      	movs	r0, #0
 800551a:	e7c8      	b.n	80054ae <UART_SetConfig+0x4e>
    switch (clocksource)
 800551c:	2b08      	cmp	r3, #8
 800551e:	d8c5      	bhi.n	80054ac <UART_SetConfig+0x4c>
 8005520:	4a55      	ldr	r2, [pc, #340]	; (8005678 <UART_SetConfig+0x218>)
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	58d3      	ldr	r3, [r2, r3]
 8005526:	469f      	mov	pc, r3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005528:	2080      	movs	r0, #128	; 0x80
 800552a:	0240      	lsls	r0, r0, #9
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	6861      	ldr	r1, [r4, #4]
 8005530:	085b      	lsrs	r3, r3, #1
 8005532:	1818      	adds	r0, r3, r0
 8005534:	f7fa fdfa 	bl	800012c <__udivsi3>
 8005538:	0403      	lsls	r3, r0, #16
 800553a:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800553c:	494d      	ldr	r1, [pc, #308]	; (8005674 <UART_SetConfig+0x214>)
 800553e:	3a10      	subs	r2, #16
 8005540:	428a      	cmp	r2, r1
 8005542:	d8b3      	bhi.n	80054ac <UART_SetConfig+0x4c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005544:	4a4d      	ldr	r2, [pc, #308]	; (800567c <UART_SetConfig+0x21c>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005546:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005548:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800554a:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800554c:	6822      	ldr	r2, [r4, #0]
 800554e:	4318      	orrs	r0, r3
 8005550:	60d0      	str	r0, [r2, #12]
 8005552:	2000      	movs	r0, #0
 8005554:	e7ab      	b.n	80054ae <UART_SetConfig+0x4e>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005556:	6891      	ldr	r1, [r2, #8]
 8005558:	4840      	ldr	r0, [pc, #256]	; (800565c <UART_SetConfig+0x1fc>)
 800555a:	4001      	ands	r1, r0
 800555c:	430b      	orrs	r3, r1
 800555e:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005560:	22c0      	movs	r2, #192	; 0xc0
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	4840      	ldr	r0, [pc, #256]	; (8005668 <UART_SetConfig+0x208>)
 8005566:	0112      	lsls	r2, r2, #4
 8005568:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800556a:	0109      	lsls	r1, r1, #4
 800556c:	4013      	ands	r3, r2
 800556e:	428b      	cmp	r3, r1
 8005570:	d048      	beq.n	8005604 <UART_SetConfig+0x1a4>
 8005572:	d80c      	bhi.n	800558e <UART_SetConfig+0x12e>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d042      	beq.n	80055fe <UART_SetConfig+0x19e>
 8005578:	2280      	movs	r2, #128	; 0x80
 800557a:	00d2      	lsls	r2, r2, #3
 800557c:	4293      	cmp	r3, r2
 800557e:	d000      	beq.n	8005582 <UART_SetConfig+0x122>
 8005580:	e794      	b.n	80054ac <UART_SetConfig+0x4c>
        pclk = HAL_RCC_GetSysClockFreq();
 8005582:	f7fe fdbb 	bl	80040fc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005586:	2800      	cmp	r0, #0
 8005588:	d106      	bne.n	8005598 <UART_SetConfig+0x138>
 800558a:	2000      	movs	r0, #0
 800558c:	e78f      	b.n	80054ae <UART_SetConfig+0x4e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558e:	4293      	cmp	r3, r2
 8005590:	d000      	beq.n	8005594 <UART_SetConfig+0x134>
 8005592:	e78b      	b.n	80054ac <UART_SetConfig+0x4c>
 8005594:	2080      	movs	r0, #128	; 0x80
 8005596:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005598:	6862      	ldr	r2, [r4, #4]
 800559a:	0053      	lsls	r3, r2, #1
 800559c:	189b      	adds	r3, r3, r2
 800559e:	4283      	cmp	r3, r0
 80055a0:	d900      	bls.n	80055a4 <UART_SetConfig+0x144>
 80055a2:	e783      	b.n	80054ac <UART_SetConfig+0x4c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055a4:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055a6:	4283      	cmp	r3, r0
 80055a8:	d200      	bcs.n	80055ac <UART_SetConfig+0x14c>
 80055aa:	e77f      	b.n	80054ac <UART_SetConfig+0x4c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055ac:	2100      	movs	r1, #0
 80055ae:	0e07      	lsrs	r7, r0, #24
 80055b0:	0206      	lsls	r6, r0, #8
 80055b2:	0850      	lsrs	r0, r2, #1
 80055b4:	2300      	movs	r3, #0
 80055b6:	1980      	adds	r0, r0, r6
 80055b8:	4179      	adcs	r1, r7
 80055ba:	f7fa fe7d 	bl	80002b8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055be:	4b30      	ldr	r3, [pc, #192]	; (8005680 <UART_SetConfig+0x220>)
 80055c0:	18c2      	adds	r2, r0, r3
 80055c2:	4b30      	ldr	r3, [pc, #192]	; (8005684 <UART_SetConfig+0x224>)
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d900      	bls.n	80055ca <UART_SetConfig+0x16a>
 80055c8:	e770      	b.n	80054ac <UART_SetConfig+0x4c>
 80055ca:	e7a3      	b.n	8005514 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 80055cc:	f7fe fd96 	bl	80040fc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d192      	bne.n	80054fa <UART_SetConfig+0x9a>
 80055d4:	2000      	movs	r0, #0
 80055d6:	e76a      	b.n	80054ae <UART_SetConfig+0x4e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d8:	2010      	movs	r0, #16
 80055da:	4b23      	ldr	r3, [pc, #140]	; (8005668 <UART_SetConfig+0x208>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80055e0:	4243      	negs	r3, r0
 80055e2:	4158      	adcs	r0, r3
 80055e4:	4b28      	ldr	r3, [pc, #160]	; (8005688 <UART_SetConfig+0x228>)
 80055e6:	4240      	negs	r0, r0
 80055e8:	4018      	ands	r0, r3
 80055ea:	4b28      	ldr	r3, [pc, #160]	; (800568c <UART_SetConfig+0x22c>)
 80055ec:	469c      	mov	ip, r3
 80055ee:	4460      	add	r0, ip
 80055f0:	e783      	b.n	80054fa <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f2:	f7ff f9b1 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
        break;
 80055f6:	e7eb      	b.n	80055d0 <UART_SetConfig+0x170>
 80055f8:	4a25      	ldr	r2, [pc, #148]	; (8005690 <UART_SetConfig+0x230>)
 80055fa:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80055fc:	e771      	b.n	80054e2 <UART_SetConfig+0x82>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fe:	f7ff f9ab 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
        break;
 8005602:	e7c0      	b.n	8005586 <UART_SetConfig+0x126>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005604:	6803      	ldr	r3, [r0, #0]
 8005606:	2010      	movs	r0, #16
 8005608:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800560a:	4243      	negs	r3, r0
 800560c:	4158      	adcs	r0, r3
 800560e:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <UART_SetConfig+0x228>)
 8005610:	4240      	negs	r0, r0
 8005612:	4018      	ands	r0, r3
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <UART_SetConfig+0x22c>)
 8005616:	469c      	mov	ip, r3
 8005618:	4460      	add	r0, ip
 800561a:	e7bd      	b.n	8005598 <UART_SetConfig+0x138>
        pclk = HAL_RCC_GetSysClockFreq();
 800561c:	f7fe fd6e 	bl	80040fc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005620:	2800      	cmp	r0, #0
 8005622:	d100      	bne.n	8005626 <UART_SetConfig+0x1c6>
 8005624:	e778      	b.n	8005518 <UART_SetConfig+0xb8>
 8005626:	0040      	lsls	r0, r0, #1
 8005628:	e780      	b.n	800552c <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800562a:	f7ff f995 	bl	8004958 <HAL_RCC_GetPCLK1Freq>
        break;
 800562e:	e7f7      	b.n	8005620 <UART_SetConfig+0x1c0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7ff f9a2 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
        break;
 8005634:	e7f4      	b.n	8005620 <UART_SetConfig+0x1c0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005636:	2010      	movs	r0, #16
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <UART_SetConfig+0x208>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4018      	ands	r0, r3
 800563e:	4243      	negs	r3, r0
 8005640:	4158      	adcs	r0, r3
 8005642:	4b14      	ldr	r3, [pc, #80]	; (8005694 <UART_SetConfig+0x234>)
 8005644:	4240      	negs	r0, r0
 8005646:	4018      	ands	r0, r3
 8005648:	4b13      	ldr	r3, [pc, #76]	; (8005698 <UART_SetConfig+0x238>)
 800564a:	469c      	mov	ip, r3
 800564c:	4460      	add	r0, ip
 800564e:	e76d      	b.n	800552c <UART_SetConfig+0xcc>
 8005650:	efff69f3 	.word	0xefff69f3
 8005654:	ffffcfff 	.word	0xffffcfff
 8005658:	40004800 	.word	0x40004800
 800565c:	fffff4ff 	.word	0xfffff4ff
 8005660:	40013800 	.word	0x40013800
 8005664:	40004400 	.word	0x40004400
 8005668:	40021000 	.word	0x40021000
 800566c:	0800736c 	.word	0x0800736c
 8005670:	08007320 	.word	0x08007320
 8005674:	0000ffef 	.word	0x0000ffef
 8005678:	08007344 	.word	0x08007344
 800567c:	0000fff0 	.word	0x0000fff0
 8005680:	fffffd00 	.word	0xfffffd00
 8005684:	000ffcff 	.word	0x000ffcff
 8005688:	00b71b00 	.word	0x00b71b00
 800568c:	003d0900 	.word	0x003d0900
 8005690:	08007368 	.word	0x08007368
 8005694:	016e3600 	.word	0x016e3600
 8005698:	007a1200 	.word	0x007a1200

0800569c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800569c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800569e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a0:	07da      	lsls	r2, r3, #31
 80056a2:	d506      	bpl.n	80056b2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056a4:	6801      	ldr	r1, [r0, #0]
 80056a6:	4c28      	ldr	r4, [pc, #160]	; (8005748 <UART_AdvFeatureConfig+0xac>)
 80056a8:	684a      	ldr	r2, [r1, #4]
 80056aa:	4022      	ands	r2, r4
 80056ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80056ae:	4322      	orrs	r2, r4
 80056b0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056b2:	079a      	lsls	r2, r3, #30
 80056b4:	d506      	bpl.n	80056c4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056b6:	6801      	ldr	r1, [r0, #0]
 80056b8:	4c24      	ldr	r4, [pc, #144]	; (800574c <UART_AdvFeatureConfig+0xb0>)
 80056ba:	684a      	ldr	r2, [r1, #4]
 80056bc:	4022      	ands	r2, r4
 80056be:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80056c0:	4322      	orrs	r2, r4
 80056c2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056c4:	075a      	lsls	r2, r3, #29
 80056c6:	d506      	bpl.n	80056d6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056c8:	6801      	ldr	r1, [r0, #0]
 80056ca:	4c21      	ldr	r4, [pc, #132]	; (8005750 <UART_AdvFeatureConfig+0xb4>)
 80056cc:	684a      	ldr	r2, [r1, #4]
 80056ce:	4022      	ands	r2, r4
 80056d0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80056d2:	4322      	orrs	r2, r4
 80056d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d6:	071a      	lsls	r2, r3, #28
 80056d8:	d506      	bpl.n	80056e8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056da:	6801      	ldr	r1, [r0, #0]
 80056dc:	4c1d      	ldr	r4, [pc, #116]	; (8005754 <UART_AdvFeatureConfig+0xb8>)
 80056de:	684a      	ldr	r2, [r1, #4]
 80056e0:	4022      	ands	r2, r4
 80056e2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80056e4:	4322      	orrs	r2, r4
 80056e6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056e8:	06da      	lsls	r2, r3, #27
 80056ea:	d506      	bpl.n	80056fa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056ec:	6801      	ldr	r1, [r0, #0]
 80056ee:	4c1a      	ldr	r4, [pc, #104]	; (8005758 <UART_AdvFeatureConfig+0xbc>)
 80056f0:	688a      	ldr	r2, [r1, #8]
 80056f2:	4022      	ands	r2, r4
 80056f4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80056f6:	4322      	orrs	r2, r4
 80056f8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056fa:	069a      	lsls	r2, r3, #26
 80056fc:	d506      	bpl.n	800570c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fe:	6801      	ldr	r1, [r0, #0]
 8005700:	4c16      	ldr	r4, [pc, #88]	; (800575c <UART_AdvFeatureConfig+0xc0>)
 8005702:	688a      	ldr	r2, [r1, #8]
 8005704:	4022      	ands	r2, r4
 8005706:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005708:	4322      	orrs	r2, r4
 800570a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800570c:	065a      	lsls	r2, r3, #25
 800570e:	d50a      	bpl.n	8005726 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005710:	6801      	ldr	r1, [r0, #0]
 8005712:	4d13      	ldr	r5, [pc, #76]	; (8005760 <UART_AdvFeatureConfig+0xc4>)
 8005714:	684a      	ldr	r2, [r1, #4]
 8005716:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005718:	402a      	ands	r2, r5
 800571a:	4322      	orrs	r2, r4
 800571c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	0352      	lsls	r2, r2, #13
 8005722:	4294      	cmp	r4, r2
 8005724:	d009      	beq.n	800573a <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005726:	061b      	lsls	r3, r3, #24
 8005728:	d506      	bpl.n	8005738 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572a:	6802      	ldr	r2, [r0, #0]
 800572c:	490d      	ldr	r1, [pc, #52]	; (8005764 <UART_AdvFeatureConfig+0xc8>)
 800572e:	6853      	ldr	r3, [r2, #4]
 8005730:	400b      	ands	r3, r1
 8005732:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005734:	430b      	orrs	r3, r1
 8005736:	6053      	str	r3, [r2, #4]
}
 8005738:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800573a:	684a      	ldr	r2, [r1, #4]
 800573c:	4c0a      	ldr	r4, [pc, #40]	; (8005768 <UART_AdvFeatureConfig+0xcc>)
 800573e:	4022      	ands	r2, r4
 8005740:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005742:	4322      	orrs	r2, r4
 8005744:	604a      	str	r2, [r1, #4]
 8005746:	e7ee      	b.n	8005726 <UART_AdvFeatureConfig+0x8a>
 8005748:	fffdffff 	.word	0xfffdffff
 800574c:	fffeffff 	.word	0xfffeffff
 8005750:	fffbffff 	.word	0xfffbffff
 8005754:	ffff7fff 	.word	0xffff7fff
 8005758:	ffffefff 	.word	0xffffefff
 800575c:	ffffdfff 	.word	0xffffdfff
 8005760:	ffefffff 	.word	0xffefffff
 8005764:	fff7ffff 	.word	0xfff7ffff
 8005768:	ff9fffff 	.word	0xff9fffff

0800576c <UART_WaitOnFlagUntilTimeout>:
{
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	4657      	mov	r7, sl
 8005770:	464e      	mov	r6, r9
 8005772:	4645      	mov	r5, r8
 8005774:	46de      	mov	lr, fp
 8005776:	b5e0      	push	{r5, r6, r7, lr}
 8005778:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800577a:	2204      	movs	r2, #4
 800577c:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	0112      	lsls	r2, r2, #4
{
 8005782:	4699      	mov	r9, r3
 8005784:	4680      	mov	r8, r0
 8005786:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005788:	4693      	mov	fp, r2
{
 800578a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800578c:	6803      	ldr	r3, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578e:	e001      	b.n	8005794 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8005790:	1c7a      	adds	r2, r7, #1
 8005792:	d10d      	bne.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005794:	69dc      	ldr	r4, [r3, #28]
 8005796:	402c      	ands	r4, r5
 8005798:	1b64      	subs	r4, r4, r5
 800579a:	4262      	negs	r2, r4
 800579c:	4154      	adcs	r4, r2
 800579e:	42b4      	cmp	r4, r6
 80057a0:	d0f6      	beq.n	8005790 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80057a2:	2000      	movs	r0, #0
}
 80057a4:	bcf0      	pop	{r4, r5, r6, r7}
 80057a6:	46bb      	mov	fp, r7
 80057a8:	46b2      	mov	sl, r6
 80057aa:	46a9      	mov	r9, r5
 80057ac:	46a0      	mov	r8, r4
 80057ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b0:	f7fe f96c 	bl	8003a8c <HAL_GetTick>
 80057b4:	464b      	mov	r3, r9
 80057b6:	1ac0      	subs	r0, r0, r3
 80057b8:	42b8      	cmp	r0, r7
 80057ba:	d830      	bhi.n	800581e <UART_WaitOnFlagUntilTimeout+0xb2>
 80057bc:	2f00      	cmp	r7, #0
 80057be:	d02e      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057c0:	4643      	mov	r3, r8
 80057c2:	4651      	mov	r1, sl
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4211      	tst	r1, r2
 80057ca:	d0e3      	beq.n	8005794 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057cc:	4659      	mov	r1, fp
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	420a      	tst	r2, r1
 80057d2:	d0df      	beq.n	8005794 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057d4:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057da:	2201      	movs	r2, #1
 80057dc:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e0:	4643      	mov	r3, r8
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	4c1f      	ldr	r4, [pc, #124]	; (8005864 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80057e6:	680b      	ldr	r3, [r1, #0]
 80057e8:	4023      	ands	r3, r4
 80057ea:	600b      	str	r3, [r1, #0]
 80057ec:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f8:	4643      	mov	r3, r8
 80057fa:	6819      	ldr	r1, [r3, #0]
 80057fc:	688b      	ldr	r3, [r1, #8]
 80057fe:	4393      	bics	r3, r2
 8005800:	608b      	str	r3, [r1, #8]
 8005802:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8005806:	2320      	movs	r3, #32
 8005808:	4642      	mov	r2, r8
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800580a:	4641      	mov	r1, r8
          huart->gState = HAL_UART_STATE_READY;
 800580c:	6793      	str	r3, [r2, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800580e:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 8005814:	2200      	movs	r2, #0
 8005816:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 8005818:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800581a:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 800581c:	e7c2      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	2201      	movs	r2, #1
 8005824:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005828:	4643      	mov	r3, r8
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	4c0d      	ldr	r4, [pc, #52]	; (8005864 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800582e:	680b      	ldr	r3, [r1, #0]
 8005830:	4023      	ands	r3, r4
 8005832:	600b      	str	r3, [r1, #0]
 8005834:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005838:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005840:	4643      	mov	r3, r8
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	688b      	ldr	r3, [r1, #8]
 8005846:	4393      	bics	r3, r2
 8005848:	608b      	str	r3, [r1, #8]
 800584a:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800584e:	2320      	movs	r3, #32
 8005850:	4642      	mov	r2, r8
        __HAL_UNLOCK(huart);
 8005852:	4641      	mov	r1, r8
        huart->gState = HAL_UART_STATE_READY;
 8005854:	6793      	str	r3, [r2, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005856:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8005858:	2200      	movs	r2, #0
 800585a:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 800585c:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800585e:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8005860:	e7a0      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x38>
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	fffffe5f 	.word	0xfffffe5f

08005868 <HAL_UART_Receive>:
{
 8005868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586a:	464f      	mov	r7, r9
 800586c:	4646      	mov	r6, r8
 800586e:	46d6      	mov	lr, sl
 8005870:	b5c0      	push	{r6, r7, lr}
 8005872:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8005874:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8005876:	0004      	movs	r4, r0
 8005878:	000d      	movs	r5, r1
 800587a:	0016      	movs	r6, r2
 800587c:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800587e:	2b20      	cmp	r3, #32
 8005880:	d161      	bne.n	8005946 <HAL_UART_Receive+0xde>
    if ((pData == NULL) || (Size == 0U))
 8005882:	2900      	cmp	r1, #0
 8005884:	d058      	beq.n	8005938 <HAL_UART_Receive+0xd0>
 8005886:	2a00      	cmp	r2, #0
 8005888:	d056      	beq.n	8005938 <HAL_UART_Receive+0xd0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	6882      	ldr	r2, [r0, #8]
 800588e:	015b      	lsls	r3, r3, #5
 8005890:	429a      	cmp	r2, r3
 8005892:	d04c      	beq.n	800592e <HAL_UART_Receive+0xc6>
    __HAL_LOCK(huart);
 8005894:	2374      	movs	r3, #116	; 0x74
 8005896:	5ce2      	ldrb	r2, [r4, r3]
 8005898:	2a01      	cmp	r2, #1
 800589a:	d054      	beq.n	8005946 <HAL_UART_Receive+0xde>
 800589c:	2201      	movs	r2, #1
 800589e:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	4699      	mov	r9, r3
 80058a4:	464a      	mov	r2, r9
 80058a6:	3380      	adds	r3, #128	; 0x80
 80058a8:	50e2      	str	r2, [r4, r3]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058aa:	3b5e      	subs	r3, #94	; 0x5e
 80058ac:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ae:	6622      	str	r2, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 80058b0:	f7fe f8ec 	bl	8003a8c <HAL_GetTick>
    huart->RxXferSize  = Size;
 80058b4:	2358      	movs	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80058b6:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 80058b8:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 80058ba:	3302      	adds	r3, #2
 80058bc:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 80058be:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80058c0:	4680      	mov	r8, r0
    UART_MASK_COMPUTATION(huart);
 80058c2:	0152      	lsls	r2, r2, #5
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d040      	beq.n	800594a <HAL_UART_Receive+0xe2>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d154      	bne.n	8005976 <HAL_UART_Receive+0x10e>
 80058cc:	6923      	ldr	r3, [r4, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d145      	bne.n	800595e <HAL_UART_Receive+0xf6>
 80058d2:	235c      	movs	r3, #92	; 0x5c
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	52e2      	strh	r2, [r4, r3]
 80058d8:	33a3      	adds	r3, #163	; 0xa3
 80058da:	4699      	mov	r9, r3
      pdata16bits = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	469a      	mov	sl, r3
    __HAL_UNLOCK(huart);
 80058e0:	2374      	movs	r3, #116	; 0x74
 80058e2:	2200      	movs	r2, #0
 80058e4:	54e2      	strb	r2, [r4, r3]
    while (huart->RxXferCount > 0U)
 80058e6:	3b1a      	subs	r3, #26
 80058e8:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 80058ea:	265a      	movs	r6, #90	; 0x5a
    while (huart->RxXferCount > 0U)
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <HAL_UART_Receive+0x9c>
 80058f0:	e03b      	b.n	800596a <HAL_UART_Receive+0x102>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80058f2:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80058f4:	3501      	adds	r5, #1
      huart->RxXferCount--;
 80058f6:	5ba2      	ldrh	r2, [r4, r6]
 80058f8:	3a01      	subs	r2, #1
 80058fa:	b292      	uxth	r2, r2
 80058fc:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 80058fe:	5ba3      	ldrh	r3, [r4, r6]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d032      	beq.n	800596a <HAL_UART_Receive+0x102>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005904:	4643      	mov	r3, r8
 8005906:	2200      	movs	r2, #0
 8005908:	2120      	movs	r1, #32
 800590a:	0020      	movs	r0, r4
 800590c:	9700      	str	r7, [sp, #0]
 800590e:	f7ff ff2d 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 8005912:	2800      	cmp	r0, #0
 8005914:	d12d      	bne.n	8005972 <HAL_UART_Receive+0x10a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005916:	464a      	mov	r2, r9
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 800591e:	2d00      	cmp	r5, #0
 8005920:	d1e7      	bne.n	80058f2 <HAL_UART_Receive+0x8a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005922:	4652      	mov	r2, sl
 8005924:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 8005926:	2302      	movs	r3, #2
 8005928:	469c      	mov	ip, r3
 800592a:	44e2      	add	sl, ip
 800592c:	e7e3      	b.n	80058f6 <HAL_UART_Receive+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592e:	6903      	ldr	r3, [r0, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1af      	bne.n	8005894 <HAL_UART_Receive+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005934:	07cb      	lsls	r3, r1, #31
 8005936:	d5ad      	bpl.n	8005894 <HAL_UART_Receive+0x2c>
      return  HAL_ERROR;
 8005938:	2001      	movs	r0, #1
}
 800593a:	b002      	add	sp, #8
 800593c:	bce0      	pop	{r5, r6, r7}
 800593e:	46ba      	mov	sl, r7
 8005940:	46b1      	mov	r9, r6
 8005942:	46a8      	mov	r8, r5
 8005944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005946:	2002      	movs	r0, #2
 8005948:	e7f7      	b.n	800593a <HAL_UART_Receive+0xd2>
    UART_MASK_COMPUTATION(huart);
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1c0      	bne.n	80058d2 <HAL_UART_Receive+0x6a>
 8005950:	225c      	movs	r2, #92	; 0x5c
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <HAL_UART_Receive+0x134>)
 8005954:	46aa      	mov	sl, r5
 8005956:	4699      	mov	r9, r3
      pdata8bits  = NULL;
 8005958:	2500      	movs	r5, #0
 800595a:	52a3      	strh	r3, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595c:	e7c0      	b.n	80058e0 <HAL_UART_Receive+0x78>
    UART_MASK_COMPUTATION(huart);
 800595e:	235c      	movs	r3, #92	; 0x5c
 8005960:	227f      	movs	r2, #127	; 0x7f
 8005962:	52e2      	strh	r2, [r4, r3]
 8005964:	3323      	adds	r3, #35	; 0x23
 8005966:	4699      	mov	r9, r3
 8005968:	e7b8      	b.n	80058dc <HAL_UART_Receive+0x74>
    huart->RxState = HAL_UART_STATE_READY;
 800596a:	2320      	movs	r3, #32
    return HAL_OK;
 800596c:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 800596e:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8005970:	e7e3      	b.n	800593a <HAL_UART_Receive+0xd2>
        return HAL_TIMEOUT;
 8005972:	2003      	movs	r0, #3
 8005974:	e7e1      	b.n	800593a <HAL_UART_Receive+0xd2>
    UART_MASK_COMPUTATION(huart);
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	0552      	lsls	r2, r2, #21
 800597a:	4293      	cmp	r3, r2
 800597c:	d005      	beq.n	800598a <HAL_UART_Receive+0x122>
 800597e:	235c      	movs	r3, #92	; 0x5c
 8005980:	464a      	mov	r2, r9
 8005982:	52e2      	strh	r2, [r4, r3]
 8005984:	2300      	movs	r3, #0
 8005986:	4699      	mov	r9, r3
 8005988:	e7a8      	b.n	80058dc <HAL_UART_Receive+0x74>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0e6      	beq.n	800595e <HAL_UART_Receive+0xf6>
 8005990:	235c      	movs	r3, #92	; 0x5c
 8005992:	223f      	movs	r2, #63	; 0x3f
 8005994:	52e2      	strh	r2, [r4, r3]
 8005996:	3b1d      	subs	r3, #29
 8005998:	4699      	mov	r9, r3
 800599a:	e79f      	b.n	80058dc <HAL_UART_Receive+0x74>
 800599c:	000001ff 	.word	0x000001ff

080059a0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	2200      	movs	r2, #0
{
 80059a4:	b530      	push	{r4, r5, lr}
 80059a6:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a8:	50c2      	str	r2, [r0, r3]
{
 80059aa:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 80059ac:	f7fe f86e 	bl	8003a8c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059b0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80059b2:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	0712      	lsls	r2, r2, #28
 80059b8:	d40c      	bmi.n	80059d4 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	075b      	lsls	r3, r3, #29
 80059be:	d418      	bmi.n	80059f2 <UART_CheckIdleState+0x52>
  huart->gState = HAL_UART_STATE_READY;
 80059c0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80059c2:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 80059c4:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059c6:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	2300      	movs	r3, #0
  return HAL_OK;
 80059ca:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80059ce:	54a3      	strb	r3, [r4, r2]
}
 80059d0:	b003      	add	sp, #12
 80059d2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d4:	2180      	movs	r1, #128	; 0x80
 80059d6:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <UART_CheckIdleState+0x6c>)
 80059d8:	2200      	movs	r2, #0
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	0389      	lsls	r1, r1, #14
 80059de:	0003      	movs	r3, r0
 80059e0:	0020      	movs	r0, r4
 80059e2:	f7ff fec3 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d10e      	bne.n	8005a08 <UART_CheckIdleState+0x68>
 80059ea:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	075b      	lsls	r3, r3, #29
 80059f0:	d5e6      	bpl.n	80059c0 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f2:	2180      	movs	r1, #128	; 0x80
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <UART_CheckIdleState+0x6c>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	0020      	movs	r0, r4
 80059fc:	002b      	movs	r3, r5
 80059fe:	03c9      	lsls	r1, r1, #15
 8005a00:	f7ff feb4 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d0db      	beq.n	80059c0 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8005a08:	2003      	movs	r0, #3
 8005a0a:	e7e1      	b.n	80059d0 <UART_CheckIdleState+0x30>
 8005a0c:	01ffffff 	.word	0x01ffffff

08005a10 <HAL_UART_Init>:
{
 8005a10:	b510      	push	{r4, lr}
 8005a12:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005a14:	d026      	beq.n	8005a64 <HAL_UART_Init+0x54>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a16:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d025      	beq.n	8005a68 <HAL_UART_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 8005a1c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005a1e:	2101      	movs	r1, #1
 8005a20:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a22:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005a24:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a26:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005a28:	438b      	bics	r3, r1
 8005a2a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a2c:	f7ff fd18 	bl	8005460 <UART_SetConfig>
 8005a30:	2801      	cmp	r0, #1
 8005a32:	d017      	beq.n	8005a64 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d110      	bne.n	8005a5c <HAL_UART_Init+0x4c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	490d      	ldr	r1, [pc, #52]	; (8005a74 <HAL_UART_Init+0x64>)
 8005a3e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005a40:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a42:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a44:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	438a      	bics	r2, r1
 8005a4c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	3929      	subs	r1, #41	; 0x29
 8005a52:	430a      	orrs	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005a56:	f7ff ffa3 	bl	80059a0 <UART_CheckIdleState>
}
 8005a5a:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8005a5c:	0020      	movs	r0, r4
 8005a5e:	f7ff fe1d 	bl	800569c <UART_AdvFeatureConfig>
 8005a62:	e7ea      	b.n	8005a3a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005a64:	2001      	movs	r0, #1
 8005a66:	e7f8      	b.n	8005a5a <HAL_UART_Init+0x4a>
    huart->Lock = HAL_UNLOCKED;
 8005a68:	2274      	movs	r2, #116	; 0x74
 8005a6a:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8005a6c:	f7fd fea2 	bl	80037b4 <HAL_UART_MspInit>
 8005a70:	e7d4      	b.n	8005a1c <HAL_UART_Init+0xc>
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	ffffb7ff 	.word	0xffffb7ff

08005a78 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a78:	4770      	bx	lr
 8005a7a:	46c0      	nop			; (mov r8, r8)

08005a7c <__assert_func>:
 8005a7c:	b530      	push	{r4, r5, lr}
 8005a7e:	0014      	movs	r4, r2
 8005a80:	001a      	movs	r2, r3
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <__assert_func+0x2c>)
 8005a84:	0005      	movs	r5, r0
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	b085      	sub	sp, #20
 8005a8a:	68d8      	ldr	r0, [r3, #12]
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <__assert_func+0x30>)
 8005a8e:	2c00      	cmp	r4, #0
 8005a90:	d101      	bne.n	8005a96 <__assert_func+0x1a>
 8005a92:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <__assert_func+0x34>)
 8005a94:	001c      	movs	r4, r3
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	9100      	str	r1, [sp, #0]
 8005a9a:	002b      	movs	r3, r5
 8005a9c:	4905      	ldr	r1, [pc, #20]	; (8005ab4 <__assert_func+0x38>)
 8005a9e:	9402      	str	r4, [sp, #8]
 8005aa0:	f000 f820 	bl	8005ae4 <fiprintf>
 8005aa4:	f000 fe0c 	bl	80066c0 <abort>
 8005aa8:	20000014 	.word	0x20000014
 8005aac:	08007379 	.word	0x08007379
 8005ab0:	080073b4 	.word	0x080073b4
 8005ab4:	08007386 	.word	0x08007386

08005ab8 <atoi>:
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	220a      	movs	r2, #10
 8005abc:	2100      	movs	r1, #0
 8005abe:	f000 fd25 	bl	800650c <strtol>
 8005ac2:	bd10      	pop	{r4, pc}

08005ac4 <calloc>:
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	4b03      	ldr	r3, [pc, #12]	; (8005ad4 <calloc+0x10>)
 8005ac8:	000a      	movs	r2, r1
 8005aca:	0001      	movs	r1, r0
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	f000 f883 	bl	8005bd8 <_calloc_r>
 8005ad2:	bd10      	pop	{r4, pc}
 8005ad4:	20000014 	.word	0x20000014

08005ad8 <__errno>:
 8005ad8:	4b01      	ldr	r3, [pc, #4]	; (8005ae0 <__errno+0x8>)
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	4770      	bx	lr
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	20000014 	.word	0x20000014

08005ae4 <fiprintf>:
 8005ae4:	b40e      	push	{r1, r2, r3}
 8005ae6:	b503      	push	{r0, r1, lr}
 8005ae8:	0001      	movs	r1, r0
 8005aea:	ab03      	add	r3, sp, #12
 8005aec:	4804      	ldr	r0, [pc, #16]	; (8005b00 <fiprintf+0x1c>)
 8005aee:	cb04      	ldmia	r3!, {r2}
 8005af0:	6800      	ldr	r0, [r0, #0]
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	f000 f94e 	bl	8005d94 <_vfiprintf_r>
 8005af8:	b002      	add	sp, #8
 8005afa:	bc08      	pop	{r3}
 8005afc:	b003      	add	sp, #12
 8005afe:	4718      	bx	r3
 8005b00:	20000014 	.word	0x20000014

08005b04 <__libc_init_array>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	2600      	movs	r6, #0
 8005b08:	4d0c      	ldr	r5, [pc, #48]	; (8005b3c <__libc_init_array+0x38>)
 8005b0a:	4c0d      	ldr	r4, [pc, #52]	; (8005b40 <__libc_init_array+0x3c>)
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	42a6      	cmp	r6, r4
 8005b12:	d109      	bne.n	8005b28 <__libc_init_array+0x24>
 8005b14:	2600      	movs	r6, #0
 8005b16:	f001 facd 	bl	80070b4 <_init>
 8005b1a:	4d0a      	ldr	r5, [pc, #40]	; (8005b44 <__libc_init_array+0x40>)
 8005b1c:	4c0a      	ldr	r4, [pc, #40]	; (8005b48 <__libc_init_array+0x44>)
 8005b1e:	1b64      	subs	r4, r4, r5
 8005b20:	10a4      	asrs	r4, r4, #2
 8005b22:	42a6      	cmp	r6, r4
 8005b24:	d105      	bne.n	8005b32 <__libc_init_array+0x2e>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	00b3      	lsls	r3, r6, #2
 8005b2a:	58eb      	ldr	r3, [r5, r3]
 8005b2c:	4798      	blx	r3
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7ee      	b.n	8005b10 <__libc_init_array+0xc>
 8005b32:	00b3      	lsls	r3, r6, #2
 8005b34:	58eb      	ldr	r3, [r5, r3]
 8005b36:	4798      	blx	r3
 8005b38:	3601      	adds	r6, #1
 8005b3a:	e7f2      	b.n	8005b22 <__libc_init_array+0x1e>
 8005b3c:	08007558 	.word	0x08007558
 8005b40:	08007558 	.word	0x08007558
 8005b44:	08007558 	.word	0x08007558
 8005b48:	0800755c 	.word	0x0800755c

08005b4c <malloc>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <malloc+0x10>)
 8005b50:	0001      	movs	r1, r0
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	f000 f898 	bl	8005c88 <_malloc_r>
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	20000014 	.word	0x20000014

08005b60 <free>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <free+0x10>)
 8005b64:	0001      	movs	r1, r0
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	f000 f844 	bl	8005bf4 <_free_r>
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	20000014 	.word	0x20000014

08005b74 <memcmp>:
 8005b74:	b530      	push	{r4, r5, lr}
 8005b76:	2400      	movs	r4, #0
 8005b78:	3901      	subs	r1, #1
 8005b7a:	42a2      	cmp	r2, r4
 8005b7c:	d101      	bne.n	8005b82 <memcmp+0xe>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e005      	b.n	8005b8e <memcmp+0x1a>
 8005b82:	5d03      	ldrb	r3, [r0, r4]
 8005b84:	3401      	adds	r4, #1
 8005b86:	5d0d      	ldrb	r5, [r1, r4]
 8005b88:	42ab      	cmp	r3, r5
 8005b8a:	d0f6      	beq.n	8005b7a <memcmp+0x6>
 8005b8c:	1b58      	subs	r0, r3, r5
 8005b8e:	bd30      	pop	{r4, r5, pc}

08005b90 <memcpy>:
 8005b90:	2300      	movs	r3, #0
 8005b92:	b510      	push	{r4, lr}
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d100      	bne.n	8005b9a <memcpy+0xa>
 8005b98:	bd10      	pop	{r4, pc}
 8005b9a:	5ccc      	ldrb	r4, [r1, r3]
 8005b9c:	54c4      	strb	r4, [r0, r3]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	e7f8      	b.n	8005b94 <memcpy+0x4>

08005ba2 <memmove>:
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	4288      	cmp	r0, r1
 8005ba6:	d902      	bls.n	8005bae <memmove+0xc>
 8005ba8:	188b      	adds	r3, r1, r2
 8005baa:	4298      	cmp	r0, r3
 8005bac:	d303      	bcc.n	8005bb6 <memmove+0x14>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e007      	b.n	8005bc2 <memmove+0x20>
 8005bb2:	5c8b      	ldrb	r3, [r1, r2]
 8005bb4:	5483      	strb	r3, [r0, r2]
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	d2fb      	bcs.n	8005bb2 <memmove+0x10>
 8005bba:	bd10      	pop	{r4, pc}
 8005bbc:	5ccc      	ldrb	r4, [r1, r3]
 8005bbe:	54c4      	strb	r4, [r0, r3]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d1fa      	bne.n	8005bbc <memmove+0x1a>
 8005bc6:	e7f8      	b.n	8005bba <memmove+0x18>

08005bc8 <memset>:
 8005bc8:	0003      	movs	r3, r0
 8005bca:	1882      	adds	r2, r0, r2
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <memset+0xa>
 8005bd0:	4770      	bx	lr
 8005bd2:	7019      	strb	r1, [r3, #0]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	e7f9      	b.n	8005bcc <memset+0x4>

08005bd8 <_calloc_r>:
 8005bd8:	434a      	muls	r2, r1
 8005bda:	b570      	push	{r4, r5, r6, lr}
 8005bdc:	0011      	movs	r1, r2
 8005bde:	0015      	movs	r5, r2
 8005be0:	f000 f852 	bl	8005c88 <_malloc_r>
 8005be4:	1e04      	subs	r4, r0, #0
 8005be6:	d003      	beq.n	8005bf0 <_calloc_r+0x18>
 8005be8:	002a      	movs	r2, r5
 8005bea:	2100      	movs	r1, #0
 8005bec:	f7ff ffec 	bl	8005bc8 <memset>
 8005bf0:	0020      	movs	r0, r4
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}

08005bf4 <_free_r>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	0005      	movs	r5, r0
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d010      	beq.n	8005c1e <_free_r+0x2a>
 8005bfc:	1f0c      	subs	r4, r1, #4
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	da00      	bge.n	8005c06 <_free_r+0x12>
 8005c04:	18e4      	adds	r4, r4, r3
 8005c06:	0028      	movs	r0, r5
 8005c08:	f000 ffac 	bl	8006b64 <__malloc_lock>
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <_free_r+0x90>)
 8005c0e:	6813      	ldr	r3, [r2, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <_free_r+0x2c>
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	6014      	str	r4, [r2, #0]
 8005c18:	0028      	movs	r0, r5
 8005c1a:	f000 ffab 	bl	8006b74 <__malloc_unlock>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d908      	bls.n	8005c36 <_free_r+0x42>
 8005c24:	6821      	ldr	r1, [r4, #0]
 8005c26:	1860      	adds	r0, r4, r1
 8005c28:	4283      	cmp	r3, r0
 8005c2a:	d1f3      	bne.n	8005c14 <_free_r+0x20>
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	1841      	adds	r1, r0, r1
 8005c32:	6021      	str	r1, [r4, #0]
 8005c34:	e7ee      	b.n	8005c14 <_free_r+0x20>
 8005c36:	001a      	movs	r2, r3
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <_free_r+0x4e>
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	d9f9      	bls.n	8005c36 <_free_r+0x42>
 8005c42:	6811      	ldr	r1, [r2, #0]
 8005c44:	1850      	adds	r0, r2, r1
 8005c46:	42a0      	cmp	r0, r4
 8005c48:	d10b      	bne.n	8005c62 <_free_r+0x6e>
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	1809      	adds	r1, r1, r0
 8005c4e:	1850      	adds	r0, r2, r1
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	4283      	cmp	r3, r0
 8005c54:	d1e0      	bne.n	8005c18 <_free_r+0x24>
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	1841      	adds	r1, r0, r1
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	6053      	str	r3, [r2, #4]
 8005c60:	e7da      	b.n	8005c18 <_free_r+0x24>
 8005c62:	42a0      	cmp	r0, r4
 8005c64:	d902      	bls.n	8005c6c <_free_r+0x78>
 8005c66:	230c      	movs	r3, #12
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	e7d5      	b.n	8005c18 <_free_r+0x24>
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	1860      	adds	r0, r4, r1
 8005c70:	4283      	cmp	r3, r0
 8005c72:	d103      	bne.n	8005c7c <_free_r+0x88>
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	1841      	adds	r1, r0, r1
 8005c7a:	6021      	str	r1, [r4, #0]
 8005c7c:	6063      	str	r3, [r4, #4]
 8005c7e:	6054      	str	r4, [r2, #4]
 8005c80:	e7ca      	b.n	8005c18 <_free_r+0x24>
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	20000104 	.word	0x20000104

08005c88 <_malloc_r>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	1ccd      	adds	r5, r1, #3
 8005c8e:	439d      	bics	r5, r3
 8005c90:	3508      	adds	r5, #8
 8005c92:	0006      	movs	r6, r0
 8005c94:	2d0c      	cmp	r5, #12
 8005c96:	d21f      	bcs.n	8005cd8 <_malloc_r+0x50>
 8005c98:	250c      	movs	r5, #12
 8005c9a:	42a9      	cmp	r1, r5
 8005c9c:	d81e      	bhi.n	8005cdc <_malloc_r+0x54>
 8005c9e:	0030      	movs	r0, r6
 8005ca0:	f000 ff60 	bl	8006b64 <__malloc_lock>
 8005ca4:	4925      	ldr	r1, [pc, #148]	; (8005d3c <_malloc_r+0xb4>)
 8005ca6:	680a      	ldr	r2, [r1, #0]
 8005ca8:	0014      	movs	r4, r2
 8005caa:	2c00      	cmp	r4, #0
 8005cac:	d11a      	bne.n	8005ce4 <_malloc_r+0x5c>
 8005cae:	4f24      	ldr	r7, [pc, #144]	; (8005d40 <_malloc_r+0xb8>)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <_malloc_r+0x38>
 8005cb6:	0021      	movs	r1, r4
 8005cb8:	0030      	movs	r0, r6
 8005cba:	f000 fb31 	bl	8006320 <_sbrk_r>
 8005cbe:	6038      	str	r0, [r7, #0]
 8005cc0:	0029      	movs	r1, r5
 8005cc2:	0030      	movs	r0, r6
 8005cc4:	f000 fb2c 	bl	8006320 <_sbrk_r>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d12b      	bne.n	8005d24 <_malloc_r+0x9c>
 8005ccc:	230c      	movs	r3, #12
 8005cce:	0030      	movs	r0, r6
 8005cd0:	6033      	str	r3, [r6, #0]
 8005cd2:	f000 ff4f 	bl	8006b74 <__malloc_unlock>
 8005cd6:	e003      	b.n	8005ce0 <_malloc_r+0x58>
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	dade      	bge.n	8005c9a <_malloc_r+0x12>
 8005cdc:	230c      	movs	r3, #12
 8005cde:	6033      	str	r3, [r6, #0]
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	1b5b      	subs	r3, r3, r5
 8005ce8:	d419      	bmi.n	8005d1e <_malloc_r+0x96>
 8005cea:	2b0b      	cmp	r3, #11
 8005cec:	d903      	bls.n	8005cf6 <_malloc_r+0x6e>
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	18e4      	adds	r4, r4, r3
 8005cf2:	6025      	str	r5, [r4, #0]
 8005cf4:	e003      	b.n	8005cfe <_malloc_r+0x76>
 8005cf6:	6863      	ldr	r3, [r4, #4]
 8005cf8:	42a2      	cmp	r2, r4
 8005cfa:	d10e      	bne.n	8005d1a <_malloc_r+0x92>
 8005cfc:	600b      	str	r3, [r1, #0]
 8005cfe:	0030      	movs	r0, r6
 8005d00:	f000 ff38 	bl	8006b74 <__malloc_unlock>
 8005d04:	0020      	movs	r0, r4
 8005d06:	2207      	movs	r2, #7
 8005d08:	300b      	adds	r0, #11
 8005d0a:	1d23      	adds	r3, r4, #4
 8005d0c:	4390      	bics	r0, r2
 8005d0e:	1ac2      	subs	r2, r0, r3
 8005d10:	4298      	cmp	r0, r3
 8005d12:	d0e6      	beq.n	8005ce2 <_malloc_r+0x5a>
 8005d14:	1a1b      	subs	r3, r3, r0
 8005d16:	50a3      	str	r3, [r4, r2]
 8005d18:	e7e3      	b.n	8005ce2 <_malloc_r+0x5a>
 8005d1a:	6053      	str	r3, [r2, #4]
 8005d1c:	e7ef      	b.n	8005cfe <_malloc_r+0x76>
 8005d1e:	0022      	movs	r2, r4
 8005d20:	6864      	ldr	r4, [r4, #4]
 8005d22:	e7c2      	b.n	8005caa <_malloc_r+0x22>
 8005d24:	2303      	movs	r3, #3
 8005d26:	1cc4      	adds	r4, r0, #3
 8005d28:	439c      	bics	r4, r3
 8005d2a:	42a0      	cmp	r0, r4
 8005d2c:	d0e1      	beq.n	8005cf2 <_malloc_r+0x6a>
 8005d2e:	1a21      	subs	r1, r4, r0
 8005d30:	0030      	movs	r0, r6
 8005d32:	f000 faf5 	bl	8006320 <_sbrk_r>
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d1db      	bne.n	8005cf2 <_malloc_r+0x6a>
 8005d3a:	e7c7      	b.n	8005ccc <_malloc_r+0x44>
 8005d3c:	20000104 	.word	0x20000104
 8005d40:	20000108 	.word	0x20000108

08005d44 <__sfputc_r>:
 8005d44:	6893      	ldr	r3, [r2, #8]
 8005d46:	b510      	push	{r4, lr}
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	6093      	str	r3, [r2, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da04      	bge.n	8005d5a <__sfputc_r+0x16>
 8005d50:	6994      	ldr	r4, [r2, #24]
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	db07      	blt.n	8005d66 <__sfputc_r+0x22>
 8005d56:	290a      	cmp	r1, #10
 8005d58:	d005      	beq.n	8005d66 <__sfputc_r+0x22>
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	1c58      	adds	r0, r3, #1
 8005d5e:	6010      	str	r0, [r2, #0]
 8005d60:	7019      	strb	r1, [r3, #0]
 8005d62:	0008      	movs	r0, r1
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	f000 fbdd 	bl	8006524 <__swbuf_r>
 8005d6a:	0001      	movs	r1, r0
 8005d6c:	e7f9      	b.n	8005d62 <__sfputc_r+0x1e>

08005d6e <__sfputs_r>:
 8005d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d70:	0006      	movs	r6, r0
 8005d72:	000f      	movs	r7, r1
 8005d74:	0014      	movs	r4, r2
 8005d76:	18d5      	adds	r5, r2, r3
 8005d78:	42ac      	cmp	r4, r5
 8005d7a:	d101      	bne.n	8005d80 <__sfputs_r+0x12>
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e007      	b.n	8005d90 <__sfputs_r+0x22>
 8005d80:	7821      	ldrb	r1, [r4, #0]
 8005d82:	003a      	movs	r2, r7
 8005d84:	0030      	movs	r0, r6
 8005d86:	f7ff ffdd 	bl	8005d44 <__sfputc_r>
 8005d8a:	3401      	adds	r4, #1
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d1f3      	bne.n	8005d78 <__sfputs_r+0xa>
 8005d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d94 <_vfiprintf_r>:
 8005d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d96:	b0a1      	sub	sp, #132	; 0x84
 8005d98:	0006      	movs	r6, r0
 8005d9a:	000c      	movs	r4, r1
 8005d9c:	001f      	movs	r7, r3
 8005d9e:	9203      	str	r2, [sp, #12]
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d004      	beq.n	8005dae <_vfiprintf_r+0x1a>
 8005da4:	6983      	ldr	r3, [r0, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <_vfiprintf_r+0x1a>
 8005daa:	f000 fdbf 	bl	800692c <__sinit>
 8005dae:	4b8e      	ldr	r3, [pc, #568]	; (8005fe8 <_vfiprintf_r+0x254>)
 8005db0:	429c      	cmp	r4, r3
 8005db2:	d11c      	bne.n	8005dee <_vfiprintf_r+0x5a>
 8005db4:	6874      	ldr	r4, [r6, #4]
 8005db6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005db8:	07db      	lsls	r3, r3, #31
 8005dba:	d405      	bmi.n	8005dc8 <_vfiprintf_r+0x34>
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	059b      	lsls	r3, r3, #22
 8005dc0:	d402      	bmi.n	8005dc8 <_vfiprintf_r+0x34>
 8005dc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dc4:	f000 fe53 	bl	8006a6e <__retarget_lock_acquire_recursive>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	071b      	lsls	r3, r3, #28
 8005dcc:	d502      	bpl.n	8005dd4 <_vfiprintf_r+0x40>
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d11d      	bne.n	8005e10 <_vfiprintf_r+0x7c>
 8005dd4:	0021      	movs	r1, r4
 8005dd6:	0030      	movs	r0, r6
 8005dd8:	f000 fbfa 	bl	80065d0 <__swsetup_r>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d017      	beq.n	8005e10 <_vfiprintf_r+0x7c>
 8005de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005de2:	07db      	lsls	r3, r3, #31
 8005de4:	d50d      	bpl.n	8005e02 <_vfiprintf_r+0x6e>
 8005de6:	2001      	movs	r0, #1
 8005de8:	4240      	negs	r0, r0
 8005dea:	b021      	add	sp, #132	; 0x84
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dee:	4b7f      	ldr	r3, [pc, #508]	; (8005fec <_vfiprintf_r+0x258>)
 8005df0:	429c      	cmp	r4, r3
 8005df2:	d101      	bne.n	8005df8 <_vfiprintf_r+0x64>
 8005df4:	68b4      	ldr	r4, [r6, #8]
 8005df6:	e7de      	b.n	8005db6 <_vfiprintf_r+0x22>
 8005df8:	4b7d      	ldr	r3, [pc, #500]	; (8005ff0 <_vfiprintf_r+0x25c>)
 8005dfa:	429c      	cmp	r4, r3
 8005dfc:	d1db      	bne.n	8005db6 <_vfiprintf_r+0x22>
 8005dfe:	68f4      	ldr	r4, [r6, #12]
 8005e00:	e7d9      	b.n	8005db6 <_vfiprintf_r+0x22>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	059b      	lsls	r3, r3, #22
 8005e06:	d4ee      	bmi.n	8005de6 <_vfiprintf_r+0x52>
 8005e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0a:	f000 fe31 	bl	8006a70 <__retarget_lock_release_recursive>
 8005e0e:	e7ea      	b.n	8005de6 <_vfiprintf_r+0x52>
 8005e10:	2300      	movs	r3, #0
 8005e12:	ad08      	add	r5, sp, #32
 8005e14:	616b      	str	r3, [r5, #20]
 8005e16:	3320      	adds	r3, #32
 8005e18:	766b      	strb	r3, [r5, #25]
 8005e1a:	3310      	adds	r3, #16
 8005e1c:	76ab      	strb	r3, [r5, #26]
 8005e1e:	9707      	str	r7, [sp, #28]
 8005e20:	9f03      	ldr	r7, [sp, #12]
 8005e22:	783b      	ldrb	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <_vfiprintf_r+0x98>
 8005e28:	2b25      	cmp	r3, #37	; 0x25
 8005e2a:	d14e      	bne.n	8005eca <_vfiprintf_r+0x136>
 8005e2c:	9b03      	ldr	r3, [sp, #12]
 8005e2e:	1afb      	subs	r3, r7, r3
 8005e30:	9305      	str	r3, [sp, #20]
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	429f      	cmp	r7, r3
 8005e36:	d00d      	beq.n	8005e54 <_vfiprintf_r+0xc0>
 8005e38:	9b05      	ldr	r3, [sp, #20]
 8005e3a:	0021      	movs	r1, r4
 8005e3c:	0030      	movs	r0, r6
 8005e3e:	9a03      	ldr	r2, [sp, #12]
 8005e40:	f7ff ff95 	bl	8005d6e <__sfputs_r>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d100      	bne.n	8005e4a <_vfiprintf_r+0xb6>
 8005e48:	e0b5      	b.n	8005fb6 <_vfiprintf_r+0x222>
 8005e4a:	696a      	ldr	r2, [r5, #20]
 8005e4c:	9b05      	ldr	r3, [sp, #20]
 8005e4e:	4694      	mov	ip, r2
 8005e50:	4463      	add	r3, ip
 8005e52:	616b      	str	r3, [r5, #20]
 8005e54:	783b      	ldrb	r3, [r7, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d100      	bne.n	8005e5c <_vfiprintf_r+0xc8>
 8005e5a:	e0ac      	b.n	8005fb6 <_vfiprintf_r+0x222>
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	1c7b      	adds	r3, r7, #1
 8005e60:	9303      	str	r3, [sp, #12]
 8005e62:	2300      	movs	r3, #0
 8005e64:	4252      	negs	r2, r2
 8005e66:	606a      	str	r2, [r5, #4]
 8005e68:	a904      	add	r1, sp, #16
 8005e6a:	3254      	adds	r2, #84	; 0x54
 8005e6c:	1852      	adds	r2, r2, r1
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	60eb      	str	r3, [r5, #12]
 8005e72:	60ab      	str	r3, [r5, #8]
 8005e74:	7013      	strb	r3, [r2, #0]
 8005e76:	65ab      	str	r3, [r5, #88]	; 0x58
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	2205      	movs	r2, #5
 8005e7c:	7819      	ldrb	r1, [r3, #0]
 8005e7e:	485d      	ldr	r0, [pc, #372]	; (8005ff4 <_vfiprintf_r+0x260>)
 8005e80:	f000 fe64 	bl	8006b4c <memchr>
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	1c5f      	adds	r7, r3, #1
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d120      	bne.n	8005ece <_vfiprintf_r+0x13a>
 8005e8c:	682a      	ldr	r2, [r5, #0]
 8005e8e:	06d3      	lsls	r3, r2, #27
 8005e90:	d504      	bpl.n	8005e9c <_vfiprintf_r+0x108>
 8005e92:	2353      	movs	r3, #83	; 0x53
 8005e94:	a904      	add	r1, sp, #16
 8005e96:	185b      	adds	r3, r3, r1
 8005e98:	2120      	movs	r1, #32
 8005e9a:	7019      	strb	r1, [r3, #0]
 8005e9c:	0713      	lsls	r3, r2, #28
 8005e9e:	d504      	bpl.n	8005eaa <_vfiprintf_r+0x116>
 8005ea0:	2353      	movs	r3, #83	; 0x53
 8005ea2:	a904      	add	r1, sp, #16
 8005ea4:	185b      	adds	r3, r3, r1
 8005ea6:	212b      	movs	r1, #43	; 0x2b
 8005ea8:	7019      	strb	r1, [r3, #0]
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb0:	d016      	beq.n	8005ee0 <_vfiprintf_r+0x14c>
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	68eb      	ldr	r3, [r5, #12]
 8005eb6:	9f03      	ldr	r7, [sp, #12]
 8005eb8:	783a      	ldrb	r2, [r7, #0]
 8005eba:	1c78      	adds	r0, r7, #1
 8005ebc:	3a30      	subs	r2, #48	; 0x30
 8005ebe:	4684      	mov	ip, r0
 8005ec0:	2a09      	cmp	r2, #9
 8005ec2:	d94f      	bls.n	8005f64 <_vfiprintf_r+0x1d0>
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d111      	bne.n	8005eec <_vfiprintf_r+0x158>
 8005ec8:	e017      	b.n	8005efa <_vfiprintf_r+0x166>
 8005eca:	3701      	adds	r7, #1
 8005ecc:	e7a9      	b.n	8005e22 <_vfiprintf_r+0x8e>
 8005ece:	4b49      	ldr	r3, [pc, #292]	; (8005ff4 <_vfiprintf_r+0x260>)
 8005ed0:	682a      	ldr	r2, [r5, #0]
 8005ed2:	1ac0      	subs	r0, r0, r3
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4083      	lsls	r3, r0
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	9703      	str	r7, [sp, #12]
 8005ede:	e7cb      	b.n	8005e78 <_vfiprintf_r+0xe4>
 8005ee0:	9b07      	ldr	r3, [sp, #28]
 8005ee2:	1d19      	adds	r1, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	9107      	str	r1, [sp, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db01      	blt.n	8005ef0 <_vfiprintf_r+0x15c>
 8005eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eee:	e004      	b.n	8005efa <_vfiprintf_r+0x166>
 8005ef0:	425b      	negs	r3, r3
 8005ef2:	60eb      	str	r3, [r5, #12]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	602b      	str	r3, [r5, #0]
 8005efa:	783b      	ldrb	r3, [r7, #0]
 8005efc:	2b2e      	cmp	r3, #46	; 0x2e
 8005efe:	d10a      	bne.n	8005f16 <_vfiprintf_r+0x182>
 8005f00:	787b      	ldrb	r3, [r7, #1]
 8005f02:	2b2a      	cmp	r3, #42	; 0x2a
 8005f04:	d137      	bne.n	8005f76 <_vfiprintf_r+0x1e2>
 8005f06:	9b07      	ldr	r3, [sp, #28]
 8005f08:	3702      	adds	r7, #2
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	9207      	str	r2, [sp, #28]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	db2d      	blt.n	8005f70 <_vfiprintf_r+0x1dc>
 8005f14:	9309      	str	r3, [sp, #36]	; 0x24
 8005f16:	2203      	movs	r2, #3
 8005f18:	7839      	ldrb	r1, [r7, #0]
 8005f1a:	4837      	ldr	r0, [pc, #220]	; (8005ff8 <_vfiprintf_r+0x264>)
 8005f1c:	f000 fe16 	bl	8006b4c <memchr>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d007      	beq.n	8005f34 <_vfiprintf_r+0x1a0>
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <_vfiprintf_r+0x264>)
 8005f26:	682a      	ldr	r2, [r5, #0]
 8005f28:	1ac0      	subs	r0, r0, r3
 8005f2a:	2340      	movs	r3, #64	; 0x40
 8005f2c:	4083      	lsls	r3, r0
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	3701      	adds	r7, #1
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	7839      	ldrb	r1, [r7, #0]
 8005f36:	1c7b      	adds	r3, r7, #1
 8005f38:	2206      	movs	r2, #6
 8005f3a:	4830      	ldr	r0, [pc, #192]	; (8005ffc <_vfiprintf_r+0x268>)
 8005f3c:	9303      	str	r3, [sp, #12]
 8005f3e:	7629      	strb	r1, [r5, #24]
 8005f40:	f000 fe04 	bl	8006b4c <memchr>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d045      	beq.n	8005fd4 <_vfiprintf_r+0x240>
 8005f48:	4b2d      	ldr	r3, [pc, #180]	; (8006000 <_vfiprintf_r+0x26c>)
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d127      	bne.n	8005f9e <_vfiprintf_r+0x20a>
 8005f4e:	2207      	movs	r2, #7
 8005f50:	9b07      	ldr	r3, [sp, #28]
 8005f52:	3307      	adds	r3, #7
 8005f54:	4393      	bics	r3, r2
 8005f56:	3308      	adds	r3, #8
 8005f58:	9307      	str	r3, [sp, #28]
 8005f5a:	696b      	ldr	r3, [r5, #20]
 8005f5c:	9a04      	ldr	r2, [sp, #16]
 8005f5e:	189b      	adds	r3, r3, r2
 8005f60:	616b      	str	r3, [r5, #20]
 8005f62:	e75d      	b.n	8005e20 <_vfiprintf_r+0x8c>
 8005f64:	210a      	movs	r1, #10
 8005f66:	434b      	muls	r3, r1
 8005f68:	4667      	mov	r7, ip
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	3909      	subs	r1, #9
 8005f6e:	e7a3      	b.n	8005eb8 <_vfiprintf_r+0x124>
 8005f70:	2301      	movs	r3, #1
 8005f72:	425b      	negs	r3, r3
 8005f74:	e7ce      	b.n	8005f14 <_vfiprintf_r+0x180>
 8005f76:	2300      	movs	r3, #0
 8005f78:	001a      	movs	r2, r3
 8005f7a:	3701      	adds	r7, #1
 8005f7c:	606b      	str	r3, [r5, #4]
 8005f7e:	7839      	ldrb	r1, [r7, #0]
 8005f80:	1c78      	adds	r0, r7, #1
 8005f82:	3930      	subs	r1, #48	; 0x30
 8005f84:	4684      	mov	ip, r0
 8005f86:	2909      	cmp	r1, #9
 8005f88:	d903      	bls.n	8005f92 <_vfiprintf_r+0x1fe>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0c3      	beq.n	8005f16 <_vfiprintf_r+0x182>
 8005f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f90:	e7c1      	b.n	8005f16 <_vfiprintf_r+0x182>
 8005f92:	230a      	movs	r3, #10
 8005f94:	435a      	muls	r2, r3
 8005f96:	4667      	mov	r7, ip
 8005f98:	1852      	adds	r2, r2, r1
 8005f9a:	3b09      	subs	r3, #9
 8005f9c:	e7ef      	b.n	8005f7e <_vfiprintf_r+0x1ea>
 8005f9e:	ab07      	add	r3, sp, #28
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	0022      	movs	r2, r4
 8005fa4:	0029      	movs	r1, r5
 8005fa6:	0030      	movs	r0, r6
 8005fa8:	4b16      	ldr	r3, [pc, #88]	; (8006004 <_vfiprintf_r+0x270>)
 8005faa:	e000      	b.n	8005fae <_vfiprintf_r+0x21a>
 8005fac:	bf00      	nop
 8005fae:	9004      	str	r0, [sp, #16]
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	d1d1      	bne.n	8005f5a <_vfiprintf_r+0x1c6>
 8005fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fb8:	07db      	lsls	r3, r3, #31
 8005fba:	d405      	bmi.n	8005fc8 <_vfiprintf_r+0x234>
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	059b      	lsls	r3, r3, #22
 8005fc0:	d402      	bmi.n	8005fc8 <_vfiprintf_r+0x234>
 8005fc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fc4:	f000 fd54 	bl	8006a70 <__retarget_lock_release_recursive>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	065b      	lsls	r3, r3, #25
 8005fcc:	d500      	bpl.n	8005fd0 <_vfiprintf_r+0x23c>
 8005fce:	e70a      	b.n	8005de6 <_vfiprintf_r+0x52>
 8005fd0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005fd2:	e70a      	b.n	8005dea <_vfiprintf_r+0x56>
 8005fd4:	ab07      	add	r3, sp, #28
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	0022      	movs	r2, r4
 8005fda:	0029      	movs	r1, r5
 8005fdc:	0030      	movs	r0, r6
 8005fde:	4b09      	ldr	r3, [pc, #36]	; (8006004 <_vfiprintf_r+0x270>)
 8005fe0:	f000 f882 	bl	80060e8 <_printf_i>
 8005fe4:	e7e3      	b.n	8005fae <_vfiprintf_r+0x21a>
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	08007510 	.word	0x08007510
 8005fec:	08007530 	.word	0x08007530
 8005ff0:	080074f0 	.word	0x080074f0
 8005ff4:	080073bc 	.word	0x080073bc
 8005ff8:	080073c2 	.word	0x080073c2
 8005ffc:	080073c6 	.word	0x080073c6
 8006000:	00000000 	.word	0x00000000
 8006004:	08005d6f 	.word	0x08005d6f

08006008 <_printf_common>:
 8006008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800600a:	0015      	movs	r5, r2
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	688a      	ldr	r2, [r1, #8]
 8006010:	690b      	ldr	r3, [r1, #16]
 8006012:	000c      	movs	r4, r1
 8006014:	9000      	str	r0, [sp, #0]
 8006016:	4293      	cmp	r3, r2
 8006018:	da00      	bge.n	800601c <_printf_common+0x14>
 800601a:	0013      	movs	r3, r2
 800601c:	0022      	movs	r2, r4
 800601e:	602b      	str	r3, [r5, #0]
 8006020:	3243      	adds	r2, #67	; 0x43
 8006022:	7812      	ldrb	r2, [r2, #0]
 8006024:	2a00      	cmp	r2, #0
 8006026:	d001      	beq.n	800602c <_printf_common+0x24>
 8006028:	3301      	adds	r3, #1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	069b      	lsls	r3, r3, #26
 8006030:	d502      	bpl.n	8006038 <_printf_common+0x30>
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	3302      	adds	r3, #2
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	6822      	ldr	r2, [r4, #0]
 800603a:	2306      	movs	r3, #6
 800603c:	0017      	movs	r7, r2
 800603e:	401f      	ands	r7, r3
 8006040:	421a      	tst	r2, r3
 8006042:	d027      	beq.n	8006094 <_printf_common+0x8c>
 8006044:	0023      	movs	r3, r4
 8006046:	3343      	adds	r3, #67	; 0x43
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	1e5a      	subs	r2, r3, #1
 800604c:	4193      	sbcs	r3, r2
 800604e:	6822      	ldr	r2, [r4, #0]
 8006050:	0692      	lsls	r2, r2, #26
 8006052:	d430      	bmi.n	80060b6 <_printf_common+0xae>
 8006054:	0022      	movs	r2, r4
 8006056:	9901      	ldr	r1, [sp, #4]
 8006058:	9800      	ldr	r0, [sp, #0]
 800605a:	9e08      	ldr	r6, [sp, #32]
 800605c:	3243      	adds	r2, #67	; 0x43
 800605e:	47b0      	blx	r6
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d025      	beq.n	80060b0 <_printf_common+0xa8>
 8006064:	2306      	movs	r3, #6
 8006066:	6820      	ldr	r0, [r4, #0]
 8006068:	682a      	ldr	r2, [r5, #0]
 800606a:	68e1      	ldr	r1, [r4, #12]
 800606c:	2500      	movs	r5, #0
 800606e:	4003      	ands	r3, r0
 8006070:	2b04      	cmp	r3, #4
 8006072:	d103      	bne.n	800607c <_printf_common+0x74>
 8006074:	1a8d      	subs	r5, r1, r2
 8006076:	43eb      	mvns	r3, r5
 8006078:	17db      	asrs	r3, r3, #31
 800607a:	401d      	ands	r5, r3
 800607c:	68a3      	ldr	r3, [r4, #8]
 800607e:	6922      	ldr	r2, [r4, #16]
 8006080:	4293      	cmp	r3, r2
 8006082:	dd01      	ble.n	8006088 <_printf_common+0x80>
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	18ed      	adds	r5, r5, r3
 8006088:	2700      	movs	r7, #0
 800608a:	42bd      	cmp	r5, r7
 800608c:	d120      	bne.n	80060d0 <_printf_common+0xc8>
 800608e:	2000      	movs	r0, #0
 8006090:	e010      	b.n	80060b4 <_printf_common+0xac>
 8006092:	3701      	adds	r7, #1
 8006094:	68e3      	ldr	r3, [r4, #12]
 8006096:	682a      	ldr	r2, [r5, #0]
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	42bb      	cmp	r3, r7
 800609c:	ddd2      	ble.n	8006044 <_printf_common+0x3c>
 800609e:	0022      	movs	r2, r4
 80060a0:	2301      	movs	r3, #1
 80060a2:	9901      	ldr	r1, [sp, #4]
 80060a4:	9800      	ldr	r0, [sp, #0]
 80060a6:	9e08      	ldr	r6, [sp, #32]
 80060a8:	3219      	adds	r2, #25
 80060aa:	47b0      	blx	r6
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d1f0      	bne.n	8006092 <_printf_common+0x8a>
 80060b0:	2001      	movs	r0, #1
 80060b2:	4240      	negs	r0, r0
 80060b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060b6:	2030      	movs	r0, #48	; 0x30
 80060b8:	18e1      	adds	r1, r4, r3
 80060ba:	3143      	adds	r1, #67	; 0x43
 80060bc:	7008      	strb	r0, [r1, #0]
 80060be:	0021      	movs	r1, r4
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	3145      	adds	r1, #69	; 0x45
 80060c4:	7809      	ldrb	r1, [r1, #0]
 80060c6:	18a2      	adds	r2, r4, r2
 80060c8:	3243      	adds	r2, #67	; 0x43
 80060ca:	3302      	adds	r3, #2
 80060cc:	7011      	strb	r1, [r2, #0]
 80060ce:	e7c1      	b.n	8006054 <_printf_common+0x4c>
 80060d0:	0022      	movs	r2, r4
 80060d2:	2301      	movs	r3, #1
 80060d4:	9901      	ldr	r1, [sp, #4]
 80060d6:	9800      	ldr	r0, [sp, #0]
 80060d8:	9e08      	ldr	r6, [sp, #32]
 80060da:	321a      	adds	r2, #26
 80060dc:	47b0      	blx	r6
 80060de:	1c43      	adds	r3, r0, #1
 80060e0:	d0e6      	beq.n	80060b0 <_printf_common+0xa8>
 80060e2:	3701      	adds	r7, #1
 80060e4:	e7d1      	b.n	800608a <_printf_common+0x82>
	...

080060e8 <_printf_i>:
 80060e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ea:	b08b      	sub	sp, #44	; 0x2c
 80060ec:	9206      	str	r2, [sp, #24]
 80060ee:	000a      	movs	r2, r1
 80060f0:	3243      	adds	r2, #67	; 0x43
 80060f2:	9307      	str	r3, [sp, #28]
 80060f4:	9005      	str	r0, [sp, #20]
 80060f6:	9204      	str	r2, [sp, #16]
 80060f8:	7e0a      	ldrb	r2, [r1, #24]
 80060fa:	000c      	movs	r4, r1
 80060fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060fe:	2a78      	cmp	r2, #120	; 0x78
 8006100:	d806      	bhi.n	8006110 <_printf_i+0x28>
 8006102:	2a62      	cmp	r2, #98	; 0x62
 8006104:	d808      	bhi.n	8006118 <_printf_i+0x30>
 8006106:	2a00      	cmp	r2, #0
 8006108:	d100      	bne.n	800610c <_printf_i+0x24>
 800610a:	e0c0      	b.n	800628e <_printf_i+0x1a6>
 800610c:	2a58      	cmp	r2, #88	; 0x58
 800610e:	d052      	beq.n	80061b6 <_printf_i+0xce>
 8006110:	0026      	movs	r6, r4
 8006112:	3642      	adds	r6, #66	; 0x42
 8006114:	7032      	strb	r2, [r6, #0]
 8006116:	e022      	b.n	800615e <_printf_i+0x76>
 8006118:	0010      	movs	r0, r2
 800611a:	3863      	subs	r0, #99	; 0x63
 800611c:	2815      	cmp	r0, #21
 800611e:	d8f7      	bhi.n	8006110 <_printf_i+0x28>
 8006120:	f7f9 fffa 	bl	8000118 <__gnu_thumb1_case_shi>
 8006124:	001f0016 	.word	0x001f0016
 8006128:	fff6fff6 	.word	0xfff6fff6
 800612c:	fff6fff6 	.word	0xfff6fff6
 8006130:	fff6001f 	.word	0xfff6001f
 8006134:	fff6fff6 	.word	0xfff6fff6
 8006138:	00a8fff6 	.word	0x00a8fff6
 800613c:	009a0036 	.word	0x009a0036
 8006140:	fff6fff6 	.word	0xfff6fff6
 8006144:	fff600b9 	.word	0xfff600b9
 8006148:	fff60036 	.word	0xfff60036
 800614c:	009efff6 	.word	0x009efff6
 8006150:	0026      	movs	r6, r4
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	3642      	adds	r6, #66	; 0x42
 8006156:	1d11      	adds	r1, r2, #4
 8006158:	6019      	str	r1, [r3, #0]
 800615a:	6813      	ldr	r3, [r2, #0]
 800615c:	7033      	strb	r3, [r6, #0]
 800615e:	2301      	movs	r3, #1
 8006160:	e0a7      	b.n	80062b2 <_printf_i+0x1ca>
 8006162:	6808      	ldr	r0, [r1, #0]
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	1d0a      	adds	r2, r1, #4
 8006168:	0605      	lsls	r5, r0, #24
 800616a:	d50b      	bpl.n	8006184 <_printf_i+0x9c>
 800616c:	680d      	ldr	r5, [r1, #0]
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	2d00      	cmp	r5, #0
 8006172:	da03      	bge.n	800617c <_printf_i+0x94>
 8006174:	232d      	movs	r3, #45	; 0x2d
 8006176:	9a04      	ldr	r2, [sp, #16]
 8006178:	426d      	negs	r5, r5
 800617a:	7013      	strb	r3, [r2, #0]
 800617c:	4b61      	ldr	r3, [pc, #388]	; (8006304 <_printf_i+0x21c>)
 800617e:	270a      	movs	r7, #10
 8006180:	9303      	str	r3, [sp, #12]
 8006182:	e032      	b.n	80061ea <_printf_i+0x102>
 8006184:	680d      	ldr	r5, [r1, #0]
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	0641      	lsls	r1, r0, #25
 800618a:	d5f1      	bpl.n	8006170 <_printf_i+0x88>
 800618c:	b22d      	sxth	r5, r5
 800618e:	e7ef      	b.n	8006170 <_printf_i+0x88>
 8006190:	680d      	ldr	r5, [r1, #0]
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	1d08      	adds	r0, r1, #4
 8006196:	6018      	str	r0, [r3, #0]
 8006198:	062e      	lsls	r6, r5, #24
 800619a:	d501      	bpl.n	80061a0 <_printf_i+0xb8>
 800619c:	680d      	ldr	r5, [r1, #0]
 800619e:	e003      	b.n	80061a8 <_printf_i+0xc0>
 80061a0:	066d      	lsls	r5, r5, #25
 80061a2:	d5fb      	bpl.n	800619c <_printf_i+0xb4>
 80061a4:	680d      	ldr	r5, [r1, #0]
 80061a6:	b2ad      	uxth	r5, r5
 80061a8:	4b56      	ldr	r3, [pc, #344]	; (8006304 <_printf_i+0x21c>)
 80061aa:	270a      	movs	r7, #10
 80061ac:	9303      	str	r3, [sp, #12]
 80061ae:	2a6f      	cmp	r2, #111	; 0x6f
 80061b0:	d117      	bne.n	80061e2 <_printf_i+0xfa>
 80061b2:	2708      	movs	r7, #8
 80061b4:	e015      	b.n	80061e2 <_printf_i+0xfa>
 80061b6:	3145      	adds	r1, #69	; 0x45
 80061b8:	700a      	strb	r2, [r1, #0]
 80061ba:	4a52      	ldr	r2, [pc, #328]	; (8006304 <_printf_i+0x21c>)
 80061bc:	9203      	str	r2, [sp, #12]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	6821      	ldr	r1, [r4, #0]
 80061c2:	ca20      	ldmia	r2!, {r5}
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	0608      	lsls	r0, r1, #24
 80061c8:	d550      	bpl.n	800626c <_printf_i+0x184>
 80061ca:	07cb      	lsls	r3, r1, #31
 80061cc:	d502      	bpl.n	80061d4 <_printf_i+0xec>
 80061ce:	2320      	movs	r3, #32
 80061d0:	4319      	orrs	r1, r3
 80061d2:	6021      	str	r1, [r4, #0]
 80061d4:	2710      	movs	r7, #16
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	d103      	bne.n	80061e2 <_printf_i+0xfa>
 80061da:	2320      	movs	r3, #32
 80061dc:	6822      	ldr	r2, [r4, #0]
 80061de:	439a      	bics	r2, r3
 80061e0:	6022      	str	r2, [r4, #0]
 80061e2:	0023      	movs	r3, r4
 80061e4:	2200      	movs	r2, #0
 80061e6:	3343      	adds	r3, #67	; 0x43
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	60a3      	str	r3, [r4, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	db03      	blt.n	80061fa <_printf_i+0x112>
 80061f2:	2204      	movs	r2, #4
 80061f4:	6821      	ldr	r1, [r4, #0]
 80061f6:	4391      	bics	r1, r2
 80061f8:	6021      	str	r1, [r4, #0]
 80061fa:	2d00      	cmp	r5, #0
 80061fc:	d102      	bne.n	8006204 <_printf_i+0x11c>
 80061fe:	9e04      	ldr	r6, [sp, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00c      	beq.n	800621e <_printf_i+0x136>
 8006204:	9e04      	ldr	r6, [sp, #16]
 8006206:	0028      	movs	r0, r5
 8006208:	0039      	movs	r1, r7
 800620a:	f7fa f815 	bl	8000238 <__aeabi_uidivmod>
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	3e01      	subs	r6, #1
 8006212:	5c5b      	ldrb	r3, [r3, r1]
 8006214:	7033      	strb	r3, [r6, #0]
 8006216:	002b      	movs	r3, r5
 8006218:	0005      	movs	r5, r0
 800621a:	429f      	cmp	r7, r3
 800621c:	d9f3      	bls.n	8006206 <_printf_i+0x11e>
 800621e:	2f08      	cmp	r7, #8
 8006220:	d109      	bne.n	8006236 <_printf_i+0x14e>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	07db      	lsls	r3, r3, #31
 8006226:	d506      	bpl.n	8006236 <_printf_i+0x14e>
 8006228:	6863      	ldr	r3, [r4, #4]
 800622a:	6922      	ldr	r2, [r4, #16]
 800622c:	4293      	cmp	r3, r2
 800622e:	dc02      	bgt.n	8006236 <_printf_i+0x14e>
 8006230:	2330      	movs	r3, #48	; 0x30
 8006232:	3e01      	subs	r6, #1
 8006234:	7033      	strb	r3, [r6, #0]
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	1b9b      	subs	r3, r3, r6
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	9b07      	ldr	r3, [sp, #28]
 800623e:	0021      	movs	r1, r4
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	9805      	ldr	r0, [sp, #20]
 8006244:	9b06      	ldr	r3, [sp, #24]
 8006246:	aa09      	add	r2, sp, #36	; 0x24
 8006248:	f7ff fede 	bl	8006008 <_printf_common>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d135      	bne.n	80062bc <_printf_i+0x1d4>
 8006250:	2001      	movs	r0, #1
 8006252:	4240      	negs	r0, r0
 8006254:	b00b      	add	sp, #44	; 0x2c
 8006256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006258:	2220      	movs	r2, #32
 800625a:	6809      	ldr	r1, [r1, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	6022      	str	r2, [r4, #0]
 8006260:	0022      	movs	r2, r4
 8006262:	2178      	movs	r1, #120	; 0x78
 8006264:	3245      	adds	r2, #69	; 0x45
 8006266:	7011      	strb	r1, [r2, #0]
 8006268:	4a27      	ldr	r2, [pc, #156]	; (8006308 <_printf_i+0x220>)
 800626a:	e7a7      	b.n	80061bc <_printf_i+0xd4>
 800626c:	0648      	lsls	r0, r1, #25
 800626e:	d5ac      	bpl.n	80061ca <_printf_i+0xe2>
 8006270:	b2ad      	uxth	r5, r5
 8006272:	e7aa      	b.n	80061ca <_printf_i+0xe2>
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	680d      	ldr	r5, [r1, #0]
 8006278:	1d10      	adds	r0, r2, #4
 800627a:	6949      	ldr	r1, [r1, #20]
 800627c:	6018      	str	r0, [r3, #0]
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	062e      	lsls	r6, r5, #24
 8006282:	d501      	bpl.n	8006288 <_printf_i+0x1a0>
 8006284:	6019      	str	r1, [r3, #0]
 8006286:	e002      	b.n	800628e <_printf_i+0x1a6>
 8006288:	066d      	lsls	r5, r5, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0x19c>
 800628c:	8019      	strh	r1, [r3, #0]
 800628e:	2300      	movs	r3, #0
 8006290:	9e04      	ldr	r6, [sp, #16]
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	e7d2      	b.n	800623c <_printf_i+0x154>
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	1d11      	adds	r1, r2, #4
 800629a:	6019      	str	r1, [r3, #0]
 800629c:	6816      	ldr	r6, [r2, #0]
 800629e:	2100      	movs	r1, #0
 80062a0:	0030      	movs	r0, r6
 80062a2:	6862      	ldr	r2, [r4, #4]
 80062a4:	f000 fc52 	bl	8006b4c <memchr>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d001      	beq.n	80062b0 <_printf_i+0x1c8>
 80062ac:	1b80      	subs	r0, r0, r6
 80062ae:	6060      	str	r0, [r4, #4]
 80062b0:	6863      	ldr	r3, [r4, #4]
 80062b2:	6123      	str	r3, [r4, #16]
 80062b4:	2300      	movs	r3, #0
 80062b6:	9a04      	ldr	r2, [sp, #16]
 80062b8:	7013      	strb	r3, [r2, #0]
 80062ba:	e7bf      	b.n	800623c <_printf_i+0x154>
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	0032      	movs	r2, r6
 80062c0:	9906      	ldr	r1, [sp, #24]
 80062c2:	9805      	ldr	r0, [sp, #20]
 80062c4:	9d07      	ldr	r5, [sp, #28]
 80062c6:	47a8      	blx	r5
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d0c1      	beq.n	8006250 <_printf_i+0x168>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	079b      	lsls	r3, r3, #30
 80062d0:	d415      	bmi.n	80062fe <_printf_i+0x216>
 80062d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d4:	68e0      	ldr	r0, [r4, #12]
 80062d6:	4298      	cmp	r0, r3
 80062d8:	dabc      	bge.n	8006254 <_printf_i+0x16c>
 80062da:	0018      	movs	r0, r3
 80062dc:	e7ba      	b.n	8006254 <_printf_i+0x16c>
 80062de:	0022      	movs	r2, r4
 80062e0:	2301      	movs	r3, #1
 80062e2:	9906      	ldr	r1, [sp, #24]
 80062e4:	9805      	ldr	r0, [sp, #20]
 80062e6:	9e07      	ldr	r6, [sp, #28]
 80062e8:	3219      	adds	r2, #25
 80062ea:	47b0      	blx	r6
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d0af      	beq.n	8006250 <_printf_i+0x168>
 80062f0:	3501      	adds	r5, #1
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	42ab      	cmp	r3, r5
 80062fa:	dcf0      	bgt.n	80062de <_printf_i+0x1f6>
 80062fc:	e7e9      	b.n	80062d2 <_printf_i+0x1ea>
 80062fe:	2500      	movs	r5, #0
 8006300:	e7f7      	b.n	80062f2 <_printf_i+0x20a>
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	080073cd 	.word	0x080073cd
 8006308:	080073de 	.word	0x080073de

0800630c <realloc>:
 800630c:	b510      	push	{r4, lr}
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <realloc+0x10>)
 8006310:	000a      	movs	r2, r1
 8006312:	0001      	movs	r1, r0
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	f000 fc35 	bl	8006b84 <_realloc_r>
 800631a:	bd10      	pop	{r4, pc}
 800631c:	20000014 	.word	0x20000014

08006320 <_sbrk_r>:
 8006320:	2300      	movs	r3, #0
 8006322:	b570      	push	{r4, r5, r6, lr}
 8006324:	4d06      	ldr	r5, [pc, #24]	; (8006340 <_sbrk_r+0x20>)
 8006326:	0004      	movs	r4, r0
 8006328:	0008      	movs	r0, r1
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	f7fd faf2 	bl	8003914 <_sbrk>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d103      	bne.n	800633c <_sbrk_r+0x1c>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d000      	beq.n	800633c <_sbrk_r+0x1c>
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	bd70      	pop	{r4, r5, r6, pc}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	20000228 	.word	0x20000228

08006344 <sniprintf>:
 8006344:	b40c      	push	{r2, r3}
 8006346:	b530      	push	{r4, r5, lr}
 8006348:	4b17      	ldr	r3, [pc, #92]	; (80063a8 <sniprintf+0x64>)
 800634a:	000c      	movs	r4, r1
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	b09d      	sub	sp, #116	; 0x74
 8006350:	2900      	cmp	r1, #0
 8006352:	da08      	bge.n	8006366 <sniprintf+0x22>
 8006354:	238b      	movs	r3, #139	; 0x8b
 8006356:	2001      	movs	r0, #1
 8006358:	602b      	str	r3, [r5, #0]
 800635a:	4240      	negs	r0, r0
 800635c:	b01d      	add	sp, #116	; 0x74
 800635e:	bc30      	pop	{r4, r5}
 8006360:	bc08      	pop	{r3}
 8006362:	b002      	add	sp, #8
 8006364:	4718      	bx	r3
 8006366:	2382      	movs	r3, #130	; 0x82
 8006368:	466a      	mov	r2, sp
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	8293      	strh	r3, [r2, #20]
 800636e:	2300      	movs	r3, #0
 8006370:	9002      	str	r0, [sp, #8]
 8006372:	9006      	str	r0, [sp, #24]
 8006374:	4299      	cmp	r1, r3
 8006376:	d000      	beq.n	800637a <sniprintf+0x36>
 8006378:	1e4b      	subs	r3, r1, #1
 800637a:	9304      	str	r3, [sp, #16]
 800637c:	9307      	str	r3, [sp, #28]
 800637e:	2301      	movs	r3, #1
 8006380:	466a      	mov	r2, sp
 8006382:	425b      	negs	r3, r3
 8006384:	82d3      	strh	r3, [r2, #22]
 8006386:	0028      	movs	r0, r5
 8006388:	ab21      	add	r3, sp, #132	; 0x84
 800638a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800638c:	a902      	add	r1, sp, #8
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	f000 fc80 	bl	8006c94 <_svfiprintf_r>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	da01      	bge.n	800639c <sniprintf+0x58>
 8006398:	238b      	movs	r3, #139	; 0x8b
 800639a:	602b      	str	r3, [r5, #0]
 800639c:	2c00      	cmp	r4, #0
 800639e:	d0dd      	beq.n	800635c <sniprintf+0x18>
 80063a0:	2300      	movs	r3, #0
 80063a2:	9a02      	ldr	r2, [sp, #8]
 80063a4:	7013      	strb	r3, [r2, #0]
 80063a6:	e7d9      	b.n	800635c <sniprintf+0x18>
 80063a8:	20000014 	.word	0x20000014

080063ac <strcat>:
 80063ac:	0002      	movs	r2, r0
 80063ae:	b510      	push	{r4, lr}
 80063b0:	7813      	ldrb	r3, [r2, #0]
 80063b2:	0014      	movs	r4, r2
 80063b4:	3201      	adds	r2, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1fa      	bne.n	80063b0 <strcat+0x4>
 80063ba:	5cca      	ldrb	r2, [r1, r3]
 80063bc:	54e2      	strb	r2, [r4, r3]
 80063be:	3301      	adds	r3, #1
 80063c0:	2a00      	cmp	r2, #0
 80063c2:	d1fa      	bne.n	80063ba <strcat+0xe>
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <strncpy>:
 80063c6:	0003      	movs	r3, r0
 80063c8:	b530      	push	{r4, r5, lr}
 80063ca:	001d      	movs	r5, r3
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	d006      	beq.n	80063de <strncpy+0x18>
 80063d0:	780c      	ldrb	r4, [r1, #0]
 80063d2:	3a01      	subs	r2, #1
 80063d4:	3301      	adds	r3, #1
 80063d6:	702c      	strb	r4, [r5, #0]
 80063d8:	3101      	adds	r1, #1
 80063da:	2c00      	cmp	r4, #0
 80063dc:	d1f5      	bne.n	80063ca <strncpy+0x4>
 80063de:	2100      	movs	r1, #0
 80063e0:	189a      	adds	r2, r3, r2
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d100      	bne.n	80063e8 <strncpy+0x22>
 80063e6:	bd30      	pop	{r4, r5, pc}
 80063e8:	7019      	strb	r1, [r3, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	e7f9      	b.n	80063e2 <strncpy+0x1c>
	...

080063f0 <_strtol_l.isra.0>:
 80063f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063f2:	b087      	sub	sp, #28
 80063f4:	001e      	movs	r6, r3
 80063f6:	9005      	str	r0, [sp, #20]
 80063f8:	9101      	str	r1, [sp, #4]
 80063fa:	9202      	str	r2, [sp, #8]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d045      	beq.n	800648c <_strtol_l.isra.0+0x9c>
 8006400:	0008      	movs	r0, r1
 8006402:	2b24      	cmp	r3, #36	; 0x24
 8006404:	d842      	bhi.n	800648c <_strtol_l.isra.0+0x9c>
 8006406:	4b3f      	ldr	r3, [pc, #252]	; (8006504 <_strtol_l.isra.0+0x114>)
 8006408:	2208      	movs	r2, #8
 800640a:	469c      	mov	ip, r3
 800640c:	0003      	movs	r3, r0
 800640e:	4661      	mov	r1, ip
 8006410:	781c      	ldrb	r4, [r3, #0]
 8006412:	1c45      	adds	r5, r0, #1
 8006414:	5d09      	ldrb	r1, [r1, r4]
 8006416:	0028      	movs	r0, r5
 8006418:	000f      	movs	r7, r1
 800641a:	4017      	ands	r7, r2
 800641c:	4211      	tst	r1, r2
 800641e:	d1f5      	bne.n	800640c <_strtol_l.isra.0+0x1c>
 8006420:	2c2d      	cmp	r4, #45	; 0x2d
 8006422:	d13a      	bne.n	800649a <_strtol_l.isra.0+0xaa>
 8006424:	2701      	movs	r7, #1
 8006426:	782c      	ldrb	r4, [r5, #0]
 8006428:	1c9d      	adds	r5, r3, #2
 800642a:	2e00      	cmp	r6, #0
 800642c:	d065      	beq.n	80064fa <_strtol_l.isra.0+0x10a>
 800642e:	2e10      	cmp	r6, #16
 8006430:	d109      	bne.n	8006446 <_strtol_l.isra.0+0x56>
 8006432:	2c30      	cmp	r4, #48	; 0x30
 8006434:	d107      	bne.n	8006446 <_strtol_l.isra.0+0x56>
 8006436:	2220      	movs	r2, #32
 8006438:	782b      	ldrb	r3, [r5, #0]
 800643a:	4393      	bics	r3, r2
 800643c:	2b58      	cmp	r3, #88	; 0x58
 800643e:	d157      	bne.n	80064f0 <_strtol_l.isra.0+0x100>
 8006440:	2610      	movs	r6, #16
 8006442:	786c      	ldrb	r4, [r5, #1]
 8006444:	3502      	adds	r5, #2
 8006446:	4b30      	ldr	r3, [pc, #192]	; (8006508 <_strtol_l.isra.0+0x118>)
 8006448:	0031      	movs	r1, r6
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	0018      	movs	r0, r3
 800644e:	9303      	str	r3, [sp, #12]
 8006450:	f7f9 fef2 	bl	8000238 <__aeabi_uidivmod>
 8006454:	2300      	movs	r3, #0
 8006456:	2201      	movs	r2, #1
 8006458:	4684      	mov	ip, r0
 800645a:	0018      	movs	r0, r3
 800645c:	9104      	str	r1, [sp, #16]
 800645e:	4252      	negs	r2, r2
 8006460:	0021      	movs	r1, r4
 8006462:	3930      	subs	r1, #48	; 0x30
 8006464:	2909      	cmp	r1, #9
 8006466:	d81d      	bhi.n	80064a4 <_strtol_l.isra.0+0xb4>
 8006468:	000c      	movs	r4, r1
 800646a:	42a6      	cmp	r6, r4
 800646c:	dd28      	ble.n	80064c0 <_strtol_l.isra.0+0xd0>
 800646e:	2b00      	cmp	r3, #0
 8006470:	db24      	blt.n	80064bc <_strtol_l.isra.0+0xcc>
 8006472:	0013      	movs	r3, r2
 8006474:	4584      	cmp	ip, r0
 8006476:	d306      	bcc.n	8006486 <_strtol_l.isra.0+0x96>
 8006478:	d102      	bne.n	8006480 <_strtol_l.isra.0+0x90>
 800647a:	9904      	ldr	r1, [sp, #16]
 800647c:	42a1      	cmp	r1, r4
 800647e:	db02      	blt.n	8006486 <_strtol_l.isra.0+0x96>
 8006480:	2301      	movs	r3, #1
 8006482:	4370      	muls	r0, r6
 8006484:	1820      	adds	r0, r4, r0
 8006486:	782c      	ldrb	r4, [r5, #0]
 8006488:	3501      	adds	r5, #1
 800648a:	e7e9      	b.n	8006460 <_strtol_l.isra.0+0x70>
 800648c:	f7ff fb24 	bl	8005ad8 <__errno>
 8006490:	2316      	movs	r3, #22
 8006492:	6003      	str	r3, [r0, #0]
 8006494:	2000      	movs	r0, #0
 8006496:	b007      	add	sp, #28
 8006498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649a:	2c2b      	cmp	r4, #43	; 0x2b
 800649c:	d1c5      	bne.n	800642a <_strtol_l.isra.0+0x3a>
 800649e:	782c      	ldrb	r4, [r5, #0]
 80064a0:	1c9d      	adds	r5, r3, #2
 80064a2:	e7c2      	b.n	800642a <_strtol_l.isra.0+0x3a>
 80064a4:	0021      	movs	r1, r4
 80064a6:	3941      	subs	r1, #65	; 0x41
 80064a8:	2919      	cmp	r1, #25
 80064aa:	d801      	bhi.n	80064b0 <_strtol_l.isra.0+0xc0>
 80064ac:	3c37      	subs	r4, #55	; 0x37
 80064ae:	e7dc      	b.n	800646a <_strtol_l.isra.0+0x7a>
 80064b0:	0021      	movs	r1, r4
 80064b2:	3961      	subs	r1, #97	; 0x61
 80064b4:	2919      	cmp	r1, #25
 80064b6:	d803      	bhi.n	80064c0 <_strtol_l.isra.0+0xd0>
 80064b8:	3c57      	subs	r4, #87	; 0x57
 80064ba:	e7d6      	b.n	800646a <_strtol_l.isra.0+0x7a>
 80064bc:	0013      	movs	r3, r2
 80064be:	e7e2      	b.n	8006486 <_strtol_l.isra.0+0x96>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da09      	bge.n	80064d8 <_strtol_l.isra.0+0xe8>
 80064c4:	2322      	movs	r3, #34	; 0x22
 80064c6:	9a05      	ldr	r2, [sp, #20]
 80064c8:	9803      	ldr	r0, [sp, #12]
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	9b02      	ldr	r3, [sp, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0e1      	beq.n	8006496 <_strtol_l.isra.0+0xa6>
 80064d2:	1e6b      	subs	r3, r5, #1
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	e007      	b.n	80064e8 <_strtol_l.isra.0+0xf8>
 80064d8:	2f00      	cmp	r7, #0
 80064da:	d000      	beq.n	80064de <_strtol_l.isra.0+0xee>
 80064dc:	4240      	negs	r0, r0
 80064de:	9a02      	ldr	r2, [sp, #8]
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d0d8      	beq.n	8006496 <_strtol_l.isra.0+0xa6>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1f4      	bne.n	80064d2 <_strtol_l.isra.0+0xe2>
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	9a01      	ldr	r2, [sp, #4]
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e7d2      	b.n	8006496 <_strtol_l.isra.0+0xa6>
 80064f0:	2430      	movs	r4, #48	; 0x30
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d1a7      	bne.n	8006446 <_strtol_l.isra.0+0x56>
 80064f6:	3608      	adds	r6, #8
 80064f8:	e7a5      	b.n	8006446 <_strtol_l.isra.0+0x56>
 80064fa:	2c30      	cmp	r4, #48	; 0x30
 80064fc:	d09b      	beq.n	8006436 <_strtol_l.isra.0+0x46>
 80064fe:	260a      	movs	r6, #10
 8006500:	e7a1      	b.n	8006446 <_strtol_l.isra.0+0x56>
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	080073f0 	.word	0x080073f0
 8006508:	7fffffff 	.word	0x7fffffff

0800650c <strtol>:
 800650c:	b510      	push	{r4, lr}
 800650e:	0013      	movs	r3, r2
 8006510:	000a      	movs	r2, r1
 8006512:	0001      	movs	r1, r0
 8006514:	4802      	ldr	r0, [pc, #8]	; (8006520 <strtol+0x14>)
 8006516:	6800      	ldr	r0, [r0, #0]
 8006518:	f7ff ff6a 	bl	80063f0 <_strtol_l.isra.0>
 800651c:	bd10      	pop	{r4, pc}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	20000014 	.word	0x20000014

08006524 <__swbuf_r>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	0005      	movs	r5, r0
 8006528:	000e      	movs	r6, r1
 800652a:	0014      	movs	r4, r2
 800652c:	2800      	cmp	r0, #0
 800652e:	d004      	beq.n	800653a <__swbuf_r+0x16>
 8006530:	6983      	ldr	r3, [r0, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <__swbuf_r+0x16>
 8006536:	f000 f9f9 	bl	800692c <__sinit>
 800653a:	4b22      	ldr	r3, [pc, #136]	; (80065c4 <__swbuf_r+0xa0>)
 800653c:	429c      	cmp	r4, r3
 800653e:	d12e      	bne.n	800659e <__swbuf_r+0x7a>
 8006540:	686c      	ldr	r4, [r5, #4]
 8006542:	69a3      	ldr	r3, [r4, #24]
 8006544:	60a3      	str	r3, [r4, #8]
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	071b      	lsls	r3, r3, #28
 800654a:	d532      	bpl.n	80065b2 <__swbuf_r+0x8e>
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d02f      	beq.n	80065b2 <__swbuf_r+0x8e>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	6922      	ldr	r2, [r4, #16]
 8006556:	b2f7      	uxtb	r7, r6
 8006558:	1a98      	subs	r0, r3, r2
 800655a:	6963      	ldr	r3, [r4, #20]
 800655c:	b2f6      	uxtb	r6, r6
 800655e:	4283      	cmp	r3, r0
 8006560:	dc05      	bgt.n	800656e <__swbuf_r+0x4a>
 8006562:	0021      	movs	r1, r4
 8006564:	0028      	movs	r0, r5
 8006566:	f000 f93f 	bl	80067e8 <_fflush_r>
 800656a:	2800      	cmp	r0, #0
 800656c:	d127      	bne.n	80065be <__swbuf_r+0x9a>
 800656e:	68a3      	ldr	r3, [r4, #8]
 8006570:	3001      	adds	r0, #1
 8006572:	3b01      	subs	r3, #1
 8006574:	60a3      	str	r3, [r4, #8]
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	701f      	strb	r7, [r3, #0]
 800657e:	6963      	ldr	r3, [r4, #20]
 8006580:	4283      	cmp	r3, r0
 8006582:	d004      	beq.n	800658e <__swbuf_r+0x6a>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	07db      	lsls	r3, r3, #31
 8006588:	d507      	bpl.n	800659a <__swbuf_r+0x76>
 800658a:	2e0a      	cmp	r6, #10
 800658c:	d105      	bne.n	800659a <__swbuf_r+0x76>
 800658e:	0021      	movs	r1, r4
 8006590:	0028      	movs	r0, r5
 8006592:	f000 f929 	bl	80067e8 <_fflush_r>
 8006596:	2800      	cmp	r0, #0
 8006598:	d111      	bne.n	80065be <__swbuf_r+0x9a>
 800659a:	0030      	movs	r0, r6
 800659c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <__swbuf_r+0xa4>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	d101      	bne.n	80065a8 <__swbuf_r+0x84>
 80065a4:	68ac      	ldr	r4, [r5, #8]
 80065a6:	e7cc      	b.n	8006542 <__swbuf_r+0x1e>
 80065a8:	4b08      	ldr	r3, [pc, #32]	; (80065cc <__swbuf_r+0xa8>)
 80065aa:	429c      	cmp	r4, r3
 80065ac:	d1c9      	bne.n	8006542 <__swbuf_r+0x1e>
 80065ae:	68ec      	ldr	r4, [r5, #12]
 80065b0:	e7c7      	b.n	8006542 <__swbuf_r+0x1e>
 80065b2:	0021      	movs	r1, r4
 80065b4:	0028      	movs	r0, r5
 80065b6:	f000 f80b 	bl	80065d0 <__swsetup_r>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d0c9      	beq.n	8006552 <__swbuf_r+0x2e>
 80065be:	2601      	movs	r6, #1
 80065c0:	4276      	negs	r6, r6
 80065c2:	e7ea      	b.n	800659a <__swbuf_r+0x76>
 80065c4:	08007510 	.word	0x08007510
 80065c8:	08007530 	.word	0x08007530
 80065cc:	080074f0 	.word	0x080074f0

080065d0 <__swsetup_r>:
 80065d0:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <__swsetup_r+0xe0>)
 80065d2:	b570      	push	{r4, r5, r6, lr}
 80065d4:	681d      	ldr	r5, [r3, #0]
 80065d6:	0006      	movs	r6, r0
 80065d8:	000c      	movs	r4, r1
 80065da:	2d00      	cmp	r5, #0
 80065dc:	d005      	beq.n	80065ea <__swsetup_r+0x1a>
 80065de:	69ab      	ldr	r3, [r5, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <__swsetup_r+0x1a>
 80065e4:	0028      	movs	r0, r5
 80065e6:	f000 f9a1 	bl	800692c <__sinit>
 80065ea:	4b32      	ldr	r3, [pc, #200]	; (80066b4 <__swsetup_r+0xe4>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d10f      	bne.n	8006610 <__swsetup_r+0x40>
 80065f0:	686c      	ldr	r4, [r5, #4]
 80065f2:	230c      	movs	r3, #12
 80065f4:	5ee2      	ldrsh	r2, [r4, r3]
 80065f6:	b293      	uxth	r3, r2
 80065f8:	0711      	lsls	r1, r2, #28
 80065fa:	d42d      	bmi.n	8006658 <__swsetup_r+0x88>
 80065fc:	06d9      	lsls	r1, r3, #27
 80065fe:	d411      	bmi.n	8006624 <__swsetup_r+0x54>
 8006600:	2309      	movs	r3, #9
 8006602:	2001      	movs	r0, #1
 8006604:	6033      	str	r3, [r6, #0]
 8006606:	3337      	adds	r3, #55	; 0x37
 8006608:	4313      	orrs	r3, r2
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	4240      	negs	r0, r0
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	4b29      	ldr	r3, [pc, #164]	; (80066b8 <__swsetup_r+0xe8>)
 8006612:	429c      	cmp	r4, r3
 8006614:	d101      	bne.n	800661a <__swsetup_r+0x4a>
 8006616:	68ac      	ldr	r4, [r5, #8]
 8006618:	e7eb      	b.n	80065f2 <__swsetup_r+0x22>
 800661a:	4b28      	ldr	r3, [pc, #160]	; (80066bc <__swsetup_r+0xec>)
 800661c:	429c      	cmp	r4, r3
 800661e:	d1e8      	bne.n	80065f2 <__swsetup_r+0x22>
 8006620:	68ec      	ldr	r4, [r5, #12]
 8006622:	e7e6      	b.n	80065f2 <__swsetup_r+0x22>
 8006624:	075b      	lsls	r3, r3, #29
 8006626:	d513      	bpl.n	8006650 <__swsetup_r+0x80>
 8006628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800662a:	2900      	cmp	r1, #0
 800662c:	d008      	beq.n	8006640 <__swsetup_r+0x70>
 800662e:	0023      	movs	r3, r4
 8006630:	3344      	adds	r3, #68	; 0x44
 8006632:	4299      	cmp	r1, r3
 8006634:	d002      	beq.n	800663c <__swsetup_r+0x6c>
 8006636:	0030      	movs	r0, r6
 8006638:	f7ff fadc 	bl	8005bf4 <_free_r>
 800663c:	2300      	movs	r3, #0
 800663e:	6363      	str	r3, [r4, #52]	; 0x34
 8006640:	2224      	movs	r2, #36	; 0x24
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	4393      	bics	r3, r2
 8006646:	81a3      	strh	r3, [r4, #12]
 8006648:	2300      	movs	r3, #0
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	6023      	str	r3, [r4, #0]
 8006650:	2308      	movs	r3, #8
 8006652:	89a2      	ldrh	r2, [r4, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	81a3      	strh	r3, [r4, #12]
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <__swsetup_r+0xa6>
 800665e:	21a0      	movs	r1, #160	; 0xa0
 8006660:	2280      	movs	r2, #128	; 0x80
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	0089      	lsls	r1, r1, #2
 8006666:	0092      	lsls	r2, r2, #2
 8006668:	400b      	ands	r3, r1
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <__swsetup_r+0xa6>
 800666e:	0021      	movs	r1, r4
 8006670:	0030      	movs	r0, r6
 8006672:	f000 fa27 	bl	8006ac4 <__smakebuf_r>
 8006676:	220c      	movs	r2, #12
 8006678:	5ea3      	ldrsh	r3, [r4, r2]
 800667a:	2001      	movs	r0, #1
 800667c:	001a      	movs	r2, r3
 800667e:	b299      	uxth	r1, r3
 8006680:	4002      	ands	r2, r0
 8006682:	4203      	tst	r3, r0
 8006684:	d00f      	beq.n	80066a6 <__swsetup_r+0xd6>
 8006686:	2200      	movs	r2, #0
 8006688:	60a2      	str	r2, [r4, #8]
 800668a:	6962      	ldr	r2, [r4, #20]
 800668c:	4252      	negs	r2, r2
 800668e:	61a2      	str	r2, [r4, #24]
 8006690:	2000      	movs	r0, #0
 8006692:	6922      	ldr	r2, [r4, #16]
 8006694:	4282      	cmp	r2, r0
 8006696:	d1ba      	bne.n	800660e <__swsetup_r+0x3e>
 8006698:	060a      	lsls	r2, r1, #24
 800669a:	d5b8      	bpl.n	800660e <__swsetup_r+0x3e>
 800669c:	2240      	movs	r2, #64	; 0x40
 800669e:	4313      	orrs	r3, r2
 80066a0:	81a3      	strh	r3, [r4, #12]
 80066a2:	3801      	subs	r0, #1
 80066a4:	e7b3      	b.n	800660e <__swsetup_r+0x3e>
 80066a6:	0788      	lsls	r0, r1, #30
 80066a8:	d400      	bmi.n	80066ac <__swsetup_r+0xdc>
 80066aa:	6962      	ldr	r2, [r4, #20]
 80066ac:	60a2      	str	r2, [r4, #8]
 80066ae:	e7ef      	b.n	8006690 <__swsetup_r+0xc0>
 80066b0:	20000014 	.word	0x20000014
 80066b4:	08007510 	.word	0x08007510
 80066b8:	08007530 	.word	0x08007530
 80066bc:	080074f0 	.word	0x080074f0

080066c0 <abort>:
 80066c0:	2006      	movs	r0, #6
 80066c2:	b510      	push	{r4, lr}
 80066c4:	f000 fc10 	bl	8006ee8 <raise>
 80066c8:	2001      	movs	r0, #1
 80066ca:	f7fd f8f3 	bl	80038b4 <_exit>
	...

080066d0 <__sflush_r>:
 80066d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066d2:	898b      	ldrh	r3, [r1, #12]
 80066d4:	0005      	movs	r5, r0
 80066d6:	000c      	movs	r4, r1
 80066d8:	071a      	lsls	r2, r3, #28
 80066da:	d45f      	bmi.n	800679c <__sflush_r+0xcc>
 80066dc:	684a      	ldr	r2, [r1, #4]
 80066de:	2a00      	cmp	r2, #0
 80066e0:	dc04      	bgt.n	80066ec <__sflush_r+0x1c>
 80066e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	dc01      	bgt.n	80066ec <__sflush_r+0x1c>
 80066e8:	2000      	movs	r0, #0
 80066ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80066ee:	2f00      	cmp	r7, #0
 80066f0:	d0fa      	beq.n	80066e8 <__sflush_r+0x18>
 80066f2:	2200      	movs	r2, #0
 80066f4:	2180      	movs	r1, #128	; 0x80
 80066f6:	682e      	ldr	r6, [r5, #0]
 80066f8:	602a      	str	r2, [r5, #0]
 80066fa:	001a      	movs	r2, r3
 80066fc:	0149      	lsls	r1, r1, #5
 80066fe:	400a      	ands	r2, r1
 8006700:	420b      	tst	r3, r1
 8006702:	d034      	beq.n	800676e <__sflush_r+0x9e>
 8006704:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	075b      	lsls	r3, r3, #29
 800670a:	d506      	bpl.n	800671a <__sflush_r+0x4a>
 800670c:	6863      	ldr	r3, [r4, #4]
 800670e:	1ac0      	subs	r0, r0, r3
 8006710:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <__sflush_r+0x4a>
 8006716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006718:	1ac0      	subs	r0, r0, r3
 800671a:	0002      	movs	r2, r0
 800671c:	6a21      	ldr	r1, [r4, #32]
 800671e:	2300      	movs	r3, #0
 8006720:	0028      	movs	r0, r5
 8006722:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006724:	47b8      	blx	r7
 8006726:	89a1      	ldrh	r1, [r4, #12]
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d106      	bne.n	800673a <__sflush_r+0x6a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	2b1d      	cmp	r3, #29
 8006730:	d831      	bhi.n	8006796 <__sflush_r+0xc6>
 8006732:	4a2c      	ldr	r2, [pc, #176]	; (80067e4 <__sflush_r+0x114>)
 8006734:	40da      	lsrs	r2, r3
 8006736:	07d3      	lsls	r3, r2, #31
 8006738:	d52d      	bpl.n	8006796 <__sflush_r+0xc6>
 800673a:	2300      	movs	r3, #0
 800673c:	6063      	str	r3, [r4, #4]
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	04cb      	lsls	r3, r1, #19
 8006744:	d505      	bpl.n	8006752 <__sflush_r+0x82>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d102      	bne.n	8006750 <__sflush_r+0x80>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d100      	bne.n	8006752 <__sflush_r+0x82>
 8006750:	6560      	str	r0, [r4, #84]	; 0x54
 8006752:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006754:	602e      	str	r6, [r5, #0]
 8006756:	2900      	cmp	r1, #0
 8006758:	d0c6      	beq.n	80066e8 <__sflush_r+0x18>
 800675a:	0023      	movs	r3, r4
 800675c:	3344      	adds	r3, #68	; 0x44
 800675e:	4299      	cmp	r1, r3
 8006760:	d002      	beq.n	8006768 <__sflush_r+0x98>
 8006762:	0028      	movs	r0, r5
 8006764:	f7ff fa46 	bl	8005bf4 <_free_r>
 8006768:	2000      	movs	r0, #0
 800676a:	6360      	str	r0, [r4, #52]	; 0x34
 800676c:	e7bd      	b.n	80066ea <__sflush_r+0x1a>
 800676e:	2301      	movs	r3, #1
 8006770:	0028      	movs	r0, r5
 8006772:	6a21      	ldr	r1, [r4, #32]
 8006774:	47b8      	blx	r7
 8006776:	1c43      	adds	r3, r0, #1
 8006778:	d1c5      	bne.n	8006706 <__sflush_r+0x36>
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0c2      	beq.n	8006706 <__sflush_r+0x36>
 8006780:	2b1d      	cmp	r3, #29
 8006782:	d001      	beq.n	8006788 <__sflush_r+0xb8>
 8006784:	2b16      	cmp	r3, #22
 8006786:	d101      	bne.n	800678c <__sflush_r+0xbc>
 8006788:	602e      	str	r6, [r5, #0]
 800678a:	e7ad      	b.n	80066e8 <__sflush_r+0x18>
 800678c:	2340      	movs	r3, #64	; 0x40
 800678e:	89a2      	ldrh	r2, [r4, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	e7a9      	b.n	80066ea <__sflush_r+0x1a>
 8006796:	2340      	movs	r3, #64	; 0x40
 8006798:	430b      	orrs	r3, r1
 800679a:	e7fa      	b.n	8006792 <__sflush_r+0xc2>
 800679c:	690f      	ldr	r7, [r1, #16]
 800679e:	2f00      	cmp	r7, #0
 80067a0:	d0a2      	beq.n	80066e8 <__sflush_r+0x18>
 80067a2:	680a      	ldr	r2, [r1, #0]
 80067a4:	600f      	str	r7, [r1, #0]
 80067a6:	1bd2      	subs	r2, r2, r7
 80067a8:	9201      	str	r2, [sp, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	079b      	lsls	r3, r3, #30
 80067ae:	d100      	bne.n	80067b2 <__sflush_r+0xe2>
 80067b0:	694a      	ldr	r2, [r1, #20]
 80067b2:	60a2      	str	r2, [r4, #8]
 80067b4:	9b01      	ldr	r3, [sp, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dc00      	bgt.n	80067bc <__sflush_r+0xec>
 80067ba:	e795      	b.n	80066e8 <__sflush_r+0x18>
 80067bc:	003a      	movs	r2, r7
 80067be:	0028      	movs	r0, r5
 80067c0:	9b01      	ldr	r3, [sp, #4]
 80067c2:	6a21      	ldr	r1, [r4, #32]
 80067c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067c6:	47b0      	blx	r6
 80067c8:	2800      	cmp	r0, #0
 80067ca:	dc06      	bgt.n	80067da <__sflush_r+0x10a>
 80067cc:	2340      	movs	r3, #64	; 0x40
 80067ce:	2001      	movs	r0, #1
 80067d0:	89a2      	ldrh	r2, [r4, #12]
 80067d2:	4240      	negs	r0, r0
 80067d4:	4313      	orrs	r3, r2
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	e787      	b.n	80066ea <__sflush_r+0x1a>
 80067da:	9b01      	ldr	r3, [sp, #4]
 80067dc:	183f      	adds	r7, r7, r0
 80067de:	1a1b      	subs	r3, r3, r0
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	e7e7      	b.n	80067b4 <__sflush_r+0xe4>
 80067e4:	20400001 	.word	0x20400001

080067e8 <_fflush_r>:
 80067e8:	690b      	ldr	r3, [r1, #16]
 80067ea:	b570      	push	{r4, r5, r6, lr}
 80067ec:	0005      	movs	r5, r0
 80067ee:	000c      	movs	r4, r1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d102      	bne.n	80067fa <_fflush_r+0x12>
 80067f4:	2500      	movs	r5, #0
 80067f6:	0028      	movs	r0, r5
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d004      	beq.n	8006808 <_fflush_r+0x20>
 80067fe:	6983      	ldr	r3, [r0, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <_fflush_r+0x20>
 8006804:	f000 f892 	bl	800692c <__sinit>
 8006808:	4b14      	ldr	r3, [pc, #80]	; (800685c <_fflush_r+0x74>)
 800680a:	429c      	cmp	r4, r3
 800680c:	d11b      	bne.n	8006846 <_fflush_r+0x5e>
 800680e:	686c      	ldr	r4, [r5, #4]
 8006810:	220c      	movs	r2, #12
 8006812:	5ea3      	ldrsh	r3, [r4, r2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0ed      	beq.n	80067f4 <_fflush_r+0xc>
 8006818:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800681a:	07d2      	lsls	r2, r2, #31
 800681c:	d404      	bmi.n	8006828 <_fflush_r+0x40>
 800681e:	059b      	lsls	r3, r3, #22
 8006820:	d402      	bmi.n	8006828 <_fflush_r+0x40>
 8006822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006824:	f000 f923 	bl	8006a6e <__retarget_lock_acquire_recursive>
 8006828:	0028      	movs	r0, r5
 800682a:	0021      	movs	r1, r4
 800682c:	f7ff ff50 	bl	80066d0 <__sflush_r>
 8006830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006832:	0005      	movs	r5, r0
 8006834:	07db      	lsls	r3, r3, #31
 8006836:	d4de      	bmi.n	80067f6 <_fflush_r+0xe>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	059b      	lsls	r3, r3, #22
 800683c:	d4db      	bmi.n	80067f6 <_fflush_r+0xe>
 800683e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006840:	f000 f916 	bl	8006a70 <__retarget_lock_release_recursive>
 8006844:	e7d7      	b.n	80067f6 <_fflush_r+0xe>
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <_fflush_r+0x78>)
 8006848:	429c      	cmp	r4, r3
 800684a:	d101      	bne.n	8006850 <_fflush_r+0x68>
 800684c:	68ac      	ldr	r4, [r5, #8]
 800684e:	e7df      	b.n	8006810 <_fflush_r+0x28>
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <_fflush_r+0x7c>)
 8006852:	429c      	cmp	r4, r3
 8006854:	d1dc      	bne.n	8006810 <_fflush_r+0x28>
 8006856:	68ec      	ldr	r4, [r5, #12]
 8006858:	e7da      	b.n	8006810 <_fflush_r+0x28>
 800685a:	46c0      	nop			; (mov r8, r8)
 800685c:	08007510 	.word	0x08007510
 8006860:	08007530 	.word	0x08007530
 8006864:	080074f0 	.word	0x080074f0

08006868 <std>:
 8006868:	2300      	movs	r3, #0
 800686a:	b510      	push	{r4, lr}
 800686c:	0004      	movs	r4, r0
 800686e:	6003      	str	r3, [r0, #0]
 8006870:	6043      	str	r3, [r0, #4]
 8006872:	6083      	str	r3, [r0, #8]
 8006874:	8181      	strh	r1, [r0, #12]
 8006876:	6643      	str	r3, [r0, #100]	; 0x64
 8006878:	0019      	movs	r1, r3
 800687a:	81c2      	strh	r2, [r0, #14]
 800687c:	6103      	str	r3, [r0, #16]
 800687e:	6143      	str	r3, [r0, #20]
 8006880:	6183      	str	r3, [r0, #24]
 8006882:	2208      	movs	r2, #8
 8006884:	305c      	adds	r0, #92	; 0x5c
 8006886:	f7ff f99f 	bl	8005bc8 <memset>
 800688a:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <std+0x38>)
 800688c:	6263      	str	r3, [r4, #36]	; 0x24
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <std+0x3c>)
 8006890:	6224      	str	r4, [r4, #32]
 8006892:	62a3      	str	r3, [r4, #40]	; 0x28
 8006894:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <std+0x40>)
 8006896:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <std+0x44>)
 800689a:	6323      	str	r3, [r4, #48]	; 0x30
 800689c:	bd10      	pop	{r4, pc}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	08006f29 	.word	0x08006f29
 80068a4:	08006f51 	.word	0x08006f51
 80068a8:	08006f89 	.word	0x08006f89
 80068ac:	08006fb5 	.word	0x08006fb5

080068b0 <_cleanup_r>:
 80068b0:	b510      	push	{r4, lr}
 80068b2:	4902      	ldr	r1, [pc, #8]	; (80068bc <_cleanup_r+0xc>)
 80068b4:	f000 f8ba 	bl	8006a2c <_fwalk_reent>
 80068b8:	bd10      	pop	{r4, pc}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	080067e9 	.word	0x080067e9

080068c0 <__sfmoreglue>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	2568      	movs	r5, #104	; 0x68
 80068c4:	1e4a      	subs	r2, r1, #1
 80068c6:	4355      	muls	r5, r2
 80068c8:	000e      	movs	r6, r1
 80068ca:	0029      	movs	r1, r5
 80068cc:	3174      	adds	r1, #116	; 0x74
 80068ce:	f7ff f9db 	bl	8005c88 <_malloc_r>
 80068d2:	1e04      	subs	r4, r0, #0
 80068d4:	d008      	beq.n	80068e8 <__sfmoreglue+0x28>
 80068d6:	2100      	movs	r1, #0
 80068d8:	002a      	movs	r2, r5
 80068da:	6001      	str	r1, [r0, #0]
 80068dc:	6046      	str	r6, [r0, #4]
 80068de:	300c      	adds	r0, #12
 80068e0:	60a0      	str	r0, [r4, #8]
 80068e2:	3268      	adds	r2, #104	; 0x68
 80068e4:	f7ff f970 	bl	8005bc8 <memset>
 80068e8:	0020      	movs	r0, r4
 80068ea:	bd70      	pop	{r4, r5, r6, pc}

080068ec <__sfp_lock_acquire>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4802      	ldr	r0, [pc, #8]	; (80068f8 <__sfp_lock_acquire+0xc>)
 80068f0:	f000 f8bd 	bl	8006a6e <__retarget_lock_acquire_recursive>
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	20000224 	.word	0x20000224

080068fc <__sfp_lock_release>:
 80068fc:	b510      	push	{r4, lr}
 80068fe:	4802      	ldr	r0, [pc, #8]	; (8006908 <__sfp_lock_release+0xc>)
 8006900:	f000 f8b6 	bl	8006a70 <__retarget_lock_release_recursive>
 8006904:	bd10      	pop	{r4, pc}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	20000224 	.word	0x20000224

0800690c <__sinit_lock_acquire>:
 800690c:	b510      	push	{r4, lr}
 800690e:	4802      	ldr	r0, [pc, #8]	; (8006918 <__sinit_lock_acquire+0xc>)
 8006910:	f000 f8ad 	bl	8006a6e <__retarget_lock_acquire_recursive>
 8006914:	bd10      	pop	{r4, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	2000021f 	.word	0x2000021f

0800691c <__sinit_lock_release>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4802      	ldr	r0, [pc, #8]	; (8006928 <__sinit_lock_release+0xc>)
 8006920:	f000 f8a6 	bl	8006a70 <__retarget_lock_release_recursive>
 8006924:	bd10      	pop	{r4, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	2000021f 	.word	0x2000021f

0800692c <__sinit>:
 800692c:	b513      	push	{r0, r1, r4, lr}
 800692e:	0004      	movs	r4, r0
 8006930:	f7ff ffec 	bl	800690c <__sinit_lock_acquire>
 8006934:	69a3      	ldr	r3, [r4, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <__sinit+0x14>
 800693a:	f7ff ffef 	bl	800691c <__sinit_lock_release>
 800693e:	bd13      	pop	{r0, r1, r4, pc}
 8006940:	64a3      	str	r3, [r4, #72]	; 0x48
 8006942:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006944:	6523      	str	r3, [r4, #80]	; 0x50
 8006946:	4b13      	ldr	r3, [pc, #76]	; (8006994 <__sinit+0x68>)
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <__sinit+0x6c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	62a2      	str	r2, [r4, #40]	; 0x28
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	42a3      	cmp	r3, r4
 8006952:	d101      	bne.n	8006958 <__sinit+0x2c>
 8006954:	2301      	movs	r3, #1
 8006956:	61a3      	str	r3, [r4, #24]
 8006958:	0020      	movs	r0, r4
 800695a:	f000 f81f 	bl	800699c <__sfp>
 800695e:	6060      	str	r0, [r4, #4]
 8006960:	0020      	movs	r0, r4
 8006962:	f000 f81b 	bl	800699c <__sfp>
 8006966:	60a0      	str	r0, [r4, #8]
 8006968:	0020      	movs	r0, r4
 800696a:	f000 f817 	bl	800699c <__sfp>
 800696e:	2200      	movs	r2, #0
 8006970:	2104      	movs	r1, #4
 8006972:	60e0      	str	r0, [r4, #12]
 8006974:	6860      	ldr	r0, [r4, #4]
 8006976:	f7ff ff77 	bl	8006868 <std>
 800697a:	2201      	movs	r2, #1
 800697c:	2109      	movs	r1, #9
 800697e:	68a0      	ldr	r0, [r4, #8]
 8006980:	f7ff ff72 	bl	8006868 <std>
 8006984:	2202      	movs	r2, #2
 8006986:	2112      	movs	r1, #18
 8006988:	68e0      	ldr	r0, [r4, #12]
 800698a:	f7ff ff6d 	bl	8006868 <std>
 800698e:	2301      	movs	r3, #1
 8006990:	61a3      	str	r3, [r4, #24]
 8006992:	e7d2      	b.n	800693a <__sinit+0xe>
 8006994:	080073b8 	.word	0x080073b8
 8006998:	080068b1 	.word	0x080068b1

0800699c <__sfp>:
 800699c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699e:	0007      	movs	r7, r0
 80069a0:	f7ff ffa4 	bl	80068ec <__sfp_lock_acquire>
 80069a4:	4b1f      	ldr	r3, [pc, #124]	; (8006a24 <__sfp+0x88>)
 80069a6:	681e      	ldr	r6, [r3, #0]
 80069a8:	69b3      	ldr	r3, [r6, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <__sfp+0x18>
 80069ae:	0030      	movs	r0, r6
 80069b0:	f7ff ffbc 	bl	800692c <__sinit>
 80069b4:	3648      	adds	r6, #72	; 0x48
 80069b6:	68b4      	ldr	r4, [r6, #8]
 80069b8:	6873      	ldr	r3, [r6, #4]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	d504      	bpl.n	80069c8 <__sfp+0x2c>
 80069be:	6833      	ldr	r3, [r6, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d022      	beq.n	8006a0a <__sfp+0x6e>
 80069c4:	6836      	ldr	r6, [r6, #0]
 80069c6:	e7f6      	b.n	80069b6 <__sfp+0x1a>
 80069c8:	220c      	movs	r2, #12
 80069ca:	5ea5      	ldrsh	r5, [r4, r2]
 80069cc:	2d00      	cmp	r5, #0
 80069ce:	d11a      	bne.n	8006a06 <__sfp+0x6a>
 80069d0:	0020      	movs	r0, r4
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <__sfp+0x8c>)
 80069d4:	3058      	adds	r0, #88	; 0x58
 80069d6:	60e3      	str	r3, [r4, #12]
 80069d8:	6665      	str	r5, [r4, #100]	; 0x64
 80069da:	f000 f847 	bl	8006a6c <__retarget_lock_init_recursive>
 80069de:	f7ff ff8d 	bl	80068fc <__sfp_lock_release>
 80069e2:	0020      	movs	r0, r4
 80069e4:	2208      	movs	r2, #8
 80069e6:	0029      	movs	r1, r5
 80069e8:	6025      	str	r5, [r4, #0]
 80069ea:	60a5      	str	r5, [r4, #8]
 80069ec:	6065      	str	r5, [r4, #4]
 80069ee:	6125      	str	r5, [r4, #16]
 80069f0:	6165      	str	r5, [r4, #20]
 80069f2:	61a5      	str	r5, [r4, #24]
 80069f4:	305c      	adds	r0, #92	; 0x5c
 80069f6:	f7ff f8e7 	bl	8005bc8 <memset>
 80069fa:	6365      	str	r5, [r4, #52]	; 0x34
 80069fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80069fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8006a00:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006a02:	0020      	movs	r0, r4
 8006a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a06:	3468      	adds	r4, #104	; 0x68
 8006a08:	e7d7      	b.n	80069ba <__sfp+0x1e>
 8006a0a:	2104      	movs	r1, #4
 8006a0c:	0038      	movs	r0, r7
 8006a0e:	f7ff ff57 	bl	80068c0 <__sfmoreglue>
 8006a12:	1e04      	subs	r4, r0, #0
 8006a14:	6030      	str	r0, [r6, #0]
 8006a16:	d1d5      	bne.n	80069c4 <__sfp+0x28>
 8006a18:	f7ff ff70 	bl	80068fc <__sfp_lock_release>
 8006a1c:	230c      	movs	r3, #12
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	e7ef      	b.n	8006a02 <__sfp+0x66>
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	080073b8 	.word	0x080073b8
 8006a28:	ffff0001 	.word	0xffff0001

08006a2c <_fwalk_reent>:
 8006a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a2e:	0004      	movs	r4, r0
 8006a30:	0006      	movs	r6, r0
 8006a32:	2700      	movs	r7, #0
 8006a34:	9101      	str	r1, [sp, #4]
 8006a36:	3448      	adds	r4, #72	; 0x48
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	68a5      	ldr	r5, [r4, #8]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	9b00      	ldr	r3, [sp, #0]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	d504      	bpl.n	8006a50 <_fwalk_reent+0x24>
 8006a46:	6824      	ldr	r4, [r4, #0]
 8006a48:	2c00      	cmp	r4, #0
 8006a4a:	d1f5      	bne.n	8006a38 <_fwalk_reent+0xc>
 8006a4c:	0038      	movs	r0, r7
 8006a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a50:	89ab      	ldrh	r3, [r5, #12]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d908      	bls.n	8006a68 <_fwalk_reent+0x3c>
 8006a56:	220e      	movs	r2, #14
 8006a58:	5eab      	ldrsh	r3, [r5, r2]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	d004      	beq.n	8006a68 <_fwalk_reent+0x3c>
 8006a5e:	0029      	movs	r1, r5
 8006a60:	0030      	movs	r0, r6
 8006a62:	9b01      	ldr	r3, [sp, #4]
 8006a64:	4798      	blx	r3
 8006a66:	4307      	orrs	r7, r0
 8006a68:	3568      	adds	r5, #104	; 0x68
 8006a6a:	e7e8      	b.n	8006a3e <_fwalk_reent+0x12>

08006a6c <__retarget_lock_init_recursive>:
 8006a6c:	4770      	bx	lr

08006a6e <__retarget_lock_acquire_recursive>:
 8006a6e:	4770      	bx	lr

08006a70 <__retarget_lock_release_recursive>:
 8006a70:	4770      	bx	lr
	...

08006a74 <__swhatbuf_r>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	000e      	movs	r6, r1
 8006a78:	001d      	movs	r5, r3
 8006a7a:	230e      	movs	r3, #14
 8006a7c:	5ec9      	ldrsh	r1, [r1, r3]
 8006a7e:	0014      	movs	r4, r2
 8006a80:	b096      	sub	sp, #88	; 0x58
 8006a82:	2900      	cmp	r1, #0
 8006a84:	da07      	bge.n	8006a96 <__swhatbuf_r+0x22>
 8006a86:	2300      	movs	r3, #0
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	89b3      	ldrh	r3, [r6, #12]
 8006a8c:	061b      	lsls	r3, r3, #24
 8006a8e:	d411      	bmi.n	8006ab4 <__swhatbuf_r+0x40>
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	e00f      	b.n	8006ab6 <__swhatbuf_r+0x42>
 8006a96:	466a      	mov	r2, sp
 8006a98:	f000 fab8 	bl	800700c <_fstat_r>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	dbf2      	blt.n	8006a86 <__swhatbuf_r+0x12>
 8006aa0:	23f0      	movs	r3, #240	; 0xf0
 8006aa2:	9901      	ldr	r1, [sp, #4]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	4019      	ands	r1, r3
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <__swhatbuf_r+0x4c>)
 8006aaa:	18c9      	adds	r1, r1, r3
 8006aac:	424b      	negs	r3, r1
 8006aae:	4159      	adcs	r1, r3
 8006ab0:	6029      	str	r1, [r5, #0]
 8006ab2:	e7ed      	b.n	8006a90 <__swhatbuf_r+0x1c>
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	b016      	add	sp, #88	; 0x58
 8006abc:	bd70      	pop	{r4, r5, r6, pc}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	ffffe000 	.word	0xffffe000

08006ac4 <__smakebuf_r>:
 8006ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac6:	2602      	movs	r6, #2
 8006ac8:	898b      	ldrh	r3, [r1, #12]
 8006aca:	0005      	movs	r5, r0
 8006acc:	000c      	movs	r4, r1
 8006ace:	4233      	tst	r3, r6
 8006ad0:	d006      	beq.n	8006ae0 <__smakebuf_r+0x1c>
 8006ad2:	0023      	movs	r3, r4
 8006ad4:	3347      	adds	r3, #71	; 0x47
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	6123      	str	r3, [r4, #16]
 8006ada:	2301      	movs	r3, #1
 8006adc:	6163      	str	r3, [r4, #20]
 8006ade:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006ae0:	466a      	mov	r2, sp
 8006ae2:	ab01      	add	r3, sp, #4
 8006ae4:	f7ff ffc6 	bl	8006a74 <__swhatbuf_r>
 8006ae8:	9900      	ldr	r1, [sp, #0]
 8006aea:	0007      	movs	r7, r0
 8006aec:	0028      	movs	r0, r5
 8006aee:	f7ff f8cb 	bl	8005c88 <_malloc_r>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d108      	bne.n	8006b08 <__smakebuf_r+0x44>
 8006af6:	220c      	movs	r2, #12
 8006af8:	5ea3      	ldrsh	r3, [r4, r2]
 8006afa:	059a      	lsls	r2, r3, #22
 8006afc:	d4ef      	bmi.n	8006ade <__smakebuf_r+0x1a>
 8006afe:	2203      	movs	r2, #3
 8006b00:	4393      	bics	r3, r2
 8006b02:	431e      	orrs	r6, r3
 8006b04:	81a6      	strh	r6, [r4, #12]
 8006b06:	e7e4      	b.n	8006ad2 <__smakebuf_r+0xe>
 8006b08:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <__smakebuf_r+0x84>)
 8006b0a:	62ab      	str	r3, [r5, #40]	; 0x28
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	89a2      	ldrh	r2, [r4, #12]
 8006b10:	6020      	str	r0, [r4, #0]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	9b00      	ldr	r3, [sp, #0]
 8006b18:	6120      	str	r0, [r4, #16]
 8006b1a:	6163      	str	r3, [r4, #20]
 8006b1c:	9b01      	ldr	r3, [sp, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00d      	beq.n	8006b3e <__smakebuf_r+0x7a>
 8006b22:	0028      	movs	r0, r5
 8006b24:	230e      	movs	r3, #14
 8006b26:	5ee1      	ldrsh	r1, [r4, r3]
 8006b28:	f000 fa82 	bl	8007030 <_isatty_r>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d006      	beq.n	8006b3e <__smakebuf_r+0x7a>
 8006b30:	2203      	movs	r2, #3
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	4393      	bics	r3, r2
 8006b36:	001a      	movs	r2, r3
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	89a0      	ldrh	r0, [r4, #12]
 8006b40:	4307      	orrs	r7, r0
 8006b42:	81a7      	strh	r7, [r4, #12]
 8006b44:	e7cb      	b.n	8006ade <__smakebuf_r+0x1a>
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	080068b1 	.word	0x080068b1

08006b4c <memchr>:
 8006b4c:	b2c9      	uxtb	r1, r1
 8006b4e:	1882      	adds	r2, r0, r2
 8006b50:	4290      	cmp	r0, r2
 8006b52:	d101      	bne.n	8006b58 <memchr+0xc>
 8006b54:	2000      	movs	r0, #0
 8006b56:	4770      	bx	lr
 8006b58:	7803      	ldrb	r3, [r0, #0]
 8006b5a:	428b      	cmp	r3, r1
 8006b5c:	d0fb      	beq.n	8006b56 <memchr+0xa>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	e7f6      	b.n	8006b50 <memchr+0x4>
	...

08006b64 <__malloc_lock>:
 8006b64:	b510      	push	{r4, lr}
 8006b66:	4802      	ldr	r0, [pc, #8]	; (8006b70 <__malloc_lock+0xc>)
 8006b68:	f7ff ff81 	bl	8006a6e <__retarget_lock_acquire_recursive>
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	20000220 	.word	0x20000220

08006b74 <__malloc_unlock>:
 8006b74:	b510      	push	{r4, lr}
 8006b76:	4802      	ldr	r0, [pc, #8]	; (8006b80 <__malloc_unlock+0xc>)
 8006b78:	f7ff ff7a 	bl	8006a70 <__retarget_lock_release_recursive>
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	20000220 	.word	0x20000220

08006b84 <_realloc_r>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	0007      	movs	r7, r0
 8006b88:	000d      	movs	r5, r1
 8006b8a:	0016      	movs	r6, r2
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	d105      	bne.n	8006b9c <_realloc_r+0x18>
 8006b90:	0011      	movs	r1, r2
 8006b92:	f7ff f879 	bl	8005c88 <_malloc_r>
 8006b96:	0004      	movs	r4, r0
 8006b98:	0020      	movs	r0, r4
 8006b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	d103      	bne.n	8006ba8 <_realloc_r+0x24>
 8006ba0:	f7ff f828 	bl	8005bf4 <_free_r>
 8006ba4:	0034      	movs	r4, r6
 8006ba6:	e7f7      	b.n	8006b98 <_realloc_r+0x14>
 8006ba8:	f000 fa68 	bl	800707c <_malloc_usable_size_r>
 8006bac:	002c      	movs	r4, r5
 8006bae:	42b0      	cmp	r0, r6
 8006bb0:	d2f2      	bcs.n	8006b98 <_realloc_r+0x14>
 8006bb2:	0031      	movs	r1, r6
 8006bb4:	0038      	movs	r0, r7
 8006bb6:	f7ff f867 	bl	8005c88 <_malloc_r>
 8006bba:	1e04      	subs	r4, r0, #0
 8006bbc:	d0ec      	beq.n	8006b98 <_realloc_r+0x14>
 8006bbe:	0029      	movs	r1, r5
 8006bc0:	0032      	movs	r2, r6
 8006bc2:	f7fe ffe5 	bl	8005b90 <memcpy>
 8006bc6:	0029      	movs	r1, r5
 8006bc8:	0038      	movs	r0, r7
 8006bca:	f7ff f813 	bl	8005bf4 <_free_r>
 8006bce:	e7e3      	b.n	8006b98 <_realloc_r+0x14>

08006bd0 <__ssputs_r>:
 8006bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd2:	688e      	ldr	r6, [r1, #8]
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	0007      	movs	r7, r0
 8006bd8:	000c      	movs	r4, r1
 8006bda:	9203      	str	r2, [sp, #12]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	429e      	cmp	r6, r3
 8006be0:	d83c      	bhi.n	8006c5c <__ssputs_r+0x8c>
 8006be2:	2390      	movs	r3, #144	; 0x90
 8006be4:	898a      	ldrh	r2, [r1, #12]
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	421a      	tst	r2, r3
 8006bea:	d034      	beq.n	8006c56 <__ssputs_r+0x86>
 8006bec:	2503      	movs	r5, #3
 8006bee:	6909      	ldr	r1, [r1, #16]
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	1a5b      	subs	r3, r3, r1
 8006bf4:	9302      	str	r3, [sp, #8]
 8006bf6:	6963      	ldr	r3, [r4, #20]
 8006bf8:	9802      	ldr	r0, [sp, #8]
 8006bfa:	435d      	muls	r5, r3
 8006bfc:	0feb      	lsrs	r3, r5, #31
 8006bfe:	195d      	adds	r5, r3, r5
 8006c00:	9b01      	ldr	r3, [sp, #4]
 8006c02:	106d      	asrs	r5, r5, #1
 8006c04:	3301      	adds	r3, #1
 8006c06:	181b      	adds	r3, r3, r0
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	d900      	bls.n	8006c0e <__ssputs_r+0x3e>
 8006c0c:	001d      	movs	r5, r3
 8006c0e:	0553      	lsls	r3, r2, #21
 8006c10:	d532      	bpl.n	8006c78 <__ssputs_r+0xa8>
 8006c12:	0029      	movs	r1, r5
 8006c14:	0038      	movs	r0, r7
 8006c16:	f7ff f837 	bl	8005c88 <_malloc_r>
 8006c1a:	1e06      	subs	r6, r0, #0
 8006c1c:	d109      	bne.n	8006c32 <__ssputs_r+0x62>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	2340      	movs	r3, #64	; 0x40
 8006c24:	2001      	movs	r0, #1
 8006c26:	89a2      	ldrh	r2, [r4, #12]
 8006c28:	4240      	negs	r0, r0
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	b005      	add	sp, #20
 8006c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c32:	9a02      	ldr	r2, [sp, #8]
 8006c34:	6921      	ldr	r1, [r4, #16]
 8006c36:	f7fe ffab 	bl	8005b90 <memcpy>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	4a14      	ldr	r2, [pc, #80]	; (8006c90 <__ssputs_r+0xc0>)
 8006c3e:	401a      	ands	r2, r3
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	4313      	orrs	r3, r2
 8006c44:	81a3      	strh	r3, [r4, #12]
 8006c46:	9b02      	ldr	r3, [sp, #8]
 8006c48:	6126      	str	r6, [r4, #16]
 8006c4a:	18f6      	adds	r6, r6, r3
 8006c4c:	6026      	str	r6, [r4, #0]
 8006c4e:	6165      	str	r5, [r4, #20]
 8006c50:	9e01      	ldr	r6, [sp, #4]
 8006c52:	1aed      	subs	r5, r5, r3
 8006c54:	60a5      	str	r5, [r4, #8]
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	429e      	cmp	r6, r3
 8006c5a:	d900      	bls.n	8006c5e <__ssputs_r+0x8e>
 8006c5c:	9e01      	ldr	r6, [sp, #4]
 8006c5e:	0032      	movs	r2, r6
 8006c60:	9903      	ldr	r1, [sp, #12]
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	f7fe ff9d 	bl	8005ba2 <memmove>
 8006c68:	68a3      	ldr	r3, [r4, #8]
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	1b9b      	subs	r3, r3, r6
 8006c6e:	60a3      	str	r3, [r4, #8]
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	199e      	adds	r6, r3, r6
 8006c74:	6026      	str	r6, [r4, #0]
 8006c76:	e7da      	b.n	8006c2e <__ssputs_r+0x5e>
 8006c78:	002a      	movs	r2, r5
 8006c7a:	0038      	movs	r0, r7
 8006c7c:	f7ff ff82 	bl	8006b84 <_realloc_r>
 8006c80:	1e06      	subs	r6, r0, #0
 8006c82:	d1e0      	bne.n	8006c46 <__ssputs_r+0x76>
 8006c84:	0038      	movs	r0, r7
 8006c86:	6921      	ldr	r1, [r4, #16]
 8006c88:	f7fe ffb4 	bl	8005bf4 <_free_r>
 8006c8c:	e7c7      	b.n	8006c1e <__ssputs_r+0x4e>
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	fffffb7f 	.word	0xfffffb7f

08006c94 <_svfiprintf_r>:
 8006c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c96:	b0a1      	sub	sp, #132	; 0x84
 8006c98:	9003      	str	r0, [sp, #12]
 8006c9a:	001d      	movs	r5, r3
 8006c9c:	898b      	ldrh	r3, [r1, #12]
 8006c9e:	000f      	movs	r7, r1
 8006ca0:	0016      	movs	r6, r2
 8006ca2:	061b      	lsls	r3, r3, #24
 8006ca4:	d511      	bpl.n	8006cca <_svfiprintf_r+0x36>
 8006ca6:	690b      	ldr	r3, [r1, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10e      	bne.n	8006cca <_svfiprintf_r+0x36>
 8006cac:	2140      	movs	r1, #64	; 0x40
 8006cae:	f7fe ffeb 	bl	8005c88 <_malloc_r>
 8006cb2:	6038      	str	r0, [r7, #0]
 8006cb4:	6138      	str	r0, [r7, #16]
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d105      	bne.n	8006cc6 <_svfiprintf_r+0x32>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	9a03      	ldr	r2, [sp, #12]
 8006cbe:	3801      	subs	r0, #1
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	b021      	add	sp, #132	; 0x84
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	2340      	movs	r3, #64	; 0x40
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	ac08      	add	r4, sp, #32
 8006cce:	6163      	str	r3, [r4, #20]
 8006cd0:	3320      	adds	r3, #32
 8006cd2:	7663      	strb	r3, [r4, #25]
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	76a3      	strb	r3, [r4, #26]
 8006cd8:	9507      	str	r5, [sp, #28]
 8006cda:	0035      	movs	r5, r6
 8006cdc:	782b      	ldrb	r3, [r5, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <_svfiprintf_r+0x52>
 8006ce2:	2b25      	cmp	r3, #37	; 0x25
 8006ce4:	d147      	bne.n	8006d76 <_svfiprintf_r+0xe2>
 8006ce6:	1bab      	subs	r3, r5, r6
 8006ce8:	9305      	str	r3, [sp, #20]
 8006cea:	42b5      	cmp	r5, r6
 8006cec:	d00c      	beq.n	8006d08 <_svfiprintf_r+0x74>
 8006cee:	0032      	movs	r2, r6
 8006cf0:	0039      	movs	r1, r7
 8006cf2:	9803      	ldr	r0, [sp, #12]
 8006cf4:	f7ff ff6c 	bl	8006bd0 <__ssputs_r>
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d100      	bne.n	8006cfe <_svfiprintf_r+0x6a>
 8006cfc:	e0ae      	b.n	8006e5c <_svfiprintf_r+0x1c8>
 8006cfe:	6962      	ldr	r2, [r4, #20]
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	4694      	mov	ip, r2
 8006d04:	4463      	add	r3, ip
 8006d06:	6163      	str	r3, [r4, #20]
 8006d08:	782b      	ldrb	r3, [r5, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d100      	bne.n	8006d10 <_svfiprintf_r+0x7c>
 8006d0e:	e0a5      	b.n	8006e5c <_svfiprintf_r+0x1c8>
 8006d10:	2201      	movs	r2, #1
 8006d12:	2300      	movs	r3, #0
 8006d14:	4252      	negs	r2, r2
 8006d16:	6062      	str	r2, [r4, #4]
 8006d18:	a904      	add	r1, sp, #16
 8006d1a:	3254      	adds	r2, #84	; 0x54
 8006d1c:	1852      	adds	r2, r2, r1
 8006d1e:	1c6e      	adds	r6, r5, #1
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	60e3      	str	r3, [r4, #12]
 8006d24:	60a3      	str	r3, [r4, #8]
 8006d26:	7013      	strb	r3, [r2, #0]
 8006d28:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d2a:	2205      	movs	r2, #5
 8006d2c:	7831      	ldrb	r1, [r6, #0]
 8006d2e:	4854      	ldr	r0, [pc, #336]	; (8006e80 <_svfiprintf_r+0x1ec>)
 8006d30:	f7ff ff0c 	bl	8006b4c <memchr>
 8006d34:	1c75      	adds	r5, r6, #1
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d11f      	bne.n	8006d7a <_svfiprintf_r+0xe6>
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	06d3      	lsls	r3, r2, #27
 8006d3e:	d504      	bpl.n	8006d4a <_svfiprintf_r+0xb6>
 8006d40:	2353      	movs	r3, #83	; 0x53
 8006d42:	a904      	add	r1, sp, #16
 8006d44:	185b      	adds	r3, r3, r1
 8006d46:	2120      	movs	r1, #32
 8006d48:	7019      	strb	r1, [r3, #0]
 8006d4a:	0713      	lsls	r3, r2, #28
 8006d4c:	d504      	bpl.n	8006d58 <_svfiprintf_r+0xc4>
 8006d4e:	2353      	movs	r3, #83	; 0x53
 8006d50:	a904      	add	r1, sp, #16
 8006d52:	185b      	adds	r3, r3, r1
 8006d54:	212b      	movs	r1, #43	; 0x2b
 8006d56:	7019      	strb	r1, [r3, #0]
 8006d58:	7833      	ldrb	r3, [r6, #0]
 8006d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5c:	d016      	beq.n	8006d8c <_svfiprintf_r+0xf8>
 8006d5e:	0035      	movs	r5, r6
 8006d60:	2100      	movs	r1, #0
 8006d62:	200a      	movs	r0, #10
 8006d64:	68e3      	ldr	r3, [r4, #12]
 8006d66:	782a      	ldrb	r2, [r5, #0]
 8006d68:	1c6e      	adds	r6, r5, #1
 8006d6a:	3a30      	subs	r2, #48	; 0x30
 8006d6c:	2a09      	cmp	r2, #9
 8006d6e:	d94e      	bls.n	8006e0e <_svfiprintf_r+0x17a>
 8006d70:	2900      	cmp	r1, #0
 8006d72:	d111      	bne.n	8006d98 <_svfiprintf_r+0x104>
 8006d74:	e017      	b.n	8006da6 <_svfiprintf_r+0x112>
 8006d76:	3501      	adds	r5, #1
 8006d78:	e7b0      	b.n	8006cdc <_svfiprintf_r+0x48>
 8006d7a:	4b41      	ldr	r3, [pc, #260]	; (8006e80 <_svfiprintf_r+0x1ec>)
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	1ac0      	subs	r0, r0, r3
 8006d80:	2301      	movs	r3, #1
 8006d82:	4083      	lsls	r3, r0
 8006d84:	4313      	orrs	r3, r2
 8006d86:	002e      	movs	r6, r5
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	e7ce      	b.n	8006d2a <_svfiprintf_r+0x96>
 8006d8c:	9b07      	ldr	r3, [sp, #28]
 8006d8e:	1d19      	adds	r1, r3, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	9107      	str	r1, [sp, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	db01      	blt.n	8006d9c <_svfiprintf_r+0x108>
 8006d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d9a:	e004      	b.n	8006da6 <_svfiprintf_r+0x112>
 8006d9c:	425b      	negs	r3, r3
 8006d9e:	60e3      	str	r3, [r4, #12]
 8006da0:	2302      	movs	r3, #2
 8006da2:	4313      	orrs	r3, r2
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	782b      	ldrb	r3, [r5, #0]
 8006da8:	2b2e      	cmp	r3, #46	; 0x2e
 8006daa:	d10a      	bne.n	8006dc2 <_svfiprintf_r+0x12e>
 8006dac:	786b      	ldrb	r3, [r5, #1]
 8006dae:	2b2a      	cmp	r3, #42	; 0x2a
 8006db0:	d135      	bne.n	8006e1e <_svfiprintf_r+0x18a>
 8006db2:	9b07      	ldr	r3, [sp, #28]
 8006db4:	3502      	adds	r5, #2
 8006db6:	1d1a      	adds	r2, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	9207      	str	r2, [sp, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	db2b      	blt.n	8006e18 <_svfiprintf_r+0x184>
 8006dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc2:	4e30      	ldr	r6, [pc, #192]	; (8006e84 <_svfiprintf_r+0x1f0>)
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	0030      	movs	r0, r6
 8006dc8:	7829      	ldrb	r1, [r5, #0]
 8006dca:	f7ff febf 	bl	8006b4c <memchr>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d006      	beq.n	8006de0 <_svfiprintf_r+0x14c>
 8006dd2:	2340      	movs	r3, #64	; 0x40
 8006dd4:	1b80      	subs	r0, r0, r6
 8006dd6:	4083      	lsls	r3, r0
 8006dd8:	6822      	ldr	r2, [r4, #0]
 8006dda:	3501      	adds	r5, #1
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	6023      	str	r3, [r4, #0]
 8006de0:	7829      	ldrb	r1, [r5, #0]
 8006de2:	2206      	movs	r2, #6
 8006de4:	4828      	ldr	r0, [pc, #160]	; (8006e88 <_svfiprintf_r+0x1f4>)
 8006de6:	1c6e      	adds	r6, r5, #1
 8006de8:	7621      	strb	r1, [r4, #24]
 8006dea:	f7ff feaf 	bl	8006b4c <memchr>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d03c      	beq.n	8006e6c <_svfiprintf_r+0x1d8>
 8006df2:	4b26      	ldr	r3, [pc, #152]	; (8006e8c <_svfiprintf_r+0x1f8>)
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d125      	bne.n	8006e44 <_svfiprintf_r+0x1b0>
 8006df8:	2207      	movs	r2, #7
 8006dfa:	9b07      	ldr	r3, [sp, #28]
 8006dfc:	3307      	adds	r3, #7
 8006dfe:	4393      	bics	r3, r2
 8006e00:	3308      	adds	r3, #8
 8006e02:	9307      	str	r3, [sp, #28]
 8006e04:	6963      	ldr	r3, [r4, #20]
 8006e06:	9a04      	ldr	r2, [sp, #16]
 8006e08:	189b      	adds	r3, r3, r2
 8006e0a:	6163      	str	r3, [r4, #20]
 8006e0c:	e765      	b.n	8006cda <_svfiprintf_r+0x46>
 8006e0e:	4343      	muls	r3, r0
 8006e10:	0035      	movs	r5, r6
 8006e12:	2101      	movs	r1, #1
 8006e14:	189b      	adds	r3, r3, r2
 8006e16:	e7a6      	b.n	8006d66 <_svfiprintf_r+0xd2>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	425b      	negs	r3, r3
 8006e1c:	e7d0      	b.n	8006dc0 <_svfiprintf_r+0x12c>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	200a      	movs	r0, #10
 8006e22:	001a      	movs	r2, r3
 8006e24:	3501      	adds	r5, #1
 8006e26:	6063      	str	r3, [r4, #4]
 8006e28:	7829      	ldrb	r1, [r5, #0]
 8006e2a:	1c6e      	adds	r6, r5, #1
 8006e2c:	3930      	subs	r1, #48	; 0x30
 8006e2e:	2909      	cmp	r1, #9
 8006e30:	d903      	bls.n	8006e3a <_svfiprintf_r+0x1a6>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0c5      	beq.n	8006dc2 <_svfiprintf_r+0x12e>
 8006e36:	9209      	str	r2, [sp, #36]	; 0x24
 8006e38:	e7c3      	b.n	8006dc2 <_svfiprintf_r+0x12e>
 8006e3a:	4342      	muls	r2, r0
 8006e3c:	0035      	movs	r5, r6
 8006e3e:	2301      	movs	r3, #1
 8006e40:	1852      	adds	r2, r2, r1
 8006e42:	e7f1      	b.n	8006e28 <_svfiprintf_r+0x194>
 8006e44:	ab07      	add	r3, sp, #28
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	003a      	movs	r2, r7
 8006e4a:	0021      	movs	r1, r4
 8006e4c:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <_svfiprintf_r+0x1fc>)
 8006e4e:	9803      	ldr	r0, [sp, #12]
 8006e50:	e000      	b.n	8006e54 <_svfiprintf_r+0x1c0>
 8006e52:	bf00      	nop
 8006e54:	9004      	str	r0, [sp, #16]
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	d1d3      	bne.n	8006e04 <_svfiprintf_r+0x170>
 8006e5c:	89bb      	ldrh	r3, [r7, #12]
 8006e5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e60:	065b      	lsls	r3, r3, #25
 8006e62:	d400      	bmi.n	8006e66 <_svfiprintf_r+0x1d2>
 8006e64:	e72d      	b.n	8006cc2 <_svfiprintf_r+0x2e>
 8006e66:	2001      	movs	r0, #1
 8006e68:	4240      	negs	r0, r0
 8006e6a:	e72a      	b.n	8006cc2 <_svfiprintf_r+0x2e>
 8006e6c:	ab07      	add	r3, sp, #28
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	003a      	movs	r2, r7
 8006e72:	0021      	movs	r1, r4
 8006e74:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <_svfiprintf_r+0x1fc>)
 8006e76:	9803      	ldr	r0, [sp, #12]
 8006e78:	f7ff f936 	bl	80060e8 <_printf_i>
 8006e7c:	e7ea      	b.n	8006e54 <_svfiprintf_r+0x1c0>
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	080073bc 	.word	0x080073bc
 8006e84:	080073c2 	.word	0x080073c2
 8006e88:	080073c6 	.word	0x080073c6
 8006e8c:	00000000 	.word	0x00000000
 8006e90:	08006bd1 	.word	0x08006bd1

08006e94 <_raise_r>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	0004      	movs	r4, r0
 8006e98:	000d      	movs	r5, r1
 8006e9a:	291f      	cmp	r1, #31
 8006e9c:	d904      	bls.n	8006ea8 <_raise_r+0x14>
 8006e9e:	2316      	movs	r3, #22
 8006ea0:	6003      	str	r3, [r0, #0]
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	4240      	negs	r0, r0
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <_raise_r+0x24>
 8006eae:	008a      	lsls	r2, r1, #2
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	2a00      	cmp	r2, #0
 8006eb6:	d108      	bne.n	8006eca <_raise_r+0x36>
 8006eb8:	0020      	movs	r0, r4
 8006eba:	f000 f831 	bl	8006f20 <_getpid_r>
 8006ebe:	002a      	movs	r2, r5
 8006ec0:	0001      	movs	r1, r0
 8006ec2:	0020      	movs	r0, r4
 8006ec4:	f000 f81a 	bl	8006efc <_kill_r>
 8006ec8:	e7ed      	b.n	8006ea6 <_raise_r+0x12>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	2a01      	cmp	r2, #1
 8006ece:	d0ea      	beq.n	8006ea6 <_raise_r+0x12>
 8006ed0:	1c51      	adds	r1, r2, #1
 8006ed2:	d103      	bne.n	8006edc <_raise_r+0x48>
 8006ed4:	2316      	movs	r3, #22
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	e7e4      	b.n	8006ea6 <_raise_r+0x12>
 8006edc:	2400      	movs	r4, #0
 8006ede:	0028      	movs	r0, r5
 8006ee0:	601c      	str	r4, [r3, #0]
 8006ee2:	4790      	blx	r2
 8006ee4:	0020      	movs	r0, r4
 8006ee6:	e7de      	b.n	8006ea6 <_raise_r+0x12>

08006ee8 <raise>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <raise+0x10>)
 8006eec:	0001      	movs	r1, r0
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	f7ff ffd0 	bl	8006e94 <_raise_r>
 8006ef4:	bd10      	pop	{r4, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	20000014 	.word	0x20000014

08006efc <_kill_r>:
 8006efc:	2300      	movs	r3, #0
 8006efe:	b570      	push	{r4, r5, r6, lr}
 8006f00:	4d06      	ldr	r5, [pc, #24]	; (8006f1c <_kill_r+0x20>)
 8006f02:	0004      	movs	r4, r0
 8006f04:	0008      	movs	r0, r1
 8006f06:	0011      	movs	r1, r2
 8006f08:	602b      	str	r3, [r5, #0]
 8006f0a:	f7fc fccb 	bl	80038a4 <_kill>
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	d103      	bne.n	8006f1a <_kill_r+0x1e>
 8006f12:	682b      	ldr	r3, [r5, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d000      	beq.n	8006f1a <_kill_r+0x1e>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	20000228 	.word	0x20000228

08006f20 <_getpid_r>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	f7fc fcbd 	bl	80038a0 <_getpid>
 8006f26:	bd10      	pop	{r4, pc}

08006f28 <__sread>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	000c      	movs	r4, r1
 8006f2c:	250e      	movs	r5, #14
 8006f2e:	5f49      	ldrsh	r1, [r1, r5]
 8006f30:	f000 f8ac 	bl	800708c <_read_r>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	db03      	blt.n	8006f40 <__sread+0x18>
 8006f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006f3a:	181b      	adds	r3, r3, r0
 8006f3c:	6563      	str	r3, [r4, #84]	; 0x54
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	4a02      	ldr	r2, [pc, #8]	; (8006f4c <__sread+0x24>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	e7f9      	b.n	8006f3e <__sread+0x16>
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	ffffefff 	.word	0xffffefff

08006f50 <__swrite>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	001f      	movs	r7, r3
 8006f54:	898b      	ldrh	r3, [r1, #12]
 8006f56:	0005      	movs	r5, r0
 8006f58:	000c      	movs	r4, r1
 8006f5a:	0016      	movs	r6, r2
 8006f5c:	05db      	lsls	r3, r3, #23
 8006f5e:	d505      	bpl.n	8006f6c <__swrite+0x1c>
 8006f60:	230e      	movs	r3, #14
 8006f62:	5ec9      	ldrsh	r1, [r1, r3]
 8006f64:	2200      	movs	r2, #0
 8006f66:	2302      	movs	r3, #2
 8006f68:	f000 f874 	bl	8007054 <_lseek_r>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	4a05      	ldr	r2, [pc, #20]	; (8006f84 <__swrite+0x34>)
 8006f70:	0028      	movs	r0, r5
 8006f72:	4013      	ands	r3, r2
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	0032      	movs	r2, r6
 8006f78:	230e      	movs	r3, #14
 8006f7a:	5ee1      	ldrsh	r1, [r4, r3]
 8006f7c:	003b      	movs	r3, r7
 8006f7e:	f000 f81f 	bl	8006fc0 <_write_r>
 8006f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f84:	ffffefff 	.word	0xffffefff

08006f88 <__sseek>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	000c      	movs	r4, r1
 8006f8c:	250e      	movs	r5, #14
 8006f8e:	5f49      	ldrsh	r1, [r1, r5]
 8006f90:	f000 f860 	bl	8007054 <_lseek_r>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	1c42      	adds	r2, r0, #1
 8006f98:	d103      	bne.n	8006fa2 <__sseek+0x1a>
 8006f9a:	4a05      	ldr	r2, [pc, #20]	; (8006fb0 <__sseek+0x28>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	2280      	movs	r2, #128	; 0x80
 8006fa4:	0152      	lsls	r2, r2, #5
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	6560      	str	r0, [r4, #84]	; 0x54
 8006fac:	e7f8      	b.n	8006fa0 <__sseek+0x18>
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	ffffefff 	.word	0xffffefff

08006fb4 <__sclose>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	230e      	movs	r3, #14
 8006fb8:	5ec9      	ldrsh	r1, [r1, r3]
 8006fba:	f000 f815 	bl	8006fe8 <_close_r>
 8006fbe:	bd10      	pop	{r4, pc}

08006fc0 <_write_r>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	0004      	movs	r4, r0
 8006fc4:	0008      	movs	r0, r1
 8006fc6:	0011      	movs	r1, r2
 8006fc8:	001a      	movs	r2, r3
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4d05      	ldr	r5, [pc, #20]	; (8006fe4 <_write_r+0x24>)
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7fc fc84 	bl	80038dc <_write>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d103      	bne.n	8006fe0 <_write_r+0x20>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d000      	beq.n	8006fe0 <_write_r+0x20>
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	bd70      	pop	{r4, r5, r6, pc}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	20000228 	.word	0x20000228

08006fe8 <_close_r>:
 8006fe8:	2300      	movs	r3, #0
 8006fea:	b570      	push	{r4, r5, r6, lr}
 8006fec:	4d06      	ldr	r5, [pc, #24]	; (8007008 <_close_r+0x20>)
 8006fee:	0004      	movs	r4, r0
 8006ff0:	0008      	movs	r0, r1
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	f7fc fc80 	bl	80038f8 <_close>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d103      	bne.n	8007004 <_close_r+0x1c>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d000      	beq.n	8007004 <_close_r+0x1c>
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	bd70      	pop	{r4, r5, r6, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	20000228 	.word	0x20000228

0800700c <_fstat_r>:
 800700c:	2300      	movs	r3, #0
 800700e:	b570      	push	{r4, r5, r6, lr}
 8007010:	4d06      	ldr	r5, [pc, #24]	; (800702c <_fstat_r+0x20>)
 8007012:	0004      	movs	r4, r0
 8007014:	0008      	movs	r0, r1
 8007016:	0011      	movs	r1, r2
 8007018:	602b      	str	r3, [r5, #0]
 800701a:	f7fc fc71 	bl	8003900 <_fstat>
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	d103      	bne.n	800702a <_fstat_r+0x1e>
 8007022:	682b      	ldr	r3, [r5, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d000      	beq.n	800702a <_fstat_r+0x1e>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	20000228 	.word	0x20000228

08007030 <_isatty_r>:
 8007030:	2300      	movs	r3, #0
 8007032:	b570      	push	{r4, r5, r6, lr}
 8007034:	4d06      	ldr	r5, [pc, #24]	; (8007050 <_isatty_r+0x20>)
 8007036:	0004      	movs	r4, r0
 8007038:	0008      	movs	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fc fc66 	bl	800390c <_isatty>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d103      	bne.n	800704c <_isatty_r+0x1c>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d000      	beq.n	800704c <_isatty_r+0x1c>
 800704a:	6023      	str	r3, [r4, #0]
 800704c:	bd70      	pop	{r4, r5, r6, pc}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	20000228 	.word	0x20000228

08007054 <_lseek_r>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	0004      	movs	r4, r0
 8007058:	0008      	movs	r0, r1
 800705a:	0011      	movs	r1, r2
 800705c:	001a      	movs	r2, r3
 800705e:	2300      	movs	r3, #0
 8007060:	4d05      	ldr	r5, [pc, #20]	; (8007078 <_lseek_r+0x24>)
 8007062:	602b      	str	r3, [r5, #0]
 8007064:	f7fc fc54 	bl	8003910 <_lseek>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d103      	bne.n	8007074 <_lseek_r+0x20>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d000      	beq.n	8007074 <_lseek_r+0x20>
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	bd70      	pop	{r4, r5, r6, pc}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	20000228 	.word	0x20000228

0800707c <_malloc_usable_size_r>:
 800707c:	1f0b      	subs	r3, r1, #4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	1f18      	subs	r0, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	da01      	bge.n	800708a <_malloc_usable_size_r+0xe>
 8007086:	580b      	ldr	r3, [r1, r0]
 8007088:	18c0      	adds	r0, r0, r3
 800708a:	4770      	bx	lr

0800708c <_read_r>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	0004      	movs	r4, r0
 8007090:	0008      	movs	r0, r1
 8007092:	0011      	movs	r1, r2
 8007094:	001a      	movs	r2, r3
 8007096:	2300      	movs	r3, #0
 8007098:	4d05      	ldr	r5, [pc, #20]	; (80070b0 <_read_r+0x24>)
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	f7fc fc10 	bl	80038c0 <_read>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d103      	bne.n	80070ac <_read_r+0x20>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d000      	beq.n	80070ac <_read_r+0x20>
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	bd70      	pop	{r4, r5, r6, pc}
 80070ae:	46c0      	nop			; (mov r8, r8)
 80070b0:	20000228 	.word	0x20000228

080070b4 <_init>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr

080070c0 <_fini>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	46c0      	nop			; (mov r8, r8)
 80070c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c6:	bc08      	pop	{r3}
 80070c8:	469e      	mov	lr, r3
 80070ca:	4770      	bx	lr
