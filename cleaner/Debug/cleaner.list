
cleaner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800619c  0800619c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a4  080061a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a8  080061a8  000161a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080061ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000078  08006224  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08006224  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1bf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cf  00000000  00000000  0003a25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00010330  00000000  00000000  0003d82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0004db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002e88  00000000  00000000  0004e5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001642d  00000000  00000000  00051478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016147  00000000  00000000  000678a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081db5  00000000  00000000  0007d9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ff7a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cf0  00000000  00000000  000ff7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005e2c 	.word	0x08005e2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005e2c 	.word	0x08005e2c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fb71 	bl	8000924 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 faf5 	bl	800083c <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb63 	bl	8000924 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb59 	bl	8000924 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb03 	bl	800088c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 faf9 	bl	800088c <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	1c08      	adds	r0, r1, #0
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff65 	.word	0xffffff65
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f848 	bl	800036c <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_lmul>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	0415      	lsls	r5, r2, #16
 80002ec:	0c2d      	lsrs	r5, r5, #16
 80002ee:	000f      	movs	r7, r1
 80002f0:	0001      	movs	r1, r0
 80002f2:	002e      	movs	r6, r5
 80002f4:	46c6      	mov	lr, r8
 80002f6:	4684      	mov	ip, r0
 80002f8:	0400      	lsls	r0, r0, #16
 80002fa:	0c14      	lsrs	r4, r2, #16
 80002fc:	0c00      	lsrs	r0, r0, #16
 80002fe:	0c09      	lsrs	r1, r1, #16
 8000300:	4346      	muls	r6, r0
 8000302:	434d      	muls	r5, r1
 8000304:	4360      	muls	r0, r4
 8000306:	4361      	muls	r1, r4
 8000308:	1940      	adds	r0, r0, r5
 800030a:	0c34      	lsrs	r4, r6, #16
 800030c:	1824      	adds	r4, r4, r0
 800030e:	b500      	push	{lr}
 8000310:	42a5      	cmp	r5, r4
 8000312:	d903      	bls.n	800031c <__aeabi_lmul+0x34>
 8000314:	2080      	movs	r0, #128	; 0x80
 8000316:	0240      	lsls	r0, r0, #9
 8000318:	4680      	mov	r8, r0
 800031a:	4441      	add	r1, r8
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	186d      	adds	r5, r5, r1
 8000320:	4661      	mov	r1, ip
 8000322:	4359      	muls	r1, r3
 8000324:	437a      	muls	r2, r7
 8000326:	0430      	lsls	r0, r6, #16
 8000328:	1949      	adds	r1, r1, r5
 800032a:	0424      	lsls	r4, r4, #16
 800032c:	0c00      	lsrs	r0, r0, #16
 800032e:	1820      	adds	r0, r4, r0
 8000330:	1889      	adds	r1, r1, r2
 8000332:	bc80      	pop	{r7}
 8000334:	46b8      	mov	r8, r7
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000338 <__clear_cache>:
 8000338:	4770      	bx	lr
 800033a:	46c0      	nop			; (mov r8, r8)

0800033c <__aeabi_f2uiz>:
 800033c:	219e      	movs	r1, #158	; 0x9e
 800033e:	b510      	push	{r4, lr}
 8000340:	05c9      	lsls	r1, r1, #23
 8000342:	1c04      	adds	r4, r0, #0
 8000344:	f7ff ffa6 	bl	8000294 <__aeabi_fcmpge>
 8000348:	2800      	cmp	r0, #0
 800034a:	d103      	bne.n	8000354 <__aeabi_f2uiz+0x18>
 800034c:	1c20      	adds	r0, r4, #0
 800034e:	f000 fcfb 	bl	8000d48 <__aeabi_f2iz>
 8000352:	bd10      	pop	{r4, pc}
 8000354:	219e      	movs	r1, #158	; 0x9e
 8000356:	1c20      	adds	r0, r4, #0
 8000358:	05c9      	lsls	r1, r1, #23
 800035a:	f000 fb2d 	bl	80009b8 <__aeabi_fsub>
 800035e:	f000 fcf3 	bl	8000d48 <__aeabi_f2iz>
 8000362:	2380      	movs	r3, #128	; 0x80
 8000364:	061b      	lsls	r3, r3, #24
 8000366:	469c      	mov	ip, r3
 8000368:	4460      	add	r0, ip
 800036a:	e7f2      	b.n	8000352 <__aeabi_f2uiz+0x16>

0800036c <__udivmoddi4>:
 800036c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800036e:	4657      	mov	r7, sl
 8000370:	464e      	mov	r6, r9
 8000372:	4645      	mov	r5, r8
 8000374:	46de      	mov	lr, fp
 8000376:	b5e0      	push	{r5, r6, r7, lr}
 8000378:	0004      	movs	r4, r0
 800037a:	000d      	movs	r5, r1
 800037c:	4692      	mov	sl, r2
 800037e:	4699      	mov	r9, r3
 8000380:	b083      	sub	sp, #12
 8000382:	428b      	cmp	r3, r1
 8000384:	d830      	bhi.n	80003e8 <__udivmoddi4+0x7c>
 8000386:	d02d      	beq.n	80003e4 <__udivmoddi4+0x78>
 8000388:	4649      	mov	r1, r9
 800038a:	4650      	mov	r0, sl
 800038c:	f001 f978 	bl	8001680 <__clzdi2>
 8000390:	0029      	movs	r1, r5
 8000392:	0006      	movs	r6, r0
 8000394:	0020      	movs	r0, r4
 8000396:	f001 f973 	bl	8001680 <__clzdi2>
 800039a:	1a33      	subs	r3, r6, r0
 800039c:	4698      	mov	r8, r3
 800039e:	3b20      	subs	r3, #32
 80003a0:	469b      	mov	fp, r3
 80003a2:	d433      	bmi.n	800040c <__udivmoddi4+0xa0>
 80003a4:	465a      	mov	r2, fp
 80003a6:	4653      	mov	r3, sl
 80003a8:	4093      	lsls	r3, r2
 80003aa:	4642      	mov	r2, r8
 80003ac:	001f      	movs	r7, r3
 80003ae:	4653      	mov	r3, sl
 80003b0:	4093      	lsls	r3, r2
 80003b2:	001e      	movs	r6, r3
 80003b4:	42af      	cmp	r7, r5
 80003b6:	d83a      	bhi.n	800042e <__udivmoddi4+0xc2>
 80003b8:	42af      	cmp	r7, r5
 80003ba:	d100      	bne.n	80003be <__udivmoddi4+0x52>
 80003bc:	e078      	b.n	80004b0 <__udivmoddi4+0x144>
 80003be:	465b      	mov	r3, fp
 80003c0:	1ba4      	subs	r4, r4, r6
 80003c2:	41bd      	sbcs	r5, r7
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	da00      	bge.n	80003ca <__udivmoddi4+0x5e>
 80003c8:	e075      	b.n	80004b6 <__udivmoddi4+0x14a>
 80003ca:	2200      	movs	r2, #0
 80003cc:	2300      	movs	r3, #0
 80003ce:	9200      	str	r2, [sp, #0]
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	2301      	movs	r3, #1
 80003d4:	465a      	mov	r2, fp
 80003d6:	4093      	lsls	r3, r2
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	2301      	movs	r3, #1
 80003dc:	4642      	mov	r2, r8
 80003de:	4093      	lsls	r3, r2
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	e028      	b.n	8000436 <__udivmoddi4+0xca>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	d9cf      	bls.n	8000388 <__udivmoddi4+0x1c>
 80003e8:	2200      	movs	r2, #0
 80003ea:	2300      	movs	r3, #0
 80003ec:	9200      	str	r2, [sp, #0]
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <__udivmoddi4+0x8e>
 80003f6:	601c      	str	r4, [r3, #0]
 80003f8:	605d      	str	r5, [r3, #4]
 80003fa:	9800      	ldr	r0, [sp, #0]
 80003fc:	9901      	ldr	r1, [sp, #4]
 80003fe:	b003      	add	sp, #12
 8000400:	bcf0      	pop	{r4, r5, r6, r7}
 8000402:	46bb      	mov	fp, r7
 8000404:	46b2      	mov	sl, r6
 8000406:	46a9      	mov	r9, r5
 8000408:	46a0      	mov	r8, r4
 800040a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800040c:	4642      	mov	r2, r8
 800040e:	2320      	movs	r3, #32
 8000410:	1a9b      	subs	r3, r3, r2
 8000412:	4652      	mov	r2, sl
 8000414:	40da      	lsrs	r2, r3
 8000416:	4641      	mov	r1, r8
 8000418:	0013      	movs	r3, r2
 800041a:	464a      	mov	r2, r9
 800041c:	408a      	lsls	r2, r1
 800041e:	0017      	movs	r7, r2
 8000420:	4642      	mov	r2, r8
 8000422:	431f      	orrs	r7, r3
 8000424:	4653      	mov	r3, sl
 8000426:	4093      	lsls	r3, r2
 8000428:	001e      	movs	r6, r3
 800042a:	42af      	cmp	r7, r5
 800042c:	d9c4      	bls.n	80003b8 <__udivmoddi4+0x4c>
 800042e:	2200      	movs	r2, #0
 8000430:	2300      	movs	r3, #0
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	9301      	str	r3, [sp, #4]
 8000436:	4643      	mov	r3, r8
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0d9      	beq.n	80003f0 <__udivmoddi4+0x84>
 800043c:	07fb      	lsls	r3, r7, #31
 800043e:	0872      	lsrs	r2, r6, #1
 8000440:	431a      	orrs	r2, r3
 8000442:	4646      	mov	r6, r8
 8000444:	087b      	lsrs	r3, r7, #1
 8000446:	e00e      	b.n	8000466 <__udivmoddi4+0xfa>
 8000448:	42ab      	cmp	r3, r5
 800044a:	d101      	bne.n	8000450 <__udivmoddi4+0xe4>
 800044c:	42a2      	cmp	r2, r4
 800044e:	d80c      	bhi.n	800046a <__udivmoddi4+0xfe>
 8000450:	1aa4      	subs	r4, r4, r2
 8000452:	419d      	sbcs	r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	1924      	adds	r4, r4, r4
 8000458:	416d      	adcs	r5, r5
 800045a:	2100      	movs	r1, #0
 800045c:	3e01      	subs	r6, #1
 800045e:	1824      	adds	r4, r4, r0
 8000460:	414d      	adcs	r5, r1
 8000462:	2e00      	cmp	r6, #0
 8000464:	d006      	beq.n	8000474 <__udivmoddi4+0x108>
 8000466:	42ab      	cmp	r3, r5
 8000468:	d9ee      	bls.n	8000448 <__udivmoddi4+0xdc>
 800046a:	3e01      	subs	r6, #1
 800046c:	1924      	adds	r4, r4, r4
 800046e:	416d      	adcs	r5, r5
 8000470:	2e00      	cmp	r6, #0
 8000472:	d1f8      	bne.n	8000466 <__udivmoddi4+0xfa>
 8000474:	9800      	ldr	r0, [sp, #0]
 8000476:	9901      	ldr	r1, [sp, #4]
 8000478:	465b      	mov	r3, fp
 800047a:	1900      	adds	r0, r0, r4
 800047c:	4169      	adcs	r1, r5
 800047e:	2b00      	cmp	r3, #0
 8000480:	db24      	blt.n	80004cc <__udivmoddi4+0x160>
 8000482:	002b      	movs	r3, r5
 8000484:	465a      	mov	r2, fp
 8000486:	4644      	mov	r4, r8
 8000488:	40d3      	lsrs	r3, r2
 800048a:	002a      	movs	r2, r5
 800048c:	40e2      	lsrs	r2, r4
 800048e:	001c      	movs	r4, r3
 8000490:	465b      	mov	r3, fp
 8000492:	0015      	movs	r5, r2
 8000494:	2b00      	cmp	r3, #0
 8000496:	db2a      	blt.n	80004ee <__udivmoddi4+0x182>
 8000498:	0026      	movs	r6, r4
 800049a:	409e      	lsls	r6, r3
 800049c:	0033      	movs	r3, r6
 800049e:	0026      	movs	r6, r4
 80004a0:	4647      	mov	r7, r8
 80004a2:	40be      	lsls	r6, r7
 80004a4:	0032      	movs	r2, r6
 80004a6:	1a80      	subs	r0, r0, r2
 80004a8:	4199      	sbcs	r1, r3
 80004aa:	9000      	str	r0, [sp, #0]
 80004ac:	9101      	str	r1, [sp, #4]
 80004ae:	e79f      	b.n	80003f0 <__udivmoddi4+0x84>
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d8bc      	bhi.n	800042e <__udivmoddi4+0xc2>
 80004b4:	e783      	b.n	80003be <__udivmoddi4+0x52>
 80004b6:	4642      	mov	r2, r8
 80004b8:	2320      	movs	r3, #32
 80004ba:	2100      	movs	r1, #0
 80004bc:	1a9b      	subs	r3, r3, r2
 80004be:	2200      	movs	r2, #0
 80004c0:	9100      	str	r1, [sp, #0]
 80004c2:	9201      	str	r2, [sp, #4]
 80004c4:	2201      	movs	r2, #1
 80004c6:	40da      	lsrs	r2, r3
 80004c8:	9201      	str	r2, [sp, #4]
 80004ca:	e786      	b.n	80003da <__udivmoddi4+0x6e>
 80004cc:	4642      	mov	r2, r8
 80004ce:	2320      	movs	r3, #32
 80004d0:	1a9b      	subs	r3, r3, r2
 80004d2:	002a      	movs	r2, r5
 80004d4:	4646      	mov	r6, r8
 80004d6:	409a      	lsls	r2, r3
 80004d8:	0023      	movs	r3, r4
 80004da:	40f3      	lsrs	r3, r6
 80004dc:	4644      	mov	r4, r8
 80004de:	4313      	orrs	r3, r2
 80004e0:	002a      	movs	r2, r5
 80004e2:	40e2      	lsrs	r2, r4
 80004e4:	001c      	movs	r4, r3
 80004e6:	465b      	mov	r3, fp
 80004e8:	0015      	movs	r5, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	dad4      	bge.n	8000498 <__udivmoddi4+0x12c>
 80004ee:	4642      	mov	r2, r8
 80004f0:	002f      	movs	r7, r5
 80004f2:	2320      	movs	r3, #32
 80004f4:	0026      	movs	r6, r4
 80004f6:	4097      	lsls	r7, r2
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	40de      	lsrs	r6, r3
 80004fc:	003b      	movs	r3, r7
 80004fe:	4333      	orrs	r3, r6
 8000500:	e7cd      	b.n	800049e <__udivmoddi4+0x132>
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fadd>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	4646      	mov	r6, r8
 8000508:	46d6      	mov	lr, sl
 800050a:	464f      	mov	r7, r9
 800050c:	024d      	lsls	r5, r1, #9
 800050e:	0242      	lsls	r2, r0, #9
 8000510:	b5c0      	push	{r6, r7, lr}
 8000512:	0a52      	lsrs	r2, r2, #9
 8000514:	0a6e      	lsrs	r6, r5, #9
 8000516:	0047      	lsls	r7, r0, #1
 8000518:	46b0      	mov	r8, r6
 800051a:	0e3f      	lsrs	r7, r7, #24
 800051c:	004e      	lsls	r6, r1, #1
 800051e:	0fc4      	lsrs	r4, r0, #31
 8000520:	00d0      	lsls	r0, r2, #3
 8000522:	4694      	mov	ip, r2
 8000524:	003b      	movs	r3, r7
 8000526:	4682      	mov	sl, r0
 8000528:	0e36      	lsrs	r6, r6, #24
 800052a:	0fc9      	lsrs	r1, r1, #31
 800052c:	09ad      	lsrs	r5, r5, #6
 800052e:	428c      	cmp	r4, r1
 8000530:	d06d      	beq.n	800060e <__aeabi_fadd+0x10a>
 8000532:	1bb8      	subs	r0, r7, r6
 8000534:	4681      	mov	r9, r0
 8000536:	2800      	cmp	r0, #0
 8000538:	dd4d      	ble.n	80005d6 <__aeabi_fadd+0xd2>
 800053a:	2e00      	cmp	r6, #0
 800053c:	d100      	bne.n	8000540 <__aeabi_fadd+0x3c>
 800053e:	e088      	b.n	8000652 <__aeabi_fadd+0x14e>
 8000540:	2fff      	cmp	r7, #255	; 0xff
 8000542:	d05a      	beq.n	80005fa <__aeabi_fadd+0xf6>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	04db      	lsls	r3, r3, #19
 8000548:	431d      	orrs	r5, r3
 800054a:	464b      	mov	r3, r9
 800054c:	2201      	movs	r2, #1
 800054e:	2b1b      	cmp	r3, #27
 8000550:	dc0a      	bgt.n	8000568 <__aeabi_fadd+0x64>
 8000552:	002b      	movs	r3, r5
 8000554:	464a      	mov	r2, r9
 8000556:	4649      	mov	r1, r9
 8000558:	40d3      	lsrs	r3, r2
 800055a:	2220      	movs	r2, #32
 800055c:	1a52      	subs	r2, r2, r1
 800055e:	4095      	lsls	r5, r2
 8000560:	002a      	movs	r2, r5
 8000562:	1e55      	subs	r5, r2, #1
 8000564:	41aa      	sbcs	r2, r5
 8000566:	431a      	orrs	r2, r3
 8000568:	4653      	mov	r3, sl
 800056a:	1a9a      	subs	r2, r3, r2
 800056c:	0153      	lsls	r3, r2, #5
 800056e:	d400      	bmi.n	8000572 <__aeabi_fadd+0x6e>
 8000570:	e0b9      	b.n	80006e6 <__aeabi_fadd+0x1e2>
 8000572:	0192      	lsls	r2, r2, #6
 8000574:	0996      	lsrs	r6, r2, #6
 8000576:	0030      	movs	r0, r6
 8000578:	f001 f864 	bl	8001644 <__clzsi2>
 800057c:	3805      	subs	r0, #5
 800057e:	4086      	lsls	r6, r0
 8000580:	4287      	cmp	r7, r0
 8000582:	dd00      	ble.n	8000586 <__aeabi_fadd+0x82>
 8000584:	e0d4      	b.n	8000730 <__aeabi_fadd+0x22c>
 8000586:	0033      	movs	r3, r6
 8000588:	1bc7      	subs	r7, r0, r7
 800058a:	2020      	movs	r0, #32
 800058c:	3701      	adds	r7, #1
 800058e:	40fb      	lsrs	r3, r7
 8000590:	1bc7      	subs	r7, r0, r7
 8000592:	40be      	lsls	r6, r7
 8000594:	0032      	movs	r2, r6
 8000596:	1e56      	subs	r6, r2, #1
 8000598:	41b2      	sbcs	r2, r6
 800059a:	2700      	movs	r7, #0
 800059c:	431a      	orrs	r2, r3
 800059e:	0753      	lsls	r3, r2, #29
 80005a0:	d004      	beq.n	80005ac <__aeabi_fadd+0xa8>
 80005a2:	230f      	movs	r3, #15
 80005a4:	4013      	ands	r3, r2
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d000      	beq.n	80005ac <__aeabi_fadd+0xa8>
 80005aa:	3204      	adds	r2, #4
 80005ac:	0153      	lsls	r3, r2, #5
 80005ae:	d400      	bmi.n	80005b2 <__aeabi_fadd+0xae>
 80005b0:	e09c      	b.n	80006ec <__aeabi_fadd+0x1e8>
 80005b2:	1c7b      	adds	r3, r7, #1
 80005b4:	2ffe      	cmp	r7, #254	; 0xfe
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0xb6>
 80005b8:	e09a      	b.n	80006f0 <__aeabi_fadd+0x1ec>
 80005ba:	0192      	lsls	r2, r2, #6
 80005bc:	0a52      	lsrs	r2, r2, #9
 80005be:	4694      	mov	ip, r2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	05d8      	lsls	r0, r3, #23
 80005c4:	4663      	mov	r3, ip
 80005c6:	07e4      	lsls	r4, r4, #31
 80005c8:	4318      	orrs	r0, r3
 80005ca:	4320      	orrs	r0, r4
 80005cc:	bce0      	pop	{r5, r6, r7}
 80005ce:	46ba      	mov	sl, r7
 80005d0:	46b1      	mov	r9, r6
 80005d2:	46a8      	mov	r8, r5
 80005d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d6:	2800      	cmp	r0, #0
 80005d8:	d049      	beq.n	800066e <__aeabi_fadd+0x16a>
 80005da:	1bf3      	subs	r3, r6, r7
 80005dc:	2f00      	cmp	r7, #0
 80005de:	d000      	beq.n	80005e2 <__aeabi_fadd+0xde>
 80005e0:	e0b6      	b.n	8000750 <__aeabi_fadd+0x24c>
 80005e2:	4652      	mov	r2, sl
 80005e4:	2a00      	cmp	r2, #0
 80005e6:	d060      	beq.n	80006aa <__aeabi_fadd+0x1a6>
 80005e8:	3b01      	subs	r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fadd+0xec>
 80005ee:	e0fc      	b.n	80007ea <__aeabi_fadd+0x2e6>
 80005f0:	2eff      	cmp	r6, #255	; 0xff
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fadd+0xf2>
 80005f4:	e0b4      	b.n	8000760 <__aeabi_fadd+0x25c>
 80005f6:	000c      	movs	r4, r1
 80005f8:	4642      	mov	r2, r8
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d078      	beq.n	80006f0 <__aeabi_fadd+0x1ec>
 80005fe:	2080      	movs	r0, #128	; 0x80
 8000600:	03c0      	lsls	r0, r0, #15
 8000602:	4310      	orrs	r0, r2
 8000604:	0242      	lsls	r2, r0, #9
 8000606:	0a53      	lsrs	r3, r2, #9
 8000608:	469c      	mov	ip, r3
 800060a:	23ff      	movs	r3, #255	; 0xff
 800060c:	e7d9      	b.n	80005c2 <__aeabi_fadd+0xbe>
 800060e:	1bb9      	subs	r1, r7, r6
 8000610:	2900      	cmp	r1, #0
 8000612:	dd71      	ble.n	80006f8 <__aeabi_fadd+0x1f4>
 8000614:	2e00      	cmp	r6, #0
 8000616:	d03f      	beq.n	8000698 <__aeabi_fadd+0x194>
 8000618:	2fff      	cmp	r7, #255	; 0xff
 800061a:	d0ee      	beq.n	80005fa <__aeabi_fadd+0xf6>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	04db      	lsls	r3, r3, #19
 8000620:	431d      	orrs	r5, r3
 8000622:	2201      	movs	r2, #1
 8000624:	291b      	cmp	r1, #27
 8000626:	dc07      	bgt.n	8000638 <__aeabi_fadd+0x134>
 8000628:	002a      	movs	r2, r5
 800062a:	2320      	movs	r3, #32
 800062c:	40ca      	lsrs	r2, r1
 800062e:	1a59      	subs	r1, r3, r1
 8000630:	408d      	lsls	r5, r1
 8000632:	1e6b      	subs	r3, r5, #1
 8000634:	419d      	sbcs	r5, r3
 8000636:	432a      	orrs	r2, r5
 8000638:	4452      	add	r2, sl
 800063a:	0153      	lsls	r3, r2, #5
 800063c:	d553      	bpl.n	80006e6 <__aeabi_fadd+0x1e2>
 800063e:	3701      	adds	r7, #1
 8000640:	2fff      	cmp	r7, #255	; 0xff
 8000642:	d055      	beq.n	80006f0 <__aeabi_fadd+0x1ec>
 8000644:	2301      	movs	r3, #1
 8000646:	497b      	ldr	r1, [pc, #492]	; (8000834 <__aeabi_fadd+0x330>)
 8000648:	4013      	ands	r3, r2
 800064a:	0852      	lsrs	r2, r2, #1
 800064c:	400a      	ands	r2, r1
 800064e:	431a      	orrs	r2, r3
 8000650:	e7a5      	b.n	800059e <__aeabi_fadd+0x9a>
 8000652:	2d00      	cmp	r5, #0
 8000654:	d02c      	beq.n	80006b0 <__aeabi_fadd+0x1ac>
 8000656:	2301      	movs	r3, #1
 8000658:	425b      	negs	r3, r3
 800065a:	469c      	mov	ip, r3
 800065c:	44e1      	add	r9, ip
 800065e:	464b      	mov	r3, r9
 8000660:	2b00      	cmp	r3, #0
 8000662:	d100      	bne.n	8000666 <__aeabi_fadd+0x162>
 8000664:	e0ad      	b.n	80007c2 <__aeabi_fadd+0x2be>
 8000666:	2fff      	cmp	r7, #255	; 0xff
 8000668:	d000      	beq.n	800066c <__aeabi_fadd+0x168>
 800066a:	e76e      	b.n	800054a <__aeabi_fadd+0x46>
 800066c:	e7c5      	b.n	80005fa <__aeabi_fadd+0xf6>
 800066e:	20fe      	movs	r0, #254	; 0xfe
 8000670:	1c7e      	adds	r6, r7, #1
 8000672:	4230      	tst	r0, r6
 8000674:	d160      	bne.n	8000738 <__aeabi_fadd+0x234>
 8000676:	2f00      	cmp	r7, #0
 8000678:	d000      	beq.n	800067c <__aeabi_fadd+0x178>
 800067a:	e093      	b.n	80007a4 <__aeabi_fadd+0x2a0>
 800067c:	4652      	mov	r2, sl
 800067e:	2a00      	cmp	r2, #0
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x180>
 8000682:	e0b6      	b.n	80007f2 <__aeabi_fadd+0x2ee>
 8000684:	2d00      	cmp	r5, #0
 8000686:	d09c      	beq.n	80005c2 <__aeabi_fadd+0xbe>
 8000688:	1b52      	subs	r2, r2, r5
 800068a:	0150      	lsls	r0, r2, #5
 800068c:	d400      	bmi.n	8000690 <__aeabi_fadd+0x18c>
 800068e:	e0c3      	b.n	8000818 <__aeabi_fadd+0x314>
 8000690:	4653      	mov	r3, sl
 8000692:	000c      	movs	r4, r1
 8000694:	1aea      	subs	r2, r5, r3
 8000696:	e782      	b.n	800059e <__aeabi_fadd+0x9a>
 8000698:	2d00      	cmp	r5, #0
 800069a:	d009      	beq.n	80006b0 <__aeabi_fadd+0x1ac>
 800069c:	3901      	subs	r1, #1
 800069e:	2900      	cmp	r1, #0
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x1a0>
 80006a2:	e08b      	b.n	80007bc <__aeabi_fadd+0x2b8>
 80006a4:	2fff      	cmp	r7, #255	; 0xff
 80006a6:	d1bc      	bne.n	8000622 <__aeabi_fadd+0x11e>
 80006a8:	e7a7      	b.n	80005fa <__aeabi_fadd+0xf6>
 80006aa:	000c      	movs	r4, r1
 80006ac:	4642      	mov	r2, r8
 80006ae:	0037      	movs	r7, r6
 80006b0:	2fff      	cmp	r7, #255	; 0xff
 80006b2:	d0a2      	beq.n	80005fa <__aeabi_fadd+0xf6>
 80006b4:	0252      	lsls	r2, r2, #9
 80006b6:	0a53      	lsrs	r3, r2, #9
 80006b8:	469c      	mov	ip, r3
 80006ba:	b2fb      	uxtb	r3, r7
 80006bc:	e781      	b.n	80005c2 <__aeabi_fadd+0xbe>
 80006be:	21fe      	movs	r1, #254	; 0xfe
 80006c0:	3701      	adds	r7, #1
 80006c2:	4239      	tst	r1, r7
 80006c4:	d165      	bne.n	8000792 <__aeabi_fadd+0x28e>
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d17e      	bne.n	80007c8 <__aeabi_fadd+0x2c4>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fadd+0x1cc>
 80006ce:	e0aa      	b.n	8000826 <__aeabi_fadd+0x322>
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_fadd+0x1d2>
 80006d4:	e775      	b.n	80005c2 <__aeabi_fadd+0xbe>
 80006d6:	002a      	movs	r2, r5
 80006d8:	4452      	add	r2, sl
 80006da:	2700      	movs	r7, #0
 80006dc:	0153      	lsls	r3, r2, #5
 80006de:	d502      	bpl.n	80006e6 <__aeabi_fadd+0x1e2>
 80006e0:	4b55      	ldr	r3, [pc, #340]	; (8000838 <__aeabi_fadd+0x334>)
 80006e2:	3701      	adds	r7, #1
 80006e4:	401a      	ands	r2, r3
 80006e6:	0753      	lsls	r3, r2, #29
 80006e8:	d000      	beq.n	80006ec <__aeabi_fadd+0x1e8>
 80006ea:	e75a      	b.n	80005a2 <__aeabi_fadd+0x9e>
 80006ec:	08d2      	lsrs	r2, r2, #3
 80006ee:	e7df      	b.n	80006b0 <__aeabi_fadd+0x1ac>
 80006f0:	2200      	movs	r2, #0
 80006f2:	23ff      	movs	r3, #255	; 0xff
 80006f4:	4694      	mov	ip, r2
 80006f6:	e764      	b.n	80005c2 <__aeabi_fadd+0xbe>
 80006f8:	2900      	cmp	r1, #0
 80006fa:	d0e0      	beq.n	80006be <__aeabi_fadd+0x1ba>
 80006fc:	1bf3      	subs	r3, r6, r7
 80006fe:	2f00      	cmp	r7, #0
 8000700:	d03e      	beq.n	8000780 <__aeabi_fadd+0x27c>
 8000702:	2eff      	cmp	r6, #255	; 0xff
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x204>
 8000706:	e777      	b.n	80005f8 <__aeabi_fadd+0xf4>
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	0001      	movs	r1, r0
 800070c:	04d2      	lsls	r2, r2, #19
 800070e:	4311      	orrs	r1, r2
 8000710:	468a      	mov	sl, r1
 8000712:	2201      	movs	r2, #1
 8000714:	2b1b      	cmp	r3, #27
 8000716:	dc08      	bgt.n	800072a <__aeabi_fadd+0x226>
 8000718:	4652      	mov	r2, sl
 800071a:	2120      	movs	r1, #32
 800071c:	4650      	mov	r0, sl
 800071e:	40da      	lsrs	r2, r3
 8000720:	1acb      	subs	r3, r1, r3
 8000722:	4098      	lsls	r0, r3
 8000724:	1e43      	subs	r3, r0, #1
 8000726:	4198      	sbcs	r0, r3
 8000728:	4302      	orrs	r2, r0
 800072a:	0037      	movs	r7, r6
 800072c:	1952      	adds	r2, r2, r5
 800072e:	e784      	b.n	800063a <__aeabi_fadd+0x136>
 8000730:	4a41      	ldr	r2, [pc, #260]	; (8000838 <__aeabi_fadd+0x334>)
 8000732:	1a3f      	subs	r7, r7, r0
 8000734:	4032      	ands	r2, r6
 8000736:	e732      	b.n	800059e <__aeabi_fadd+0x9a>
 8000738:	4653      	mov	r3, sl
 800073a:	1b5e      	subs	r6, r3, r5
 800073c:	0173      	lsls	r3, r6, #5
 800073e:	d42d      	bmi.n	800079c <__aeabi_fadd+0x298>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_fadd+0x242>
 8000744:	e717      	b.n	8000576 <__aeabi_fadd+0x72>
 8000746:	2200      	movs	r2, #0
 8000748:	2400      	movs	r4, #0
 800074a:	2300      	movs	r3, #0
 800074c:	4694      	mov	ip, r2
 800074e:	e738      	b.n	80005c2 <__aeabi_fadd+0xbe>
 8000750:	2eff      	cmp	r6, #255	; 0xff
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x252>
 8000754:	e74f      	b.n	80005f6 <__aeabi_fadd+0xf2>
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	4650      	mov	r0, sl
 800075a:	04d2      	lsls	r2, r2, #19
 800075c:	4310      	orrs	r0, r2
 800075e:	4682      	mov	sl, r0
 8000760:	2201      	movs	r2, #1
 8000762:	2b1b      	cmp	r3, #27
 8000764:	dc08      	bgt.n	8000778 <__aeabi_fadd+0x274>
 8000766:	4652      	mov	r2, sl
 8000768:	2420      	movs	r4, #32
 800076a:	4650      	mov	r0, sl
 800076c:	40da      	lsrs	r2, r3
 800076e:	1ae3      	subs	r3, r4, r3
 8000770:	4098      	lsls	r0, r3
 8000772:	1e43      	subs	r3, r0, #1
 8000774:	4198      	sbcs	r0, r3
 8000776:	4302      	orrs	r2, r0
 8000778:	000c      	movs	r4, r1
 800077a:	0037      	movs	r7, r6
 800077c:	1aaa      	subs	r2, r5, r2
 800077e:	e6f5      	b.n	800056c <__aeabi_fadd+0x68>
 8000780:	2800      	cmp	r0, #0
 8000782:	d093      	beq.n	80006ac <__aeabi_fadd+0x1a8>
 8000784:	3b01      	subs	r3, #1
 8000786:	2b00      	cmp	r3, #0
 8000788:	d04f      	beq.n	800082a <__aeabi_fadd+0x326>
 800078a:	2eff      	cmp	r6, #255	; 0xff
 800078c:	d1c1      	bne.n	8000712 <__aeabi_fadd+0x20e>
 800078e:	4642      	mov	r2, r8
 8000790:	e733      	b.n	80005fa <__aeabi_fadd+0xf6>
 8000792:	2fff      	cmp	r7, #255	; 0xff
 8000794:	d0ac      	beq.n	80006f0 <__aeabi_fadd+0x1ec>
 8000796:	4455      	add	r5, sl
 8000798:	086a      	lsrs	r2, r5, #1
 800079a:	e7a4      	b.n	80006e6 <__aeabi_fadd+0x1e2>
 800079c:	4653      	mov	r3, sl
 800079e:	000c      	movs	r4, r1
 80007a0:	1aee      	subs	r6, r5, r3
 80007a2:	e6e8      	b.n	8000576 <__aeabi_fadd+0x72>
 80007a4:	4653      	mov	r3, sl
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d128      	bne.n	80007fc <__aeabi_fadd+0x2f8>
 80007aa:	2d00      	cmp	r5, #0
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x2ac>
 80007ae:	e722      	b.n	80005f6 <__aeabi_fadd+0xf2>
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	03db      	lsls	r3, r3, #15
 80007b4:	469c      	mov	ip, r3
 80007b6:	2400      	movs	r4, #0
 80007b8:	23ff      	movs	r3, #255	; 0xff
 80007ba:	e702      	b.n	80005c2 <__aeabi_fadd+0xbe>
 80007bc:	002a      	movs	r2, r5
 80007be:	4452      	add	r2, sl
 80007c0:	e73b      	b.n	800063a <__aeabi_fadd+0x136>
 80007c2:	4653      	mov	r3, sl
 80007c4:	1b5a      	subs	r2, r3, r5
 80007c6:	e6d1      	b.n	800056c <__aeabi_fadd+0x68>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x2ca>
 80007cc:	e714      	b.n	80005f8 <__aeabi_fadd+0xf4>
 80007ce:	2d00      	cmp	r5, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x2d0>
 80007d2:	e712      	b.n	80005fa <__aeabi_fadd+0xf6>
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	03db      	lsls	r3, r3, #15
 80007d8:	421a      	tst	r2, r3
 80007da:	d100      	bne.n	80007de <__aeabi_fadd+0x2da>
 80007dc:	e70d      	b.n	80005fa <__aeabi_fadd+0xf6>
 80007de:	4641      	mov	r1, r8
 80007e0:	4219      	tst	r1, r3
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fadd+0x2e2>
 80007e4:	e709      	b.n	80005fa <__aeabi_fadd+0xf6>
 80007e6:	4642      	mov	r2, r8
 80007e8:	e707      	b.n	80005fa <__aeabi_fadd+0xf6>
 80007ea:	000c      	movs	r4, r1
 80007ec:	0037      	movs	r7, r6
 80007ee:	1aaa      	subs	r2, r5, r2
 80007f0:	e6bc      	b.n	800056c <__aeabi_fadd+0x68>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d013      	beq.n	800081e <__aeabi_fadd+0x31a>
 80007f6:	000c      	movs	r4, r1
 80007f8:	46c4      	mov	ip, r8
 80007fa:	e6e2      	b.n	80005c2 <__aeabi_fadd+0xbe>
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x2fe>
 8000800:	e6fb      	b.n	80005fa <__aeabi_fadd+0xf6>
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	03db      	lsls	r3, r3, #15
 8000806:	421a      	tst	r2, r3
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x308>
 800080a:	e6f6      	b.n	80005fa <__aeabi_fadd+0xf6>
 800080c:	4640      	mov	r0, r8
 800080e:	4218      	tst	r0, r3
 8000810:	d000      	beq.n	8000814 <__aeabi_fadd+0x310>
 8000812:	e6f2      	b.n	80005fa <__aeabi_fadd+0xf6>
 8000814:	000c      	movs	r4, r1
 8000816:	e6ef      	b.n	80005f8 <__aeabi_fadd+0xf4>
 8000818:	2a00      	cmp	r2, #0
 800081a:	d000      	beq.n	800081e <__aeabi_fadd+0x31a>
 800081c:	e763      	b.n	80006e6 <__aeabi_fadd+0x1e2>
 800081e:	2200      	movs	r2, #0
 8000820:	2400      	movs	r4, #0
 8000822:	4694      	mov	ip, r2
 8000824:	e6cd      	b.n	80005c2 <__aeabi_fadd+0xbe>
 8000826:	46c4      	mov	ip, r8
 8000828:	e6cb      	b.n	80005c2 <__aeabi_fadd+0xbe>
 800082a:	002a      	movs	r2, r5
 800082c:	0037      	movs	r7, r6
 800082e:	4452      	add	r2, sl
 8000830:	e703      	b.n	800063a <__aeabi_fadd+0x136>
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	7dffffff 	.word	0x7dffffff
 8000838:	fbffffff 	.word	0xfbffffff

0800083c <__eqsf2>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	0042      	lsls	r2, r0, #1
 8000840:	024e      	lsls	r6, r1, #9
 8000842:	004c      	lsls	r4, r1, #1
 8000844:	0245      	lsls	r5, r0, #9
 8000846:	0a6d      	lsrs	r5, r5, #9
 8000848:	0e12      	lsrs	r2, r2, #24
 800084a:	0fc3      	lsrs	r3, r0, #31
 800084c:	0a76      	lsrs	r6, r6, #9
 800084e:	0e24      	lsrs	r4, r4, #24
 8000850:	0fc9      	lsrs	r1, r1, #31
 8000852:	2aff      	cmp	r2, #255	; 0xff
 8000854:	d00f      	beq.n	8000876 <__eqsf2+0x3a>
 8000856:	2cff      	cmp	r4, #255	; 0xff
 8000858:	d011      	beq.n	800087e <__eqsf2+0x42>
 800085a:	2001      	movs	r0, #1
 800085c:	42a2      	cmp	r2, r4
 800085e:	d000      	beq.n	8000862 <__eqsf2+0x26>
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	42b5      	cmp	r5, r6
 8000864:	d1fc      	bne.n	8000860 <__eqsf2+0x24>
 8000866:	428b      	cmp	r3, r1
 8000868:	d00d      	beq.n	8000886 <__eqsf2+0x4a>
 800086a:	2a00      	cmp	r2, #0
 800086c:	d1f8      	bne.n	8000860 <__eqsf2+0x24>
 800086e:	0028      	movs	r0, r5
 8000870:	1e45      	subs	r5, r0, #1
 8000872:	41a8      	sbcs	r0, r5
 8000874:	e7f4      	b.n	8000860 <__eqsf2+0x24>
 8000876:	2001      	movs	r0, #1
 8000878:	2d00      	cmp	r5, #0
 800087a:	d1f1      	bne.n	8000860 <__eqsf2+0x24>
 800087c:	e7eb      	b.n	8000856 <__eqsf2+0x1a>
 800087e:	2001      	movs	r0, #1
 8000880:	2e00      	cmp	r6, #0
 8000882:	d1ed      	bne.n	8000860 <__eqsf2+0x24>
 8000884:	e7e9      	b.n	800085a <__eqsf2+0x1e>
 8000886:	2000      	movs	r0, #0
 8000888:	e7ea      	b.n	8000860 <__eqsf2+0x24>
 800088a:	46c0      	nop			; (mov r8, r8)

0800088c <__gesf2>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	0042      	lsls	r2, r0, #1
 8000890:	0246      	lsls	r6, r0, #9
 8000892:	024d      	lsls	r5, r1, #9
 8000894:	004c      	lsls	r4, r1, #1
 8000896:	0fc3      	lsrs	r3, r0, #31
 8000898:	0a76      	lsrs	r6, r6, #9
 800089a:	0e12      	lsrs	r2, r2, #24
 800089c:	0a6d      	lsrs	r5, r5, #9
 800089e:	0e24      	lsrs	r4, r4, #24
 80008a0:	0fc8      	lsrs	r0, r1, #31
 80008a2:	2aff      	cmp	r2, #255	; 0xff
 80008a4:	d01f      	beq.n	80008e6 <__gesf2+0x5a>
 80008a6:	2cff      	cmp	r4, #255	; 0xff
 80008a8:	d010      	beq.n	80008cc <__gesf2+0x40>
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d11f      	bne.n	80008ee <__gesf2+0x62>
 80008ae:	4271      	negs	r1, r6
 80008b0:	4171      	adcs	r1, r6
 80008b2:	2c00      	cmp	r4, #0
 80008b4:	d101      	bne.n	80008ba <__gesf2+0x2e>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d01e      	beq.n	80008f8 <__gesf2+0x6c>
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d10e      	bne.n	80008dc <__gesf2+0x50>
 80008be:	4283      	cmp	r3, r0
 80008c0:	d01e      	beq.n	8000900 <__gesf2+0x74>
 80008c2:	2102      	movs	r1, #2
 80008c4:	1e58      	subs	r0, r3, #1
 80008c6:	4008      	ands	r0, r1
 80008c8:	3801      	subs	r0, #1
 80008ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d126      	bne.n	800091e <__gesf2+0x92>
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	d1f4      	bne.n	80008be <__gesf2+0x32>
 80008d4:	4271      	negs	r1, r6
 80008d6:	4171      	adcs	r1, r6
 80008d8:	2900      	cmp	r1, #0
 80008da:	d0f0      	beq.n	80008be <__gesf2+0x32>
 80008dc:	2800      	cmp	r0, #0
 80008de:	d1f4      	bne.n	80008ca <__gesf2+0x3e>
 80008e0:	2001      	movs	r0, #1
 80008e2:	4240      	negs	r0, r0
 80008e4:	e7f1      	b.n	80008ca <__gesf2+0x3e>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d119      	bne.n	800091e <__gesf2+0x92>
 80008ea:	2cff      	cmp	r4, #255	; 0xff
 80008ec:	d0ee      	beq.n	80008cc <__gesf2+0x40>
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d1e5      	bne.n	80008be <__gesf2+0x32>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d1e3      	bne.n	80008be <__gesf2+0x32>
 80008f6:	e7e4      	b.n	80008c2 <__gesf2+0x36>
 80008f8:	2000      	movs	r0, #0
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d0e5      	beq.n	80008ca <__gesf2+0x3e>
 80008fe:	e7e0      	b.n	80008c2 <__gesf2+0x36>
 8000900:	42a2      	cmp	r2, r4
 8000902:	dc05      	bgt.n	8000910 <__gesf2+0x84>
 8000904:	dbea      	blt.n	80008dc <__gesf2+0x50>
 8000906:	42ae      	cmp	r6, r5
 8000908:	d802      	bhi.n	8000910 <__gesf2+0x84>
 800090a:	d3e7      	bcc.n	80008dc <__gesf2+0x50>
 800090c:	2000      	movs	r0, #0
 800090e:	e7dc      	b.n	80008ca <__gesf2+0x3e>
 8000910:	4241      	negs	r1, r0
 8000912:	4141      	adcs	r1, r0
 8000914:	4248      	negs	r0, r1
 8000916:	2102      	movs	r1, #2
 8000918:	4008      	ands	r0, r1
 800091a:	3801      	subs	r0, #1
 800091c:	e7d5      	b.n	80008ca <__gesf2+0x3e>
 800091e:	2002      	movs	r0, #2
 8000920:	4240      	negs	r0, r0
 8000922:	e7d2      	b.n	80008ca <__gesf2+0x3e>

08000924 <__lesf2>:
 8000924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000926:	0042      	lsls	r2, r0, #1
 8000928:	0246      	lsls	r6, r0, #9
 800092a:	024d      	lsls	r5, r1, #9
 800092c:	004c      	lsls	r4, r1, #1
 800092e:	0fc3      	lsrs	r3, r0, #31
 8000930:	0a76      	lsrs	r6, r6, #9
 8000932:	0e12      	lsrs	r2, r2, #24
 8000934:	0a6d      	lsrs	r5, r5, #9
 8000936:	0e24      	lsrs	r4, r4, #24
 8000938:	0fc8      	lsrs	r0, r1, #31
 800093a:	2aff      	cmp	r2, #255	; 0xff
 800093c:	d00d      	beq.n	800095a <__lesf2+0x36>
 800093e:	2cff      	cmp	r4, #255	; 0xff
 8000940:	d00f      	beq.n	8000962 <__lesf2+0x3e>
 8000942:	2a00      	cmp	r2, #0
 8000944:	d123      	bne.n	800098e <__lesf2+0x6a>
 8000946:	4271      	negs	r1, r6
 8000948:	4171      	adcs	r1, r6
 800094a:	2c00      	cmp	r4, #0
 800094c:	d10f      	bne.n	800096e <__lesf2+0x4a>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d10d      	bne.n	800096e <__lesf2+0x4a>
 8000952:	2000      	movs	r0, #0
 8000954:	2e00      	cmp	r6, #0
 8000956:	d014      	beq.n	8000982 <__lesf2+0x5e>
 8000958:	e00d      	b.n	8000976 <__lesf2+0x52>
 800095a:	2e00      	cmp	r6, #0
 800095c:	d110      	bne.n	8000980 <__lesf2+0x5c>
 800095e:	2cff      	cmp	r4, #255	; 0xff
 8000960:	d115      	bne.n	800098e <__lesf2+0x6a>
 8000962:	2d00      	cmp	r5, #0
 8000964:	d10c      	bne.n	8000980 <__lesf2+0x5c>
 8000966:	2a00      	cmp	r2, #0
 8000968:	d103      	bne.n	8000972 <__lesf2+0x4e>
 800096a:	4271      	negs	r1, r6
 800096c:	4171      	adcs	r1, r6
 800096e:	2900      	cmp	r1, #0
 8000970:	d108      	bne.n	8000984 <__lesf2+0x60>
 8000972:	4283      	cmp	r3, r0
 8000974:	d010      	beq.n	8000998 <__lesf2+0x74>
 8000976:	2102      	movs	r1, #2
 8000978:	1e58      	subs	r0, r3, #1
 800097a:	4008      	ands	r0, r1
 800097c:	3801      	subs	r0, #1
 800097e:	e000      	b.n	8000982 <__lesf2+0x5e>
 8000980:	2002      	movs	r0, #2
 8000982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000984:	2800      	cmp	r0, #0
 8000986:	d1fc      	bne.n	8000982 <__lesf2+0x5e>
 8000988:	2001      	movs	r0, #1
 800098a:	4240      	negs	r0, r0
 800098c:	e7f9      	b.n	8000982 <__lesf2+0x5e>
 800098e:	2c00      	cmp	r4, #0
 8000990:	d1ef      	bne.n	8000972 <__lesf2+0x4e>
 8000992:	2d00      	cmp	r5, #0
 8000994:	d1ed      	bne.n	8000972 <__lesf2+0x4e>
 8000996:	e7ee      	b.n	8000976 <__lesf2+0x52>
 8000998:	42a2      	cmp	r2, r4
 800099a:	dc05      	bgt.n	80009a8 <__lesf2+0x84>
 800099c:	dbf2      	blt.n	8000984 <__lesf2+0x60>
 800099e:	42ae      	cmp	r6, r5
 80009a0:	d802      	bhi.n	80009a8 <__lesf2+0x84>
 80009a2:	d3ef      	bcc.n	8000984 <__lesf2+0x60>
 80009a4:	2000      	movs	r0, #0
 80009a6:	e7ec      	b.n	8000982 <__lesf2+0x5e>
 80009a8:	4241      	negs	r1, r0
 80009aa:	4141      	adcs	r1, r0
 80009ac:	4248      	negs	r0, r1
 80009ae:	2102      	movs	r1, #2
 80009b0:	4008      	ands	r0, r1
 80009b2:	3801      	subs	r0, #1
 80009b4:	e7e5      	b.n	8000982 <__lesf2+0x5e>
 80009b6:	46c0      	nop			; (mov r8, r8)

080009b8 <__aeabi_fsub>:
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	4646      	mov	r6, r8
 80009bc:	46d6      	mov	lr, sl
 80009be:	464f      	mov	r7, r9
 80009c0:	0243      	lsls	r3, r0, #9
 80009c2:	0a5b      	lsrs	r3, r3, #9
 80009c4:	00da      	lsls	r2, r3, #3
 80009c6:	4694      	mov	ip, r2
 80009c8:	024a      	lsls	r2, r1, #9
 80009ca:	b5c0      	push	{r6, r7, lr}
 80009cc:	0044      	lsls	r4, r0, #1
 80009ce:	0a56      	lsrs	r6, r2, #9
 80009d0:	1c05      	adds	r5, r0, #0
 80009d2:	46b0      	mov	r8, r6
 80009d4:	0e24      	lsrs	r4, r4, #24
 80009d6:	004e      	lsls	r6, r1, #1
 80009d8:	0992      	lsrs	r2, r2, #6
 80009da:	001f      	movs	r7, r3
 80009dc:	0020      	movs	r0, r4
 80009de:	4692      	mov	sl, r2
 80009e0:	0fed      	lsrs	r5, r5, #31
 80009e2:	0e36      	lsrs	r6, r6, #24
 80009e4:	0fc9      	lsrs	r1, r1, #31
 80009e6:	2eff      	cmp	r6, #255	; 0xff
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x34>
 80009ea:	e07f      	b.n	8000aec <__aeabi_fsub+0x134>
 80009ec:	2201      	movs	r2, #1
 80009ee:	4051      	eors	r1, r2
 80009f0:	428d      	cmp	r5, r1
 80009f2:	d051      	beq.n	8000a98 <__aeabi_fsub+0xe0>
 80009f4:	1ba2      	subs	r2, r4, r6
 80009f6:	4691      	mov	r9, r2
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_fsub+0x46>
 80009fc:	e07e      	b.n	8000afc <__aeabi_fsub+0x144>
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fsub+0x4c>
 8000a02:	e099      	b.n	8000b38 <__aeabi_fsub+0x180>
 8000a04:	2cff      	cmp	r4, #255	; 0xff
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fsub+0x52>
 8000a08:	e08c      	b.n	8000b24 <__aeabi_fsub+0x16c>
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	4652      	mov	r2, sl
 8000a0e:	04db      	lsls	r3, r3, #19
 8000a10:	431a      	orrs	r2, r3
 8000a12:	4692      	mov	sl, r2
 8000a14:	464a      	mov	r2, r9
 8000a16:	2301      	movs	r3, #1
 8000a18:	2a1b      	cmp	r2, #27
 8000a1a:	dc08      	bgt.n	8000a2e <__aeabi_fsub+0x76>
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	2120      	movs	r1, #32
 8000a20:	40d3      	lsrs	r3, r2
 8000a22:	1a89      	subs	r1, r1, r2
 8000a24:	4652      	mov	r2, sl
 8000a26:	408a      	lsls	r2, r1
 8000a28:	1e51      	subs	r1, r2, #1
 8000a2a:	418a      	sbcs	r2, r1
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	4662      	mov	r2, ip
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	015a      	lsls	r2, r3, #5
 8000a34:	d400      	bmi.n	8000a38 <__aeabi_fsub+0x80>
 8000a36:	e0f3      	b.n	8000c20 <__aeabi_fsub+0x268>
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	099e      	lsrs	r6, r3, #6
 8000a3c:	0030      	movs	r0, r6
 8000a3e:	f000 fe01 	bl	8001644 <__clzsi2>
 8000a42:	3805      	subs	r0, #5
 8000a44:	4086      	lsls	r6, r0
 8000a46:	4284      	cmp	r4, r0
 8000a48:	dd00      	ble.n	8000a4c <__aeabi_fsub+0x94>
 8000a4a:	e0f7      	b.n	8000c3c <__aeabi_fsub+0x284>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	1b04      	subs	r4, r0, r4
 8000a50:	2020      	movs	r0, #32
 8000a52:	3401      	adds	r4, #1
 8000a54:	40e2      	lsrs	r2, r4
 8000a56:	1b04      	subs	r4, r0, r4
 8000a58:	40a6      	lsls	r6, r4
 8000a5a:	0033      	movs	r3, r6
 8000a5c:	1e5e      	subs	r6, r3, #1
 8000a5e:	41b3      	sbcs	r3, r6
 8000a60:	2400      	movs	r4, #0
 8000a62:	4313      	orrs	r3, r2
 8000a64:	075a      	lsls	r2, r3, #29
 8000a66:	d004      	beq.n	8000a72 <__aeabi_fsub+0xba>
 8000a68:	220f      	movs	r2, #15
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	2a04      	cmp	r2, #4
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_fsub+0xba>
 8000a70:	3304      	adds	r3, #4
 8000a72:	015a      	lsls	r2, r3, #5
 8000a74:	d400      	bmi.n	8000a78 <__aeabi_fsub+0xc0>
 8000a76:	e0d6      	b.n	8000c26 <__aeabi_fsub+0x26e>
 8000a78:	1c62      	adds	r2, r4, #1
 8000a7a:	2cfe      	cmp	r4, #254	; 0xfe
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fsub+0xc8>
 8000a7e:	e0da      	b.n	8000c36 <__aeabi_fsub+0x27e>
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	0a5f      	lsrs	r7, r3, #9
 8000a84:	b2d0      	uxtb	r0, r2
 8000a86:	05c0      	lsls	r0, r0, #23
 8000a88:	4338      	orrs	r0, r7
 8000a8a:	07ed      	lsls	r5, r5, #31
 8000a8c:	4328      	orrs	r0, r5
 8000a8e:	bce0      	pop	{r5, r6, r7}
 8000a90:	46ba      	mov	sl, r7
 8000a92:	46b1      	mov	r9, r6
 8000a94:	46a8      	mov	r8, r5
 8000a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a98:	1ba2      	subs	r2, r4, r6
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	dd63      	ble.n	8000b68 <__aeabi_fsub+0x1b0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0xee>
 8000aa4:	e099      	b.n	8000bda <__aeabi_fsub+0x222>
 8000aa6:	2cff      	cmp	r4, #255	; 0xff
 8000aa8:	d03c      	beq.n	8000b24 <__aeabi_fsub+0x16c>
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	4652      	mov	r2, sl
 8000aae:	04db      	lsls	r3, r3, #19
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	4692      	mov	sl, r2
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	2a1b      	cmp	r2, #27
 8000aba:	dc08      	bgt.n	8000ace <__aeabi_fsub+0x116>
 8000abc:	4653      	mov	r3, sl
 8000abe:	2120      	movs	r1, #32
 8000ac0:	40d3      	lsrs	r3, r2
 8000ac2:	1a89      	subs	r1, r1, r2
 8000ac4:	4652      	mov	r2, sl
 8000ac6:	408a      	lsls	r2, r1
 8000ac8:	1e51      	subs	r1, r2, #1
 8000aca:	418a      	sbcs	r2, r1
 8000acc:	4313      	orrs	r3, r2
 8000ace:	4463      	add	r3, ip
 8000ad0:	015a      	lsls	r2, r3, #5
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_fsub+0x11e>
 8000ad4:	e0a4      	b.n	8000c20 <__aeabi_fsub+0x268>
 8000ad6:	3401      	adds	r4, #1
 8000ad8:	2cff      	cmp	r4, #255	; 0xff
 8000ada:	d100      	bne.n	8000ade <__aeabi_fsub+0x126>
 8000adc:	e0ab      	b.n	8000c36 <__aeabi_fsub+0x27e>
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4997      	ldr	r1, [pc, #604]	; (8000d40 <__aeabi_fsub+0x388>)
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	085b      	lsrs	r3, r3, #1
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	e7bb      	b.n	8000a64 <__aeabi_fsub+0xac>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d032      	beq.n	8000b56 <__aeabi_fsub+0x19e>
 8000af0:	428d      	cmp	r5, r1
 8000af2:	d035      	beq.n	8000b60 <__aeabi_fsub+0x1a8>
 8000af4:	22ff      	movs	r2, #255	; 0xff
 8000af6:	4252      	negs	r2, r2
 8000af8:	4691      	mov	r9, r2
 8000afa:	44a1      	add	r9, r4
 8000afc:	464a      	mov	r2, r9
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d051      	beq.n	8000ba6 <__aeabi_fsub+0x1ee>
 8000b02:	1b30      	subs	r0, r6, r4
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fsub+0x152>
 8000b08:	e09c      	b.n	8000c44 <__aeabi_fsub+0x28c>
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_fsub+0x15a>
 8000b10:	e0df      	b.n	8000cd2 <__aeabi_fsub+0x31a>
 8000b12:	3801      	subs	r0, #1
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fsub+0x162>
 8000b18:	e0f7      	b.n	8000d0a <__aeabi_fsub+0x352>
 8000b1a:	2eff      	cmp	r6, #255	; 0xff
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fsub+0x168>
 8000b1e:	e099      	b.n	8000c54 <__aeabi_fsub+0x29c>
 8000b20:	000d      	movs	r5, r1
 8000b22:	4643      	mov	r3, r8
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d100      	bne.n	8000b2a <__aeabi_fsub+0x172>
 8000b28:	e085      	b.n	8000c36 <__aeabi_fsub+0x27e>
 8000b2a:	2780      	movs	r7, #128	; 0x80
 8000b2c:	03ff      	lsls	r7, r7, #15
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	027f      	lsls	r7, r7, #9
 8000b32:	20ff      	movs	r0, #255	; 0xff
 8000b34:	0a7f      	lsrs	r7, r7, #9
 8000b36:	e7a6      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000b38:	4652      	mov	r2, sl
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d074      	beq.n	8000c28 <__aeabi_fsub+0x270>
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4252      	negs	r2, r2
 8000b42:	4690      	mov	r8, r2
 8000b44:	44c1      	add	r9, r8
 8000b46:	464a      	mov	r2, r9
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fsub+0x196>
 8000b4c:	e0c8      	b.n	8000ce0 <__aeabi_fsub+0x328>
 8000b4e:	2cff      	cmp	r4, #255	; 0xff
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fsub+0x19c>
 8000b52:	e75f      	b.n	8000a14 <__aeabi_fsub+0x5c>
 8000b54:	e7e6      	b.n	8000b24 <__aeabi_fsub+0x16c>
 8000b56:	2201      	movs	r2, #1
 8000b58:	4051      	eors	r1, r2
 8000b5a:	42a9      	cmp	r1, r5
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_fsub+0x1a8>
 8000b5e:	e749      	b.n	80009f4 <__aeabi_fsub+0x3c>
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	4252      	negs	r2, r2
 8000b64:	4691      	mov	r9, r2
 8000b66:	44a1      	add	r9, r4
 8000b68:	464a      	mov	r2, r9
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d043      	beq.n	8000bf6 <__aeabi_fsub+0x23e>
 8000b6e:	1b31      	subs	r1, r6, r4
 8000b70:	2c00      	cmp	r4, #0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_fsub+0x1be>
 8000b74:	e08c      	b.n	8000c90 <__aeabi_fsub+0x2d8>
 8000b76:	2eff      	cmp	r6, #255	; 0xff
 8000b78:	d100      	bne.n	8000b7c <__aeabi_fsub+0x1c4>
 8000b7a:	e092      	b.n	8000ca2 <__aeabi_fsub+0x2ea>
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	4662      	mov	r2, ip
 8000b80:	04db      	lsls	r3, r3, #19
 8000b82:	431a      	orrs	r2, r3
 8000b84:	4694      	mov	ip, r2
 8000b86:	2301      	movs	r3, #1
 8000b88:	291b      	cmp	r1, #27
 8000b8a:	dc09      	bgt.n	8000ba0 <__aeabi_fsub+0x1e8>
 8000b8c:	2020      	movs	r0, #32
 8000b8e:	4663      	mov	r3, ip
 8000b90:	4662      	mov	r2, ip
 8000b92:	40cb      	lsrs	r3, r1
 8000b94:	1a41      	subs	r1, r0, r1
 8000b96:	408a      	lsls	r2, r1
 8000b98:	0011      	movs	r1, r2
 8000b9a:	1e48      	subs	r0, r1, #1
 8000b9c:	4181      	sbcs	r1, r0
 8000b9e:	430b      	orrs	r3, r1
 8000ba0:	0034      	movs	r4, r6
 8000ba2:	4453      	add	r3, sl
 8000ba4:	e794      	b.n	8000ad0 <__aeabi_fsub+0x118>
 8000ba6:	22fe      	movs	r2, #254	; 0xfe
 8000ba8:	1c66      	adds	r6, r4, #1
 8000baa:	4232      	tst	r2, r6
 8000bac:	d164      	bne.n	8000c78 <__aeabi_fsub+0x2c0>
 8000bae:	2c00      	cmp	r4, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0x1fc>
 8000bb2:	e082      	b.n	8000cba <__aeabi_fsub+0x302>
 8000bb4:	4663      	mov	r3, ip
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fsub+0x204>
 8000bba:	e0ab      	b.n	8000d14 <__aeabi_fsub+0x35c>
 8000bbc:	4653      	mov	r3, sl
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x20c>
 8000bc2:	e760      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000bc4:	4663      	mov	r3, ip
 8000bc6:	4652      	mov	r2, sl
 8000bc8:	1a9b      	subs	r3, r3, r2
 8000bca:	015a      	lsls	r2, r3, #5
 8000bcc:	d400      	bmi.n	8000bd0 <__aeabi_fsub+0x218>
 8000bce:	e0aa      	b.n	8000d26 <__aeabi_fsub+0x36e>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	4652      	mov	r2, sl
 8000bd4:	000d      	movs	r5, r1
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	e744      	b.n	8000a64 <__aeabi_fsub+0xac>
 8000bda:	4652      	mov	r2, sl
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	d023      	beq.n	8000c28 <__aeabi_fsub+0x270>
 8000be0:	2201      	movs	r2, #1
 8000be2:	4252      	negs	r2, r2
 8000be4:	4690      	mov	r8, r2
 8000be6:	44c1      	add	r9, r8
 8000be8:	464a      	mov	r2, r9
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d075      	beq.n	8000cda <__aeabi_fsub+0x322>
 8000bee:	2cff      	cmp	r4, #255	; 0xff
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x23c>
 8000bf2:	e75f      	b.n	8000ab4 <__aeabi_fsub+0xfc>
 8000bf4:	e796      	b.n	8000b24 <__aeabi_fsub+0x16c>
 8000bf6:	26fe      	movs	r6, #254	; 0xfe
 8000bf8:	3401      	adds	r4, #1
 8000bfa:	4226      	tst	r6, r4
 8000bfc:	d153      	bne.n	8000ca6 <__aeabi_fsub+0x2ee>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d172      	bne.n	8000ce8 <__aeabi_fsub+0x330>
 8000c02:	4663      	mov	r3, ip
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fsub+0x252>
 8000c08:	e093      	b.n	8000d32 <__aeabi_fsub+0x37a>
 8000c0a:	4653      	mov	r3, sl
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x25a>
 8000c10:	e739      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000c12:	4463      	add	r3, ip
 8000c14:	2400      	movs	r4, #0
 8000c16:	015a      	lsls	r2, r3, #5
 8000c18:	d502      	bpl.n	8000c20 <__aeabi_fsub+0x268>
 8000c1a:	4a4a      	ldr	r2, [pc, #296]	; (8000d44 <__aeabi_fsub+0x38c>)
 8000c1c:	3401      	adds	r4, #1
 8000c1e:	4013      	ands	r3, r2
 8000c20:	075a      	lsls	r2, r3, #29
 8000c22:	d000      	beq.n	8000c26 <__aeabi_fsub+0x26e>
 8000c24:	e720      	b.n	8000a68 <__aeabi_fsub+0xb0>
 8000c26:	08db      	lsrs	r3, r3, #3
 8000c28:	2cff      	cmp	r4, #255	; 0xff
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x276>
 8000c2c:	e77a      	b.n	8000b24 <__aeabi_fsub+0x16c>
 8000c2e:	025b      	lsls	r3, r3, #9
 8000c30:	0a5f      	lsrs	r7, r3, #9
 8000c32:	b2e0      	uxtb	r0, r4
 8000c34:	e727      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e724      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000c3c:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <__aeabi_fsub+0x38c>)
 8000c3e:	1a24      	subs	r4, r4, r0
 8000c40:	4033      	ands	r3, r6
 8000c42:	e70f      	b.n	8000a64 <__aeabi_fsub+0xac>
 8000c44:	2eff      	cmp	r6, #255	; 0xff
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fsub+0x292>
 8000c48:	e76a      	b.n	8000b20 <__aeabi_fsub+0x168>
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	4662      	mov	r2, ip
 8000c4e:	04db      	lsls	r3, r3, #19
 8000c50:	431a      	orrs	r2, r3
 8000c52:	4694      	mov	ip, r2
 8000c54:	2301      	movs	r3, #1
 8000c56:	281b      	cmp	r0, #27
 8000c58:	dc09      	bgt.n	8000c6e <__aeabi_fsub+0x2b6>
 8000c5a:	2420      	movs	r4, #32
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	4662      	mov	r2, ip
 8000c60:	40c3      	lsrs	r3, r0
 8000c62:	1a20      	subs	r0, r4, r0
 8000c64:	4082      	lsls	r2, r0
 8000c66:	0010      	movs	r0, r2
 8000c68:	1e44      	subs	r4, r0, #1
 8000c6a:	41a0      	sbcs	r0, r4
 8000c6c:	4303      	orrs	r3, r0
 8000c6e:	4652      	mov	r2, sl
 8000c70:	000d      	movs	r5, r1
 8000c72:	0034      	movs	r4, r6
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	e6dc      	b.n	8000a32 <__aeabi_fsub+0x7a>
 8000c78:	4663      	mov	r3, ip
 8000c7a:	4652      	mov	r2, sl
 8000c7c:	1a9e      	subs	r6, r3, r2
 8000c7e:	0173      	lsls	r3, r6, #5
 8000c80:	d417      	bmi.n	8000cb2 <__aeabi_fsub+0x2fa>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d000      	beq.n	8000c88 <__aeabi_fsub+0x2d0>
 8000c86:	e6d9      	b.n	8000a3c <__aeabi_fsub+0x84>
 8000c88:	2500      	movs	r5, #0
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e6fa      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000c90:	4663      	mov	r3, ip
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d044      	beq.n	8000d20 <__aeabi_fsub+0x368>
 8000c96:	3901      	subs	r1, #1
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d04c      	beq.n	8000d36 <__aeabi_fsub+0x37e>
 8000c9c:	2eff      	cmp	r6, #255	; 0xff
 8000c9e:	d000      	beq.n	8000ca2 <__aeabi_fsub+0x2ea>
 8000ca0:	e771      	b.n	8000b86 <__aeabi_fsub+0x1ce>
 8000ca2:	4643      	mov	r3, r8
 8000ca4:	e73e      	b.n	8000b24 <__aeabi_fsub+0x16c>
 8000ca6:	2cff      	cmp	r4, #255	; 0xff
 8000ca8:	d0c5      	beq.n	8000c36 <__aeabi_fsub+0x27e>
 8000caa:	4652      	mov	r2, sl
 8000cac:	4462      	add	r2, ip
 8000cae:	0853      	lsrs	r3, r2, #1
 8000cb0:	e7b6      	b.n	8000c20 <__aeabi_fsub+0x268>
 8000cb2:	4663      	mov	r3, ip
 8000cb4:	000d      	movs	r5, r1
 8000cb6:	1ad6      	subs	r6, r2, r3
 8000cb8:	e6c0      	b.n	8000a3c <__aeabi_fsub+0x84>
 8000cba:	4662      	mov	r2, ip
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	d116      	bne.n	8000cee <__aeabi_fsub+0x336>
 8000cc0:	4653      	mov	r3, sl
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_fsub+0x310>
 8000cc6:	e72b      	b.n	8000b20 <__aeabi_fsub+0x168>
 8000cc8:	2780      	movs	r7, #128	; 0x80
 8000cca:	2500      	movs	r5, #0
 8000ccc:	20ff      	movs	r0, #255	; 0xff
 8000cce:	03ff      	lsls	r7, r7, #15
 8000cd0:	e6d9      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	4643      	mov	r3, r8
 8000cd6:	0034      	movs	r4, r6
 8000cd8:	e7a6      	b.n	8000c28 <__aeabi_fsub+0x270>
 8000cda:	4653      	mov	r3, sl
 8000cdc:	4463      	add	r3, ip
 8000cde:	e6f7      	b.n	8000ad0 <__aeabi_fsub+0x118>
 8000ce0:	4663      	mov	r3, ip
 8000ce2:	4652      	mov	r2, sl
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	e6a4      	b.n	8000a32 <__aeabi_fsub+0x7a>
 8000ce8:	4662      	mov	r2, ip
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d0d9      	beq.n	8000ca2 <__aeabi_fsub+0x2ea>
 8000cee:	4652      	mov	r2, sl
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fsub+0x33e>
 8000cf4:	e716      	b.n	8000b24 <__aeabi_fsub+0x16c>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	03d2      	lsls	r2, r2, #15
 8000cfa:	4213      	tst	r3, r2
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_fsub+0x348>
 8000cfe:	e711      	b.n	8000b24 <__aeabi_fsub+0x16c>
 8000d00:	4640      	mov	r0, r8
 8000d02:	4210      	tst	r0, r2
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fsub+0x350>
 8000d06:	e70d      	b.n	8000b24 <__aeabi_fsub+0x16c>
 8000d08:	e70a      	b.n	8000b20 <__aeabi_fsub+0x168>
 8000d0a:	4652      	mov	r2, sl
 8000d0c:	000d      	movs	r5, r1
 8000d0e:	0034      	movs	r4, r6
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	e68e      	b.n	8000a32 <__aeabi_fsub+0x7a>
 8000d14:	4653      	mov	r3, sl
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d008      	beq.n	8000d2c <__aeabi_fsub+0x374>
 8000d1a:	000d      	movs	r5, r1
 8000d1c:	4647      	mov	r7, r8
 8000d1e:	e6b2      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000d20:	4643      	mov	r3, r8
 8000d22:	0034      	movs	r4, r6
 8000d24:	e780      	b.n	8000c28 <__aeabi_fsub+0x270>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d000      	beq.n	8000d2c <__aeabi_fsub+0x374>
 8000d2a:	e779      	b.n	8000c20 <__aeabi_fsub+0x268>
 8000d2c:	2500      	movs	r5, #0
 8000d2e:	2700      	movs	r7, #0
 8000d30:	e6a9      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000d32:	4647      	mov	r7, r8
 8000d34:	e6a7      	b.n	8000a86 <__aeabi_fsub+0xce>
 8000d36:	4653      	mov	r3, sl
 8000d38:	0034      	movs	r4, r6
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e6c8      	b.n	8000ad0 <__aeabi_fsub+0x118>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	7dffffff 	.word	0x7dffffff
 8000d44:	fbffffff 	.word	0xfbffffff

08000d48 <__aeabi_f2iz>:
 8000d48:	0241      	lsls	r1, r0, #9
 8000d4a:	0042      	lsls	r2, r0, #1
 8000d4c:	0fc3      	lsrs	r3, r0, #31
 8000d4e:	0a49      	lsrs	r1, r1, #9
 8000d50:	2000      	movs	r0, #0
 8000d52:	0e12      	lsrs	r2, r2, #24
 8000d54:	2a7e      	cmp	r2, #126	; 0x7e
 8000d56:	d903      	bls.n	8000d60 <__aeabi_f2iz+0x18>
 8000d58:	2a9d      	cmp	r2, #157	; 0x9d
 8000d5a:	d902      	bls.n	8000d62 <__aeabi_f2iz+0x1a>
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <__aeabi_f2iz+0x3c>)
 8000d5e:	1898      	adds	r0, r3, r2
 8000d60:	4770      	bx	lr
 8000d62:	2080      	movs	r0, #128	; 0x80
 8000d64:	0400      	lsls	r0, r0, #16
 8000d66:	4301      	orrs	r1, r0
 8000d68:	2a95      	cmp	r2, #149	; 0x95
 8000d6a:	dc07      	bgt.n	8000d7c <__aeabi_f2iz+0x34>
 8000d6c:	2096      	movs	r0, #150	; 0x96
 8000d6e:	1a82      	subs	r2, r0, r2
 8000d70:	40d1      	lsrs	r1, r2
 8000d72:	4248      	negs	r0, r1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f3      	bne.n	8000d60 <__aeabi_f2iz+0x18>
 8000d78:	0008      	movs	r0, r1
 8000d7a:	e7f1      	b.n	8000d60 <__aeabi_f2iz+0x18>
 8000d7c:	3a96      	subs	r2, #150	; 0x96
 8000d7e:	4091      	lsls	r1, r2
 8000d80:	e7f7      	b.n	8000d72 <__aeabi_f2iz+0x2a>
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	7fffffff 	.word	0x7fffffff

08000d88 <__aeabi_ui2f>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	1e05      	subs	r5, r0, #0
 8000d8c:	d00e      	beq.n	8000dac <__aeabi_ui2f+0x24>
 8000d8e:	f000 fc59 	bl	8001644 <__clzsi2>
 8000d92:	239e      	movs	r3, #158	; 0x9e
 8000d94:	0004      	movs	r4, r0
 8000d96:	1a1b      	subs	r3, r3, r0
 8000d98:	2b96      	cmp	r3, #150	; 0x96
 8000d9a:	dc0c      	bgt.n	8000db6 <__aeabi_ui2f+0x2e>
 8000d9c:	2808      	cmp	r0, #8
 8000d9e:	dd01      	ble.n	8000da4 <__aeabi_ui2f+0x1c>
 8000da0:	3c08      	subs	r4, #8
 8000da2:	40a5      	lsls	r5, r4
 8000da4:	026d      	lsls	r5, r5, #9
 8000da6:	0a6d      	lsrs	r5, r5, #9
 8000da8:	b2d8      	uxtb	r0, r3
 8000daa:	e001      	b.n	8000db0 <__aeabi_ui2f+0x28>
 8000dac:	2000      	movs	r0, #0
 8000dae:	2500      	movs	r5, #0
 8000db0:	05c0      	lsls	r0, r0, #23
 8000db2:	4328      	orrs	r0, r5
 8000db4:	bd70      	pop	{r4, r5, r6, pc}
 8000db6:	2b99      	cmp	r3, #153	; 0x99
 8000db8:	dd09      	ble.n	8000dce <__aeabi_ui2f+0x46>
 8000dba:	0002      	movs	r2, r0
 8000dbc:	0029      	movs	r1, r5
 8000dbe:	321b      	adds	r2, #27
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	1e4a      	subs	r2, r1, #1
 8000dc4:	4191      	sbcs	r1, r2
 8000dc6:	2205      	movs	r2, #5
 8000dc8:	1a12      	subs	r2, r2, r0
 8000dca:	40d5      	lsrs	r5, r2
 8000dcc:	430d      	orrs	r5, r1
 8000dce:	2c05      	cmp	r4, #5
 8000dd0:	dd01      	ble.n	8000dd6 <__aeabi_ui2f+0x4e>
 8000dd2:	1f62      	subs	r2, r4, #5
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	0029      	movs	r1, r5
 8000dd8:	4e08      	ldr	r6, [pc, #32]	; (8000dfc <__aeabi_ui2f+0x74>)
 8000dda:	4031      	ands	r1, r6
 8000ddc:	076a      	lsls	r2, r5, #29
 8000dde:	d009      	beq.n	8000df4 <__aeabi_ui2f+0x6c>
 8000de0:	200f      	movs	r0, #15
 8000de2:	4028      	ands	r0, r5
 8000de4:	2804      	cmp	r0, #4
 8000de6:	d005      	beq.n	8000df4 <__aeabi_ui2f+0x6c>
 8000de8:	3104      	adds	r1, #4
 8000dea:	014a      	lsls	r2, r1, #5
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_ui2f+0x6c>
 8000dee:	239f      	movs	r3, #159	; 0x9f
 8000df0:	4031      	ands	r1, r6
 8000df2:	1b1b      	subs	r3, r3, r4
 8000df4:	0189      	lsls	r1, r1, #6
 8000df6:	0a4d      	lsrs	r5, r1, #9
 8000df8:	b2d8      	uxtb	r0, r3
 8000dfa:	e7d9      	b.n	8000db0 <__aeabi_ui2f+0x28>
 8000dfc:	fbffffff 	.word	0xfbffffff

08000e00 <__aeabi_dadd>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	464f      	mov	r7, r9
 8000e04:	46d6      	mov	lr, sl
 8000e06:	4646      	mov	r6, r8
 8000e08:	000d      	movs	r5, r1
 8000e0a:	0001      	movs	r1, r0
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	b5c0      	push	{r6, r7, lr}
 8000e10:	0017      	movs	r7, r2
 8000e12:	032b      	lsls	r3, r5, #12
 8000e14:	0a5a      	lsrs	r2, r3, #9
 8000e16:	0f4b      	lsrs	r3, r1, #29
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	00ca      	lsls	r2, r1, #3
 8000e1c:	4691      	mov	r9, r2
 8000e1e:	0302      	lsls	r2, r0, #12
 8000e20:	006e      	lsls	r6, r5, #1
 8000e22:	0041      	lsls	r1, r0, #1
 8000e24:	0a52      	lsrs	r2, r2, #9
 8000e26:	0fec      	lsrs	r4, r5, #31
 8000e28:	0f7d      	lsrs	r5, r7, #29
 8000e2a:	4315      	orrs	r5, r2
 8000e2c:	0d76      	lsrs	r6, r6, #21
 8000e2e:	0d49      	lsrs	r1, r1, #21
 8000e30:	0fc0      	lsrs	r0, r0, #31
 8000e32:	4682      	mov	sl, r0
 8000e34:	46ac      	mov	ip, r5
 8000e36:	00ff      	lsls	r7, r7, #3
 8000e38:	1a72      	subs	r2, r6, r1
 8000e3a:	4284      	cmp	r4, r0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_dadd+0x40>
 8000e3e:	e098      	b.n	8000f72 <__aeabi_dadd+0x172>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_dadd+0x46>
 8000e44:	e081      	b.n	8000f4a <__aeabi_dadd+0x14a>
 8000e46:	2900      	cmp	r1, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_dadd+0x4c>
 8000e4a:	e0b6      	b.n	8000fba <__aeabi_dadd+0x1ba>
 8000e4c:	49c9      	ldr	r1, [pc, #804]	; (8001174 <__aeabi_dadd+0x374>)
 8000e4e:	428e      	cmp	r6, r1
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dadd+0x54>
 8000e52:	e172      	b.n	800113a <__aeabi_dadd+0x33a>
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	0028      	movs	r0, r5
 8000e58:	0409      	lsls	r1, r1, #16
 8000e5a:	4308      	orrs	r0, r1
 8000e5c:	4684      	mov	ip, r0
 8000e5e:	2a38      	cmp	r2, #56	; 0x38
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_dadd+0x64>
 8000e62:	e15e      	b.n	8001122 <__aeabi_dadd+0x322>
 8000e64:	2a1f      	cmp	r2, #31
 8000e66:	dd00      	ble.n	8000e6a <__aeabi_dadd+0x6a>
 8000e68:	e1ee      	b.n	8001248 <__aeabi_dadd+0x448>
 8000e6a:	2020      	movs	r0, #32
 8000e6c:	0039      	movs	r1, r7
 8000e6e:	4665      	mov	r5, ip
 8000e70:	1a80      	subs	r0, r0, r2
 8000e72:	4087      	lsls	r7, r0
 8000e74:	40d1      	lsrs	r1, r2
 8000e76:	4085      	lsls	r5, r0
 8000e78:	430d      	orrs	r5, r1
 8000e7a:	0039      	movs	r1, r7
 8000e7c:	1e4f      	subs	r7, r1, #1
 8000e7e:	41b9      	sbcs	r1, r7
 8000e80:	4667      	mov	r7, ip
 8000e82:	40d7      	lsrs	r7, r2
 8000e84:	4329      	orrs	r1, r5
 8000e86:	1bdb      	subs	r3, r3, r7
 8000e88:	464a      	mov	r2, r9
 8000e8a:	1a55      	subs	r5, r2, r1
 8000e8c:	45a9      	cmp	r9, r5
 8000e8e:	4189      	sbcs	r1, r1
 8000e90:	4249      	negs	r1, r1
 8000e92:	1a5b      	subs	r3, r3, r1
 8000e94:	4698      	mov	r8, r3
 8000e96:	4643      	mov	r3, r8
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	d400      	bmi.n	8000e9e <__aeabi_dadd+0x9e>
 8000e9c:	e0cc      	b.n	8001038 <__aeabi_dadd+0x238>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	025b      	lsls	r3, r3, #9
 8000ea2:	0a5b      	lsrs	r3, r3, #9
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dadd+0xae>
 8000eac:	e12c      	b.n	8001108 <__aeabi_dadd+0x308>
 8000eae:	4640      	mov	r0, r8
 8000eb0:	f000 fbc8 	bl	8001644 <__clzsi2>
 8000eb4:	0001      	movs	r1, r0
 8000eb6:	3908      	subs	r1, #8
 8000eb8:	2220      	movs	r2, #32
 8000eba:	0028      	movs	r0, r5
 8000ebc:	4643      	mov	r3, r8
 8000ebe:	1a52      	subs	r2, r2, r1
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	40d0      	lsrs	r0, r2
 8000ec4:	408d      	lsls	r5, r1
 8000ec6:	4303      	orrs	r3, r0
 8000ec8:	428e      	cmp	r6, r1
 8000eca:	dd00      	ble.n	8000ece <__aeabi_dadd+0xce>
 8000ecc:	e117      	b.n	80010fe <__aeabi_dadd+0x2fe>
 8000ece:	1b8e      	subs	r6, r1, r6
 8000ed0:	1c72      	adds	r2, r6, #1
 8000ed2:	2a1f      	cmp	r2, #31
 8000ed4:	dd00      	ble.n	8000ed8 <__aeabi_dadd+0xd8>
 8000ed6:	e1a7      	b.n	8001228 <__aeabi_dadd+0x428>
 8000ed8:	2120      	movs	r1, #32
 8000eda:	0018      	movs	r0, r3
 8000edc:	002e      	movs	r6, r5
 8000ede:	1a89      	subs	r1, r1, r2
 8000ee0:	408d      	lsls	r5, r1
 8000ee2:	4088      	lsls	r0, r1
 8000ee4:	40d6      	lsrs	r6, r2
 8000ee6:	40d3      	lsrs	r3, r2
 8000ee8:	1e69      	subs	r1, r5, #1
 8000eea:	418d      	sbcs	r5, r1
 8000eec:	4330      	orrs	r0, r6
 8000eee:	4698      	mov	r8, r3
 8000ef0:	2600      	movs	r6, #0
 8000ef2:	4305      	orrs	r5, r0
 8000ef4:	076b      	lsls	r3, r5, #29
 8000ef6:	d009      	beq.n	8000f0c <__aeabi_dadd+0x10c>
 8000ef8:	230f      	movs	r3, #15
 8000efa:	402b      	ands	r3, r5
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d005      	beq.n	8000f0c <__aeabi_dadd+0x10c>
 8000f00:	1d2b      	adds	r3, r5, #4
 8000f02:	42ab      	cmp	r3, r5
 8000f04:	41ad      	sbcs	r5, r5
 8000f06:	426d      	negs	r5, r5
 8000f08:	44a8      	add	r8, r5
 8000f0a:	001d      	movs	r5, r3
 8000f0c:	4643      	mov	r3, r8
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	d400      	bmi.n	8000f14 <__aeabi_dadd+0x114>
 8000f12:	e094      	b.n	800103e <__aeabi_dadd+0x23e>
 8000f14:	4b97      	ldr	r3, [pc, #604]	; (8001174 <__aeabi_dadd+0x374>)
 8000f16:	1c72      	adds	r2, r6, #1
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d100      	bne.n	8000f1e <__aeabi_dadd+0x11e>
 8000f1c:	e09d      	b.n	800105a <__aeabi_dadd+0x25a>
 8000f1e:	4641      	mov	r1, r8
 8000f20:	4b95      	ldr	r3, [pc, #596]	; (8001178 <__aeabi_dadd+0x378>)
 8000f22:	08ed      	lsrs	r5, r5, #3
 8000f24:	4019      	ands	r1, r3
 8000f26:	000b      	movs	r3, r1
 8000f28:	0552      	lsls	r2, r2, #21
 8000f2a:	0749      	lsls	r1, r1, #29
 8000f2c:	025b      	lsls	r3, r3, #9
 8000f2e:	4329      	orrs	r1, r5
 8000f30:	0b1b      	lsrs	r3, r3, #12
 8000f32:	0d52      	lsrs	r2, r2, #21
 8000f34:	0512      	lsls	r2, r2, #20
 8000f36:	4313      	orrs	r3, r2
 8000f38:	07e4      	lsls	r4, r4, #31
 8000f3a:	4323      	orrs	r3, r4
 8000f3c:	0008      	movs	r0, r1
 8000f3e:	0019      	movs	r1, r3
 8000f40:	bce0      	pop	{r5, r6, r7}
 8000f42:	46ba      	mov	sl, r7
 8000f44:	46b1      	mov	r9, r6
 8000f46:	46a8      	mov	r8, r5
 8000f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	d043      	beq.n	8000fd6 <__aeabi_dadd+0x1d6>
 8000f4e:	1b8a      	subs	r2, r1, r6
 8000f50:	2e00      	cmp	r6, #0
 8000f52:	d000      	beq.n	8000f56 <__aeabi_dadd+0x156>
 8000f54:	e12a      	b.n	80011ac <__aeabi_dadd+0x3ac>
 8000f56:	464c      	mov	r4, r9
 8000f58:	431c      	orrs	r4, r3
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dadd+0x15e>
 8000f5c:	e1d1      	b.n	8001302 <__aeabi_dadd+0x502>
 8000f5e:	1e54      	subs	r4, r2, #1
 8000f60:	2a01      	cmp	r2, #1
 8000f62:	d100      	bne.n	8000f66 <__aeabi_dadd+0x166>
 8000f64:	e21f      	b.n	80013a6 <__aeabi_dadd+0x5a6>
 8000f66:	4d83      	ldr	r5, [pc, #524]	; (8001174 <__aeabi_dadd+0x374>)
 8000f68:	42aa      	cmp	r2, r5
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_dadd+0x16e>
 8000f6c:	e272      	b.n	8001454 <__aeabi_dadd+0x654>
 8000f6e:	0022      	movs	r2, r4
 8000f70:	e123      	b.n	80011ba <__aeabi_dadd+0x3ba>
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	dc00      	bgt.n	8000f78 <__aeabi_dadd+0x178>
 8000f76:	e098      	b.n	80010aa <__aeabi_dadd+0x2aa>
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	d042      	beq.n	8001002 <__aeabi_dadd+0x202>
 8000f7c:	497d      	ldr	r1, [pc, #500]	; (8001174 <__aeabi_dadd+0x374>)
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d100      	bne.n	8000f84 <__aeabi_dadd+0x184>
 8000f82:	e0da      	b.n	800113a <__aeabi_dadd+0x33a>
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	0028      	movs	r0, r5
 8000f88:	0409      	lsls	r1, r1, #16
 8000f8a:	4308      	orrs	r0, r1
 8000f8c:	4684      	mov	ip, r0
 8000f8e:	2a38      	cmp	r2, #56	; 0x38
 8000f90:	dd00      	ble.n	8000f94 <__aeabi_dadd+0x194>
 8000f92:	e129      	b.n	80011e8 <__aeabi_dadd+0x3e8>
 8000f94:	2a1f      	cmp	r2, #31
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_dadd+0x19a>
 8000f98:	e187      	b.n	80012aa <__aeabi_dadd+0x4aa>
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	4665      	mov	r5, ip
 8000f9e:	3920      	subs	r1, #32
 8000fa0:	40cd      	lsrs	r5, r1
 8000fa2:	2a20      	cmp	r2, #32
 8000fa4:	d004      	beq.n	8000fb0 <__aeabi_dadd+0x1b0>
 8000fa6:	2040      	movs	r0, #64	; 0x40
 8000fa8:	4661      	mov	r1, ip
 8000faa:	1a82      	subs	r2, r0, r2
 8000fac:	4091      	lsls	r1, r2
 8000fae:	430f      	orrs	r7, r1
 8000fb0:	0039      	movs	r1, r7
 8000fb2:	1e4f      	subs	r7, r1, #1
 8000fb4:	41b9      	sbcs	r1, r7
 8000fb6:	430d      	orrs	r5, r1
 8000fb8:	e11b      	b.n	80011f2 <__aeabi_dadd+0x3f2>
 8000fba:	0029      	movs	r1, r5
 8000fbc:	4339      	orrs	r1, r7
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_dadd+0x1c2>
 8000fc0:	e0b5      	b.n	800112e <__aeabi_dadd+0x32e>
 8000fc2:	1e51      	subs	r1, r2, #1
 8000fc4:	2a01      	cmp	r2, #1
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dadd+0x1ca>
 8000fc8:	e1ab      	b.n	8001322 <__aeabi_dadd+0x522>
 8000fca:	486a      	ldr	r0, [pc, #424]	; (8001174 <__aeabi_dadd+0x374>)
 8000fcc:	4282      	cmp	r2, r0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_dadd+0x1d2>
 8000fd0:	e1b2      	b.n	8001338 <__aeabi_dadd+0x538>
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	e743      	b.n	8000e5e <__aeabi_dadd+0x5e>
 8000fd6:	4969      	ldr	r1, [pc, #420]	; (800117c <__aeabi_dadd+0x37c>)
 8000fd8:	1c75      	adds	r5, r6, #1
 8000fda:	420d      	tst	r5, r1
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dadd+0x1e0>
 8000fde:	e0cf      	b.n	8001180 <__aeabi_dadd+0x380>
 8000fe0:	2e00      	cmp	r6, #0
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_dadd+0x1e6>
 8000fe4:	e193      	b.n	800130e <__aeabi_dadd+0x50e>
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	4319      	orrs	r1, r3
 8000fea:	d100      	bne.n	8000fee <__aeabi_dadd+0x1ee>
 8000fec:	e1d1      	b.n	8001392 <__aeabi_dadd+0x592>
 8000fee:	4661      	mov	r1, ip
 8000ff0:	4339      	orrs	r1, r7
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_dadd+0x1f6>
 8000ff4:	e1e3      	b.n	80013be <__aeabi_dadd+0x5be>
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	0758      	lsls	r0, r3, #29
 8000ffa:	08c9      	lsrs	r1, r1, #3
 8000ffc:	4301      	orrs	r1, r0
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	e026      	b.n	8001050 <__aeabi_dadd+0x250>
 8001002:	0029      	movs	r1, r5
 8001004:	4339      	orrs	r1, r7
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x20a>
 8001008:	e091      	b.n	800112e <__aeabi_dadd+0x32e>
 800100a:	1e51      	subs	r1, r2, #1
 800100c:	2a01      	cmp	r2, #1
 800100e:	d005      	beq.n	800101c <__aeabi_dadd+0x21c>
 8001010:	4858      	ldr	r0, [pc, #352]	; (8001174 <__aeabi_dadd+0x374>)
 8001012:	4282      	cmp	r2, r0
 8001014:	d100      	bne.n	8001018 <__aeabi_dadd+0x218>
 8001016:	e18f      	b.n	8001338 <__aeabi_dadd+0x538>
 8001018:	000a      	movs	r2, r1
 800101a:	e7b8      	b.n	8000f8e <__aeabi_dadd+0x18e>
 800101c:	003d      	movs	r5, r7
 800101e:	444d      	add	r5, r9
 8001020:	454d      	cmp	r5, r9
 8001022:	4189      	sbcs	r1, r1
 8001024:	4463      	add	r3, ip
 8001026:	4698      	mov	r8, r3
 8001028:	4249      	negs	r1, r1
 800102a:	4488      	add	r8, r1
 800102c:	4643      	mov	r3, r8
 800102e:	2602      	movs	r6, #2
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	d500      	bpl.n	8001036 <__aeabi_dadd+0x236>
 8001034:	e0eb      	b.n	800120e <__aeabi_dadd+0x40e>
 8001036:	3e01      	subs	r6, #1
 8001038:	076b      	lsls	r3, r5, #29
 800103a:	d000      	beq.n	800103e <__aeabi_dadd+0x23e>
 800103c:	e75c      	b.n	8000ef8 <__aeabi_dadd+0xf8>
 800103e:	4643      	mov	r3, r8
 8001040:	08e9      	lsrs	r1, r5, #3
 8001042:	075a      	lsls	r2, r3, #29
 8001044:	4311      	orrs	r1, r2
 8001046:	0032      	movs	r2, r6
 8001048:	08db      	lsrs	r3, r3, #3
 800104a:	484a      	ldr	r0, [pc, #296]	; (8001174 <__aeabi_dadd+0x374>)
 800104c:	4282      	cmp	r2, r0
 800104e:	d021      	beq.n	8001094 <__aeabi_dadd+0x294>
 8001050:	031b      	lsls	r3, r3, #12
 8001052:	0552      	lsls	r2, r2, #21
 8001054:	0b1b      	lsrs	r3, r3, #12
 8001056:	0d52      	lsrs	r2, r2, #21
 8001058:	e76c      	b.n	8000f34 <__aeabi_dadd+0x134>
 800105a:	2300      	movs	r3, #0
 800105c:	2100      	movs	r1, #0
 800105e:	e769      	b.n	8000f34 <__aeabi_dadd+0x134>
 8001060:	002a      	movs	r2, r5
 8001062:	433a      	orrs	r2, r7
 8001064:	d069      	beq.n	800113a <__aeabi_dadd+0x33a>
 8001066:	464a      	mov	r2, r9
 8001068:	0758      	lsls	r0, r3, #29
 800106a:	08d1      	lsrs	r1, r2, #3
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	031b      	lsls	r3, r3, #12
 8001072:	4308      	orrs	r0, r1
 8001074:	421a      	tst	r2, r3
 8001076:	d007      	beq.n	8001088 <__aeabi_dadd+0x288>
 8001078:	0029      	movs	r1, r5
 800107a:	08ed      	lsrs	r5, r5, #3
 800107c:	421d      	tst	r5, r3
 800107e:	d103      	bne.n	8001088 <__aeabi_dadd+0x288>
 8001080:	002a      	movs	r2, r5
 8001082:	08ff      	lsrs	r7, r7, #3
 8001084:	0748      	lsls	r0, r1, #29
 8001086:	4338      	orrs	r0, r7
 8001088:	0f43      	lsrs	r3, r0, #29
 800108a:	00c1      	lsls	r1, r0, #3
 800108c:	075b      	lsls	r3, r3, #29
 800108e:	08c9      	lsrs	r1, r1, #3
 8001090:	4319      	orrs	r1, r3
 8001092:	0013      	movs	r3, r2
 8001094:	000a      	movs	r2, r1
 8001096:	431a      	orrs	r2, r3
 8001098:	d100      	bne.n	800109c <__aeabi_dadd+0x29c>
 800109a:	e213      	b.n	80014c4 <__aeabi_dadd+0x6c4>
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	0312      	lsls	r2, r2, #12
 80010a0:	4313      	orrs	r3, r2
 80010a2:	031b      	lsls	r3, r3, #12
 80010a4:	4a33      	ldr	r2, [pc, #204]	; (8001174 <__aeabi_dadd+0x374>)
 80010a6:	0b1b      	lsrs	r3, r3, #12
 80010a8:	e744      	b.n	8000f34 <__aeabi_dadd+0x134>
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d04b      	beq.n	8001146 <__aeabi_dadd+0x346>
 80010ae:	1b8a      	subs	r2, r1, r6
 80010b0:	2e00      	cmp	r6, #0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x2b6>
 80010b4:	e0e7      	b.n	8001286 <__aeabi_dadd+0x486>
 80010b6:	482f      	ldr	r0, [pc, #188]	; (8001174 <__aeabi_dadd+0x374>)
 80010b8:	4281      	cmp	r1, r0
 80010ba:	d100      	bne.n	80010be <__aeabi_dadd+0x2be>
 80010bc:	e195      	b.n	80013ea <__aeabi_dadd+0x5ea>
 80010be:	2080      	movs	r0, #128	; 0x80
 80010c0:	0400      	lsls	r0, r0, #16
 80010c2:	4303      	orrs	r3, r0
 80010c4:	2a38      	cmp	r2, #56	; 0x38
 80010c6:	dd00      	ble.n	80010ca <__aeabi_dadd+0x2ca>
 80010c8:	e143      	b.n	8001352 <__aeabi_dadd+0x552>
 80010ca:	2a1f      	cmp	r2, #31
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_dadd+0x2d0>
 80010ce:	e1db      	b.n	8001488 <__aeabi_dadd+0x688>
 80010d0:	2020      	movs	r0, #32
 80010d2:	001d      	movs	r5, r3
 80010d4:	464e      	mov	r6, r9
 80010d6:	1a80      	subs	r0, r0, r2
 80010d8:	4085      	lsls	r5, r0
 80010da:	40d6      	lsrs	r6, r2
 80010dc:	4335      	orrs	r5, r6
 80010de:	464e      	mov	r6, r9
 80010e0:	4086      	lsls	r6, r0
 80010e2:	0030      	movs	r0, r6
 80010e4:	40d3      	lsrs	r3, r2
 80010e6:	1e46      	subs	r6, r0, #1
 80010e8:	41b0      	sbcs	r0, r6
 80010ea:	449c      	add	ip, r3
 80010ec:	4305      	orrs	r5, r0
 80010ee:	19ed      	adds	r5, r5, r7
 80010f0:	42bd      	cmp	r5, r7
 80010f2:	419b      	sbcs	r3, r3
 80010f4:	425b      	negs	r3, r3
 80010f6:	4463      	add	r3, ip
 80010f8:	4698      	mov	r8, r3
 80010fa:	000e      	movs	r6, r1
 80010fc:	e07f      	b.n	80011fe <__aeabi_dadd+0x3fe>
 80010fe:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <__aeabi_dadd+0x378>)
 8001100:	1a76      	subs	r6, r6, r1
 8001102:	4013      	ands	r3, r2
 8001104:	4698      	mov	r8, r3
 8001106:	e6f5      	b.n	8000ef4 <__aeabi_dadd+0xf4>
 8001108:	0028      	movs	r0, r5
 800110a:	f000 fa9b 	bl	8001644 <__clzsi2>
 800110e:	0001      	movs	r1, r0
 8001110:	3118      	adds	r1, #24
 8001112:	291f      	cmp	r1, #31
 8001114:	dc00      	bgt.n	8001118 <__aeabi_dadd+0x318>
 8001116:	e6cf      	b.n	8000eb8 <__aeabi_dadd+0xb8>
 8001118:	002b      	movs	r3, r5
 800111a:	3808      	subs	r0, #8
 800111c:	4083      	lsls	r3, r0
 800111e:	2500      	movs	r5, #0
 8001120:	e6d2      	b.n	8000ec8 <__aeabi_dadd+0xc8>
 8001122:	4662      	mov	r2, ip
 8001124:	433a      	orrs	r2, r7
 8001126:	0011      	movs	r1, r2
 8001128:	1e4f      	subs	r7, r1, #1
 800112a:	41b9      	sbcs	r1, r7
 800112c:	e6ac      	b.n	8000e88 <__aeabi_dadd+0x88>
 800112e:	4649      	mov	r1, r9
 8001130:	0758      	lsls	r0, r3, #29
 8001132:	08c9      	lsrs	r1, r1, #3
 8001134:	4301      	orrs	r1, r0
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	e787      	b.n	800104a <__aeabi_dadd+0x24a>
 800113a:	4649      	mov	r1, r9
 800113c:	075a      	lsls	r2, r3, #29
 800113e:	08c9      	lsrs	r1, r1, #3
 8001140:	4311      	orrs	r1, r2
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	e7a6      	b.n	8001094 <__aeabi_dadd+0x294>
 8001146:	490d      	ldr	r1, [pc, #52]	; (800117c <__aeabi_dadd+0x37c>)
 8001148:	1c70      	adds	r0, r6, #1
 800114a:	4208      	tst	r0, r1
 800114c:	d000      	beq.n	8001150 <__aeabi_dadd+0x350>
 800114e:	e0bb      	b.n	80012c8 <__aeabi_dadd+0x4c8>
 8001150:	2e00      	cmp	r6, #0
 8001152:	d000      	beq.n	8001156 <__aeabi_dadd+0x356>
 8001154:	e114      	b.n	8001380 <__aeabi_dadd+0x580>
 8001156:	4649      	mov	r1, r9
 8001158:	4319      	orrs	r1, r3
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x35e>
 800115c:	e175      	b.n	800144a <__aeabi_dadd+0x64a>
 800115e:	0029      	movs	r1, r5
 8001160:	4339      	orrs	r1, r7
 8001162:	d000      	beq.n	8001166 <__aeabi_dadd+0x366>
 8001164:	e17e      	b.n	8001464 <__aeabi_dadd+0x664>
 8001166:	4649      	mov	r1, r9
 8001168:	0758      	lsls	r0, r3, #29
 800116a:	08c9      	lsrs	r1, r1, #3
 800116c:	4301      	orrs	r1, r0
 800116e:	08db      	lsrs	r3, r3, #3
 8001170:	e76e      	b.n	8001050 <__aeabi_dadd+0x250>
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	000007ff 	.word	0x000007ff
 8001178:	ff7fffff 	.word	0xff7fffff
 800117c:	000007fe 	.word	0x000007fe
 8001180:	4649      	mov	r1, r9
 8001182:	1bcd      	subs	r5, r1, r7
 8001184:	4661      	mov	r1, ip
 8001186:	1a58      	subs	r0, r3, r1
 8001188:	45a9      	cmp	r9, r5
 800118a:	4189      	sbcs	r1, r1
 800118c:	4249      	negs	r1, r1
 800118e:	4688      	mov	r8, r1
 8001190:	0001      	movs	r1, r0
 8001192:	4640      	mov	r0, r8
 8001194:	1a09      	subs	r1, r1, r0
 8001196:	4688      	mov	r8, r1
 8001198:	0209      	lsls	r1, r1, #8
 800119a:	d500      	bpl.n	800119e <__aeabi_dadd+0x39e>
 800119c:	e0a6      	b.n	80012ec <__aeabi_dadd+0x4ec>
 800119e:	4641      	mov	r1, r8
 80011a0:	4329      	orrs	r1, r5
 80011a2:	d000      	beq.n	80011a6 <__aeabi_dadd+0x3a6>
 80011a4:	e67f      	b.n	8000ea6 <__aeabi_dadd+0xa6>
 80011a6:	2300      	movs	r3, #0
 80011a8:	2400      	movs	r4, #0
 80011aa:	e751      	b.n	8001050 <__aeabi_dadd+0x250>
 80011ac:	4cc7      	ldr	r4, [pc, #796]	; (80014cc <__aeabi_dadd+0x6cc>)
 80011ae:	42a1      	cmp	r1, r4
 80011b0:	d100      	bne.n	80011b4 <__aeabi_dadd+0x3b4>
 80011b2:	e0c7      	b.n	8001344 <__aeabi_dadd+0x544>
 80011b4:	2480      	movs	r4, #128	; 0x80
 80011b6:	0424      	lsls	r4, r4, #16
 80011b8:	4323      	orrs	r3, r4
 80011ba:	2a38      	cmp	r2, #56	; 0x38
 80011bc:	dc54      	bgt.n	8001268 <__aeabi_dadd+0x468>
 80011be:	2a1f      	cmp	r2, #31
 80011c0:	dd00      	ble.n	80011c4 <__aeabi_dadd+0x3c4>
 80011c2:	e0cc      	b.n	800135e <__aeabi_dadd+0x55e>
 80011c4:	2420      	movs	r4, #32
 80011c6:	4648      	mov	r0, r9
 80011c8:	1aa4      	subs	r4, r4, r2
 80011ca:	001d      	movs	r5, r3
 80011cc:	464e      	mov	r6, r9
 80011ce:	40a0      	lsls	r0, r4
 80011d0:	40d6      	lsrs	r6, r2
 80011d2:	40a5      	lsls	r5, r4
 80011d4:	0004      	movs	r4, r0
 80011d6:	40d3      	lsrs	r3, r2
 80011d8:	4662      	mov	r2, ip
 80011da:	4335      	orrs	r5, r6
 80011dc:	1e66      	subs	r6, r4, #1
 80011de:	41b4      	sbcs	r4, r6
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	469c      	mov	ip, r3
 80011e4:	4325      	orrs	r5, r4
 80011e6:	e044      	b.n	8001272 <__aeabi_dadd+0x472>
 80011e8:	4662      	mov	r2, ip
 80011ea:	433a      	orrs	r2, r7
 80011ec:	0015      	movs	r5, r2
 80011ee:	1e6f      	subs	r7, r5, #1
 80011f0:	41bd      	sbcs	r5, r7
 80011f2:	444d      	add	r5, r9
 80011f4:	454d      	cmp	r5, r9
 80011f6:	4189      	sbcs	r1, r1
 80011f8:	4249      	negs	r1, r1
 80011fa:	4688      	mov	r8, r1
 80011fc:	4498      	add	r8, r3
 80011fe:	4643      	mov	r3, r8
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	d400      	bmi.n	8001206 <__aeabi_dadd+0x406>
 8001204:	e718      	b.n	8001038 <__aeabi_dadd+0x238>
 8001206:	4bb1      	ldr	r3, [pc, #708]	; (80014cc <__aeabi_dadd+0x6cc>)
 8001208:	3601      	adds	r6, #1
 800120a:	429e      	cmp	r6, r3
 800120c:	d049      	beq.n	80012a2 <__aeabi_dadd+0x4a2>
 800120e:	4642      	mov	r2, r8
 8001210:	4baf      	ldr	r3, [pc, #700]	; (80014d0 <__aeabi_dadd+0x6d0>)
 8001212:	2101      	movs	r1, #1
 8001214:	401a      	ands	r2, r3
 8001216:	0013      	movs	r3, r2
 8001218:	086a      	lsrs	r2, r5, #1
 800121a:	400d      	ands	r5, r1
 800121c:	4315      	orrs	r5, r2
 800121e:	07d9      	lsls	r1, r3, #31
 8001220:	085b      	lsrs	r3, r3, #1
 8001222:	4698      	mov	r8, r3
 8001224:	430d      	orrs	r5, r1
 8001226:	e665      	b.n	8000ef4 <__aeabi_dadd+0xf4>
 8001228:	0018      	movs	r0, r3
 800122a:	3e1f      	subs	r6, #31
 800122c:	40f0      	lsrs	r0, r6
 800122e:	2a20      	cmp	r2, #32
 8001230:	d003      	beq.n	800123a <__aeabi_dadd+0x43a>
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	1a8a      	subs	r2, r1, r2
 8001236:	4093      	lsls	r3, r2
 8001238:	431d      	orrs	r5, r3
 800123a:	1e69      	subs	r1, r5, #1
 800123c:	418d      	sbcs	r5, r1
 800123e:	2300      	movs	r3, #0
 8001240:	2600      	movs	r6, #0
 8001242:	4698      	mov	r8, r3
 8001244:	4305      	orrs	r5, r0
 8001246:	e6f7      	b.n	8001038 <__aeabi_dadd+0x238>
 8001248:	0011      	movs	r1, r2
 800124a:	4665      	mov	r5, ip
 800124c:	3920      	subs	r1, #32
 800124e:	40cd      	lsrs	r5, r1
 8001250:	2a20      	cmp	r2, #32
 8001252:	d004      	beq.n	800125e <__aeabi_dadd+0x45e>
 8001254:	2040      	movs	r0, #64	; 0x40
 8001256:	4661      	mov	r1, ip
 8001258:	1a82      	subs	r2, r0, r2
 800125a:	4091      	lsls	r1, r2
 800125c:	430f      	orrs	r7, r1
 800125e:	0039      	movs	r1, r7
 8001260:	1e4f      	subs	r7, r1, #1
 8001262:	41b9      	sbcs	r1, r7
 8001264:	4329      	orrs	r1, r5
 8001266:	e60f      	b.n	8000e88 <__aeabi_dadd+0x88>
 8001268:	464a      	mov	r2, r9
 800126a:	4313      	orrs	r3, r2
 800126c:	001d      	movs	r5, r3
 800126e:	1e6b      	subs	r3, r5, #1
 8001270:	419d      	sbcs	r5, r3
 8001272:	1b7d      	subs	r5, r7, r5
 8001274:	42af      	cmp	r7, r5
 8001276:	419b      	sbcs	r3, r3
 8001278:	4662      	mov	r2, ip
 800127a:	425b      	negs	r3, r3
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	4698      	mov	r8, r3
 8001280:	4654      	mov	r4, sl
 8001282:	000e      	movs	r6, r1
 8001284:	e607      	b.n	8000e96 <__aeabi_dadd+0x96>
 8001286:	4648      	mov	r0, r9
 8001288:	4318      	orrs	r0, r3
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x48e>
 800128c:	e0b3      	b.n	80013f6 <__aeabi_dadd+0x5f6>
 800128e:	1e50      	subs	r0, r2, #1
 8001290:	2a01      	cmp	r2, #1
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x496>
 8001294:	e10d      	b.n	80014b2 <__aeabi_dadd+0x6b2>
 8001296:	4d8d      	ldr	r5, [pc, #564]	; (80014cc <__aeabi_dadd+0x6cc>)
 8001298:	42aa      	cmp	r2, r5
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x49e>
 800129c:	e0a5      	b.n	80013ea <__aeabi_dadd+0x5ea>
 800129e:	0002      	movs	r2, r0
 80012a0:	e710      	b.n	80010c4 <__aeabi_dadd+0x2c4>
 80012a2:	0032      	movs	r2, r6
 80012a4:	2300      	movs	r3, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	e644      	b.n	8000f34 <__aeabi_dadd+0x134>
 80012aa:	2120      	movs	r1, #32
 80012ac:	0038      	movs	r0, r7
 80012ae:	1a89      	subs	r1, r1, r2
 80012b0:	4665      	mov	r5, ip
 80012b2:	408f      	lsls	r7, r1
 80012b4:	408d      	lsls	r5, r1
 80012b6:	40d0      	lsrs	r0, r2
 80012b8:	1e79      	subs	r1, r7, #1
 80012ba:	418f      	sbcs	r7, r1
 80012bc:	4305      	orrs	r5, r0
 80012be:	433d      	orrs	r5, r7
 80012c0:	4667      	mov	r7, ip
 80012c2:	40d7      	lsrs	r7, r2
 80012c4:	19db      	adds	r3, r3, r7
 80012c6:	e794      	b.n	80011f2 <__aeabi_dadd+0x3f2>
 80012c8:	4a80      	ldr	r2, [pc, #512]	; (80014cc <__aeabi_dadd+0x6cc>)
 80012ca:	4290      	cmp	r0, r2
 80012cc:	d100      	bne.n	80012d0 <__aeabi_dadd+0x4d0>
 80012ce:	e0ec      	b.n	80014aa <__aeabi_dadd+0x6aa>
 80012d0:	0039      	movs	r1, r7
 80012d2:	4449      	add	r1, r9
 80012d4:	4549      	cmp	r1, r9
 80012d6:	4192      	sbcs	r2, r2
 80012d8:	4463      	add	r3, ip
 80012da:	4252      	negs	r2, r2
 80012dc:	189b      	adds	r3, r3, r2
 80012de:	07dd      	lsls	r5, r3, #31
 80012e0:	0849      	lsrs	r1, r1, #1
 80012e2:	085b      	lsrs	r3, r3, #1
 80012e4:	4698      	mov	r8, r3
 80012e6:	0006      	movs	r6, r0
 80012e8:	430d      	orrs	r5, r1
 80012ea:	e6a5      	b.n	8001038 <__aeabi_dadd+0x238>
 80012ec:	464a      	mov	r2, r9
 80012ee:	1abd      	subs	r5, r7, r2
 80012f0:	42af      	cmp	r7, r5
 80012f2:	4189      	sbcs	r1, r1
 80012f4:	4662      	mov	r2, ip
 80012f6:	4249      	negs	r1, r1
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	1a5b      	subs	r3, r3, r1
 80012fc:	4698      	mov	r8, r3
 80012fe:	4654      	mov	r4, sl
 8001300:	e5d1      	b.n	8000ea6 <__aeabi_dadd+0xa6>
 8001302:	076c      	lsls	r4, r5, #29
 8001304:	08f9      	lsrs	r1, r7, #3
 8001306:	4321      	orrs	r1, r4
 8001308:	08eb      	lsrs	r3, r5, #3
 800130a:	0004      	movs	r4, r0
 800130c:	e69d      	b.n	800104a <__aeabi_dadd+0x24a>
 800130e:	464a      	mov	r2, r9
 8001310:	431a      	orrs	r2, r3
 8001312:	d175      	bne.n	8001400 <__aeabi_dadd+0x600>
 8001314:	4661      	mov	r1, ip
 8001316:	4339      	orrs	r1, r7
 8001318:	d114      	bne.n	8001344 <__aeabi_dadd+0x544>
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	2400      	movs	r4, #0
 800131e:	031b      	lsls	r3, r3, #12
 8001320:	e6bc      	b.n	800109c <__aeabi_dadd+0x29c>
 8001322:	464a      	mov	r2, r9
 8001324:	1bd5      	subs	r5, r2, r7
 8001326:	45a9      	cmp	r9, r5
 8001328:	4189      	sbcs	r1, r1
 800132a:	4662      	mov	r2, ip
 800132c:	4249      	negs	r1, r1
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	1a5b      	subs	r3, r3, r1
 8001332:	4698      	mov	r8, r3
 8001334:	2601      	movs	r6, #1
 8001336:	e5ae      	b.n	8000e96 <__aeabi_dadd+0x96>
 8001338:	464a      	mov	r2, r9
 800133a:	08d1      	lsrs	r1, r2, #3
 800133c:	075a      	lsls	r2, r3, #29
 800133e:	4311      	orrs	r1, r2
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	e6a7      	b.n	8001094 <__aeabi_dadd+0x294>
 8001344:	4663      	mov	r3, ip
 8001346:	08f9      	lsrs	r1, r7, #3
 8001348:	075a      	lsls	r2, r3, #29
 800134a:	4654      	mov	r4, sl
 800134c:	4311      	orrs	r1, r2
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	e6a0      	b.n	8001094 <__aeabi_dadd+0x294>
 8001352:	464a      	mov	r2, r9
 8001354:	4313      	orrs	r3, r2
 8001356:	001d      	movs	r5, r3
 8001358:	1e6b      	subs	r3, r5, #1
 800135a:	419d      	sbcs	r5, r3
 800135c:	e6c7      	b.n	80010ee <__aeabi_dadd+0x2ee>
 800135e:	0014      	movs	r4, r2
 8001360:	001e      	movs	r6, r3
 8001362:	3c20      	subs	r4, #32
 8001364:	40e6      	lsrs	r6, r4
 8001366:	2a20      	cmp	r2, #32
 8001368:	d005      	beq.n	8001376 <__aeabi_dadd+0x576>
 800136a:	2440      	movs	r4, #64	; 0x40
 800136c:	1aa2      	subs	r2, r4, r2
 800136e:	4093      	lsls	r3, r2
 8001370:	464a      	mov	r2, r9
 8001372:	431a      	orrs	r2, r3
 8001374:	4691      	mov	r9, r2
 8001376:	464d      	mov	r5, r9
 8001378:	1e6b      	subs	r3, r5, #1
 800137a:	419d      	sbcs	r5, r3
 800137c:	4335      	orrs	r5, r6
 800137e:	e778      	b.n	8001272 <__aeabi_dadd+0x472>
 8001380:	464a      	mov	r2, r9
 8001382:	431a      	orrs	r2, r3
 8001384:	d000      	beq.n	8001388 <__aeabi_dadd+0x588>
 8001386:	e66b      	b.n	8001060 <__aeabi_dadd+0x260>
 8001388:	076b      	lsls	r3, r5, #29
 800138a:	08f9      	lsrs	r1, r7, #3
 800138c:	4319      	orrs	r1, r3
 800138e:	08eb      	lsrs	r3, r5, #3
 8001390:	e680      	b.n	8001094 <__aeabi_dadd+0x294>
 8001392:	4661      	mov	r1, ip
 8001394:	4339      	orrs	r1, r7
 8001396:	d054      	beq.n	8001442 <__aeabi_dadd+0x642>
 8001398:	4663      	mov	r3, ip
 800139a:	08f9      	lsrs	r1, r7, #3
 800139c:	075c      	lsls	r4, r3, #29
 800139e:	4321      	orrs	r1, r4
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	0004      	movs	r4, r0
 80013a4:	e654      	b.n	8001050 <__aeabi_dadd+0x250>
 80013a6:	464a      	mov	r2, r9
 80013a8:	1abd      	subs	r5, r7, r2
 80013aa:	42af      	cmp	r7, r5
 80013ac:	4189      	sbcs	r1, r1
 80013ae:	4662      	mov	r2, ip
 80013b0:	4249      	negs	r1, r1
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	1a5b      	subs	r3, r3, r1
 80013b6:	4698      	mov	r8, r3
 80013b8:	0004      	movs	r4, r0
 80013ba:	2601      	movs	r6, #1
 80013bc:	e56b      	b.n	8000e96 <__aeabi_dadd+0x96>
 80013be:	464a      	mov	r2, r9
 80013c0:	1bd5      	subs	r5, r2, r7
 80013c2:	45a9      	cmp	r9, r5
 80013c4:	4189      	sbcs	r1, r1
 80013c6:	4662      	mov	r2, ip
 80013c8:	4249      	negs	r1, r1
 80013ca:	1a9a      	subs	r2, r3, r2
 80013cc:	1a52      	subs	r2, r2, r1
 80013ce:	4690      	mov	r8, r2
 80013d0:	0212      	lsls	r2, r2, #8
 80013d2:	d532      	bpl.n	800143a <__aeabi_dadd+0x63a>
 80013d4:	464a      	mov	r2, r9
 80013d6:	1abd      	subs	r5, r7, r2
 80013d8:	42af      	cmp	r7, r5
 80013da:	4189      	sbcs	r1, r1
 80013dc:	4662      	mov	r2, ip
 80013de:	4249      	negs	r1, r1
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	1a5b      	subs	r3, r3, r1
 80013e4:	4698      	mov	r8, r3
 80013e6:	0004      	movs	r4, r0
 80013e8:	e584      	b.n	8000ef4 <__aeabi_dadd+0xf4>
 80013ea:	4663      	mov	r3, ip
 80013ec:	08f9      	lsrs	r1, r7, #3
 80013ee:	075a      	lsls	r2, r3, #29
 80013f0:	4311      	orrs	r1, r2
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	e64e      	b.n	8001094 <__aeabi_dadd+0x294>
 80013f6:	08f9      	lsrs	r1, r7, #3
 80013f8:	0768      	lsls	r0, r5, #29
 80013fa:	4301      	orrs	r1, r0
 80013fc:	08eb      	lsrs	r3, r5, #3
 80013fe:	e624      	b.n	800104a <__aeabi_dadd+0x24a>
 8001400:	4662      	mov	r2, ip
 8001402:	433a      	orrs	r2, r7
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x608>
 8001406:	e698      	b.n	800113a <__aeabi_dadd+0x33a>
 8001408:	464a      	mov	r2, r9
 800140a:	08d1      	lsrs	r1, r2, #3
 800140c:	075a      	lsls	r2, r3, #29
 800140e:	4311      	orrs	r1, r2
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	031b      	lsls	r3, r3, #12
 8001416:	421a      	tst	r2, r3
 8001418:	d008      	beq.n	800142c <__aeabi_dadd+0x62c>
 800141a:	4660      	mov	r0, ip
 800141c:	08c5      	lsrs	r5, r0, #3
 800141e:	421d      	tst	r5, r3
 8001420:	d104      	bne.n	800142c <__aeabi_dadd+0x62c>
 8001422:	4654      	mov	r4, sl
 8001424:	002a      	movs	r2, r5
 8001426:	08f9      	lsrs	r1, r7, #3
 8001428:	0743      	lsls	r3, r0, #29
 800142a:	4319      	orrs	r1, r3
 800142c:	0f4b      	lsrs	r3, r1, #29
 800142e:	00c9      	lsls	r1, r1, #3
 8001430:	075b      	lsls	r3, r3, #29
 8001432:	08c9      	lsrs	r1, r1, #3
 8001434:	4319      	orrs	r1, r3
 8001436:	0013      	movs	r3, r2
 8001438:	e62c      	b.n	8001094 <__aeabi_dadd+0x294>
 800143a:	4641      	mov	r1, r8
 800143c:	4329      	orrs	r1, r5
 800143e:	d000      	beq.n	8001442 <__aeabi_dadd+0x642>
 8001440:	e5fa      	b.n	8001038 <__aeabi_dadd+0x238>
 8001442:	2300      	movs	r3, #0
 8001444:	000a      	movs	r2, r1
 8001446:	2400      	movs	r4, #0
 8001448:	e602      	b.n	8001050 <__aeabi_dadd+0x250>
 800144a:	076b      	lsls	r3, r5, #29
 800144c:	08f9      	lsrs	r1, r7, #3
 800144e:	4319      	orrs	r1, r3
 8001450:	08eb      	lsrs	r3, r5, #3
 8001452:	e5fd      	b.n	8001050 <__aeabi_dadd+0x250>
 8001454:	4663      	mov	r3, ip
 8001456:	08f9      	lsrs	r1, r7, #3
 8001458:	075b      	lsls	r3, r3, #29
 800145a:	4319      	orrs	r1, r3
 800145c:	4663      	mov	r3, ip
 800145e:	0004      	movs	r4, r0
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	e617      	b.n	8001094 <__aeabi_dadd+0x294>
 8001464:	003d      	movs	r5, r7
 8001466:	444d      	add	r5, r9
 8001468:	4463      	add	r3, ip
 800146a:	454d      	cmp	r5, r9
 800146c:	4189      	sbcs	r1, r1
 800146e:	4698      	mov	r8, r3
 8001470:	4249      	negs	r1, r1
 8001472:	4488      	add	r8, r1
 8001474:	4643      	mov	r3, r8
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	d400      	bmi.n	800147c <__aeabi_dadd+0x67c>
 800147a:	e5dd      	b.n	8001038 <__aeabi_dadd+0x238>
 800147c:	4642      	mov	r2, r8
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <__aeabi_dadd+0x6d0>)
 8001480:	2601      	movs	r6, #1
 8001482:	401a      	ands	r2, r3
 8001484:	4690      	mov	r8, r2
 8001486:	e5d7      	b.n	8001038 <__aeabi_dadd+0x238>
 8001488:	0010      	movs	r0, r2
 800148a:	001e      	movs	r6, r3
 800148c:	3820      	subs	r0, #32
 800148e:	40c6      	lsrs	r6, r0
 8001490:	2a20      	cmp	r2, #32
 8001492:	d005      	beq.n	80014a0 <__aeabi_dadd+0x6a0>
 8001494:	2040      	movs	r0, #64	; 0x40
 8001496:	1a82      	subs	r2, r0, r2
 8001498:	4093      	lsls	r3, r2
 800149a:	464a      	mov	r2, r9
 800149c:	431a      	orrs	r2, r3
 800149e:	4691      	mov	r9, r2
 80014a0:	464d      	mov	r5, r9
 80014a2:	1e6b      	subs	r3, r5, #1
 80014a4:	419d      	sbcs	r5, r3
 80014a6:	4335      	orrs	r5, r6
 80014a8:	e621      	b.n	80010ee <__aeabi_dadd+0x2ee>
 80014aa:	0002      	movs	r2, r0
 80014ac:	2300      	movs	r3, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	e540      	b.n	8000f34 <__aeabi_dadd+0x134>
 80014b2:	464a      	mov	r2, r9
 80014b4:	19d5      	adds	r5, r2, r7
 80014b6:	42bd      	cmp	r5, r7
 80014b8:	4189      	sbcs	r1, r1
 80014ba:	4463      	add	r3, ip
 80014bc:	4698      	mov	r8, r3
 80014be:	4249      	negs	r1, r1
 80014c0:	4488      	add	r8, r1
 80014c2:	e5b3      	b.n	800102c <__aeabi_dadd+0x22c>
 80014c4:	2100      	movs	r1, #0
 80014c6:	4a01      	ldr	r2, [pc, #4]	; (80014cc <__aeabi_dadd+0x6cc>)
 80014c8:	000b      	movs	r3, r1
 80014ca:	e533      	b.n	8000f34 <__aeabi_dadd+0x134>
 80014cc:	000007ff 	.word	0x000007ff
 80014d0:	ff7fffff 	.word	0xff7fffff

080014d4 <__aeabi_i2d>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d016      	beq.n	8001508 <__aeabi_i2d+0x34>
 80014da:	17c3      	asrs	r3, r0, #31
 80014dc:	18c5      	adds	r5, r0, r3
 80014de:	405d      	eors	r5, r3
 80014e0:	0fc4      	lsrs	r4, r0, #31
 80014e2:	0028      	movs	r0, r5
 80014e4:	f000 f8ae 	bl	8001644 <__clzsi2>
 80014e8:	4a11      	ldr	r2, [pc, #68]	; (8001530 <__aeabi_i2d+0x5c>)
 80014ea:	1a12      	subs	r2, r2, r0
 80014ec:	280a      	cmp	r0, #10
 80014ee:	dc16      	bgt.n	800151e <__aeabi_i2d+0x4a>
 80014f0:	0003      	movs	r3, r0
 80014f2:	002e      	movs	r6, r5
 80014f4:	3315      	adds	r3, #21
 80014f6:	409e      	lsls	r6, r3
 80014f8:	230b      	movs	r3, #11
 80014fa:	1a18      	subs	r0, r3, r0
 80014fc:	40c5      	lsrs	r5, r0
 80014fe:	0553      	lsls	r3, r2, #21
 8001500:	032d      	lsls	r5, r5, #12
 8001502:	0b2d      	lsrs	r5, r5, #12
 8001504:	0d5b      	lsrs	r3, r3, #21
 8001506:	e003      	b.n	8001510 <__aeabi_i2d+0x3c>
 8001508:	2400      	movs	r4, #0
 800150a:	2300      	movs	r3, #0
 800150c:	2500      	movs	r5, #0
 800150e:	2600      	movs	r6, #0
 8001510:	051b      	lsls	r3, r3, #20
 8001512:	432b      	orrs	r3, r5
 8001514:	07e4      	lsls	r4, r4, #31
 8001516:	4323      	orrs	r3, r4
 8001518:	0030      	movs	r0, r6
 800151a:	0019      	movs	r1, r3
 800151c:	bd70      	pop	{r4, r5, r6, pc}
 800151e:	380b      	subs	r0, #11
 8001520:	4085      	lsls	r5, r0
 8001522:	0553      	lsls	r3, r2, #21
 8001524:	032d      	lsls	r5, r5, #12
 8001526:	2600      	movs	r6, #0
 8001528:	0b2d      	lsrs	r5, r5, #12
 800152a:	0d5b      	lsrs	r3, r3, #21
 800152c:	e7f0      	b.n	8001510 <__aeabi_i2d+0x3c>
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	0000041e 	.word	0x0000041e

08001534 <__aeabi_d2f>:
 8001534:	0002      	movs	r2, r0
 8001536:	004b      	lsls	r3, r1, #1
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	0308      	lsls	r0, r1, #12
 800153c:	0d5b      	lsrs	r3, r3, #21
 800153e:	4e3d      	ldr	r6, [pc, #244]	; (8001634 <__aeabi_d2f+0x100>)
 8001540:	0fcc      	lsrs	r4, r1, #31
 8001542:	0a40      	lsrs	r0, r0, #9
 8001544:	0f51      	lsrs	r1, r2, #29
 8001546:	1c5f      	adds	r7, r3, #1
 8001548:	4308      	orrs	r0, r1
 800154a:	00d5      	lsls	r5, r2, #3
 800154c:	4237      	tst	r7, r6
 800154e:	d00a      	beq.n	8001566 <__aeabi_d2f+0x32>
 8001550:	4939      	ldr	r1, [pc, #228]	; (8001638 <__aeabi_d2f+0x104>)
 8001552:	185e      	adds	r6, r3, r1
 8001554:	2efe      	cmp	r6, #254	; 0xfe
 8001556:	dd16      	ble.n	8001586 <__aeabi_d2f+0x52>
 8001558:	23ff      	movs	r3, #255	; 0xff
 800155a:	2100      	movs	r1, #0
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	430b      	orrs	r3, r1
 8001560:	07e0      	lsls	r0, r4, #31
 8001562:	4318      	orrs	r0, r3
 8001564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <__aeabi_d2f+0x44>
 800156a:	4328      	orrs	r0, r5
 800156c:	d027      	beq.n	80015be <__aeabi_d2f+0x8a>
 800156e:	2105      	movs	r1, #5
 8001570:	0189      	lsls	r1, r1, #6
 8001572:	0a49      	lsrs	r1, r1, #9
 8001574:	b2db      	uxtb	r3, r3
 8001576:	e7f1      	b.n	800155c <__aeabi_d2f+0x28>
 8001578:	4305      	orrs	r5, r0
 800157a:	d0ed      	beq.n	8001558 <__aeabi_d2f+0x24>
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	03c9      	lsls	r1, r1, #15
 8001580:	23ff      	movs	r3, #255	; 0xff
 8001582:	4301      	orrs	r1, r0
 8001584:	e7ea      	b.n	800155c <__aeabi_d2f+0x28>
 8001586:	2e00      	cmp	r6, #0
 8001588:	dd1c      	ble.n	80015c4 <__aeabi_d2f+0x90>
 800158a:	0192      	lsls	r2, r2, #6
 800158c:	0011      	movs	r1, r2
 800158e:	1e4a      	subs	r2, r1, #1
 8001590:	4191      	sbcs	r1, r2
 8001592:	00c0      	lsls	r0, r0, #3
 8001594:	0f6d      	lsrs	r5, r5, #29
 8001596:	4301      	orrs	r1, r0
 8001598:	4329      	orrs	r1, r5
 800159a:	074b      	lsls	r3, r1, #29
 800159c:	d048      	beq.n	8001630 <__aeabi_d2f+0xfc>
 800159e:	230f      	movs	r3, #15
 80015a0:	400b      	ands	r3, r1
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d000      	beq.n	80015a8 <__aeabi_d2f+0x74>
 80015a6:	3104      	adds	r1, #4
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	04db      	lsls	r3, r3, #19
 80015ac:	400b      	ands	r3, r1
 80015ae:	d03f      	beq.n	8001630 <__aeabi_d2f+0xfc>
 80015b0:	1c72      	adds	r2, r6, #1
 80015b2:	2efe      	cmp	r6, #254	; 0xfe
 80015b4:	d0d0      	beq.n	8001558 <__aeabi_d2f+0x24>
 80015b6:	0189      	lsls	r1, r1, #6
 80015b8:	0a49      	lsrs	r1, r1, #9
 80015ba:	b2d3      	uxtb	r3, r2
 80015bc:	e7ce      	b.n	800155c <__aeabi_d2f+0x28>
 80015be:	2300      	movs	r3, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	e7cb      	b.n	800155c <__aeabi_d2f+0x28>
 80015c4:	0032      	movs	r2, r6
 80015c6:	3217      	adds	r2, #23
 80015c8:	db22      	blt.n	8001610 <__aeabi_d2f+0xdc>
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	221e      	movs	r2, #30
 80015ce:	0409      	lsls	r1, r1, #16
 80015d0:	4308      	orrs	r0, r1
 80015d2:	1b92      	subs	r2, r2, r6
 80015d4:	2a1f      	cmp	r2, #31
 80015d6:	dd1d      	ble.n	8001614 <__aeabi_d2f+0xe0>
 80015d8:	2102      	movs	r1, #2
 80015da:	4249      	negs	r1, r1
 80015dc:	1b8e      	subs	r6, r1, r6
 80015de:	0001      	movs	r1, r0
 80015e0:	40f1      	lsrs	r1, r6
 80015e2:	000e      	movs	r6, r1
 80015e4:	2a20      	cmp	r2, #32
 80015e6:	d004      	beq.n	80015f2 <__aeabi_d2f+0xbe>
 80015e8:	4a14      	ldr	r2, [pc, #80]	; (800163c <__aeabi_d2f+0x108>)
 80015ea:	4694      	mov	ip, r2
 80015ec:	4463      	add	r3, ip
 80015ee:	4098      	lsls	r0, r3
 80015f0:	4305      	orrs	r5, r0
 80015f2:	0029      	movs	r1, r5
 80015f4:	1e4d      	subs	r5, r1, #1
 80015f6:	41a9      	sbcs	r1, r5
 80015f8:	4331      	orrs	r1, r6
 80015fa:	2600      	movs	r6, #0
 80015fc:	074b      	lsls	r3, r1, #29
 80015fe:	d1ce      	bne.n	800159e <__aeabi_d2f+0x6a>
 8001600:	2080      	movs	r0, #128	; 0x80
 8001602:	000b      	movs	r3, r1
 8001604:	04c0      	lsls	r0, r0, #19
 8001606:	2201      	movs	r2, #1
 8001608:	4003      	ands	r3, r0
 800160a:	4201      	tst	r1, r0
 800160c:	d1d3      	bne.n	80015b6 <__aeabi_d2f+0x82>
 800160e:	e7af      	b.n	8001570 <__aeabi_d2f+0x3c>
 8001610:	2300      	movs	r3, #0
 8001612:	e7ac      	b.n	800156e <__aeabi_d2f+0x3a>
 8001614:	490a      	ldr	r1, [pc, #40]	; (8001640 <__aeabi_d2f+0x10c>)
 8001616:	468c      	mov	ip, r1
 8001618:	0029      	movs	r1, r5
 800161a:	4463      	add	r3, ip
 800161c:	40d1      	lsrs	r1, r2
 800161e:	409d      	lsls	r5, r3
 8001620:	000a      	movs	r2, r1
 8001622:	0029      	movs	r1, r5
 8001624:	4098      	lsls	r0, r3
 8001626:	1e4d      	subs	r5, r1, #1
 8001628:	41a9      	sbcs	r1, r5
 800162a:	4301      	orrs	r1, r0
 800162c:	4311      	orrs	r1, r2
 800162e:	e7e4      	b.n	80015fa <__aeabi_d2f+0xc6>
 8001630:	0033      	movs	r3, r6
 8001632:	e79d      	b.n	8001570 <__aeabi_d2f+0x3c>
 8001634:	000007fe 	.word	0x000007fe
 8001638:	fffffc80 	.word	0xfffffc80
 800163c:	fffffca2 	.word	0xfffffca2
 8001640:	fffffc82 	.word	0xfffffc82

08001644 <__clzsi2>:
 8001644:	211c      	movs	r1, #28
 8001646:	2301      	movs	r3, #1
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	4298      	cmp	r0, r3
 800164c:	d301      	bcc.n	8001652 <__clzsi2+0xe>
 800164e:	0c00      	lsrs	r0, r0, #16
 8001650:	3910      	subs	r1, #16
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	4298      	cmp	r0, r3
 8001656:	d301      	bcc.n	800165c <__clzsi2+0x18>
 8001658:	0a00      	lsrs	r0, r0, #8
 800165a:	3908      	subs	r1, #8
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	4298      	cmp	r0, r3
 8001660:	d301      	bcc.n	8001666 <__clzsi2+0x22>
 8001662:	0900      	lsrs	r0, r0, #4
 8001664:	3904      	subs	r1, #4
 8001666:	a202      	add	r2, pc, #8	; (adr r2, 8001670 <__clzsi2+0x2c>)
 8001668:	5c10      	ldrb	r0, [r2, r0]
 800166a:	1840      	adds	r0, r0, r1
 800166c:	4770      	bx	lr
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	02020304 	.word	0x02020304
 8001674:	01010101 	.word	0x01010101
	...

08001680 <__clzdi2>:
 8001680:	b510      	push	{r4, lr}
 8001682:	2900      	cmp	r1, #0
 8001684:	d103      	bne.n	800168e <__clzdi2+0xe>
 8001686:	f7ff ffdd 	bl	8001644 <__clzsi2>
 800168a:	3020      	adds	r0, #32
 800168c:	e002      	b.n	8001694 <__clzdi2+0x14>
 800168e:	1c08      	adds	r0, r1, #0
 8001690:	f7ff ffd8 	bl	8001644 <__clzsi2>
 8001694:	bd10      	pop	{r4, pc}
 8001696:	46c0      	nop			; (mov r8, r8)

08001698 <ASNeighborListAdd>:
}

/********************************************/

void ASNeighborListAdd(ASNeighborList list, void *node, float edgeCost)
{
 8001698:	b570      	push	{r4, r5, r6, lr}
    if (list->count == list->capacity) {
 800169a:	6883      	ldr	r3, [r0, #8]
{
 800169c:	1c16      	adds	r6, r2, #0
    if (list->count == list->capacity) {
 800169e:	6842      	ldr	r2, [r0, #4]
{
 80016a0:	0004      	movs	r4, r0
 80016a2:	000d      	movs	r5, r1
    if (list->count == list->capacity) {
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <ASNeighborListAdd+0x2e>
 80016a8:	6900      	ldr	r0, [r0, #16]
        list->capacity = 1 + (list->capacity * 2);
        list->costs = realloc(list->costs, sizeof(float) * list->capacity);
        list->nodeKeys = realloc(list->nodeKeys, list->source->nodeSize * list->capacity);
    }
    list->costs[list->count] = edgeCost;
 80016aa:	68e1      	ldr	r1, [r4, #12]
 80016ac:	009a      	lsls	r2, r3, #2
 80016ae:	5056      	str	r6, [r2, r1]
    memcpy(list->nodeKeys + (list->count * list->source->nodeSize), node, list->source->nodeSize);
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	0029      	movs	r1, r5
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	4353      	muls	r3, r2
 80016b8:	18c0      	adds	r0, r0, r3
 80016ba:	f003 fadd 	bl	8004c78 <memcpy>
    list->count++;
 80016be:	68a3      	ldr	r3, [r4, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60a3      	str	r3, [r4, #8]
}
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
        list->capacity = 1 + (list->capacity * 2);
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	3301      	adds	r3, #1
 80016ca:	6043      	str	r3, [r0, #4]
        list->costs = realloc(list->costs, sizeof(float) * list->capacity);
 80016cc:	0099      	lsls	r1, r3, #2
 80016ce:	68c0      	ldr	r0, [r0, #12]
 80016d0:	f003 fe90 	bl	80053f4 <realloc>
        list->nodeKeys = realloc(list->nodeKeys, list->source->nodeSize * list->capacity);
 80016d4:	6823      	ldr	r3, [r4, #0]
        list->costs = realloc(list->costs, sizeof(float) * list->capacity);
 80016d6:	60e0      	str	r0, [r4, #12]
        list->nodeKeys = realloc(list->nodeKeys, list->source->nodeSize * list->capacity);
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	6863      	ldr	r3, [r4, #4]
 80016dc:	6920      	ldr	r0, [r4, #16]
 80016de:	4359      	muls	r1, r3
 80016e0:	f003 fe88 	bl	80053f4 <realloc>
 80016e4:	68a3      	ldr	r3, [r4, #8]
 80016e6:	6120      	str	r0, [r4, #16]
 80016e8:	e7df      	b.n	80016aa <ASNeighborListAdd+0x12>
 80016ea:	46c0      	nop			; (mov r8, r8)

080016ec <ASPathCreate>:

ASPath ASPathCreate(const ASPathNodeSource *source, void *context, void *startNodeKey, void *goalNodeKey)
{
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	46de      	mov	lr, fp
 80016f0:	4657      	mov	r7, sl
 80016f2:	4645      	mov	r5, r8
 80016f4:	464e      	mov	r6, r9
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b091      	sub	sp, #68	; 0x44
 80016fa:	4683      	mov	fp, r0
 80016fc:	000d      	movs	r5, r1
 80016fe:	1e17      	subs	r7, r2, #0
 8001700:	9106      	str	r1, [sp, #24]
 8001702:	930c      	str	r3, [sp, #48]	; 0x30
    if (!startNodeKey || !source || !source->nodeNeighbors || source->nodeSize == 0) {
 8001704:	d101      	bne.n	800170a <ASPathCreate+0x1e>
 8001706:	f000 fcd3 	bl	80020b0 <ASPathCreate+0x9c4>
 800170a:	2800      	cmp	r0, #0
 800170c:	d101      	bne.n	8001712 <ASPathCreate+0x26>
 800170e:	f000 fccf 	bl	80020b0 <ASPathCreate+0x9c4>
 8001712:	6843      	ldr	r3, [r0, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <ASPathCreate+0x30>
 8001718:	f000 fcca 	bl	80020b0 <ASPathCreate+0x9c4>
 800171c:	6804      	ldr	r4, [r0, #0]
 800171e:	2c00      	cmp	r4, #0
 8001720:	d101      	bne.n	8001726 <ASPathCreate+0x3a>
 8001722:	f000 fcc5 	bl	80020b0 <ASPathCreate+0x9c4>
    VisitedNodes nodes = calloc(1, sizeof(struct __VisitedNodes));
 8001726:	2124      	movs	r1, #36	; 0x24
 8001728:	2001      	movs	r0, #1
 800172a:	f003 fa3f 	bl	8004bac <calloc>
    nodes->source = source;
 800172e:	465a      	mov	r2, fp
 8001730:	0003      	movs	r3, r0
    VisitedNodes nodes = calloc(1, sizeof(struct __VisitedNodes));
 8001732:	4681      	mov	r9, r0
    nodes->context = context;
 8001734:	c324      	stmia	r3!, {r2, r5}
    ASNeighborList list = calloc(1, sizeof(struct __ASNeighborList));
 8001736:	2114      	movs	r1, #20
 8001738:	2001      	movs	r0, #1
 800173a:	f003 fa37 	bl	8004bac <calloc>
    if (nodes->nodeRecordsCount > 0) {
 800173e:	464b      	mov	r3, r9
    list->source = source;
 8001740:	465a      	mov	r2, fp
    if (nodes->nodeRecordsCount > 0) {
 8001742:	68db      	ldr	r3, [r3, #12]
    ASNeighborList list = calloc(1, sizeof(struct __ASNeighborList));
 8001744:	900d      	str	r0, [sp, #52]	; 0x34
    if (nodes->nodeRecordsCount > 0) {
 8001746:	4698      	mov	r8, r3
    list->source = source;
 8001748:	6002      	str	r2, [r0, #0]
    if (nodes->nodeRecordsCount > 0) {
 800174a:	2b00      	cmp	r3, #0
 800174c:	d000      	beq.n	8001750 <ASPathCreate+0x64>
 800174e:	e170      	b.n	8001a32 <ASPathCreate+0x346>
 8001750:	464b      	mov	r3, r9
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2400      	movs	r4, #0
 8001756:	9300      	str	r3, [sp, #0]
    size_t first = 0;
 8001758:	2300      	movs	r3, #0
    if (nodes->nodeRecordsCount > 0) {
 800175a:	2604      	movs	r6, #4
    size_t first = 0;
 800175c:	9302      	str	r3, [sp, #8]
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 800175e:	464b      	mov	r3, r9
 8001760:	689d      	ldr	r5, [r3, #8]
 8001762:	45a8      	cmp	r8, r5
 8001764:	d101      	bne.n	800176a <ASPathCreate+0x7e>
 8001766:	f000 fd7e 	bl	8002266 <ASPathCreate+0xb7a>
 800176a:	1e6b      	subs	r3, r5, #1
 800176c:	9303      	str	r3, [sp, #12]
 800176e:	464b      	mov	r3, r9
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	9301      	str	r3, [sp, #4]
    nodes->nodeRecordsCount++;
 8001774:	2301      	movs	r3, #1
 8001776:	4443      	add	r3, r8
 8001778:	469a      	mov	sl, r3
 800177a:	464b      	mov	r3, r9
 800177c:	4652      	mov	r2, sl
 800177e:	60da      	str	r2, [r3, #12]
    memmove(&nodes->nodeRecordsIndex[first+1], &nodes->nodeRecordsIndex[first], (nodes->nodeRecordsCapacity - first - 1) * sizeof(size_t));
 8001780:	9b01      	ldr	r3, [sp, #4]
 8001782:	9902      	ldr	r1, [sp, #8]
 8001784:	469c      	mov	ip, r3
 8001786:	9a03      	ldr	r2, [sp, #12]
 8001788:	4464      	add	r4, ip
 800178a:	1a52      	subs	r2, r2, r1
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	0021      	movs	r1, r4
 8001790:	1998      	adds	r0, r3, r6
 8001792:	f003 fa7a 	bl	8004c8a <memmove>
    nodes->nodeRecordsIndex[first] = node.index;
 8001796:	4643      	mov	r3, r8
 8001798:	6023      	str	r3, [r4, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800179a:	465b      	mov	r3, fp
 800179c:	681c      	ldr	r4, [r3, #0]
 800179e:	4643      	mov	r3, r8
 80017a0:	3414      	adds	r4, #20
 80017a2:	435c      	muls	r4, r3
 80017a4:	9b00      	ldr	r3, [sp, #0]
    memset(record, 0, sizeof(NodeRecord));
 80017a6:	2214      	movs	r2, #20
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80017a8:	469c      	mov	ip, r3
 80017aa:	4464      	add	r4, ip
    memset(record, 0, sizeof(NodeRecord));
 80017ac:	2100      	movs	r1, #0
 80017ae:	0020      	movs	r0, r4
 80017b0:	f003 fa7e 	bl	8004cb0 <memset>
    memcpy(record->nodeKey, nodeKey, nodes->source->nodeSize);
 80017b4:	465b      	mov	r3, fp
 80017b6:	0020      	movs	r0, r4
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	0039      	movs	r1, r7
 80017bc:	3014      	adds	r0, #20
 80017be:	f003 fa5b 	bl	8004c78 <memcpy>
    if (!nodeKey) {
 80017c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <ASPathCreate+0xe0>
 80017c8:	f000 fd40 	bl	800224c <ASPathCreate+0xb60>
    if (nodes->nodeRecordsCount > 0) {
 80017cc:	4653      	mov	r3, sl
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <ASPathCreate+0xea>
 80017d2:	f000 fcc7 	bl	8002164 <ASPathCreate+0xa78>
 80017d6:	2300      	movs	r3, #0
    size_t first = 0;
 80017d8:	2600      	movs	r6, #0
 80017da:	2404      	movs	r4, #4
    if (nodes->nodeRecordsCount > 0) {
 80017dc:	9309      	str	r3, [sp, #36]	; 0x24
    return node;
 80017de:	3b01      	subs	r3, #1
 80017e0:	9304      	str	r3, [sp, #16]
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 80017e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017e4:	42ab      	cmp	r3, r5
 80017e6:	d101      	bne.n	80017ec <ASPathCreate+0x100>
 80017e8:	f000 fd56 	bl	8002298 <ASPathCreate+0xbac>
 80017ec:	464b      	mov	r3, r9
 80017ee:	6958      	ldr	r0, [r3, #20]
 80017f0:	3d01      	subs	r5, #1
    nodes->nodeRecordsCount++;
 80017f2:	464a      	mov	r2, r9
 80017f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017f6:	3301      	adds	r3, #1
 80017f8:	60d3      	str	r3, [r2, #12]
    memmove(&nodes->nodeRecordsIndex[first+1], &nodes->nodeRecordsIndex[first], (nodes->nodeRecordsCapacity - first - 1) * sizeof(size_t));
 80017fa:	4652      	mov	r2, sl
 80017fc:	1887      	adds	r7, r0, r2
 80017fe:	1baa      	subs	r2, r5, r6
 8001800:	0039      	movs	r1, r7
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	1900      	adds	r0, r0, r4
 8001806:	f003 fa40 	bl	8004c8a <memmove>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800180a:	465a      	mov	r2, fp
    nodes->nodeRecordsIndex[first] = node.index;
 800180c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    memset(record, 0, sizeof(NodeRecord));
 800180e:	2100      	movs	r1, #0
    nodes->nodeRecordsIndex[first] = node.index;
 8001810:	603b      	str	r3, [r7, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001812:	6814      	ldr	r4, [r2, #0]
    memset(record, 0, sizeof(NodeRecord));
 8001814:	2214      	movs	r2, #20
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001816:	3414      	adds	r4, #20
 8001818:	435c      	muls	r4, r3
 800181a:	9b00      	ldr	r3, [sp, #0]
 800181c:	469c      	mov	ip, r3
 800181e:	4464      	add	r4, ip
    memset(record, 0, sizeof(NodeRecord));
 8001820:	0020      	movs	r0, r4
 8001822:	f003 fa45 	bl	8004cb0 <memset>
    memcpy(record->nodeKey, nodeKey, nodes->source->nodeSize);
 8001826:	0020      	movs	r0, r4
 8001828:	465b      	mov	r3, fp
 800182a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	3014      	adds	r0, #20
 8001830:	f003 fa22 	bl	8004c78 <memcpy>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001834:	465b      	mov	r3, fp
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800183a:	3414      	adds	r4, #20
 800183c:	4363      	muls	r3, r4
 800183e:	9a00      	ldr	r2, [sp, #0]
 8001840:	18d1      	adds	r1, r2, r3
        NodeGetRecord(n)->isGoal = 1;
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	2204      	movs	r2, #4
 8001846:	4313      	orrs	r3, r2
 8001848:	700b      	strb	r3, [r1, #0]
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 800184a:	465b      	mov	r3, fp
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <ASPathCreate+0x16a>
 8001852:	f000 fd38 	bl	80022c6 <ASPathCreate+0xbda>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001856:	9a04      	ldr	r2, [sp, #16]
    return NodeGetRecord(node)->nodeKey;
 8001858:	3114      	adds	r1, #20
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800185a:	4354      	muls	r4, r2
 800185c:	9a00      	ldr	r2, [sp, #0]
 800185e:	4694      	mov	ip, r2
 8001860:	4464      	add	r4, ip
    return NodeGetRecord(node)->nodeKey;
 8001862:	0020      	movs	r0, r4
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001864:	9a06      	ldr	r2, [sp, #24]
    return NodeGetRecord(node)->nodeKey;
 8001866:	3014      	adds	r0, #20
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001868:	4798      	blx	r3
 800186a:	465b      	mov	r3, fp
 800186c:	681c      	ldr	r4, [r3, #0]
 800186e:	464b      	mov	r3, r9
 8001870:	3414      	adds	r4, #20
 8001872:	930a      	str	r3, [sp, #40]	; 0x28
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001874:	9b04      	ldr	r3, [sp, #16]
        record->hasParent = 0;
 8001876:	2218      	movs	r2, #24
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001878:	435c      	muls	r4, r3
 800187a:	9b00      	ldr	r3, [sp, #0]
 800187c:	469c      	mov	ip, r3
 800187e:	4464      	add	r4, ip
        record->hasParent = 0;
 8001880:	7823      	ldrb	r3, [r4, #0]
    record->estimatedCost = estimatedCost;
 8001882:	6060      	str	r0, [r4, #4]
        record->hasParent = 0;
 8001884:	4393      	bics	r3, r2
 8001886:	2210      	movs	r2, #16
 8001888:	4313      	orrs	r3, r2
 800188a:	7023      	strb	r3, [r4, #0]
    if (n.nodes->openNodesCount == n.nodes->openNodesCapacity) {
 800188c:	464b      	mov	r3, r9
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	469a      	mov	sl, r3
 8001892:	464b      	mov	r3, r9
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	459a      	cmp	sl, r3
 8001898:	d101      	bne.n	800189e <ASPathCreate+0x1b2>
 800189a:	f000 fcc0 	bl	800221e <ASPathCreate+0xb32>
 800189e:	464b      	mov	r3, r9
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	9305      	str	r3, [sp, #20]
    n.nodes->openNodes[openIndex] = n.index;
 80018a4:	4653      	mov	r3, sl
 80018a6:	9a04      	ldr	r2, [sp, #16]
 80018a8:	009d      	lsls	r5, r3, #2
 80018aa:	9b05      	ldr	r3, [sp, #20]
 80018ac:	515a      	str	r2, [r3, r5]
    n.nodes->openNodesCount++;
 80018ae:	4653      	mov	r3, sl
 80018b0:	464a      	mov	r2, r9
 80018b2:	3301      	adds	r3, #1
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	9307      	str	r3, [sp, #28]
    record->openIndex = openIndex;
 80018b8:	4653      	mov	r3, sl
    record->isOpen = 1;
 80018ba:	2202      	movs	r2, #2
    record->openIndex = openIndex;
 80018bc:	60e3      	str	r3, [r4, #12]
    record->isOpen = 1;
 80018be:	7823      	ldrb	r3, [r4, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	7023      	strb	r3, [r4, #0]
    record->cost = cost;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60a3      	str	r3, [r4, #8]
    while (index > 0) {
 80018c8:	4653      	mov	r3, sl
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <ASPathCreate+0x1e6>
 80018ce:	f000 fd12 	bl	80022f6 <ASPathCreate+0xc0a>
 80018d2:	465b      	mov	r3, fp
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	001c      	movs	r4, r3
 80018d8:	9303      	str	r3, [sp, #12]
 80018da:	464b      	mov	r3, r9
 80018dc:	3414      	adds	r4, #20
 80018de:	46a1      	mov	r9, r4
 80018e0:	9308      	str	r3, [sp, #32]
 80018e2:	002c      	movs	r4, r5
 80018e4:	e017      	b.n	8001916 <ASPathCreate+0x22a>
    if (index1 != index2) {
 80018e6:	4555      	cmp	r5, sl
 80018e8:	d013      	beq.n	8001912 <ASPathCreate+0x226>
        const size_t tempOpenIndex = record1->openIndex;
 80018ea:	68fb      	ldr	r3, [r7, #12]
        record1->openIndex = record2->openIndex;
 80018ec:	68f2      	ldr	r2, [r6, #12]
 80018ee:	60fa      	str	r2, [r7, #12]
        record2->openIndex = tempOpenIndex;
 80018f0:	60f3      	str	r3, [r6, #12]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 80018f2:	4643      	mov	r3, r8
        nodes->openNodes[index1] = nodes->openNodes[index2];
 80018f4:	4642      	mov	r2, r8
        const size_t tempNodeIndex = nodes->openNodes[index1];
 80018f6:	681b      	ldr	r3, [r3, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 80018f8:	6821      	ldr	r1, [r4, #0]
 80018fa:	6011      	str	r1, [r2, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 80018fc:	6023      	str	r3, [r4, #0]
 80018fe:	465b      	mov	r3, fp
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2214      	movs	r2, #20
 8001904:	469c      	mov	ip, r3
 8001906:	4462      	add	r2, ip
 8001908:	4691      	mov	r9, r2
 800190a:	9303      	str	r3, [sp, #12]
 800190c:	9202      	str	r2, [sp, #8]
    while (index > 0) {
 800190e:	2d00      	cmp	r5, #0
 8001910:	d02b      	beq.n	800196a <ASPathCreate+0x27e>
        return 0;
 8001912:	46aa      	mov	sl, r5
 8001914:	00ac      	lsls	r4, r5, #2
        const size_t parentIndex = floorf((index-1) / 2);
 8001916:	4653      	mov	r3, sl
 8001918:	1e58      	subs	r0, r3, #1
 800191a:	0840      	lsrs	r0, r0, #1
 800191c:	f7ff fa34 	bl	8000d88 <__aeabi_ui2f>
 8001920:	f7fe fd0c 	bl	800033c <__aeabi_f2uiz>
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001924:	9a05      	ldr	r2, [sp, #20]
 8001926:	0083      	lsls	r3, r0, #2
 8001928:	4690      	mov	r8, r2
 800192a:	4498      	add	r8, r3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800192c:	464b      	mov	r3, r9
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	4643      	mov	r3, r8
 8001932:	681f      	ldr	r7, [r3, #0]
 8001934:	464b      	mov	r3, r9
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001936:	4694      	mov	ip, r2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001938:	435f      	muls	r7, r3
 800193a:	464a      	mov	r2, r9
 800193c:	9b00      	ldr	r3, [sp, #0]
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 800193e:	4464      	add	r4, ip
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001940:	469c      	mov	ip, r3
 8001942:	6826      	ldr	r6, [r4, #0]
 8001944:	4467      	add	r7, ip
 8001946:	4356      	muls	r6, r2
    return record->estimatedCost + record->cost;
 8001948:	68b9      	ldr	r1, [r7, #8]
        const size_t parentIndex = floorf((index-1) / 2);
 800194a:	0005      	movs	r5, r0
    return record->estimatedCost + record->cost;
 800194c:	6878      	ldr	r0, [r7, #4]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800194e:	4466      	add	r6, ip
    return record->estimatedCost + record->cost;
 8001950:	f7fe fdd8 	bl	8000504 <__aeabi_fadd>
 8001954:	68b1      	ldr	r1, [r6, #8]
 8001956:	9001      	str	r0, [sp, #4]
 8001958:	6870      	ldr	r0, [r6, #4]
 800195a:	f7fe fdd3 	bl	8000504 <__aeabi_fadd>
 800195e:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8001960:	9801      	ldr	r0, [sp, #4]
 8001962:	f7fe fc79 	bl	8000258 <__aeabi_fcmplt>
 8001966:	2800      	cmp	r0, #0
 8001968:	d0bd      	beq.n	80018e6 <ASPathCreate+0x1fa>
 800196a:	9b08      	ldr	r3, [sp, #32]
 800196c:	464c      	mov	r4, r9
 800196e:	4699      	mov	r9, r3
    // set the starting node's estimate cost to the goal and add it to the open set
    SetNodeEstimatedCost(current,  GetPathCostHeuristic(current, goalNode));
    AddNodeToOpenSet(current, 0, NodeNull);

    // perform the A* algorithm
    while (HasOpenNode(visitedNodes) && !NodeIsGoal((current = GetOpenNode(visitedNodes)))) {
 8001970:	9b07      	ldr	r3, [sp, #28]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <ASPathCreate+0x28e>
 8001976:	f000 fcdd 	bl	8002334 <ASPathCreate+0xc48>
    record->hasEstimatedCost = 1;
 800197a:	9b05      	ldr	r3, [sp, #20]
 800197c:	46da      	mov	sl, fp
 800197e:	4698      	mov	r8, r3
 8001980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001982:	9f07      	ldr	r7, [sp, #28]
 8001984:	469b      	mov	fp, r3
    return NodeMake(nodes, nodes->openNodes[0]);
 8001986:	4643      	mov	r3, r8
 8001988:	681b      	ldr	r3, [r3, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800198a:	9a00      	ldr	r2, [sp, #0]
    return NodeMake(nodes, nodes->openNodes[0]);
 800198c:	9304      	str	r3, [sp, #16]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800198e:	4363      	muls	r3, r4
 8001990:	18d5      	adds	r5, r2, r3
    return !NodeIsNull(n) && NodeGetRecord(n)->isGoal;
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	075a      	lsls	r2, r3, #29
 8001996:	d400      	bmi.n	800199a <ASPathCreate+0x2ae>
 8001998:	e09c      	b.n	8001ad4 <ASPathCreate+0x3e8>
    return (n.nodes == NodeNull.nodes) && (n.index == NodeNull.index);
 800199a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800199c:	9402      	str	r4, [sp, #8]
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d10b      	bne.n	80019ba <ASPathCreate+0x2ce>
 80019a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019a4:	3201      	adds	r2, #1
 80019a6:	d108      	bne.n	80019ba <ASPathCreate+0x2ce>
        NodeGetRecord(n)->isGoal = 1;
 80019a8:	2204      	movs	r2, #4
 80019aa:	782b      	ldrb	r3, [r5, #0]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	702b      	strb	r3, [r5, #0]
    return !NodeIsNull(n) && NodeGetRecord(n)->isGoal;
 80019b0:	782b      	ldrb	r3, [r5, #0]
    ASPath path = NULL;
 80019b2:	2700      	movs	r7, #0
    return !NodeIsNull(n) && NodeGetRecord(n)->isGoal;
 80019b4:	075a      	lsls	r2, r3, #29
 80019b6:	d400      	bmi.n	80019ba <ASPathCreate+0x2ce>
 80019b8:	e3b7      	b.n	800212a <ASPathCreate+0xa3e>
    if (record->hasParent) {
 80019ba:	071b      	lsls	r3, r3, #28
 80019bc:	d500      	bpl.n	80019c0 <ASPathCreate+0x2d4>
 80019be:	e39a      	b.n	80020f6 <ASPathCreate+0xa0a>
        while (!NodeIsNull(n)) {
            count++;
            n = GetParentNode(n);
        }

        path = malloc(sizeof(struct __ASPath) + (count * source->nodeSize));
 80019c0:	9c03      	ldr	r4, [sp, #12]
 80019c2:	0020      	movs	r0, r4
 80019c4:	300c      	adds	r0, #12
 80019c6:	f003 f935 	bl	8004c34 <malloc>
        path->nodeSize = source->nodeSize;
        path->count = count;
 80019ca:	2301      	movs	r3, #1
        path->nodeSize = source->nodeSize;
 80019cc:	6004      	str	r4, [r0, #0]
        path = malloc(sizeof(struct __ASPath) + (count * source->nodeSize));
 80019ce:	0007      	movs	r7, r0
            count++;
 80019d0:	2401      	movs	r4, #1
        path->count = count;
 80019d2:	6043      	str	r3, [r0, #4]
        path->cost = GetNodeCost(current);
 80019d4:	68ab      	ldr	r3, [r5, #8]
 80019d6:	6083      	str	r3, [r0, #8]
 80019d8:	9b03      	ldr	r3, [sp, #12]
    if (record->hasParent) {
 80019da:	2208      	movs	r2, #8
 80019dc:	001e      	movs	r6, r3
 80019de:	3c01      	subs	r4, #1
 80019e0:	4366      	muls	r6, r4
 80019e2:	360c      	adds	r6, #12
 80019e4:	46bb      	mov	fp, r7
 80019e6:	19be      	adds	r6, r7, r6
 80019e8:	4692      	mov	sl, r2
 80019ea:	464f      	mov	r7, r9
 80019ec:	4698      	mov	r8, r3
 80019ee:	9d04      	ldr	r5, [sp, #16]
 80019f0:	e005      	b.n	80019fe <ASPathCreate+0x312>
        return NodeMake(n.nodes, record->parentIndex);
 80019f2:	4643      	mov	r3, r8
 80019f4:	692d      	ldr	r5, [r5, #16]

        n = current;
        for (size_t i=count; i>0; i--) {
 80019f6:	1af6      	subs	r6, r6, r3
 80019f8:	2c00      	cmp	r4, #0
 80019fa:	d018      	beq.n	8001a2e <ASPathCreate+0x342>
 80019fc:	3c01      	subs	r4, #1
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80019fe:	683b      	ldr	r3, [r7, #0]
            memcpy(path->nodeKeys + ((i - 1) * source->nodeSize), GetNodeKey(n), source->nodeSize);
 8001a00:	4642      	mov	r2, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001a02:	681b      	ldr	r3, [r3, #0]
            memcpy(path->nodeKeys + ((i - 1) * source->nodeSize), GetNodeKey(n), source->nodeSize);
 8001a04:	0030      	movs	r0, r6
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001a06:	3314      	adds	r3, #20
 8001a08:	435d      	muls	r5, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	4465      	add	r5, ip
            memcpy(path->nodeKeys + ((i - 1) * source->nodeSize), GetNodeKey(n), source->nodeSize);
 8001a10:	0029      	movs	r1, r5
 8001a12:	3114      	adds	r1, #20
 8001a14:	f003 f930 	bl	8004c78 <memcpy>
    if (record->hasParent) {
 8001a18:	4652      	mov	r2, sl
 8001a1a:	782b      	ldrb	r3, [r5, #0]
 8001a1c:	421a      	tst	r2, r3
 8001a1e:	d1e8      	bne.n	80019f2 <ASPathCreate+0x306>
        return NodeNull;
 8001a20:	2501      	movs	r5, #1
 8001a22:	4643      	mov	r3, r8
 8001a24:	2700      	movs	r7, #0
 8001a26:	426d      	negs	r5, r5
 8001a28:	1af6      	subs	r6, r6, r3
        for (size_t i=count; i>0; i--) {
 8001a2a:	2c00      	cmp	r4, #0
 8001a2c:	d1e6      	bne.n	80019fc <ASPathCreate+0x310>
 8001a2e:	465f      	mov	r7, fp
 8001a30:	e37b      	b.n	800212a <ASPathCreate+0xa3e>
        size_t last = nodes->nodeRecordsCount-1;
 8001a32:	464a      	mov	r2, r9
 8001a34:	6952      	ldr	r2, [r2, #20]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	9201      	str	r2, [sp, #4]
 8001a3a:	464a      	mov	r2, r9
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	9302      	str	r3, [sp, #8]
    size_t first = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	6912      	ldr	r2, [r2, #16]
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	464a      	mov	r2, r9
 8001a48:	4699      	mov	r9, r3
 8001a4a:	4643      	mov	r3, r8
 8001a4c:	9304      	str	r3, [sp, #16]
 8001a4e:	003b      	movs	r3, r7
 8001a50:	9203      	str	r2, [sp, #12]
 8001a52:	4657      	mov	r7, sl
 8001a54:	0022      	movs	r2, r4
 8001a56:	46a8      	mov	r8, r5
 8001a58:	469a      	mov	sl, r3
 8001a5a:	e00a      	b.n	8001a72 <ASPathCreate+0x386>
            } else if (comp > 0 && mid > 0) {
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d101      	bne.n	8001a64 <ASPathCreate+0x378>
 8001a60:	f000 fc36 	bl	80022d0 <ASPathCreate+0xbe4>
 8001a64:	2c01      	cmp	r4, #1
 8001a66:	d91f      	bls.n	8001aa8 <ASPathCreate+0x3bc>
                last = mid - 1;
 8001a68:	1e77      	subs	r7, r6, #1
        while (first <= last) {
 8001a6a:	454f      	cmp	r7, r9
 8001a6c:	d31c      	bcc.n	8001aa8 <ASPathCreate+0x3bc>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	681a      	ldr	r2, [r3, #0]
            const size_t mid = (first + last) / 2;
 8001a72:	464b      	mov	r3, r9
 8001a74:	19dc      	adds	r4, r3, r7
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001a76:	9b01      	ldr	r3, [sp, #4]
            const size_t mid = (first + last) / 2;
 8001a78:	0866      	lsrs	r6, r4, #1
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001a7a:	469c      	mov	ip, r3
    if (node.nodes->source->nodeComparator) {
 8001a7c:	465b      	mov	r3, fp
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001a7e:	00b5      	lsls	r5, r6, #2
    if (node.nodes->source->nodeComparator) {
 8001a80:	691b      	ldr	r3, [r3, #16]
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001a82:	4465      	add	r5, ip
 8001a84:	6828      	ldr	r0, [r5, #0]
    if (node.nodes->source->nodeComparator) {
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d019      	beq.n	8001abe <ASPathCreate+0x3d2>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001a8a:	3214      	adds	r2, #20
 8001a8c:	4350      	muls	r0, r2
 8001a8e:	9a00      	ldr	r2, [sp, #0]
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001a90:	4651      	mov	r1, sl
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001a92:	4694      	mov	ip, r2
 8001a94:	4460      	add	r0, ip
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001a96:	4642      	mov	r2, r8
    return NodeGetRecord(node)->nodeKey;
 8001a98:	3014      	adds	r0, #20
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001a9a:	4798      	blx	r3
            if (comp < 0) {
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	dadd      	bge.n	8001a5c <ASPathCreate+0x370>
                first = mid + 1;
 8001aa0:	1c73      	adds	r3, r6, #1
 8001aa2:	4699      	mov	r9, r3
        while (first <= last) {
 8001aa4:	454f      	cmp	r7, r9
 8001aa6:	d2e2      	bcs.n	8001a6e <ASPathCreate+0x382>
 8001aa8:	464b      	mov	r3, r9
 8001aaa:	9a03      	ldr	r2, [sp, #12]
 8001aac:	1c5e      	adds	r6, r3, #1
 8001aae:	4691      	mov	r9, r2
 8001ab0:	9a04      	ldr	r2, [sp, #16]
 8001ab2:	00b6      	lsls	r6, r6, #2
 8001ab4:	4690      	mov	r8, r2
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	1f34      	subs	r4, r6, #4
 8001abc:	e64f      	b.n	800175e <ASPathCreate+0x72>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001abe:	0013      	movs	r3, r2
 8001ac0:	3314      	adds	r3, #20
 8001ac2:	4358      	muls	r0, r3
 8001ac4:	9b00      	ldr	r3, [sp, #0]
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8001ac6:	4651      	mov	r1, sl
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001ac8:	469c      	mov	ip, r3
 8001aca:	4460      	add	r0, ip
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8001acc:	3014      	adds	r0, #20
 8001ace:	f003 f8c5 	bl	8004c5c <memcmp>
 8001ad2:	e7e3      	b.n	8001a9c <ASPathCreate+0x3b0>
        if (source->earlyExit) {
 8001ad4:	4652      	mov	r2, sl
 8001ad6:	68d6      	ldr	r6, [r2, #12]
 8001ad8:	2e00      	cmp	r6, #0
 8001ada:	d015      	beq.n	8001b08 <ASPathCreate+0x41c>
    return NodeGetRecord(node)->nodeKey;
 8001adc:	0029      	movs	r1, r5
            const int shouldExit = source->earlyExit(visitedNodes->nodeRecordsCount, GetNodeKey(current), goalNodeKey, context);
 8001ade:	4648      	mov	r0, r9
 8001ae0:	9b06      	ldr	r3, [sp, #24]
 8001ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ae4:	68c0      	ldr	r0, [r0, #12]
    return NodeGetRecord(node)->nodeKey;
 8001ae6:	3114      	adds	r1, #20
            const int shouldExit = source->earlyExit(visitedNodes->nodeRecordsCount, GetNodeKey(current), goalNodeKey, context);
 8001ae8:	47b0      	blx	r6
            if (shouldExit > 0) {
 8001aea:	2800      	cmp	r0, #0
 8001aec:	dd01      	ble.n	8001af2 <ASPathCreate+0x406>
 8001aee:	f000 fc26 	bl	800233e <ASPathCreate+0xc52>
            } else if (shouldExit < 0) {
 8001af2:	d001      	beq.n	8001af8 <ASPathCreate+0x40c>
 8001af4:	f000 fc08 	bl	8002308 <ASPathCreate+0xc1c>
 8001af8:	4653      	mov	r3, sl
 8001afa:	681c      	ldr	r4, [r3, #0]
 8001afc:	9b04      	ldr	r3, [sp, #16]
 8001afe:	3414      	adds	r4, #20
 8001b00:	4363      	muls	r3, r4
 8001b02:	9a00      	ldr	r2, [sp, #0]
 8001b04:	18d5      	adds	r5, r2, r3
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
    if (record->isOpen) {
 8001b08:	2202      	movs	r2, #2
 8001b0a:	421a      	tst	r2, r3
 8001b0c:	d100      	bne.n	8001b10 <ASPathCreate+0x424>
 8001b0e:	e0a0      	b.n	8001c52 <ASPathCreate+0x566>
        record->isOpen = 0;
 8001b10:	782b      	ldrb	r3, [r5, #0]
 8001b12:	4393      	bics	r3, r2
 8001b14:	702b      	strb	r3, [r5, #0]
        n.nodes->openNodesCount--;
 8001b16:	464b      	mov	r3, r9
        const size_t index = record->openIndex;
 8001b18:	68ed      	ldr	r5, [r5, #12]
        n.nodes->openNodesCount--;
 8001b1a:	1e7a      	subs	r2, r7, #1
 8001b1c:	9201      	str	r2, [sp, #4]
 8001b1e:	61da      	str	r2, [r3, #28]
    if (index1 != index2) {
 8001b20:	42aa      	cmp	r2, r5
 8001b22:	d013      	beq.n	8001b4c <ASPathCreate+0x460>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b24:	9800      	ldr	r0, [sp, #0]
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001b26:	00a9      	lsls	r1, r5, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b28:	4684      	mov	ip, r0
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001b2a:	0092      	lsls	r2, r2, #2
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001b2c:	4441      	add	r1, r8
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001b2e:	4442      	add	r2, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b30:	6816      	ldr	r6, [r2, #0]
 8001b32:	680b      	ldr	r3, [r1, #0]
 8001b34:	4363      	muls	r3, r4
 8001b36:	4374      	muls	r4, r6
 8001b38:	4463      	add	r3, ip
 8001b3a:	4464      	add	r4, ip
        const size_t tempOpenIndex = record1->openIndex;
 8001b3c:	68d8      	ldr	r0, [r3, #12]
        record1->openIndex = record2->openIndex;
 8001b3e:	68e6      	ldr	r6, [r4, #12]
 8001b40:	60de      	str	r6, [r3, #12]
        record2->openIndex = tempOpenIndex;
 8001b42:	60e0      	str	r0, [r4, #12]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001b44:	680b      	ldr	r3, [r1, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001b46:	6810      	ldr	r0, [r2, #0]
 8001b48:	6008      	str	r0, [r1, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8001b4a:	6013      	str	r3, [r2, #0]
        if (smallestIndex != index) {
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	9303      	str	r3, [sp, #12]
 8001b50:	465b      	mov	r3, fp
 8001b52:	46d3      	mov	fp, sl
 8001b54:	9305      	str	r3, [sp, #20]
 8001b56:	e064      	b.n	8001c22 <ASPathCreate+0x536>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b58:	465b      	mov	r3, fp
 8001b5a:	681e      	ldr	r6, [r3, #0]
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	469c      	mov	ip, r3
 8001b60:	4641      	mov	r1, r8
 8001b62:	44b4      	add	ip, r6
 8001b64:	4662      	mov	r2, ip
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001b66:	00a3      	lsls	r3, r4, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b68:	585b      	ldr	r3, [r3, r1]
 8001b6a:	9900      	ldr	r1, [sp, #0]
 8001b6c:	4353      	muls	r3, r2
 8001b6e:	468c      	mov	ip, r1
 8001b70:	4463      	add	r3, ip
    return record->estimatedCost + record->cost;
 8001b72:	6899      	ldr	r1, [r3, #8]
 8001b74:	6858      	ldr	r0, [r3, #4]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b76:	9202      	str	r2, [sp, #8]
    return record->estimatedCost + record->cost;
 8001b78:	f7fe fcc4 	bl	8000504 <__aeabi_fadd>
 8001b7c:	4682      	mov	sl, r0
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b7e:	4640      	mov	r0, r8
 8001b80:	9900      	ldr	r1, [sp, #0]
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001b82:	00ab      	lsls	r3, r5, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001b84:	468c      	mov	ip, r1
 8001b86:	581b      	ldr	r3, [r3, r0]
 8001b88:	9a02      	ldr	r2, [sp, #8]
 8001b8a:	4353      	muls	r3, r2
 8001b8c:	4463      	add	r3, ip
    return record->estimatedCost + record->cost;
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	6858      	ldr	r0, [r3, #4]
 8001b92:	f7fe fcb7 	bl	8000504 <__aeabi_fadd>
 8001b96:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8001b98:	4650      	mov	r0, sl
 8001b9a:	f7fe fb5d 	bl	8000258 <__aeabi_fcmplt>
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d100      	bne.n	8001ba4 <ASPathCreate+0x4b8>
    } else if (rank1 > rank2) {
 8001ba2:	002c      	movs	r4, r5
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001ba4:	9b01      	ldr	r3, [sp, #4]
 8001ba6:	42bb      	cmp	r3, r7
 8001ba8:	d923      	bls.n	8001bf2 <ASPathCreate+0x506>
 8001baa:	464b      	mov	r3, r9
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bac:	4642      	mov	r2, r8
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001bae:	00db      	lsls	r3, r3, #3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bb0:	589b      	ldr	r3, [r3, r2]
 8001bb2:	2214      	movs	r2, #20
 8001bb4:	4691      	mov	r9, r2
 8001bb6:	44b1      	add	r9, r6
 8001bb8:	464a      	mov	r2, r9
 8001bba:	4353      	muls	r3, r2
 8001bbc:	9a00      	ldr	r2, [sp, #0]
 8001bbe:	4694      	mov	ip, r2
 8001bc0:	4463      	add	r3, ip
    return record->estimatedCost + record->cost;
 8001bc2:	6899      	ldr	r1, [r3, #8]
 8001bc4:	6858      	ldr	r0, [r3, #4]
 8001bc6:	f7fe fc9d 	bl	8000504 <__aeabi_fadd>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bca:	4641      	mov	r1, r8
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001bcc:	00a3      	lsls	r3, r4, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bce:	585b      	ldr	r3, [r3, r1]
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	9a00      	ldr	r2, [sp, #0]
 8001bd4:	434b      	muls	r3, r1
 8001bd6:	4694      	mov	ip, r2
 8001bd8:	4463      	add	r3, ip
    return record->estimatedCost + record->cost;
 8001bda:	4682      	mov	sl, r0
 8001bdc:	6899      	ldr	r1, [r3, #8]
 8001bde:	6858      	ldr	r0, [r3, #4]
 8001be0:	f7fe fc90 	bl	8000504 <__aeabi_fadd>
 8001be4:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8001be6:	4650      	mov	r0, sl
 8001be8:	f7fe fb36 	bl	8000258 <__aeabi_fcmplt>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d000      	beq.n	8001bf2 <ASPathCreate+0x506>
 8001bf0:	003c      	movs	r4, r7
    } while (smallestIndex != index);
 8001bf2:	42ac      	cmp	r4, r5
 8001bf4:	d021      	beq.n	8001c3a <ASPathCreate+0x54e>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bf6:	9900      	ldr	r1, [sp, #0]
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001bf8:	00a2      	lsls	r2, r4, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001bfa:	468c      	mov	ip, r1
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001bfc:	00ad      	lsls	r5, r5, #2
 8001bfe:	4445      	add	r5, r8
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001c00:	4442      	add	r2, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c02:	6828      	ldr	r0, [r5, #0]
 8001c04:	6813      	ldr	r3, [r2, #0]
 8001c06:	3614      	adds	r6, #20
 8001c08:	4373      	muls	r3, r6
 8001c0a:	4346      	muls	r6, r0
 8001c0c:	4463      	add	r3, ip
 8001c0e:	4466      	add	r6, ip
        const size_t tempOpenIndex = record1->openIndex;
 8001c10:	68d9      	ldr	r1, [r3, #12]
        record1->openIndex = record2->openIndex;
 8001c12:	68f0      	ldr	r0, [r6, #12]
 8001c14:	60d8      	str	r0, [r3, #12]
        record2->openIndex = tempOpenIndex;
 8001c16:	60f1      	str	r1, [r6, #12]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001c18:	6829      	ldr	r1, [r5, #0]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001c1a:	6813      	ldr	r3, [r2, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001c1c:	6011      	str	r1, [r2, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8001c1e:	602b      	str	r3, [r5, #0]
 8001c20:	0025      	movs	r5, r4
        const size_t rightIndex = (2 * index) + 2;
 8001c22:	1c6b      	adds	r3, r5, #1
        const size_t leftIndex = (2 * index) + 1;
 8001c24:	006f      	lsls	r7, r5, #1
        const size_t rightIndex = (2 * index) + 2;
 8001c26:	4699      	mov	r9, r3
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001c28:	9b01      	ldr	r3, [sp, #4]
        const size_t leftIndex = (2 * index) + 1;
 8001c2a:	1c7c      	adds	r4, r7, #1
        const size_t rightIndex = (2 * index) + 2;
 8001c2c:	3702      	adds	r7, #2
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001c2e:	42a3      	cmp	r3, r4
 8001c30:	d892      	bhi.n	8001b58 <ASPathCreate+0x46c>
 8001c32:	465b      	mov	r3, fp
 8001c34:	002c      	movs	r4, r5
 8001c36:	681e      	ldr	r6, [r3, #0]
 8001c38:	e7b4      	b.n	8001ba4 <ASPathCreate+0x4b8>
 8001c3a:	0035      	movs	r5, r6
 8001c3c:	9b03      	ldr	r3, [sp, #12]
 8001c3e:	46da      	mov	sl, fp
 8001c40:	4699      	mov	r9, r3
 8001c42:	9b05      	ldr	r3, [sp, #20]
 8001c44:	3514      	adds	r5, #20
 8001c46:	469b      	mov	fp, r3
 8001c48:	9b04      	ldr	r3, [sp, #16]
 8001c4a:	435d      	muls	r5, r3
 8001c4c:	9b00      	ldr	r3, [sp, #0]
 8001c4e:	469c      	mov	ip, r3
 8001c50:	4465      	add	r5, ip
    NodeGetRecord(n)->isClosed = 1;
 8001c52:	2201      	movs	r2, #1
 8001c54:	782b      	ldrb	r3, [r5, #0]
    return NodeGetRecord(node)->nodeKey;
 8001c56:	0029      	movs	r1, r5
    NodeGetRecord(n)->isClosed = 1;
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	702b      	strb	r3, [r5, #0]
        neighborList->count = 0;
 8001c5c:	465a      	mov	r2, fp
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6093      	str	r3, [r2, #8]
        source->nodeNeighbors(neighborList, GetNodeKey(current), context);
 8001c62:	4653      	mov	r3, sl
 8001c64:	4658      	mov	r0, fp
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	9a06      	ldr	r2, [sp, #24]
    return NodeGetRecord(node)->nodeKey;
 8001c6a:	3114      	adds	r1, #20
        source->nodeNeighbors(neighborList, GetNodeKey(current), context);
 8001c6c:	4798      	blx	r3
        for (size_t n=0; n<neighborList->count; n++) {
 8001c6e:	465b      	mov	r3, fp
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d100      	bne.n	8001c78 <ASPathCreate+0x58c>
 8001c76:	e0da      	b.n	8001e2e <ASPathCreate+0x742>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9303      	str	r3, [sp, #12]
 8001c7c:	4653      	mov	r3, sl
 8001c7e:	46da      	mov	sl, fp
 8001c80:	46cb      	mov	fp, r9
 8001c82:	4699      	mov	r9, r3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c84:	464b      	mov	r3, r9
 8001c86:	681d      	ldr	r5, [r3, #0]
    return NodeGetRecord(n)->cost;
 8001c88:	9900      	ldr	r1, [sp, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c8a:	002c      	movs	r4, r5
    return NodeGetRecord(n)->cost;
 8001c8c:	468c      	mov	ip, r1
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001c8e:	9a04      	ldr	r2, [sp, #16]
 8001c90:	3414      	adds	r4, #20
 8001c92:	4362      	muls	r2, r4
    return NodeGetRecord(n)->cost;
 8001c94:	4462      	add	r2, ip
            const float cost = GetNodeCost(current) + NeighborListGetEdgeCost(neighborList, n);
 8001c96:	6891      	ldr	r1, [r2, #8]
 8001c98:	4652      	mov	r2, sl
    return list->costs[index];
 8001c9a:	9e03      	ldr	r6, [sp, #12]
            const float cost = GetNodeCost(current) + NeighborListGetEdgeCost(neighborList, n);
 8001c9c:	68d2      	ldr	r2, [r2, #12]
    return list->costs[index];
 8001c9e:	00b3      	lsls	r3, r6, #2
            const float cost = GetNodeCost(current) + NeighborListGetEdgeCost(neighborList, n);
 8001ca0:	5898      	ldr	r0, [r3, r2]
 8001ca2:	f7fe fc2f 	bl	8000504 <__aeabi_fadd>
    return list->nodeKeys + (index * list->source->nodeSize);
 8001ca6:	4653      	mov	r3, sl
 8001ca8:	681b      	ldr	r3, [r3, #0]
            const float cost = GetNodeCost(current) + NeighborListGetEdgeCost(neighborList, n);
 8001caa:	9005      	str	r0, [sp, #20]
    return list->nodeKeys + (index * list->source->nodeSize);
 8001cac:	681f      	ldr	r7, [r3, #0]
 8001cae:	4653      	mov	r3, sl
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	4377      	muls	r7, r6
 8001cb4:	469c      	mov	ip, r3
 8001cb6:	4467      	add	r7, ip
    if (!nodeKey) {
 8001cb8:	2f00      	cmp	r7, #0
 8001cba:	d100      	bne.n	8001cbe <ASPathCreate+0x5d2>
 8001cbc:	e34e      	b.n	800235c <ASPathCreate+0xc70>
    if (nodes->nodeRecordsCount > 0) {
 8001cbe:	465b      	mov	r3, fp
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d05b      	beq.n	8001d80 <ASPathCreate+0x694>
        size_t last = nodes->nodeRecordsCount-1;
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	9302      	str	r3, [sp, #8]
        while (first <= last) {
 8001ccc:	465b      	mov	r3, fp
 8001cce:	695b      	ldr	r3, [r3, #20]
    size_t first = 0;
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	46b8      	mov	r8, r7
 8001cd4:	002a      	movs	r2, r5
 8001cd6:	0021      	movs	r1, r4
 8001cd8:	9307      	str	r3, [sp, #28]
 8001cda:	e00d      	b.n	8001cf8 <ASPathCreate+0x60c>
            } else if (comp > 0 && mid > 0) {
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d100      	bne.n	8001ce2 <ASPathCreate+0x5f6>
 8001ce0:	e206      	b.n	80020f0 <ASPathCreate+0xa04>
 8001ce2:	2f01      	cmp	r7, #1
 8001ce4:	d922      	bls.n	8001d2c <ASPathCreate+0x640>
                last = mid - 1;
 8001ce6:	1e63      	subs	r3, r4, #1
 8001ce8:	9302      	str	r3, [sp, #8]
        while (first <= last) {
 8001cea:	9b02      	ldr	r3, [sp, #8]
 8001cec:	429e      	cmp	r6, r3
 8001cee:	d81d      	bhi.n	8001d2c <ASPathCreate+0x640>
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	0011      	movs	r1, r2
 8001cf6:	3114      	adds	r1, #20
            const size_t mid = (first + last) / 2;
 8001cf8:	9b02      	ldr	r3, [sp, #8]
 8001cfa:	18f7      	adds	r7, r6, r3
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001cfc:	9b07      	ldr	r3, [sp, #28]
            const size_t mid = (first + last) / 2;
 8001cfe:	087c      	lsrs	r4, r7, #1
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001d00:	469c      	mov	ip, r3
    if (node.nodes->source->nodeComparator) {
 8001d02:	464b      	mov	r3, r9
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8001d04:	00a5      	lsls	r5, r4, #2
 8001d06:	4465      	add	r5, ip
 8001d08:	6828      	ldr	r0, [r5, #0]
    if (node.nodes->source->nodeComparator) {
 8001d0a:	691b      	ldr	r3, [r3, #16]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d0c:	4348      	muls	r0, r1
    if (node.nodes->source->nodeComparator) {
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d02e      	beq.n	8001d70 <ASPathCreate+0x684>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d12:	9a00      	ldr	r2, [sp, #0]
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001d14:	4641      	mov	r1, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d16:	4694      	mov	ip, r2
 8001d18:	4460      	add	r0, ip
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001d1a:	9a06      	ldr	r2, [sp, #24]
    return NodeGetRecord(node)->nodeKey;
 8001d1c:	3014      	adds	r0, #20
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 8001d1e:	4798      	blx	r3
            if (comp < 0) {
 8001d20:	2800      	cmp	r0, #0
 8001d22:	dadb      	bge.n	8001cdc <ASPathCreate+0x5f0>
        while (first <= last) {
 8001d24:	9b02      	ldr	r3, [sp, #8]
                first = mid + 1;
 8001d26:	1c66      	adds	r6, r4, #1
        while (first <= last) {
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d9e1      	bls.n	8001cf0 <ASPathCreate+0x604>
 8001d2c:	1c70      	adds	r0, r6, #1
 8001d2e:	0083      	lsls	r3, r0, #2
 8001d30:	4647      	mov	r7, r8
 8001d32:	1f1d      	subs	r5, r3, #4
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 8001d34:	4698      	mov	r8, r3
 8001d36:	465b      	mov	r3, fp
 8001d38:	689c      	ldr	r4, [r3, #8]
 8001d3a:	9b01      	ldr	r3, [sp, #4]
 8001d3c:	42a3      	cmp	r3, r4
 8001d3e:	d128      	bne.n	8001d92 <ASPathCreate+0x6a6>
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 8001d40:	465a      	mov	r2, fp
 8001d42:	9b01      	ldr	r3, [sp, #4]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 8001d44:	9800      	ldr	r0, [sp, #0]
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 8001d46:	005c      	lsls	r4, r3, #1
 8001d48:	1c63      	adds	r3, r4, #1
 8001d4a:	6093      	str	r3, [r2, #8]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	6811      	ldr	r1, [r2, #0]
 8001d50:	9302      	str	r3, [sp, #8]
 8001d52:	3114      	adds	r1, #20
 8001d54:	4359      	muls	r1, r3
 8001d56:	f003 fb4d 	bl	80053f4 <realloc>
 8001d5a:	465a      	mov	r2, fp
        nodes->nodeRecordsIndex = realloc(nodes->nodeRecordsIndex, nodes->nodeRecordsCapacity * sizeof(size_t));
 8001d5c:	9b02      	ldr	r3, [sp, #8]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 8001d5e:	9000      	str	r0, [sp, #0]
 8001d60:	6110      	str	r0, [r2, #16]
        nodes->nodeRecordsIndex = realloc(nodes->nodeRecordsIndex, nodes->nodeRecordsCapacity * sizeof(size_t));
 8001d62:	0099      	lsls	r1, r3, #2
 8001d64:	6950      	ldr	r0, [r2, #20]
 8001d66:	f003 fb45 	bl	80053f4 <realloc>
 8001d6a:	465b      	mov	r3, fp
 8001d6c:	6158      	str	r0, [r3, #20]
 8001d6e:	e013      	b.n	8001d98 <ASPathCreate+0x6ac>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d70:	9b00      	ldr	r3, [sp, #0]
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8001d72:	4641      	mov	r1, r8
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001d74:	469c      	mov	ip, r3
 8001d76:	4460      	add	r0, ip
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 8001d78:	3014      	adds	r0, #20
 8001d7a:	f002 ff6f 	bl	8004c5c <memcmp>
 8001d7e:	e7cf      	b.n	8001d20 <ASPathCreate+0x634>
 8001d80:	2304      	movs	r3, #4
 8001d82:	4698      	mov	r8, r3
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 8001d84:	465b      	mov	r3, fp
 8001d86:	689c      	ldr	r4, [r3, #8]
 8001d88:	9b01      	ldr	r3, [sp, #4]
 8001d8a:	2500      	movs	r5, #0
    size_t first = 0;
 8001d8c:	2600      	movs	r6, #0
    if (nodes->nodeRecordsCount == nodes->nodeRecordsCapacity) {
 8001d8e:	42a3      	cmp	r3, r4
 8001d90:	d0d6      	beq.n	8001d40 <ASPathCreate+0x654>
 8001d92:	465b      	mov	r3, fp
 8001d94:	6958      	ldr	r0, [r3, #20]
 8001d96:	3c01      	subs	r4, #1
    nodes->nodeRecordsCount++;
 8001d98:	465a      	mov	r2, fp
 8001d9a:	9b01      	ldr	r3, [sp, #4]
    memmove(&nodes->nodeRecordsIndex[first+1], &nodes->nodeRecordsIndex[first], (nodes->nodeRecordsCapacity - first - 1) * sizeof(size_t));
 8001d9c:	1945      	adds	r5, r0, r5
    nodes->nodeRecordsCount++;
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60d3      	str	r3, [r2, #12]
    memmove(&nodes->nodeRecordsIndex[first+1], &nodes->nodeRecordsIndex[first], (nodes->nodeRecordsCapacity - first - 1) * sizeof(size_t));
 8001da2:	1ba2      	subs	r2, r4, r6
 8001da4:	0029      	movs	r1, r5
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4440      	add	r0, r8
 8001daa:	f002 ff6e 	bl	8004c8a <memmove>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001dae:	464a      	mov	r2, r9
    nodes->nodeRecordsIndex[first] = node.index;
 8001db0:	9b01      	ldr	r3, [sp, #4]
    memset(record, 0, sizeof(NodeRecord));
 8001db2:	2100      	movs	r1, #0
    nodes->nodeRecordsIndex[first] = node.index;
 8001db4:	602b      	str	r3, [r5, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001db6:	6814      	ldr	r4, [r2, #0]
    memset(record, 0, sizeof(NodeRecord));
 8001db8:	2214      	movs	r2, #20
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001dba:	3414      	adds	r4, #20
 8001dbc:	435c      	muls	r4, r3
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	469c      	mov	ip, r3
 8001dc2:	4464      	add	r4, ip
    memset(record, 0, sizeof(NodeRecord));
 8001dc4:	0020      	movs	r0, r4
 8001dc6:	f002 ff73 	bl	8004cb0 <memset>
    memcpy(record->nodeKey, nodeKey, nodes->source->nodeSize);
 8001dca:	0020      	movs	r0, r4
 8001dcc:	464b      	mov	r3, r9
 8001dce:	0039      	movs	r1, r7
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	3014      	adds	r0, #20
 8001dd4:	f002 ff50 	bl	8004c78 <memcpy>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001dd8:	465b      	mov	r3, fp
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	9a00      	ldr	r2, [sp, #0]
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	001e      	movs	r6, r3
 8001de4:	9307      	str	r3, [sp, #28]
 8001de6:	9b01      	ldr	r3, [sp, #4]
 8001de8:	3614      	adds	r6, #20
 8001dea:	4373      	muls	r3, r6
 8001dec:	18d4      	adds	r4, r2, r3
    return NodeGetRecord(n)->hasEstimatedCost;
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
            if (!NodeHasEstimatedCost(neighbor)) {
 8001df0:	06db      	lsls	r3, r3, #27
 8001df2:	d400      	bmi.n	8001df6 <ASPathCreate+0x70a>
 8001df4:	e09f      	b.n	8001f36 <ASPathCreate+0x84a>
    return NodeGetRecord(n)->isOpen;
 8001df6:	7825      	ldrb	r5, [r4, #0]
 8001df8:	07ab      	lsls	r3, r5, #30
 8001dfa:	0fdf      	lsrs	r7, r3, #31
            if (NodeIsInOpenSet(neighbor) && cost < GetNodeCost(neighbor)) {
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	da24      	bge.n	8001e4a <ASPathCreate+0x75e>
 8001e00:	68a1      	ldr	r1, [r4, #8]
 8001e02:	9805      	ldr	r0, [sp, #20]
 8001e04:	f7fe fa28 	bl	8000258 <__aeabi_fcmplt>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d000      	beq.n	8001e0e <ASPathCreate+0x722>
 8001e0c:	e0bc      	b.n	8001f88 <ASPathCreate+0x89c>
    return NodeGetRecord(n)->isClosed;
 8001e0e:	07ed      	lsls	r5, r5, #31
 8001e10:	0fef      	lsrs	r7, r5, #31
            if (NodeIsInClosedSet(neighbor) && cost < GetNodeCost(neighbor)) {
 8001e12:	2d00      	cmp	r5, #0
 8001e14:	d11b      	bne.n	8001e4e <ASPathCreate+0x762>
        for (size_t n=0; n<neighborList->count; n++) {
 8001e16:	4652      	mov	r2, sl
 8001e18:	9b03      	ldr	r3, [sp, #12]
 8001e1a:	6892      	ldr	r2, [r2, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	9303      	str	r3, [sp, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d900      	bls.n	8001e26 <ASPathCreate+0x73a>
 8001e24:	e72e      	b.n	8001c84 <ASPathCreate+0x598>
 8001e26:	464b      	mov	r3, r9
 8001e28:	46d9      	mov	r9, fp
 8001e2a:	46d3      	mov	fp, sl
 8001e2c:	469a      	mov	sl, r3
    while (HasOpenNode(visitedNodes) && !NodeIsGoal((current = GetOpenNode(visitedNodes)))) {
 8001e2e:	464b      	mov	r3, r9
 8001e30:	69df      	ldr	r7, [r3, #28]
 8001e32:	2f00      	cmp	r7, #0
 8001e34:	d100      	bne.n	8001e38 <ASPathCreate+0x74c>
 8001e36:	e267      	b.n	8002308 <ASPathCreate+0xc1c>
 8001e38:	4653      	mov	r3, sl
 8001e3a:	464a      	mov	r2, r9
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a12      	ldr	r2, [r2, #32]
 8001e40:	9303      	str	r3, [sp, #12]
 8001e42:	3314      	adds	r3, #20
 8001e44:	4690      	mov	r8, r2
 8001e46:	001c      	movs	r4, r3
 8001e48:	e59d      	b.n	8001986 <ASPathCreate+0x29a>
            if (NodeIsInClosedSet(neighbor) && cost < GetNodeCost(neighbor)) {
 8001e4a:	07eb      	lsls	r3, r5, #31
 8001e4c:	d50b      	bpl.n	8001e66 <ASPathCreate+0x77a>
 8001e4e:	68a1      	ldr	r1, [r4, #8]
 8001e50:	9805      	ldr	r0, [sp, #20]
 8001e52:	f7fe fa01 	bl	8000258 <__aeabi_fcmplt>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d0dd      	beq.n	8001e16 <ASPathCreate+0x72a>
    NodeGetRecord(n)->isClosed = 0;
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	7823      	ldrb	r3, [r4, #0]
 8001e5e:	4393      	bics	r3, r2
 8001e60:	7023      	strb	r3, [r4, #0]
            if (!NodeIsInOpenSet(neighbor) && !NodeIsInClosedSet(neighbor)) {
 8001e62:	2f00      	cmp	r7, #0
 8001e64:	d1d7      	bne.n	8001e16 <ASPathCreate+0x72a>
        record->hasParent = 1;
 8001e66:	2208      	movs	r2, #8
 8001e68:	7823      	ldrb	r3, [r4, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	7023      	strb	r3, [r4, #0]
        record->parentIndex = parent.index;
 8001e6e:	9b04      	ldr	r3, [sp, #16]
 8001e70:	6123      	str	r3, [r4, #16]
    if (n.nodes->openNodesCount == n.nodes->openNodesCapacity) {
 8001e72:	465b      	mov	r3, fp
 8001e74:	69de      	ldr	r6, [r3, #28]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	429e      	cmp	r6, r3
 8001e7a:	d100      	bne.n	8001e7e <ASPathCreate+0x792>
 8001e7c:	e1c3      	b.n	8002206 <ASPathCreate+0xb1a>
 8001e7e:	465b      	mov	r3, fp
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	9307      	str	r3, [sp, #28]
    n.nodes->openNodes[openIndex] = n.index;
 8001e84:	9b07      	ldr	r3, [sp, #28]
 8001e86:	9a01      	ldr	r2, [sp, #4]
 8001e88:	00b7      	lsls	r7, r6, #2
 8001e8a:	51da      	str	r2, [r3, r7]
    n.nodes->openNodesCount++;
 8001e8c:	465a      	mov	r2, fp
 8001e8e:	1c73      	adds	r3, r6, #1
 8001e90:	61d3      	str	r3, [r2, #28]
    record->isOpen = 1;
 8001e92:	2202      	movs	r2, #2
 8001e94:	7823      	ldrb	r3, [r4, #0]
    record->openIndex = openIndex;
 8001e96:	60e6      	str	r6, [r4, #12]
    record->isOpen = 1;
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	7023      	strb	r3, [r4, #0]
    record->cost = cost;
 8001e9c:	9b05      	ldr	r3, [sp, #20]
 8001e9e:	60a3      	str	r3, [r4, #8]
    while (index > 0) {
 8001ea0:	2e00      	cmp	r6, #0
 8001ea2:	d0b8      	beq.n	8001e16 <ASPathCreate+0x72a>
 8001ea4:	9b02      	ldr	r3, [sp, #8]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	465b      	mov	r3, fp
 8001eac:	9305      	str	r3, [sp, #20]
 8001eae:	4653      	mov	r3, sl
 8001eb0:	46b2      	mov	sl, r6
 8001eb2:	9308      	str	r3, [sp, #32]
 8001eb4:	e012      	b.n	8001edc <ASPathCreate+0x7f0>
    if (index1 != index2) {
 8001eb6:	4556      	cmp	r6, sl
 8001eb8:	d00e      	beq.n	8001ed8 <ASPathCreate+0x7ec>
        const size_t tempOpenIndex = record1->openIndex;
 8001eba:	68eb      	ldr	r3, [r5, #12]
        record1->openIndex = record2->openIndex;
 8001ebc:	68e2      	ldr	r2, [r4, #12]
 8001ebe:	60ea      	str	r2, [r5, #12]
        record2->openIndex = tempOpenIndex;
 8001ec0:	60e3      	str	r3, [r4, #12]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001ec2:	4643      	mov	r3, r8
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001ec4:	4642      	mov	r2, r8
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001ec6:	681b      	ldr	r3, [r3, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001ec8:	6839      	ldr	r1, [r7, #0]
 8001eca:	6011      	str	r1, [r2, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8001ecc:	603b      	str	r3, [r7, #0]
    while (index > 0) {
 8001ece:	2e00      	cmp	r6, #0
 8001ed0:	d02c      	beq.n	8001f2c <ASPathCreate+0x840>
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	9301      	str	r3, [sp, #4]
    if (rank1 < rank2) {
 8001ed8:	46b2      	mov	sl, r6
 8001eda:	00b7      	lsls	r7, r6, #2
        const size_t parentIndex = floorf((index-1) / 2);
 8001edc:	4653      	mov	r3, sl
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	0840      	lsrs	r0, r0, #1
 8001ee2:	f7fe ff51 	bl	8000d88 <__aeabi_ui2f>
 8001ee6:	f7fe fa29 	bl	800033c <__aeabi_f2uiz>
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001eea:	9a07      	ldr	r2, [sp, #28]
 8001eec:	0083      	lsls	r3, r0, #2
 8001eee:	4690      	mov	r8, r2
 8001ef0:	4498      	add	r8, r3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001ef2:	4643      	mov	r3, r8
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001ef4:	4694      	mov	ip, r2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001ef6:	681d      	ldr	r5, [r3, #0]
 8001ef8:	9b00      	ldr	r3, [sp, #0]
        if (NodeRankCompare(NodeMake(nodes, nodes->openNodes[parentIndex]), NodeMake(nodes, nodes->openNodes[index])) < 0) {
 8001efa:	4467      	add	r7, ip
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001efc:	469c      	mov	ip, r3
 8001efe:	9c01      	ldr	r4, [sp, #4]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	3414      	adds	r4, #20
 8001f04:	4365      	muls	r5, r4
 8001f06:	4354      	muls	r4, r2
 8001f08:	4465      	add	r5, ip
    return record->estimatedCost + record->cost;
 8001f0a:	68a9      	ldr	r1, [r5, #8]
        const size_t parentIndex = floorf((index-1) / 2);
 8001f0c:	0006      	movs	r6, r0
    return record->estimatedCost + record->cost;
 8001f0e:	6868      	ldr	r0, [r5, #4]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f10:	4464      	add	r4, ip
    return record->estimatedCost + record->cost;
 8001f12:	f7fe faf7 	bl	8000504 <__aeabi_fadd>
 8001f16:	68a1      	ldr	r1, [r4, #8]
 8001f18:	4683      	mov	fp, r0
 8001f1a:	6860      	ldr	r0, [r4, #4]
 8001f1c:	f7fe faf2 	bl	8000504 <__aeabi_fadd>
 8001f20:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8001f22:	4658      	mov	r0, fp
 8001f24:	f7fe f998 	bl	8000258 <__aeabi_fcmplt>
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d0c4      	beq.n	8001eb6 <ASPathCreate+0x7ca>
 8001f2c:	9b05      	ldr	r3, [sp, #20]
 8001f2e:	469b      	mov	fp, r3
 8001f30:	9b08      	ldr	r3, [sp, #32]
 8001f32:	469a      	mov	sl, r3
 8001f34:	e76f      	b.n	8001e16 <ASPathCreate+0x72a>
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 8001f36:	9b02      	ldr	r3, [sp, #8]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d100      	bne.n	8001f40 <ASPathCreate+0x854>
 8001f3e:	e0c4      	b.n	80020ca <ASPathCreate+0x9de>
    return (n.nodes == NodeNull.nodes) && (n.index == NodeNull.index);
 8001f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001f42:	2a00      	cmp	r2, #0
 8001f44:	d100      	bne.n	8001f48 <ASPathCreate+0x85c>
 8001f46:	e0bc      	b.n	80020c2 <ASPathCreate+0x9d6>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001f4a:	6802      	ldr	r2, [r0, #0]
 8001f4c:	6811      	ldr	r1, [r2, #0]
 8001f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f50:	3114      	adds	r1, #20
 8001f52:	4351      	muls	r1, r2
 8001f54:	6902      	ldr	r2, [r0, #16]
    return NodeGetRecord(node)->nodeKey;
 8001f56:	0020      	movs	r0, r4
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f58:	4694      	mov	ip, r2
 8001f5a:	9207      	str	r2, [sp, #28]
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001f5c:	465a      	mov	r2, fp
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001f5e:	4461      	add	r1, ip
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001f60:	6852      	ldr	r2, [r2, #4]
    return NodeGetRecord(node)->nodeKey;
 8001f62:	3114      	adds	r1, #20
 8001f64:	3014      	adds	r0, #20
        return a.nodes->source->pathCostHeuristic(GetNodeKey(a), GetNodeKey(b), a.nodes->context);
 8001f66:	4798      	blx	r3
 8001f68:	9b02      	ldr	r3, [sp, #8]
 8001f6a:	9c01      	ldr	r4, [sp, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	001e      	movs	r6, r3
 8001f70:	9307      	str	r3, [sp, #28]
 8001f72:	9b00      	ldr	r3, [sp, #0]
 8001f74:	3614      	adds	r6, #20
 8001f76:	469c      	mov	ip, r3
 8001f78:	4374      	muls	r4, r6
 8001f7a:	4464      	add	r4, ip
    record->hasEstimatedCost = 1;
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	7823      	ldrb	r3, [r4, #0]
    record->estimatedCost = estimatedCost;
 8001f80:	6060      	str	r0, [r4, #4]
    record->hasEstimatedCost = 1;
 8001f82:	4313      	orrs	r3, r2
 8001f84:	7023      	strb	r3, [r4, #0]
 8001f86:	e736      	b.n	8001df6 <ASPathCreate+0x70a>
    if (record->isOpen) {
 8001f88:	2302      	movs	r3, #2
 8001f8a:	422b      	tst	r3, r5
 8001f8c:	d100      	bne.n	8001f90 <ASPathCreate+0x8a4>
 8001f8e:	e73e      	b.n	8001e0e <ASPathCreate+0x722>
        record->isOpen = 0;
 8001f90:	439d      	bics	r5, r3
        n.nodes->openNodesCount--;
 8001f92:	465b      	mov	r3, fp
 8001f94:	69db      	ldr	r3, [r3, #28]
        record->isOpen = 0;
 8001f96:	7025      	strb	r5, [r4, #0]
        n.nodes->openNodesCount--;
 8001f98:	1e58      	subs	r0, r3, #1
 8001f9a:	465b      	mov	r3, fp
        const size_t index = record->openIndex;
 8001f9c:	68e4      	ldr	r4, [r4, #12]
        n.nodes->openNodesCount--;
 8001f9e:	9008      	str	r0, [sp, #32]
 8001fa0:	61d8      	str	r0, [r3, #28]
    if (index1 != index2) {
 8001fa2:	42a0      	cmp	r0, r4
 8001fa4:	d100      	bne.n	8001fa8 <ASPathCreate+0x8bc>
 8001fa6:	e148      	b.n	800223a <ASPathCreate+0xb4e>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001fa8:	9d00      	ldr	r5, [sp, #0]
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001faa:	6a1b      	ldr	r3, [r3, #32]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001fac:	46ac      	mov	ip, r5
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001fae:	0080      	lsls	r0, r0, #2
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8001fb0:	00a1      	lsls	r1, r4, #2
 8001fb2:	1859      	adds	r1, r3, r1
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8001fb4:	181b      	adds	r3, r3, r0
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	680a      	ldr	r2, [r1, #0]
 8001fba:	4372      	muls	r2, r6
 8001fbc:	4346      	muls	r6, r0
 8001fbe:	4462      	add	r2, ip
 8001fc0:	4466      	add	r6, ip
        const size_t tempOpenIndex = record1->openIndex;
 8001fc2:	68d0      	ldr	r0, [r2, #12]
        record1->openIndex = record2->openIndex;
 8001fc4:	68f7      	ldr	r7, [r6, #12]
 8001fc6:	60d7      	str	r7, [r2, #12]
        record2->openIndex = tempOpenIndex;
 8001fc8:	60f0      	str	r0, [r6, #12]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001fca:	6818      	ldr	r0, [r3, #0]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8001fcc:	680a      	ldr	r2, [r1, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8001fce:	6008      	str	r0, [r1, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8001fd0:	601a      	str	r2, [r3, #0]
        if (smallestIndex != index) {
 8001fd2:	4653      	mov	r3, sl
 8001fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	46aa      	mov	sl, r5
 8001fda:	930f      	str	r3, [sp, #60]	; 0x3c
}
 8001fdc:	e05c      	b.n	8002098 <ASPathCreate+0x9ac>
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001fde:	465b      	mov	r3, fp
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001fe2:	9b02      	ldr	r3, [sp, #8]
 8001fe4:	920b      	str	r2, [sp, #44]	; 0x2c
 8001fe6:	681e      	ldr	r6, [r3, #0]
 8001fe8:	2314      	movs	r3, #20
 8001fea:	4699      	mov	r9, r3
 8001fec:	44b1      	add	r9, r6
 8001fee:	4649      	mov	r1, r9
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8001ff0:	00ab      	lsls	r3, r5, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8001ff2:	589b      	ldr	r3, [r3, r2]
 8001ff4:	434b      	muls	r3, r1
 8001ff6:	4453      	add	r3, sl
    return record->estimatedCost + record->cost;
 8001ff8:	6899      	ldr	r1, [r3, #8]
 8001ffa:	6858      	ldr	r0, [r3, #4]
 8001ffc:	f7fe fa82 	bl	8000504 <__aeabi_fadd>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8002002:	00a3      	lsls	r3, r4, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002004:	589b      	ldr	r3, [r3, r2]
 8002006:	464a      	mov	r2, r9
 8002008:	4353      	muls	r3, r2
 800200a:	4453      	add	r3, sl
    return record->estimatedCost + record->cost;
 800200c:	4680      	mov	r8, r0
 800200e:	6899      	ldr	r1, [r3, #8]
 8002010:	6858      	ldr	r0, [r3, #4]
 8002012:	f7fe fa77 	bl	8000504 <__aeabi_fadd>
 8002016:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 8002018:	4640      	mov	r0, r8
 800201a:	f7fe f91d 	bl	8000258 <__aeabi_fcmplt>
 800201e:	2800      	cmp	r0, #0
 8002020:	d100      	bne.n	8002024 <ASPathCreate+0x938>
    } else if (rank1 > rank2) {
 8002022:	0025      	movs	r5, r4
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8002024:	9b08      	ldr	r3, [sp, #32]
 8002026:	9a07      	ldr	r2, [sp, #28]
 8002028:	4293      	cmp	r3, r2
 800202a:	d91d      	bls.n	8002068 <ASPathCreate+0x97c>
 800202c:	465b      	mov	r3, fp
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	00ff      	lsls	r7, r7, #3
 8002032:	4698      	mov	r8, r3
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002034:	58fb      	ldr	r3, [r7, r3]
 8002036:	0037      	movs	r7, r6
 8002038:	3714      	adds	r7, #20
 800203a:	437b      	muls	r3, r7
 800203c:	4453      	add	r3, sl
    return record->estimatedCost + record->cost;
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	6858      	ldr	r0, [r3, #4]
 8002042:	f7fe fa5f 	bl	8000504 <__aeabi_fadd>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002046:	4642      	mov	r2, r8
        if (rightIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[rightIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 8002048:	00ab      	lsls	r3, r5, #2
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800204a:	589b      	ldr	r3, [r3, r2]
    return record->estimatedCost + record->cost;
 800204c:	4681      	mov	r9, r0
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800204e:	435f      	muls	r7, r3
 8002050:	4457      	add	r7, sl
    return record->estimatedCost + record->cost;
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7fe fa55 	bl	8000504 <__aeabi_fadd>
 800205a:	1c01      	adds	r1, r0, #0
    if (rank1 < rank2) {
 800205c:	4648      	mov	r0, r9
 800205e:	f7fe f8fb 	bl	8000258 <__aeabi_fcmplt>
 8002062:	2800      	cmp	r0, #0
 8002064:	d000      	beq.n	8002068 <ASPathCreate+0x97c>
 8002066:	9d07      	ldr	r5, [sp, #28]
    } while (smallestIndex != index);
 8002068:	42ac      	cmp	r4, r5
 800206a:	d030      	beq.n	80020ce <ASPathCreate+0x9e2>
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 800206c:	465b      	mov	r3, fp
 800206e:	6a19      	ldr	r1, [r3, #32]
 8002070:	00aa      	lsls	r2, r5, #2
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8002072:	00a4      	lsls	r4, r4, #2
        NodeRecord *record1 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index1]));
 8002074:	188a      	adds	r2, r1, r2
        NodeRecord *record2 = NodeGetRecord(NodeMake(nodes, nodes->openNodes[index2]));
 8002076:	190c      	adds	r4, r1, r4
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002078:	6821      	ldr	r1, [r4, #0]
 800207a:	6813      	ldr	r3, [r2, #0]
 800207c:	3614      	adds	r6, #20
 800207e:	4373      	muls	r3, r6
 8002080:	434e      	muls	r6, r1
 8002082:	4453      	add	r3, sl
 8002084:	4456      	add	r6, sl
        const size_t tempOpenIndex = record1->openIndex;
 8002086:	68d9      	ldr	r1, [r3, #12]
        record1->openIndex = record2->openIndex;
 8002088:	68f0      	ldr	r0, [r6, #12]
 800208a:	60d8      	str	r0, [r3, #12]
        record2->openIndex = tempOpenIndex;
 800208c:	60f1      	str	r1, [r6, #12]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 800208e:	6821      	ldr	r1, [r4, #0]
        const size_t tempNodeIndex = nodes->openNodes[index1];
 8002090:	6813      	ldr	r3, [r2, #0]
        nodes->openNodes[index1] = nodes->openNodes[index2];
 8002092:	6011      	str	r1, [r2, #0]
        nodes->openNodes[index2] = tempNodeIndex;
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	002c      	movs	r4, r5
        const size_t leftIndex = (2 * index) + 1;
 8002098:	0063      	lsls	r3, r4, #1
 800209a:	1c5d      	adds	r5, r3, #1
        const size_t rightIndex = (2 * index) + 2;
 800209c:	3302      	adds	r3, #2
 800209e:	9307      	str	r3, [sp, #28]
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 80020a0:	9b08      	ldr	r3, [sp, #32]
        const size_t rightIndex = (2 * index) + 2;
 80020a2:	1c67      	adds	r7, r4, #1
        if (leftIndex < nodes->openNodesCount && NodeRankCompare(NodeMake(nodes, nodes->openNodes[leftIndex]), NodeMake(nodes, nodes->openNodes[smallestIndex])) < 0) {
 80020a4:	42ab      	cmp	r3, r5
 80020a6:	d89a      	bhi.n	8001fde <ASPathCreate+0x8f2>
 80020a8:	9b02      	ldr	r3, [sp, #8]
 80020aa:	0025      	movs	r5, r4
 80020ac:	681e      	ldr	r6, [r3, #0]
 80020ae:	e7b9      	b.n	8002024 <ASPathCreate+0x938>
        return NULL;
 80020b0:	2700      	movs	r7, #0

    NeighborListDestroy(neighborList);
    VisitedNodesDestroy(visitedNodes);

    return path;
}
 80020b2:	0038      	movs	r0, r7
 80020b4:	b011      	add	sp, #68	; 0x44
 80020b6:	bcf0      	pop	{r4, r5, r6, r7}
 80020b8:	46bb      	mov	fp, r7
 80020ba:	46b2      	mov	sl, r6
 80020bc:	46a9      	mov	r9, r5
 80020be:	46a0      	mov	r8, r4
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (n.nodes == NodeNull.nodes) && (n.index == NodeNull.index);
 80020c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020c4:	3201      	adds	r2, #1
 80020c6:	d000      	beq.n	80020ca <ASPathCreate+0x9de>
 80020c8:	e73e      	b.n	8001f48 <ASPathCreate+0x85c>
        return 0;
 80020ca:	2000      	movs	r0, #0
 80020cc:	e756      	b.n	8001f7c <ASPathCreate+0x890>
 80020ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020d0:	9a01      	ldr	r2, [sp, #4]
 80020d2:	469a      	mov	sl, r3
 80020d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80020d6:	4699      	mov	r9, r3
 80020d8:	0033      	movs	r3, r6
 80020da:	3314      	adds	r3, #20
 80020dc:	4353      	muls	r3, r2
 80020de:	9a00      	ldr	r2, [sp, #0]
 80020e0:	18d4      	adds	r4, r2, r3
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	079f      	lsls	r7, r3, #30
 80020e6:	0fff      	lsrs	r7, r7, #31
            if (NodeIsInClosedSet(neighbor) && cost < GetNodeCost(neighbor)) {
 80020e8:	07db      	lsls	r3, r3, #31
 80020ea:	d400      	bmi.n	80020ee <ASPathCreate+0xa02>
 80020ec:	e6b9      	b.n	8001e62 <ASPathCreate+0x776>
 80020ee:	e6ae      	b.n	8001e4e <ASPathCreate+0x762>
                return NodeMake(nodes, nodes->nodeRecordsIndex[mid]);
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	e670      	b.n	8001dd8 <ASPathCreate+0x6ec>
    if (record->hasParent) {
 80020f6:	002a      	movs	r2, r5
            count++;
 80020f8:	2401      	movs	r4, #1
    if (record->hasParent) {
 80020fa:	2108      	movs	r1, #8
 80020fc:	9e02      	ldr	r6, [sp, #8]
 80020fe:	9800      	ldr	r0, [sp, #0]
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002100:	6913      	ldr	r3, [r2, #16]
            count++;
 8002102:	3401      	adds	r4, #1
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 8002104:	4373      	muls	r3, r6
 8002106:	18c2      	adds	r2, r0, r3
    if (record->hasParent) {
 8002108:	5cc3      	ldrb	r3, [r0, r3]
 800210a:	4219      	tst	r1, r3
 800210c:	d1f8      	bne.n	8002100 <ASPathCreate+0xa14>
        path = malloc(sizeof(struct __ASPath) + (count * source->nodeSize));
 800210e:	9e03      	ldr	r6, [sp, #12]
 8002110:	0030      	movs	r0, r6
 8002112:	4360      	muls	r0, r4
 8002114:	300c      	adds	r0, #12
 8002116:	f002 fd8d 	bl	8004c34 <malloc>
        path->cost = GetNodeCost(current);
 800211a:	68ab      	ldr	r3, [r5, #8]
        path = malloc(sizeof(struct __ASPath) + (count * source->nodeSize));
 800211c:	0007      	movs	r7, r0
        path->nodeSize = source->nodeSize;
 800211e:	6006      	str	r6, [r0, #0]
        path->count = count;
 8002120:	6044      	str	r4, [r0, #4]
        path->cost = GetNodeCost(current);
 8002122:	6083      	str	r3, [r0, #8]
        for (size_t i=count; i>0; i--) {
 8002124:	2c00      	cmp	r4, #0
 8002126:	d000      	beq.n	800212a <ASPathCreate+0xa3e>
 8002128:	e456      	b.n	80019d8 <ASPathCreate+0x2ec>
    free(list->costs);
 800212a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800212c:	68e3      	ldr	r3, [r4, #12]
 800212e:	0018      	movs	r0, r3
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	f002 fd89 	bl	8004c48 <free>
    free(list->nodeKeys);
 8002136:	6923      	ldr	r3, [r4, #16]
 8002138:	0018      	movs	r0, r3
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	f002 fd84 	bl	8004c48 <free>
    free(list);
 8002140:	0020      	movs	r0, r4
 8002142:	f002 fd81 	bl	8004c48 <free>
    free(visitedNodes->nodeRecordsIndex);
 8002146:	464b      	mov	r3, r9
 8002148:	6958      	ldr	r0, [r3, #20]
 800214a:	f002 fd7d 	bl	8004c48 <free>
    free(visitedNodes->nodeRecords);
 800214e:	9800      	ldr	r0, [sp, #0]
 8002150:	f002 fd7a 	bl	8004c48 <free>
    free(visitedNodes->openNodes);
 8002154:	464b      	mov	r3, r9
 8002156:	6a18      	ldr	r0, [r3, #32]
 8002158:	f002 fd76 	bl	8004c48 <free>
    free(visitedNodes);
 800215c:	4648      	mov	r0, r9
 800215e:	f002 fd73 	bl	8004c48 <free>
}
 8002162:	e7a6      	b.n	80020b2 <ASPathCreate+0x9c6>
 8002164:	4643      	mov	r3, r8
 8002166:	9304      	str	r3, [sp, #16]
    size_t first = 0;
 8002168:	464b      	mov	r3, r9
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	4653      	mov	r3, sl
 800216e:	2600      	movs	r6, #0
 8002170:	9303      	str	r3, [sp, #12]
 8002172:	4643      	mov	r3, r8
 8002174:	9a06      	ldr	r2, [sp, #24]
 8002176:	46b0      	mov	r8, r6
 8002178:	4691      	mov	r9, r2
 800217a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800217c:	001e      	movs	r6, r3
 800217e:	4692      	mov	sl, r2
 8002180:	e007      	b.n	8002192 <ASPathCreate+0xaa6>
            } else if (comp > 0 && mid > 0) {
 8002182:	2800      	cmp	r0, #0
 8002184:	d100      	bne.n	8002188 <ASPathCreate+0xa9c>
 8002186:	e0b0      	b.n	80022ea <ASPathCreate+0xbfe>
 8002188:	2f01      	cmp	r7, #1
 800218a:	d91f      	bls.n	80021cc <ASPathCreate+0xae0>
                last = mid - 1;
 800218c:	1e6e      	subs	r6, r5, #1
        while (first <= last) {
 800218e:	45b0      	cmp	r8, r6
 8002190:	d81c      	bhi.n	80021cc <ASPathCreate+0xae0>
            const size_t mid = (first + last) / 2;
 8002192:	4643      	mov	r3, r8
 8002194:	199f      	adds	r7, r3, r6
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 8002196:	9b01      	ldr	r3, [sp, #4]
            const size_t mid = (first + last) / 2;
 8002198:	087d      	lsrs	r5, r7, #1
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 800219a:	469c      	mov	ip, r3
    if (node.nodes->source->nodeComparator) {
 800219c:	465b      	mov	r3, fp
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 800219e:	00ac      	lsls	r4, r5, #2
    if (node.nodes->source->nodeComparator) {
 80021a0:	691b      	ldr	r3, [r3, #16]
            const int comp = NodeKeyCompare(NodeMake(nodes, nodes->nodeRecordsIndex[mid]), nodeKey);
 80021a2:	4464      	add	r4, ip
 80021a4:	6820      	ldr	r0, [r4, #0]
    if (node.nodes->source->nodeComparator) {
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01f      	beq.n	80021ea <ASPathCreate+0xafe>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80021aa:	465a      	mov	r2, fp
 80021ac:	6812      	ldr	r2, [r2, #0]
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 80021ae:	4651      	mov	r1, sl
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80021b0:	3214      	adds	r2, #20
 80021b2:	4350      	muls	r0, r2
 80021b4:	9a00      	ldr	r2, [sp, #0]
 80021b6:	4694      	mov	ip, r2
 80021b8:	4460      	add	r0, ip
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 80021ba:	464a      	mov	r2, r9
    return NodeGetRecord(node)->nodeKey;
 80021bc:	3014      	adds	r0, #20
        return node.nodes->source->nodeComparator(GetNodeKey(node), nodeKey, node.nodes->context);
 80021be:	4798      	blx	r3
            if (comp < 0) {
 80021c0:	2800      	cmp	r0, #0
 80021c2:	dade      	bge.n	8002182 <ASPathCreate+0xa96>
                first = mid + 1;
 80021c4:	1c6b      	adds	r3, r5, #1
 80021c6:	4698      	mov	r8, r3
        while (first <= last) {
 80021c8:	45b0      	cmp	r8, r6
 80021ca:	d9e2      	bls.n	8002192 <ASPathCreate+0xaa6>
 80021cc:	9b02      	ldr	r3, [sp, #8]
 80021ce:	4646      	mov	r6, r8
 80021d0:	4699      	mov	r9, r3
 80021d2:	9b03      	ldr	r3, [sp, #12]
 80021d4:	1c74      	adds	r4, r6, #1
 80021d6:	469a      	mov	sl, r3
 80021d8:	464b      	mov	r3, r9
 80021da:	689d      	ldr	r5, [r3, #8]
 80021dc:	4653      	mov	r3, sl
 80021de:	00a4      	lsls	r4, r4, #2
 80021e0:	9309      	str	r3, [sp, #36]	; 0x24
 80021e2:	1f23      	subs	r3, r4, #4
 80021e4:	469a      	mov	sl, r3
 80021e6:	f7ff fafc 	bl	80017e2 <ASPathCreate+0xf6>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80021ea:	465b      	mov	r3, fp
 80021ec:	681b      	ldr	r3, [r3, #0]
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 80021ee:	4651      	mov	r1, sl
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80021f0:	3314      	adds	r3, #20
 80021f2:	4358      	muls	r0, r3
 80021f4:	9b00      	ldr	r3, [sp, #0]
 80021f6:	469c      	mov	ip, r3
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 80021f8:	465b      	mov	r3, fp
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 80021fa:	4460      	add	r0, ip
        return memcmp(GetNodeKey(node), nodeKey, node.nodes->source->nodeSize);
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	3014      	adds	r0, #20
 8002200:	f002 fd2c 	bl	8004c5c <memcmp>
 8002204:	e7dc      	b.n	80021c0 <ASPathCreate+0xad4>
        n.nodes->openNodesCapacity = 1 + (n.nodes->openNodesCapacity * 2);
 8002206:	465b      	mov	r3, fp
 8002208:	0071      	lsls	r1, r6, #1
 800220a:	3101      	adds	r1, #1
 800220c:	6199      	str	r1, [r3, #24]
        n.nodes->openNodes = realloc(n.nodes->openNodes, n.nodes->openNodesCapacity * sizeof(size_t));
 800220e:	6a18      	ldr	r0, [r3, #32]
 8002210:	0089      	lsls	r1, r1, #2
 8002212:	f003 f8ef 	bl	80053f4 <realloc>
 8002216:	465b      	mov	r3, fp
 8002218:	9007      	str	r0, [sp, #28]
 800221a:	6218      	str	r0, [r3, #32]
 800221c:	e632      	b.n	8001e84 <ASPathCreate+0x798>
        n.nodes->openNodesCapacity = 1 + (n.nodes->openNodesCapacity * 2);
 800221e:	4653      	mov	r3, sl
 8002220:	0059      	lsls	r1, r3, #1
 8002222:	464b      	mov	r3, r9
 8002224:	3101      	adds	r1, #1
 8002226:	6199      	str	r1, [r3, #24]
        n.nodes->openNodes = realloc(n.nodes->openNodes, n.nodes->openNodesCapacity * sizeof(size_t));
 8002228:	6a18      	ldr	r0, [r3, #32]
 800222a:	0089      	lsls	r1, r1, #2
 800222c:	f003 f8e2 	bl	80053f4 <realloc>
 8002230:	464b      	mov	r3, r9
 8002232:	9005      	str	r0, [sp, #20]
 8002234:	6218      	str	r0, [r3, #32]
 8002236:	f7ff fb35 	bl	80018a4 <ASPathCreate+0x1b8>
 800223a:	4653      	mov	r3, sl
 800223c:	930e      	str	r3, [sp, #56]	; 0x38
 800223e:	9b00      	ldr	r3, [sp, #0]
 8002240:	469a      	mov	sl, r3
 8002242:	464b      	mov	r3, r9
 8002244:	930f      	str	r3, [sp, #60]	; 0x3c
 8002246:	e727      	b.n	8002098 <ASPathCreate+0x9ac>
    return (Node){nodes, index};
 8002248:	9b04      	ldr	r3, [sp, #16]
 800224a:	4698      	mov	r8, r3
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 800224c:	465b      	mov	r3, fp
 800224e:	681c      	ldr	r4, [r3, #0]
    return node;
 8002250:	4643      	mov	r3, r8
 8002252:	9304      	str	r3, [sp, #16]
        return NodeNull;
 8002254:	2301      	movs	r3, #1
 8002256:	425b      	negs	r3, r3
 8002258:	9309      	str	r3, [sp, #36]	; 0x24
 800225a:	2300      	movs	r3, #0
        return 0;
 800225c:	2000      	movs	r0, #0
 800225e:	3414      	adds	r4, #20
        return NodeNull;
 8002260:	930a      	str	r3, [sp, #40]	; 0x28
 8002262:	f7ff fb07 	bl	8001874 <ASPathCreate+0x188>
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 8002266:	4643      	mov	r3, r8
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	1c5d      	adds	r5, r3, #1
 800226c:	9303      	str	r3, [sp, #12]
 800226e:	464b      	mov	r3, r9
 8002270:	609d      	str	r5, [r3, #8]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 8002272:	465b      	mov	r3, fp
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	9800      	ldr	r0, [sp, #0]
 8002278:	3114      	adds	r1, #20
 800227a:	4369      	muls	r1, r5
 800227c:	f003 f8ba 	bl	80053f4 <realloc>
 8002280:	464b      	mov	r3, r9
 8002282:	9000      	str	r0, [sp, #0]
 8002284:	6118      	str	r0, [r3, #16]
        nodes->nodeRecordsIndex = realloc(nodes->nodeRecordsIndex, nodes->nodeRecordsCapacity * sizeof(size_t));
 8002286:	00a9      	lsls	r1, r5, #2
 8002288:	6958      	ldr	r0, [r3, #20]
 800228a:	f003 f8b3 	bl	80053f4 <realloc>
 800228e:	464b      	mov	r3, r9
 8002290:	9001      	str	r0, [sp, #4]
 8002292:	6158      	str	r0, [r3, #20]
 8002294:	f7ff fa6e 	bl	8001774 <ASPathCreate+0x88>
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 8002298:	9b09      	ldr	r3, [sp, #36]	; 0x24
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 800229a:	9800      	ldr	r0, [sp, #0]
        nodes->nodeRecordsCapacity = 1 + (nodes->nodeRecordsCapacity * 2);
 800229c:	005d      	lsls	r5, r3, #1
 800229e:	464b      	mov	r3, r9
 80022a0:	1c6f      	adds	r7, r5, #1
 80022a2:	609f      	str	r7, [r3, #8]
        nodes->nodeRecords = realloc(nodes->nodeRecords, nodes->nodeRecordsCapacity * (sizeof(NodeRecord) + nodes->source->nodeSize));
 80022a4:	465b      	mov	r3, fp
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	3114      	adds	r1, #20
 80022aa:	4379      	muls	r1, r7
 80022ac:	f003 f8a2 	bl	80053f4 <realloc>
 80022b0:	464b      	mov	r3, r9
 80022b2:	9000      	str	r0, [sp, #0]
 80022b4:	6118      	str	r0, [r3, #16]
        nodes->nodeRecordsIndex = realloc(nodes->nodeRecordsIndex, nodes->nodeRecordsCapacity * sizeof(size_t));
 80022b6:	00b9      	lsls	r1, r7, #2
 80022b8:	6958      	ldr	r0, [r3, #20]
 80022ba:	f003 f89b 	bl	80053f4 <realloc>
 80022be:	464b      	mov	r3, r9
 80022c0:	6158      	str	r0, [r3, #20]
 80022c2:	f7ff fa96 	bl	80017f2 <ASPathCreate+0x106>
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 80022c6:	464b      	mov	r3, r9
        return 0;
 80022c8:	2000      	movs	r0, #0
    if (a.nodes->source->pathCostHeuristic && !NodeIsNull(a) && !NodeIsNull(b)) {
 80022ca:	930a      	str	r3, [sp, #40]	; 0x28
 80022cc:	f7ff fad2 	bl	8001874 <ASPathCreate+0x188>
 80022d0:	9b03      	ldr	r3, [sp, #12]
 80022d2:	4699      	mov	r9, r3
 80022d4:	9b04      	ldr	r3, [sp, #16]
 80022d6:	4698      	mov	r8, r3
                return NodeMake(nodes, nodes->nodeRecordsIndex[mid]);
 80022d8:	682b      	ldr	r3, [r5, #0]
 80022da:	9304      	str	r3, [sp, #16]
    if (!nodeKey) {
 80022dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0b2      	beq.n	8002248 <ASPathCreate+0xb5c>
 80022e2:	9b02      	ldr	r3, [sp, #8]
 80022e4:	46c2      	mov	sl, r8
 80022e6:	4698      	mov	r8, r3
 80022e8:	e73e      	b.n	8002168 <ASPathCreate+0xa7c>
 80022ea:	9b02      	ldr	r3, [sp, #8]
 80022ec:	4699      	mov	r9, r3
                return NodeMake(nodes, nodes->nodeRecordsIndex[mid]);
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	9309      	str	r3, [sp, #36]	; 0x24
 80022f2:	f7ff fa9f 	bl	8001834 <ASPathCreate+0x148>
 80022f6:	465b      	mov	r3, fp
    while (index > 0) {
 80022f8:	2201      	movs	r2, #1
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	9207      	str	r2, [sp, #28]
 80022fe:	9303      	str	r3, [sp, #12]
    return nodes->openNodesCount > 0;
 8002300:	3314      	adds	r3, #20
 8002302:	001c      	movs	r4, r3
 8002304:	f7ff fb39 	bl	800197a <ASPathCreate+0x28e>
 8002308:	4653      	mov	r3, sl
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	9d04      	ldr	r5, [sp, #16]
 800230e:	9303      	str	r3, [sp, #12]
 8002310:	3314      	adds	r3, #20
 8002312:	435d      	muls	r5, r3
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	9b00      	ldr	r3, [sp, #0]
 8002318:	469c      	mov	ip, r3
 800231a:	4465      	add	r5, ip
    return (n.nodes == NodeNull.nodes) && (n.index == NodeNull.index);
 800231c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <ASPathCreate+0xc3a>
 8002322:	f7ff fb45 	bl	80019b0 <ASPathCreate+0x2c4>
 8002326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002328:	3301      	adds	r3, #1
 800232a:	d001      	beq.n	8002330 <ASPathCreate+0xc44>
 800232c:	f7ff fb40 	bl	80019b0 <ASPathCreate+0x2c4>
 8002330:	f7ff fb3a 	bl	80019a8 <ASPathCreate+0x2bc>
 8002334:	9b04      	ldr	r3, [sp, #16]
 8002336:	435c      	muls	r4, r3
 8002338:	9b00      	ldr	r3, [sp, #0]
 800233a:	191d      	adds	r5, r3, r4
 800233c:	e7ee      	b.n	800231c <ASPathCreate+0xc30>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800233e:	4653      	mov	r3, sl
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	9a04      	ldr	r2, [sp, #16]
 8002344:	9303      	str	r3, [sp, #12]
 8002346:	3314      	adds	r3, #20
 8002348:	435a      	muls	r2, r3
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	0013      	movs	r3, r2
 800234e:	9a00      	ldr	r2, [sp, #0]
 8002350:	18d5      	adds	r5, r2, r3
        NodeGetRecord(n)->isGoal = 1;
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	2204      	movs	r2, #4
 8002356:	4313      	orrs	r3, r2
 8002358:	702b      	strb	r3, [r5, #0]
                break;
 800235a:	e7df      	b.n	800231c <ASPathCreate+0xc30>
    return node.nodes->nodeRecords + (node.index * (node.nodes->source->nodeSize + sizeof(NodeRecord)));
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	deff      	udf	#255	; 0xff

08002360 <ASPathDestroy>:

void ASPathDestroy(ASPath path)
{
 8002360:	b510      	push	{r4, lr}
    free(path);
 8002362:	f002 fc71 	bl	8004c48 <free>
}
 8002366:	bd10      	pop	{r4, pc}

08002368 <ASPathGetCount>:
    return path? path->cost : INFINITY;
}

size_t ASPathGetCount(ASPath path)
{
    return path? path->count : 0;
 8002368:	2800      	cmp	r0, #0
 800236a:	d001      	beq.n	8002370 <ASPathGetCount+0x8>
 800236c:	6840      	ldr	r0, [r0, #4]
}
 800236e:	4770      	bx	lr
    return path? path->count : 0;
 8002370:	2000      	movs	r0, #0
 8002372:	e7fc      	b.n	800236e <ASPathGetCount+0x6>

08002374 <ASPathGetNode>:

void *ASPathGetNode(ASPath path, size_t index)
{
    return (path && index < path->count)? (path->nodeKeys + (index * path->nodeSize)) : NULL;
 8002374:	2800      	cmp	r0, #0
 8002376:	d008      	beq.n	800238a <ASPathGetNode+0x16>
 8002378:	6843      	ldr	r3, [r0, #4]
 800237a:	428b      	cmp	r3, r1
 800237c:	d905      	bls.n	800238a <ASPathGetNode+0x16>
 800237e:	0003      	movs	r3, r0
 8002380:	6800      	ldr	r0, [r0, #0]
 8002382:	330c      	adds	r3, #12
 8002384:	4348      	muls	r0, r1
 8002386:	1818      	adds	r0, r3, r0
}
 8002388:	4770      	bx	lr
    return (path && index < path->count)? (path->nodeKeys + (index * path->nodeSize)) : NULL;
 800238a:	2000      	movs	r0, #0
 800238c:	e7fc      	b.n	8002388 <ASPathGetNode+0x14>
 800238e:	46c0      	nop			; (mov r8, r8)

08002390 <path_node_heuristic>:
	if (can_transit_on(&left_position))
		ASNeighborListAdd(neighbors, &left_position, 1);
}

static float path_node_heuristic(void *fromNode, void *toNode, void *context)
{
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	0006      	movs	r6, r0
    MapPosition* from = (MapPosition*) fromNode;
    MapPosition* to = (MapPosition*) toNode;

    return fabs(from->row - to->row) + fabs(from->col - to->col);
 8002394:	880b      	ldrh	r3, [r1, #0]
 8002396:	8800      	ldrh	r0, [r0, #0]
{
 8002398:	000d      	movs	r5, r1
    return fabs(from->row - to->row) + fabs(from->col - to->col);
 800239a:	1ac0      	subs	r0, r0, r3
 800239c:	f7ff f89a 	bl	80014d4 <__aeabi_i2d>
 80023a0:	886b      	ldrh	r3, [r5, #2]
 80023a2:	0007      	movs	r7, r0
 80023a4:	8870      	ldrh	r0, [r6, #2]
 80023a6:	004c      	lsls	r4, r1, #1
 80023a8:	1ac0      	subs	r0, r0, r3
 80023aa:	f7ff f893 	bl	80014d4 <__aeabi_i2d>
 80023ae:	0864      	lsrs	r4, r4, #1
 80023b0:	0049      	lsls	r1, r1, #1
 80023b2:	0002      	movs	r2, r0
 80023b4:	084b      	lsrs	r3, r1, #1
 80023b6:	0038      	movs	r0, r7
 80023b8:	0021      	movs	r1, r4
 80023ba:	f7fe fd21 	bl	8000e00 <__aeabi_dadd>
 80023be:	f7ff f8b9 	bl	8001534 <__aeabi_d2f>
}
 80023c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023c4 <path_node_neighbors>:
{
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c6:	46ce      	mov	lr, r9
 80023c8:	4647      	mov	r7, r8
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b08d      	sub	sp, #52	; 0x34
static void path_node_neighbors(ASNeighborList neighbors, void *node, void *context)
 80023ce:	ac06      	add	r4, sp, #24
{
 80023d0:	000d      	movs	r5, r1
static void path_node_neighbors(ASNeighborList neighbors, void *node, void *context)
 80023d2:	0021      	movs	r1, r4
{
 80023d4:	4691      	mov	r9, r2
static void path_node_neighbors(ASNeighborList neighbors, void *node, void *context)
 80023d6:	ab14      	add	r3, sp, #80	; 0x50
 80023d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <path_node_neighbors+0xcc>)
{
 80023dc:	4680      	mov	r8, r0
static void path_node_neighbors(ASNeighborList neighbors, void *node, void *context)
 80023de:	cbc1      	ldmia	r3!, {r0, r6, r7}
 80023e0:	c1c1      	stmia	r1!, {r0, r6, r7}
 80023e2:	cb41      	ldmia	r3!, {r0, r6}
 80023e4:	c141      	stmia	r1!, {r0, r6}
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <path_node_neighbors+0xd0>)
 80023e8:	0020      	movs	r0, r4
 80023ea:	aa05      	add	r2, sp, #20
 80023ec:	a90b      	add	r1, sp, #44	; 0x2c
 80023ee:	9209      	str	r2, [sp, #36]	; 0x24
 80023f0:	930a      	str	r3, [sp, #40]	; 0x28
 80023f2:	f7fd ffa1 	bl	8000338 <__clear_cache>
	MapInfo* mapInfo = (MapInfo*) context;
 80023f6:	464b      	mov	r3, r9
 80023f8:	9305      	str	r3, [sp, #20]
			lambda(bool, (const MapPosition* test_position), {
 80023fa:	2301      	movs	r3, #1
	MapPosition up_position = { .row = position->row - 1, .col = position->col };
 80023fc:	466a      	mov	r2, sp
			lambda(bool, (const MapPosition* test_position), {
 80023fe:	431c      	orrs	r4, r3
	MapPosition up_position = { .row = position->row - 1, .col = position->col };
 8002400:	882b      	ldrh	r3, [r5, #0]
	if (can_transit_on(&up_position))
 8002402:	a801      	add	r0, sp, #4
	MapPosition up_position = { .row = position->row - 1, .col = position->col };
 8002404:	3b01      	subs	r3, #1
 8002406:	8093      	strh	r3, [r2, #4]
 8002408:	886b      	ldrh	r3, [r5, #2]
 800240a:	80d3      	strh	r3, [r2, #6]
	if (can_transit_on(&up_position))
 800240c:	47a0      	blx	r4
 800240e:	2800      	cmp	r0, #0
 8002410:	d122      	bne.n	8002458 <path_node_neighbors+0x94>
	MapPosition right_position = { .row = position->row, .col = position->col + 1 };
 8002412:	466a      	mov	r2, sp
 8002414:	882b      	ldrh	r3, [r5, #0]
	if (can_transit_on(&right_position))
 8002416:	a802      	add	r0, sp, #8
	MapPosition right_position = { .row = position->row, .col = position->col + 1 };
 8002418:	8113      	strh	r3, [r2, #8]
 800241a:	886b      	ldrh	r3, [r5, #2]
 800241c:	3301      	adds	r3, #1
 800241e:	8153      	strh	r3, [r2, #10]
	if (can_transit_on(&right_position))
 8002420:	47a0      	blx	r4
 8002422:	2800      	cmp	r0, #0
 8002424:	d12d      	bne.n	8002482 <path_node_neighbors+0xbe>
	MapPosition down_position = { .row = position->row + 1, .col = position->col };
 8002426:	466a      	mov	r2, sp
 8002428:	882b      	ldrh	r3, [r5, #0]
	if (can_transit_on(&down_position))
 800242a:	a803      	add	r0, sp, #12
	MapPosition down_position = { .row = position->row + 1, .col = position->col };
 800242c:	3301      	adds	r3, #1
 800242e:	8193      	strh	r3, [r2, #12]
 8002430:	886b      	ldrh	r3, [r5, #2]
 8002432:	81d3      	strh	r3, [r2, #14]
	if (can_transit_on(&down_position))
 8002434:	47a0      	blx	r4
 8002436:	2800      	cmp	r0, #0
 8002438:	d11c      	bne.n	8002474 <path_node_neighbors+0xb0>
	MapPosition left_position = { .row = position->row, .col = position->col - 1 };
 800243a:	466a      	mov	r2, sp
 800243c:	882b      	ldrh	r3, [r5, #0]
	if (can_transit_on(&left_position))
 800243e:	a804      	add	r0, sp, #16
	MapPosition left_position = { .row = position->row, .col = position->col - 1 };
 8002440:	8213      	strh	r3, [r2, #16]
 8002442:	886b      	ldrh	r3, [r5, #2]
 8002444:	3b01      	subs	r3, #1
 8002446:	8253      	strh	r3, [r2, #18]
	if (can_transit_on(&left_position))
 8002448:	47a0      	blx	r4
 800244a:	2800      	cmp	r0, #0
 800244c:	d10b      	bne.n	8002466 <path_node_neighbors+0xa2>
}
 800244e:	b00d      	add	sp, #52	; 0x34
 8002450:	bcc0      	pop	{r6, r7}
 8002452:	46b9      	mov	r9, r7
 8002454:	46b0      	mov	r8, r6
 8002456:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ASNeighborListAdd(neighbors, &up_position, 1);
 8002458:	22fe      	movs	r2, #254	; 0xfe
 800245a:	4640      	mov	r0, r8
 800245c:	0592      	lsls	r2, r2, #22
 800245e:	a901      	add	r1, sp, #4
 8002460:	f7ff f91a 	bl	8001698 <ASNeighborListAdd>
 8002464:	e7d5      	b.n	8002412 <path_node_neighbors+0x4e>
		ASNeighborListAdd(neighbors, &left_position, 1);
 8002466:	22fe      	movs	r2, #254	; 0xfe
 8002468:	4640      	mov	r0, r8
 800246a:	0592      	lsls	r2, r2, #22
 800246c:	a904      	add	r1, sp, #16
 800246e:	f7ff f913 	bl	8001698 <ASNeighborListAdd>
}
 8002472:	e7ec      	b.n	800244e <path_node_neighbors+0x8a>
		ASNeighborListAdd(neighbors, &down_position, 1);
 8002474:	22fe      	movs	r2, #254	; 0xfe
 8002476:	4640      	mov	r0, r8
 8002478:	0592      	lsls	r2, r2, #22
 800247a:	a903      	add	r1, sp, #12
 800247c:	f7ff f90c 	bl	8001698 <ASNeighborListAdd>
 8002480:	e7db      	b.n	800243a <path_node_neighbors+0x76>
		ASNeighborListAdd(neighbors, &right_position, 1);
 8002482:	22fe      	movs	r2, #254	; 0xfe
 8002484:	4640      	mov	r0, r8
 8002486:	0592      	lsls	r2, r2, #22
 8002488:	a902      	add	r1, sp, #8
 800248a:	f7ff f905 	bl	8001698 <ASNeighborListAdd>
 800248e:	e7ca      	b.n	8002426 <path_node_neighbors+0x62>
 8002490:	08005e44 	.word	0x08005e44
 8002494:	08002499 	.word	0x08002499

08002498 <lambda$__anon$.7473>:
			lambda(bool, (const MapPosition* test_position), {
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	4665      	mov	r5, ip
 800249c:	0004      	movs	r4, r0
 800249e:	0001      	movs	r1, r0
 80024a0:	6828      	ldr	r0, [r5, #0]
 80024a2:	f000 ff1f 	bl	80032e4 <is_cell_valid>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	d00d      	beq.n	80024c6 <lambda$__anon$.7473+0x2e>
 80024aa:	682a      	ldr	r2, [r5, #0]
 80024ac:	8823      	ldrh	r3, [r4, #0]
 80024ae:	6811      	ldr	r1, [r2, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	8862      	ldrh	r2, [r4, #2]
 80024b4:	585b      	ldr	r3, [r3, r1]
 80024b6:	2000      	movs	r0, #0
 80024b8:	5c9b      	ldrb	r3, [r3, r2]
 80024ba:	2201      	movs	r2, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	429a      	cmp	r2, r3
 80024c2:	4140      	adcs	r0, r0
 80024c4:	b2c0      	uxtb	r0, r0
 80024c6:	bd70      	pop	{r4, r5, r6, pc}

080024c8 <find_best_path>:
 */
bool find_best_path(const MapPosition* start,
										const MapPosition* end,
										const MapInfo* mapInfo,
										MapPosition* path[],
										size_t* path_length) {
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ca:	46ce      	mov	lr, r9
 80024cc:	4647      	mov	r7, r8
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b087      	sub	sp, #28
 80024d2:	4680      	mov	r8, r0
	ASPathNodeSource path_node_source =
 80024d4:	a801      	add	r0, sp, #4
 80024d6:	0004      	movs	r4, r0
										size_t* path_length) {
 80024d8:	468c      	mov	ip, r1
 80024da:	4691      	mov	r9, r2
 80024dc:	001e      	movs	r6, r3
	ASPathNodeSource path_node_source =
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <find_best_path+0x80>)
										size_t* path_length) {
 80024e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	ASPathNodeSource path_node_source =
 80024e2:	cb26      	ldmia	r3!, {r1, r2, r5}
 80024e4:	c426      	stmia	r4!, {r1, r2, r5}
 80024e6:	cb06      	ldmia	r3!, {r1, r2}
 80024e8:	c406      	stmia	r4!, {r1, r2}
	    &path_node_neighbors,
	    &path_node_heuristic,
	    NULL,
	    NULL
	};
	ASPath asPath = ASPathCreate(&path_node_source, (void*) mapInfo, (void*) start, (void*) end);
 80024ea:	4663      	mov	r3, ip
 80024ec:	4642      	mov	r2, r8
 80024ee:	4649      	mov	r1, r9
 80024f0:	f7ff f8fc 	bl	80016ec <ASPathCreate>
 80024f4:	0005      	movs	r5, r0

	*path_length = ASPathGetCount(asPath);
 80024f6:	f7ff ff37 	bl	8002368 <ASPathGetCount>
 80024fa:	6038      	str	r0, [r7, #0]
	if (*path_length == 0) {
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d01d      	beq.n	800253c <find_best_path+0x74>
		ASPathDestroy(asPath);
		return false;
	}

	*path = (MapPosition*) calloc(*path_length, sizeof(MapPosition));
 8002500:	2104      	movs	r1, #4
 8002502:	f002 fb53 	bl	8004bac <calloc>

	for (size_t i = 0; i < *path_length; i++) {
 8002506:	2400      	movs	r4, #0
	*path = (MapPosition*) calloc(*path_length, sizeof(MapPosition));
 8002508:	6030      	str	r0, [r6, #0]
		MapPosition* next_position = ASPathGetNode(asPath, i);
 800250a:	0021      	movs	r1, r4
 800250c:	0028      	movs	r0, r5
 800250e:	f7ff ff31 	bl	8002374 <ASPathGetNode>
		(*path)[i] = *next_position;
 8002512:	6833      	ldr	r3, [r6, #0]
		MapPosition* next_position = ASPathGetNode(asPath, i);
 8002514:	0001      	movs	r1, r0
		(*path)[i] = *next_position;
 8002516:	469c      	mov	ip, r3
 8002518:	00a0      	lsls	r0, r4, #2
 800251a:	2204      	movs	r2, #4
 800251c:	4460      	add	r0, ip
 800251e:	f002 fbab 	bl	8004c78 <memcpy>
	for (size_t i = 0; i < *path_length; i++) {
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3401      	adds	r4, #1
 8002526:	42a3      	cmp	r3, r4
 8002528:	d8ef      	bhi.n	800250a <find_best_path+0x42>
	}

	ASPathDestroy(asPath);
 800252a:	0028      	movs	r0, r5
 800252c:	f7ff ff18 	bl	8002360 <ASPathDestroy>

	return true;
 8002530:	2001      	movs	r0, #1
}
 8002532:	b007      	add	sp, #28
 8002534:	bcc0      	pop	{r6, r7}
 8002536:	46b9      	mov	r9, r7
 8002538:	46b0      	mov	r8, r6
 800253a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ASPathDestroy(asPath);
 800253c:	0028      	movs	r0, r5
 800253e:	f7ff ff0f 	bl	8002360 <ASPathDestroy>
		return false;
 8002542:	2000      	movs	r0, #0
 8002544:	e7f5      	b.n	8002532 <find_best_path+0x6a>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	08005e58 	.word	0x08005e58

0800254c <lambda$__anon$.7570>:

			mapInfo->map[next_cell.row][next_cell.col] = ALREADY_CLEANED;
		}
		else {
			is_cleaning_ongoing = find_first_around_cell(&cleanerInfo.position, mapInfo, &next_cell,
					lambda(bool, (const MapInfo* inner_mapInfo, const MapPosition* target_pos), {
 800254c:	880b      	ldrh	r3, [r1, #0]
 800254e:	6800      	ldr	r0, [r0, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	581b      	ldr	r3, [r3, r0]
 8002554:	884a      	ldrh	r2, [r1, #2]
 8002556:	5c98      	ldrb	r0, [r3, r2]
 8002558:	3801      	subs	r0, #1
 800255a:	4243      	negs	r3, r0
 800255c:	4158      	adcs	r0, r3
 800255e:	b2c0      	uxtb	r0, r0
 8002560:	4770      	bx	lr
 8002562:	46c0      	nop			; (mov r8, r8)

08002564 <lambda$__anon$.7636>:
 8002564:	b510      	push	{r4, lr}
 8002566:	f7ff fff1 	bl	800254c <lambda$__anon$.7570>
 800256a:	bd10      	pop	{r4, pc}

0800256c <lambda$__anon$.7698>:

		bool is_cell_found = false;
		// visiting the up row
		if (is_row_valid(mapInfo, start->row - radius)) {
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit, right_limit,
					lambda(MapPosition, (uint16_t i), {
 800256c:	4662      	mov	r2, ip
 800256e:	0403      	lsls	r3, r0, #16
 8002570:	88d0      	ldrh	r0, [r2, #6]
 8002572:	b082      	sub	sp, #8
 8002574:	4318      	orrs	r0, r3
 8002576:	b002      	add	sp, #8
 8002578:	4770      	bx	lr
 800257a:	46c0      	nop			; (mov r8, r8)

0800257c <lambda$__anon$.7703>:
		}

		// visiting the right column
		if (!is_cell_found && is_column_valid(mapInfo, start->col + radius)) {
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit, down_limit,
					lambda(MapPosition, (uint16_t i), {
 800257c:	4663      	mov	r3, ip
 800257e:	889b      	ldrh	r3, [r3, #4]
 8002580:	b082      	sub	sp, #8
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	4318      	orrs	r0, r3
 8002586:	b002      	add	sp, #8
 8002588:	4770      	bx	lr
 800258a:	46c0      	nop			; (mov r8, r8)

0800258c <lambda$__anon$.7708>:
		}

		// visiting the down row
		if (!is_cell_found && is_row_valid(mapInfo, start->row + radius))
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
					lambda(MapPosition, (uint16_t i), {
 800258c:	4662      	mov	r2, ip
 800258e:	0403      	lsls	r3, r0, #16
 8002590:	8850      	ldrh	r0, [r2, #2]
 8002592:	b082      	sub	sp, #8
 8002594:	4318      	orrs	r0, r3
 8002596:	b002      	add	sp, #8
 8002598:	4770      	bx	lr
 800259a:	46c0      	nop			; (mov r8, r8)

0800259c <lambda$__anon$.7713>:
					condition, target);

		// visiting the left column
		if (!is_cell_found && is_column_valid(mapInfo, start->col - radius))
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
					lambda(MapPosition, (uint16_t i), {
 800259c:	4663      	mov	r3, ip
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b082      	sub	sp, #8
 80025a2:	041b      	lsls	r3, r3, #16
 80025a4:	4318      	orrs	r0, r3
 80025a6:	b002      	add	sp, #8
 80025a8:	4770      	bx	lr
 80025aa:	46c0      	nop			; (mov r8, r8)

080025ac <lambda$__anon$.7619>:
			lambda(bool, (const MapPosition* position), {
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	4665      	mov	r5, ip
 80025b0:	0001      	movs	r1, r0
 80025b2:	0004      	movs	r4, r0
 80025b4:	6828      	ldr	r0, [r5, #0]
 80025b6:	f000 fe95 	bl	80032e4 <is_cell_valid>
 80025ba:	2301      	movs	r3, #1
 80025bc:	2800      	cmp	r0, #0
 80025be:	d00b      	beq.n	80025d8 <lambda$__anon$.7619+0x2c>
 80025c0:	682a      	ldr	r2, [r5, #0]
 80025c2:	8823      	ldrh	r3, [r4, #0]
 80025c4:	6811      	ldr	r1, [r2, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	8862      	ldrh	r2, [r4, #2]
 80025ca:	585b      	ldr	r3, [r3, r1]
 80025cc:	5c9b      	ldrb	r3, [r3, r2]
 80025ce:	2202      	movs	r2, #2
 80025d0:	4393      	bics	r3, r2
 80025d2:	4258      	negs	r0, r3
 80025d4:	4143      	adcs	r3, r0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	0018      	movs	r0, r3
 80025da:	bd70      	pop	{r4, r5, r6, pc}

080025dc <move_cleaner_to_adjacent_position.isra.0>:
static bool move_cleaner_to_adjacent_position(MapInfo* mapInfo,
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	46de      	mov	lr, fp
 80025e0:	464e      	mov	r6, r9
 80025e2:	4645      	mov	r5, r8
 80025e4:	4683      	mov	fp, r0
 80025e6:	4657      	mov	r7, sl
 80025e8:	b5e0      	push	{r5, r6, r7, lr}
 80025ea:	000e      	movs	r6, r1
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 80025ec:	4659      	mov	r1, fp
static bool move_cleaner_to_adjacent_position(MapInfo* mapInfo,
 80025ee:	001d      	movs	r5, r3
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 80025f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
static bool move_cleaner_to_adjacent_position(MapInfo* mapInfo,
 80025f2:	0014      	movs	r4, r2
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80025f8:	6809      	ldr	r1, [r1, #0]
 80025fa:	8810      	ldrh	r0, [r2, #0]
 80025fc:	009a      	lsls	r2, r3, #2
 80025fe:	5852      	ldr	r2, [r2, r1]
 8002600:	5c12      	ldrb	r2, [r2, r0]
 8002602:	2a00      	cmp	r2, #0
 8002604:	d100      	bne.n	8002608 <move_cleaner_to_adjacent_position.isra.0+0x2c>
 8002606:	e0f3      	b.n	80027f0 <move_cleaner_to_adjacent_position.isra.0+0x214>
	if (target_position->row == cleaner_pos->row - 1)
 8002608:	882a      	ldrh	r2, [r5, #0]
	Direction current_dir = cleanerInfo->direction;
 800260a:	7929      	ldrb	r1, [r5, #4]
	if (target_position->row == cleaner_pos->row - 1)
 800260c:	1e57      	subs	r7, r2, #1
 800260e:	42bb      	cmp	r3, r7
 8002610:	d100      	bne.n	8002614 <move_cleaner_to_adjacent_position.isra.0+0x38>
 8002612:	e0c6      	b.n	80027a2 <move_cleaner_to_adjacent_position.isra.0+0x1c6>
	else if (target_position->col == cleaner_pos->col + 1)
 8002614:	886f      	ldrh	r7, [r5, #2]
 8002616:	46bc      	mov	ip, r7
 8002618:	2701      	movs	r7, #1
 800261a:	46b8      	mov	r8, r7
 800261c:	44c4      	add	ip, r8
 800261e:	4560      	cmp	r0, ip
 8002620:	d033      	beq.n	800268a <move_cleaner_to_adjacent_position.isra.0+0xae>
	else if (target_position->row == cleaner_pos->row + 1)
 8002622:	3201      	adds	r2, #1
 8002624:	4293      	cmp	r3, r2
 8002626:	d100      	bne.n	800262a <move_cleaner_to_adjacent_position.isra.0+0x4e>
 8002628:	e0d0      	b.n	80027cc <move_cleaner_to_adjacent_position.isra.0+0x1f0>
	if ((current_dir == UP && target_dir == RIGHT) ||
 800262a:	2900      	cmp	r1, #0
 800262c:	d100      	bne.n	8002630 <move_cleaner_to_adjacent_position.isra.0+0x54>
 800262e:	e0c4      	b.n	80027ba <move_cleaner_to_adjacent_position.isra.0+0x1de>
 8002630:	2901      	cmp	r1, #1
 8002632:	d100      	bne.n	8002636 <move_cleaner_to_adjacent_position.isra.0+0x5a>
 8002634:	e0c1      	b.n	80027ba <move_cleaner_to_adjacent_position.isra.0+0x1de>
		  (current_dir == RIGHT && target_dir == DOWN) ||
 8002636:	2902      	cmp	r1, #2
 8002638:	d02a      	beq.n	8002690 <move_cleaner_to_adjacent_position.isra.0+0xb4>
		target_dir = LEFT;
 800263a:	2303      	movs	r3, #3
 800263c:	4698      	mov	r8, r3
	else if (current_dir != target_dir) {
 800263e:	4541      	cmp	r1, r8
 8002640:	d043      	beq.n	80026ca <move_cleaner_to_adjacent_position.isra.0+0xee>
		while (cleanerInfo->direction != target_dir)
 8002642:	4b6e      	ldr	r3, [pc, #440]	; (80027fc <move_cleaner_to_adjacent_position.isra.0+0x220>)
 8002644:	469a      	mov	sl, r3
	HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_RESET);
#endif

	// adding 3 is like subtracting 1 with modulo 4
	cleanerInfo->direction = (cleanerInfo->direction + 3) % 4;
 8002646:	2303      	movs	r3, #3
 8002648:	4699      	mov	r9, r3
	HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_SET); // CW
 800264a:	2201      	movs	r2, #1
 800264c:	88a1      	ldrh	r1, [r4, #4]
 800264e:	6820      	ldr	r0, [r4, #0]
 8002650:	f001 f832 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_SET); // CW
 8002654:	2201      	movs	r2, #1
 8002656:	8aa1      	ldrh	r1, [r4, #20]
 8002658:	6920      	ldr	r0, [r4, #16]
 800265a:	f001 f82d 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_Delay(millis_to_turn);
 800265e:	4653      	mov	r3, sl
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	f000 fed1 	bl	8003408 <HAL_Delay>
	HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	88a1      	ldrh	r1, [r4, #4]
 800266a:	6820      	ldr	r0, [r4, #0]
 800266c:	f001 f824 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_RESET);
 8002670:	2200      	movs	r2, #0
 8002672:	8aa1      	ldrh	r1, [r4, #20]
 8002674:	6920      	ldr	r0, [r4, #16]
 8002676:	f001 f81f 	bl	80036b8 <HAL_GPIO_WritePin>
	cleanerInfo->direction = (cleanerInfo->direction + 3) % 4;
 800267a:	464b      	mov	r3, r9
 800267c:	792a      	ldrb	r2, [r5, #4]
 800267e:	3203      	adds	r2, #3
 8002680:	401a      	ands	r2, r3
 8002682:	712a      	strb	r2, [r5, #4]
		while (cleanerInfo->direction != target_dir)
 8002684:	4542      	cmp	r2, r8
 8002686:	d1e0      	bne.n	800264a <move_cleaner_to_adjacent_position.isra.0+0x6e>
 8002688:	e01f      	b.n	80026ca <move_cleaner_to_adjacent_position.isra.0+0xee>
	if ((current_dir == UP && target_dir == RIGHT) ||
 800268a:	2900      	cmp	r1, #0
 800268c:	d000      	beq.n	8002690 <move_cleaner_to_adjacent_position.isra.0+0xb4>
 800268e:	e097      	b.n	80027c0 <move_cleaner_to_adjacent_position.isra.0+0x1e4>
/**
 * @brief rotate the cleaner by 90° clockwise
 */
static void turn_right(CleanerInfo* cleanerInfo, MotorsInfo* motorsInfo) {
#ifndef __TESTING__
	HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_SET); // ACW
 8002690:	2201      	movs	r2, #1
 8002692:	89a1      	ldrh	r1, [r4, #12]
 8002694:	68a0      	ldr	r0, [r4, #8]
 8002696:	f001 f80f 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right2_GPIOType, motorsInfo->right2_pin, GPIO_PIN_SET); // ACW
 800269a:	2201      	movs	r2, #1
 800269c:	8ba1      	ldrh	r1, [r4, #28]
 800269e:	69a0      	ldr	r0, [r4, #24]
 80026a0:	f001 f80a 	bl	80036b8 <HAL_GPIO_WritePin>

	HAL_Delay(millis_to_turn);
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <move_cleaner_to_adjacent_position.isra.0+0x220>)
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	f000 feae 	bl	8003408 <HAL_Delay>

	HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_RESET);
 80026ac:	2200      	movs	r2, #0
 80026ae:	89a1      	ldrh	r1, [r4, #12]
 80026b0:	68a0      	ldr	r0, [r4, #8]
 80026b2:	f001 f801 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right2_GPIOType, motorsInfo->right2_pin, GPIO_PIN_RESET);
 80026b6:	2200      	movs	r2, #0
 80026b8:	8ba1      	ldrh	r1, [r4, #28]
 80026ba:	69a0      	ldr	r0, [r4, #24]
 80026bc:	f000 fffc 	bl	80036b8 <HAL_GPIO_WritePin>
#endif

	cleanerInfo->direction = (cleanerInfo->direction + 1) % 4;
 80026c0:	2303      	movs	r3, #3
 80026c2:	792a      	ldrb	r2, [r5, #4]
 80026c4:	3201      	adds	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	712b      	strb	r3, [r5, #4]
	*obstacle_found = false;
 80026ca:	2300      	movs	r3, #0
 80026cc:	7033      	strb	r3, [r6, #0]
	HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_SET); // ACW
 80026ce:	2201      	movs	r2, #1
 80026d0:	89a1      	ldrh	r1, [r4, #12]
 80026d2:	68a0      	ldr	r0, [r4, #8]
 80026d4:	f000 fff0 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_SET); // CW
 80026d8:	2201      	movs	r2, #1
 80026da:	8aa1      	ldrh	r1, [r4, #20]
 80026dc:	6920      	ldr	r0, [r4, #16]
 80026de:	f000 ffeb 	bl	80036b8 <HAL_GPIO_WritePin>
  uint32_t tickstart = HAL_GetTick();
 80026e2:	f000 fe8b 	bl	80033fc <HAL_GetTick>
  uint32_t wait = millis_to_drive;
 80026e6:	4b46      	ldr	r3, [pc, #280]	; (8002800 <move_cleaner_to_adjacent_position.isra.0+0x224>)
  uint32_t tickstart = HAL_GetTick();
 80026e8:	4681      	mov	r9, r0
  uint32_t wait = millis_to_drive;
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	469a      	mov	sl, r3
  while((undo_delay = HAL_GetTick() - tickstart) < wait)
 80026ee:	e002      	b.n	80026f6 <move_cleaner_to_adjacent_position.isra.0+0x11a>
  	if (*obstacle_found) {
 80026f0:	7833      	ldrb	r3, [r6, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d128      	bne.n	8002748 <move_cleaner_to_adjacent_position.isra.0+0x16c>
  while((undo_delay = HAL_GetTick() - tickstart) < wait)
 80026f6:	f000 fe81 	bl	80033fc <HAL_GetTick>
 80026fa:	464b      	mov	r3, r9
 80026fc:	1ac3      	subs	r3, r0, r3
 80026fe:	4698      	mov	r8, r3
 8002700:	459a      	cmp	sl, r3
 8002702:	d8f5      	bhi.n	80026f0 <move_cleaner_to_adjacent_position.isra.0+0x114>
  HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	89a1      	ldrh	r1, [r4, #12]
 8002708:	68a0      	ldr	r0, [r4, #8]
 800270a:	f000 ffd5 	bl	80036b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	8aa1      	ldrh	r1, [r4, #20]
 8002712:	6920      	ldr	r0, [r4, #16]
 8002714:	f000 ffd0 	bl	80036b8 <HAL_GPIO_WritePin>
  	switch (cleanerInfo->direction) {
 8002718:	792b      	ldrb	r3, [r5, #4]
  	uint16_t current_row = cleanerInfo->position.row;
 800271a:	882a      	ldrh	r2, [r5, #0]
  	uint16_t current_col = cleanerInfo->position.col;
 800271c:	8869      	ldrh	r1, [r5, #2]
  	switch (cleanerInfo->direction) {
 800271e:	2b02      	cmp	r3, #2
 8002720:	d059      	beq.n	80027d6 <move_cleaner_to_adjacent_position.isra.0+0x1fa>
 8002722:	d80c      	bhi.n	800273e <move_cleaner_to_adjacent_position.isra.0+0x162>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d059      	beq.n	80027dc <move_cleaner_to_adjacent_position.isra.0+0x200>
  	case RIGHT: current_col++; break;
 8002728:	3101      	adds	r1, #1
 800272a:	b289      	uxth	r1, r1
  	return true;
 800272c:	2001      	movs	r0, #1
		cleanerInfo->position.row = current_row;
 800272e:	802a      	strh	r2, [r5, #0]
		cleanerInfo->position.col = current_col;
 8002730:	8069      	strh	r1, [r5, #2]
}
 8002732:	bcf0      	pop	{r4, r5, r6, r7}
 8002734:	46bb      	mov	fp, r7
 8002736:	46b2      	mov	sl, r6
 8002738:	46a9      	mov	r9, r5
 800273a:	46a0      	mov	r8, r4
 800273c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  	switch (cleanerInfo->direction) {
 800273e:	2b03      	cmp	r3, #3
 8002740:	d1f4      	bne.n	800272c <move_cleaner_to_adjacent_position.isra.0+0x150>
  	case LEFT: current_col--; break;
 8002742:	3901      	subs	r1, #1
 8002744:	b289      	uxth	r1, r1
 8002746:	e7f1      	b.n	800272c <move_cleaner_to_adjacent_position.isra.0+0x150>
  HAL_GPIO_WritePin(motorsInfo->left2_GPIOType, motorsInfo->left2_pin, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	89a1      	ldrh	r1, [r4, #12]
 800274c:	68a0      	ldr	r0, [r4, #8]
 800274e:	f000 ffb3 	bl	80036b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorsInfo->right1_GPIOType, motorsInfo->right1_pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	8aa1      	ldrh	r1, [r4, #20]
 8002756:	6920      	ldr	r0, [r4, #16]
 8002758:	f000 ffae 	bl	80036b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_SET); // CW
 800275c:	2201      	movs	r2, #1
 800275e:	88a1      	ldrh	r1, [r4, #4]
 8002760:	6820      	ldr	r0, [r4, #0]
 8002762:	f000 ffa9 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right2_GPIOType, motorsInfo->right2_pin, GPIO_PIN_SET); // ACW
 8002766:	2201      	movs	r2, #1
 8002768:	8ba1      	ldrh	r1, [r4, #28]
 800276a:	69a0      	ldr	r0, [r4, #24]
 800276c:	f000 ffa4 	bl	80036b8 <HAL_GPIO_WritePin>
  HAL_Delay(undo_delay);
 8002770:	4640      	mov	r0, r8
 8002772:	f000 fe49 	bl	8003408 <HAL_Delay>
  HAL_GPIO_WritePin(motorsInfo->left1_GPIOType, motorsInfo->left1_pin, GPIO_PIN_RESET);
 8002776:	2200      	movs	r2, #0
 8002778:	88a1      	ldrh	r1, [r4, #4]
 800277a:	6820      	ldr	r0, [r4, #0]
 800277c:	f000 ff9c 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motorsInfo->right2_GPIOType, motorsInfo->right2_pin, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	8ba1      	ldrh	r1, [r4, #28]
 8002784:	69a0      	ldr	r0, [r4, #24]
 8002786:	f000 ff97 	bl	80036b8 <HAL_GPIO_WritePin>
		mapInfo->map[target_position->row][target_position->col] = UNAVAILABLE;
 800278a:	465a      	mov	r2, fp
 800278c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800278e:	6811      	ldr	r1, [r2, #0]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	585b      	ldr	r3, [r3, r1]
 8002798:	2100      	movs	r1, #0
 800279a:	8812      	ldrh	r2, [r2, #0]
	return false;
 800279c:	2000      	movs	r0, #0
		mapInfo->map[target_position->row][target_position->col] = UNAVAILABLE;
 800279e:	5499      	strb	r1, [r3, r2]
	return is_move_successful;
 80027a0:	e7c7      	b.n	8002732 <move_cleaner_to_adjacent_position.isra.0+0x156>
		target_dir = UP;
 80027a2:	2300      	movs	r3, #0
 80027a4:	4698      	mov	r8, r3
	if ((current_dir == UP && target_dir == RIGHT) ||
 80027a6:	2901      	cmp	r1, #1
 80027a8:	d100      	bne.n	80027ac <move_cleaner_to_adjacent_position.isra.0+0x1d0>
 80027aa:	e74a      	b.n	8002642 <move_cleaner_to_adjacent_position.isra.0+0x66>
		  (current_dir == RIGHT && target_dir == DOWN) ||
 80027ac:	2902      	cmp	r1, #2
 80027ae:	d100      	bne.n	80027b2 <move_cleaner_to_adjacent_position.isra.0+0x1d6>
 80027b0:	e747      	b.n	8002642 <move_cleaner_to_adjacent_position.isra.0+0x66>
		  (current_dir == DOWN && target_dir == LEFT) ||
 80027b2:	2903      	cmp	r1, #3
 80027b4:	d000      	beq.n	80027b8 <move_cleaner_to_adjacent_position.isra.0+0x1dc>
 80027b6:	e742      	b.n	800263e <move_cleaner_to_adjacent_position.isra.0+0x62>
 80027b8:	e76a      	b.n	8002690 <move_cleaner_to_adjacent_position.isra.0+0xb4>
		target_dir = LEFT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	4698      	mov	r8, r3
	else if (current_dir != target_dir) {
 80027be:	e740      	b.n	8002642 <move_cleaner_to_adjacent_position.isra.0+0x66>
	if ((current_dir == UP && target_dir == RIGHT) ||
 80027c0:	2901      	cmp	r1, #1
 80027c2:	d100      	bne.n	80027c6 <move_cleaner_to_adjacent_position.isra.0+0x1ea>
 80027c4:	e781      	b.n	80026ca <move_cleaner_to_adjacent_position.isra.0+0xee>
		target_dir = RIGHT;
 80027c6:	2301      	movs	r3, #1
 80027c8:	4698      	mov	r8, r3
 80027ca:	e73a      	b.n	8002642 <move_cleaner_to_adjacent_position.isra.0+0x66>
	if ((current_dir == UP && target_dir == RIGHT) ||
 80027cc:	2900      	cmp	r1, #0
 80027ce:	d108      	bne.n	80027e2 <move_cleaner_to_adjacent_position.isra.0+0x206>
		  (current_dir == RIGHT && target_dir == DOWN) ||
 80027d0:	2302      	movs	r3, #2
 80027d2:	4698      	mov	r8, r3
 80027d4:	e735      	b.n	8002642 <move_cleaner_to_adjacent_position.isra.0+0x66>
  	case DOWN: current_row++; break;
 80027d6:	3201      	adds	r2, #1
 80027d8:	b292      	uxth	r2, r2
 80027da:	e7a7      	b.n	800272c <move_cleaner_to_adjacent_position.isra.0+0x150>
  	case UP: current_row--; break;
 80027dc:	3a01      	subs	r2, #1
 80027de:	b292      	uxth	r2, r2
 80027e0:	e7a4      	b.n	800272c <move_cleaner_to_adjacent_position.isra.0+0x150>
	if ((current_dir == UP && target_dir == RIGHT) ||
 80027e2:	2901      	cmp	r1, #1
 80027e4:	d100      	bne.n	80027e8 <move_cleaner_to_adjacent_position.isra.0+0x20c>
 80027e6:	e753      	b.n	8002690 <move_cleaner_to_adjacent_position.isra.0+0xb4>
		  (current_dir == RIGHT && target_dir == DOWN) ||
 80027e8:	2902      	cmp	r1, #2
 80027ea:	d100      	bne.n	80027ee <move_cleaner_to_adjacent_position.isra.0+0x212>
 80027ec:	e76d      	b.n	80026ca <move_cleaner_to_adjacent_position.isra.0+0xee>
 80027ee:	e7ef      	b.n	80027d0 <move_cleaner_to_adjacent_position.isra.0+0x1f4>
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 80027f0:	2195      	movs	r1, #149	; 0x95
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <move_cleaner_to_adjacent_position.isra.0+0x228>)
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <move_cleaner_to_adjacent_position.isra.0+0x22c>)
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <move_cleaner_to_adjacent_position.isra.0+0x230>)
 80027f8:	f002 f9b4 	bl	8004b64 <__assert_func>
 80027fc:	20000004 	.word	0x20000004
 8002800:	20000000 	.word	0x20000000
 8002804:	08005eb4 	.word	0x08005eb4
 8002808:	08005f24 	.word	0x08005f24
 800280c:	08005efc 	.word	0x08005efc

08002810 <find_first_around_cell.isra.0>:
static bool find_first_around_cell(const MapPosition* start,
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	46de      	mov	lr, fp
 8002814:	4645      	mov	r5, r8
 8002816:	4657      	mov	r7, sl
 8002818:	464e      	mov	r6, r9
 800281a:	b5e0      	push	{r5, r6, r7, lr}
 800281c:	b09d      	sub	sp, #116	; 0x74
 800281e:	9303      	str	r3, [sp, #12]
 8002820:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002822:	4ea2      	ldr	r6, [pc, #648]	; (8002aac <find_first_around_cell.isra.0+0x29c>)
 8002824:	af05      	add	r7, sp, #20
 8002826:	ad16      	add	r5, sp, #88	; 0x58
 8002828:	4698      	mov	r8, r3
 800282a:	ab26      	add	r3, sp, #152	; 0x98
 800282c:	65bb      	str	r3, [r7, #88]	; 0x58
 800282e:	4693      	mov	fp, r2
 8002830:	002b      	movs	r3, r5
 8002832:	0032      	movs	r2, r6
 8002834:	9001      	str	r0, [sp, #4]
 8002836:	9100      	str	r1, [sp, #0]
 8002838:	4689      	mov	r9, r1
 800283a:	4682      	mov	sl, r0
 800283c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800283e:	c313      	stmia	r3!, {r0, r1, r4}
 8002840:	ca12      	ldmia	r2!, {r1, r4}
 8002842:	c312      	stmia	r3!, {r1, r4}
 8002844:	4b9a      	ldr	r3, [pc, #616]	; (8002ab0 <find_first_around_cell.isra.0+0x2a0>)
 8002846:	a91b      	add	r1, sp, #108	; 0x6c
 8002848:	0028      	movs	r0, r5
 800284a:	612b      	str	r3, [r5, #16]
 800284c:	60ef      	str	r7, [r5, #12]
 800284e:	f7fd fd73 	bl	8000338 <__clear_cache>
 8002852:	0032      	movs	r2, r6
 8002854:	ab11      	add	r3, sp, #68	; 0x44
 8002856:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002858:	c313      	stmia	r3!, {r0, r1, r4}
 800285a:	ca12      	ldmia	r2!, {r1, r4}
 800285c:	c312      	stmia	r3!, {r1, r4}
 800285e:	4b95      	ldr	r3, [pc, #596]	; (8002ab4 <find_first_around_cell.isra.0+0x2a4>)
 8002860:	0029      	movs	r1, r5
 8002862:	9315      	str	r3, [sp, #84]	; 0x54
 8002864:	ab11      	add	r3, sp, #68	; 0x44
 8002866:	0018      	movs	r0, r3
 8002868:	9714      	str	r7, [sp, #80]	; 0x50
 800286a:	f7fd fd65 	bl	8000338 <__clear_cache>
 800286e:	0032      	movs	r2, r6
 8002870:	ab0c      	add	r3, sp, #48	; 0x30
 8002872:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002874:	c313      	stmia	r3!, {r0, r1, r4}
 8002876:	ca12      	ldmia	r2!, {r1, r4}
 8002878:	c312      	stmia	r3!, {r1, r4}
 800287a:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <find_first_around_cell.isra.0+0x2a8>)
 800287c:	970f      	str	r7, [sp, #60]	; 0x3c
 800287e:	9310      	str	r3, [sp, #64]	; 0x40
 8002880:	ab11      	add	r3, sp, #68	; 0x44
 8002882:	0019      	movs	r1, r3
 8002884:	ab0c      	add	r3, sp, #48	; 0x30
 8002886:	0018      	movs	r0, r3
 8002888:	f7fd fd56 	bl	8000338 <__clear_cache>
 800288c:	ab07      	add	r3, sp, #28
 800288e:	ce16      	ldmia	r6!, {r1, r2, r4}
 8002890:	c316      	stmia	r3!, {r1, r2, r4}
 8002892:	ce14      	ldmia	r6!, {r2, r4}
 8002894:	c314      	stmia	r3!, {r2, r4}
 8002896:	4b89      	ldr	r3, [pc, #548]	; (8002abc <find_first_around_cell.isra.0+0x2ac>)
 8002898:	970a      	str	r7, [sp, #40]	; 0x28
 800289a:	930b      	str	r3, [sp, #44]	; 0x2c
 800289c:	ab0c      	add	r3, sp, #48	; 0x30
 800289e:	0019      	movs	r1, r3
 80028a0:	ab07      	add	r3, sp, #28
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7fd fd48 	bl	8000338 <__clear_cache>
	uint16_t max_radius = max(
 80028a8:	4653      	mov	r3, sl
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	465b      	mov	r3, fp
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	4659      	mov	r1, fp
 80028b2:	469c      	mov	ip, r3
 80028b4:	464b      	mov	r3, r9
 80028b6:	88c8      	ldrh	r0, [r1, #6]
 80028b8:	4661      	mov	r1, ip
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	1a89      	subs	r1, r1, r2
 80028be:	0016      	movs	r6, r2
 80028c0:	3901      	subs	r1, #1
 80028c2:	429a      	cmp	r2, r3
 80028c4:	da00      	bge.n	80028c8 <find_first_around_cell.isra.0+0xb8>
 80028c6:	001e      	movs	r6, r3
 80028c8:	42b1      	cmp	r1, r6
 80028ca:	da00      	bge.n	80028ce <find_first_around_cell.isra.0+0xbe>
 80028cc:	0031      	movs	r1, r6
 80028ce:	1ac6      	subs	r6, r0, r3
 80028d0:	3e01      	subs	r6, #1
 80028d2:	42b1      	cmp	r1, r6
 80028d4:	da00      	bge.n	80028d8 <find_first_around_cell.isra.0+0xc8>
 80028d6:	0031      	movs	r1, r6
 80028d8:	b28e      	uxth	r6, r1
 80028da:	9602      	str	r6, [sp, #8]
	for (uint16_t radius = 1; radius <= max_radius; radius++) {
 80028dc:	2900      	cmp	r1, #0
 80028de:	d100      	bne.n	80028e2 <find_first_around_cell.isra.0+0xd2>
 80028e0:	e0e2      	b.n	8002aa8 <find_first_around_cell.isra.0+0x298>
 80028e2:	2601      	movs	r6, #1
					lambda(MapPosition, (uint16_t i), {
 80028e4:	4335      	orrs	r5, r6
 80028e6:	46a9      	mov	r9, r5
 80028e8:	465c      	mov	r4, fp
 80028ea:	e029      	b.n	8002940 <find_first_around_cell.isra.0+0x130>
		if (!is_cell_found && is_column_valid(mapInfo, start->col + radius)) {
 80028ec:	9b00      	ldr	r3, [sp, #0]
 80028ee:	0020      	movs	r0, r4
 80028f0:	8819      	ldrh	r1, [r3, #0]
 80028f2:	1871      	adds	r1, r6, r1
 80028f4:	b289      	uxth	r1, r1
 80028f6:	f000 fcef 	bl	80032d8 <is_column_valid>
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d15f      	bne.n	80029be <find_first_around_cell.isra.0+0x1ae>
		if (!is_cell_found && is_row_valid(mapInfo, start->row + radius))
 80028fe:	9b01      	ldr	r3, [sp, #4]
 8002900:	0020      	movs	r0, r4
 8002902:	8819      	ldrh	r1, [r3, #0]
 8002904:	1871      	adds	r1, r6, r1
 8002906:	b289      	uxth	r1, r1
 8002908:	f000 fce0 	bl	80032cc <is_row_valid>
 800290c:	2800      	cmp	r0, #0
 800290e:	d000      	beq.n	8002912 <find_first_around_cell.isra.0+0x102>
 8002910:	e07b      	b.n	8002a0a <find_first_around_cell.isra.0+0x1fa>
		if (!is_cell_found && is_column_valid(mapInfo, start->col - radius))
 8002912:	9b00      	ldr	r3, [sp, #0]
 8002914:	0020      	movs	r0, r4
 8002916:	8819      	ldrh	r1, [r3, #0]
 8002918:	1b89      	subs	r1, r1, r6
 800291a:	b289      	uxth	r1, r1
 800291c:	f000 fcdc 	bl	80032d8 <is_column_valid>
 8002920:	2800      	cmp	r0, #0
 8002922:	d000      	beq.n	8002926 <find_first_around_cell.isra.0+0x116>
 8002924:	e091      	b.n	8002a4a <find_first_around_cell.isra.0+0x23a>
	for (uint16_t radius = 1; radius <= max_radius; radius++) {
 8002926:	3601      	adds	r6, #1
 8002928:	9b02      	ldr	r3, [sp, #8]
 800292a:	b2b6      	uxth	r6, r6
 800292c:	42b3      	cmp	r3, r6
 800292e:	d200      	bcs.n	8002932 <find_first_around_cell.isra.0+0x122>
 8002930:	e0ba      	b.n	8002aa8 <find_first_around_cell.isra.0+0x298>
 8002932:	88a1      	ldrh	r1, [r4, #4]
 8002934:	9b01      	ldr	r3, [sp, #4]
 8002936:	468c      	mov	ip, r1
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	9b00      	ldr	r3, [sp, #0]
 800293c:	88e0      	ldrh	r0, [r4, #6]
 800293e:	881b      	ldrh	r3, [r3, #0]
		uint16_t up_limit = max(0, start->row - radius);
 8002940:	1b91      	subs	r1, r2, r6
 8002942:	43cd      	mvns	r5, r1
 8002944:	17ed      	asrs	r5, r5, #31
 8002946:	400d      	ands	r5, r1
 8002948:	80fd      	strh	r5, [r7, #6]
		uint16_t right_limit = min(mapInfo->column_count - 1, start->col + radius);
 800294a:	3801      	subs	r0, #1
 800294c:	18f5      	adds	r5, r6, r3
 800294e:	42a8      	cmp	r0, r5
 8002950:	dd00      	ble.n	8002954 <find_first_around_cell.isra.0+0x144>
 8002952:	0028      	movs	r0, r5
 8002954:	80b8      	strh	r0, [r7, #4]
		uint16_t down_limit = min(mapInfo->row_count - 1, start->row + radius);
 8002956:	4660      	mov	r0, ip
 8002958:	1992      	adds	r2, r2, r6
 800295a:	3801      	subs	r0, #1
 800295c:	4290      	cmp	r0, r2
 800295e:	dd00      	ble.n	8002962 <find_first_around_cell.isra.0+0x152>
 8002960:	0010      	movs	r0, r2
		uint16_t left_limit = max(0, start->col - radius);
 8002962:	1b9b      	subs	r3, r3, r6
 8002964:	43da      	mvns	r2, r3
 8002966:	17d2      	asrs	r2, r2, #31
		uint16_t down_limit = min(mapInfo->row_count - 1, start->row + radius);
 8002968:	8078      	strh	r0, [r7, #2]
		uint16_t left_limit = max(0, start->col - radius);
 800296a:	4013      	ands	r3, r2
		if (is_row_valid(mapInfo, start->row - radius)) {
 800296c:	0020      	movs	r0, r4
 800296e:	b289      	uxth	r1, r1
		uint16_t left_limit = max(0, start->col - radius);
 8002970:	803b      	strh	r3, [r7, #0]
		if (is_row_valid(mapInfo, start->row - radius)) {
 8002972:	f000 fcab 	bl	80032cc <is_row_valid>
 8002976:	2800      	cmp	r0, #0
 8002978:	d0b8      	beq.n	80028ec <find_first_around_cell.isra.0+0xdc>
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit, right_limit,
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	883d      	ldrh	r5, [r7, #0]
 800297e:	469a      	mov	sl, r3
	for (uint16_t i = start_index; i < excl_end_index; i++) {
 8002980:	429d      	cmp	r5, r3
 8002982:	d2b3      	bcs.n	80028ec <find_first_around_cell.isra.0+0xdc>
 8002984:	4643      	mov	r3, r8
 8002986:	46b0      	mov	r8, r6
 8002988:	9326      	str	r3, [sp, #152]	; 0x98
 800298a:	001e      	movs	r6, r3
 800298c:	e003      	b.n	8002996 <find_first_around_cell.isra.0+0x186>
 800298e:	3501      	adds	r5, #1
 8002990:	b2ad      	uxth	r5, r5
 8002992:	45aa      	cmp	sl, r5
 8002994:	d92f      	bls.n	80029f6 <find_first_around_cell.isra.0+0x1e6>
		MapPosition cur_cell = position_generator(i);
 8002996:	0028      	movs	r0, r5
 8002998:	47c8      	blx	r9
		if (condition(mapInfo, &cur_cell)) {
 800299a:	a904      	add	r1, sp, #16
		MapPosition cur_cell = position_generator(i);
 800299c:	9004      	str	r0, [sp, #16]
		if (condition(mapInfo, &cur_cell)) {
 800299e:	0020      	movs	r0, r4
 80029a0:	47b0      	blx	r6
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d0f3      	beq.n	800298e <find_first_around_cell.isra.0+0x17e>
			*target = cur_cell;
 80029a6:	9b04      	ldr	r3, [sp, #16]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	9a00      	ldr	r2, [sp, #0]
 80029ac:	9b03      	ldr	r3, [sp, #12]
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	b01d      	add	sp, #116	; 0x74
 80029b2:	bcf0      	pop	{r4, r5, r6, r7}
 80029b4:	46bb      	mov	fp, r7
 80029b6:	46b2      	mov	sl, r6
 80029b8:	46a9      	mov	r9, r5
 80029ba:	46a0      	mov	r8, r4
 80029bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					lambda(MapPosition, (uint16_t i), {
 80029be:	2201      	movs	r2, #1
 80029c0:	ab11      	add	r3, sp, #68	; 0x44
 80029c2:	4313      	orrs	r3, r2
 80029c4:	469b      	mov	fp, r3
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit, down_limit,
 80029c6:	88fd      	ldrh	r5, [r7, #6]
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	469a      	mov	sl, r3
	for (uint16_t i = start_index; i < excl_end_index; i++) {
 80029cc:	429d      	cmp	r5, r3
 80029ce:	d300      	bcc.n	80029d2 <find_first_around_cell.isra.0+0x1c2>
 80029d0:	e795      	b.n	80028fe <find_first_around_cell.isra.0+0xee>
 80029d2:	4643      	mov	r3, r8
 80029d4:	46b0      	mov	r8, r6
 80029d6:	9326      	str	r3, [sp, #152]	; 0x98
 80029d8:	001e      	movs	r6, r3
 80029da:	e003      	b.n	80029e4 <find_first_around_cell.isra.0+0x1d4>
 80029dc:	3501      	adds	r5, #1
 80029de:	b2ad      	uxth	r5, r5
 80029e0:	45aa      	cmp	sl, r5
 80029e2:	d90d      	bls.n	8002a00 <find_first_around_cell.isra.0+0x1f0>
		MapPosition cur_cell = position_generator(i);
 80029e4:	0028      	movs	r0, r5
 80029e6:	47d8      	blx	fp
		if (condition(mapInfo, &cur_cell)) {
 80029e8:	a904      	add	r1, sp, #16
		MapPosition cur_cell = position_generator(i);
 80029ea:	9004      	str	r0, [sp, #16]
		if (condition(mapInfo, &cur_cell)) {
 80029ec:	0020      	movs	r0, r4
 80029ee:	47b0      	blx	r6
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d0f3      	beq.n	80029dc <find_first_around_cell.isra.0+0x1cc>
 80029f4:	e7d7      	b.n	80029a6 <find_first_around_cell.isra.0+0x196>
 80029f6:	9626      	str	r6, [sp, #152]	; 0x98
 80029f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80029fa:	4646      	mov	r6, r8
 80029fc:	4698      	mov	r8, r3
 80029fe:	e775      	b.n	80028ec <find_first_around_cell.isra.0+0xdc>
 8002a00:	9626      	str	r6, [sp, #152]	; 0x98
 8002a02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002a04:	4646      	mov	r6, r8
 8002a06:	4698      	mov	r8, r3
 8002a08:	e779      	b.n	80028fe <find_first_around_cell.isra.0+0xee>
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
 8002a0a:	88bb      	ldrh	r3, [r7, #4]
					lambda(MapPosition, (uint16_t i), {
 8002a0c:	2201      	movs	r2, #1
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
 8002a0e:	3301      	adds	r3, #1
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	469a      	mov	sl, r3
 8002a14:	883d      	ldrh	r5, [r7, #0]
					lambda(MapPosition, (uint16_t i), {
 8002a16:	ab0c      	add	r3, sp, #48	; 0x30
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
 8002a18:	3501      	adds	r5, #1
					lambda(MapPosition, (uint16_t i), {
 8002a1a:	4313      	orrs	r3, r2
			is_cell_found = visit_boundary_for_search(mapInfo, left_limit + 1, right_limit + 1,
 8002a1c:	b2ad      	uxth	r5, r5
					lambda(MapPosition, (uint16_t i), {
 8002a1e:	469b      	mov	fp, r3
	for (uint16_t i = start_index; i < excl_end_index; i++) {
 8002a20:	4555      	cmp	r5, sl
 8002a22:	d300      	bcc.n	8002a26 <find_first_around_cell.isra.0+0x216>
 8002a24:	e775      	b.n	8002912 <find_first_around_cell.isra.0+0x102>
 8002a26:	4643      	mov	r3, r8
 8002a28:	46b0      	mov	r8, r6
 8002a2a:	9326      	str	r3, [sp, #152]	; 0x98
 8002a2c:	001e      	movs	r6, r3
 8002a2e:	e003      	b.n	8002a38 <find_first_around_cell.isra.0+0x228>
 8002a30:	3501      	adds	r5, #1
 8002a32:	b2ad      	uxth	r5, r5
 8002a34:	45aa      	cmp	sl, r5
 8002a36:	d928      	bls.n	8002a8a <find_first_around_cell.isra.0+0x27a>
		MapPosition cur_cell = position_generator(i);
 8002a38:	0028      	movs	r0, r5
 8002a3a:	47d8      	blx	fp
		if (condition(mapInfo, &cur_cell)) {
 8002a3c:	a904      	add	r1, sp, #16
		MapPosition cur_cell = position_generator(i);
 8002a3e:	9004      	str	r0, [sp, #16]
		if (condition(mapInfo, &cur_cell)) {
 8002a40:	0020      	movs	r0, r4
 8002a42:	47b0      	blx	r6
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d0f3      	beq.n	8002a30 <find_first_around_cell.isra.0+0x220>
 8002a48:	e7ad      	b.n	80029a6 <find_first_around_cell.isra.0+0x196>
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
 8002a4a:	887b      	ldrh	r3, [r7, #2]
					lambda(MapPosition, (uint16_t i), {
 8002a4c:	2201      	movs	r2, #1
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	469a      	mov	sl, r3
 8002a54:	88fd      	ldrh	r5, [r7, #6]
					lambda(MapPosition, (uint16_t i), {
 8002a56:	ab07      	add	r3, sp, #28
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
 8002a58:	3501      	adds	r5, #1
					lambda(MapPosition, (uint16_t i), {
 8002a5a:	4313      	orrs	r3, r2
			is_cell_found = visit_boundary_for_search(mapInfo, up_limit + 1, down_limit + 1,
 8002a5c:	b2ad      	uxth	r5, r5
					lambda(MapPosition, (uint16_t i), {
 8002a5e:	469b      	mov	fp, r3
	for (uint16_t i = start_index; i < excl_end_index; i++) {
 8002a60:	4555      	cmp	r5, sl
 8002a62:	d300      	bcc.n	8002a66 <find_first_around_cell.isra.0+0x256>
 8002a64:	e75f      	b.n	8002926 <find_first_around_cell.isra.0+0x116>
 8002a66:	4643      	mov	r3, r8
 8002a68:	46b0      	mov	r8, r6
 8002a6a:	9326      	str	r3, [sp, #152]	; 0x98
 8002a6c:	001e      	movs	r6, r3
 8002a6e:	e003      	b.n	8002a78 <find_first_around_cell.isra.0+0x268>
 8002a70:	3501      	adds	r5, #1
 8002a72:	b2ad      	uxth	r5, r5
 8002a74:	45aa      	cmp	sl, r5
 8002a76:	d90d      	bls.n	8002a94 <find_first_around_cell.isra.0+0x284>
		MapPosition cur_cell = position_generator(i);
 8002a78:	0028      	movs	r0, r5
 8002a7a:	47d8      	blx	fp
		if (condition(mapInfo, &cur_cell)) {
 8002a7c:	a904      	add	r1, sp, #16
		MapPosition cur_cell = position_generator(i);
 8002a7e:	9004      	str	r0, [sp, #16]
		if (condition(mapInfo, &cur_cell)) {
 8002a80:	0020      	movs	r0, r4
 8002a82:	47b0      	blx	r6
 8002a84:	2800      	cmp	r0, #0
 8002a86:	d0f3      	beq.n	8002a70 <find_first_around_cell.isra.0+0x260>
 8002a88:	e78d      	b.n	80029a6 <find_first_around_cell.isra.0+0x196>
 8002a8a:	9626      	str	r6, [sp, #152]	; 0x98
 8002a8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002a8e:	4646      	mov	r6, r8
 8002a90:	4698      	mov	r8, r3
 8002a92:	e73e      	b.n	8002912 <find_first_around_cell.isra.0+0x102>
 8002a94:	9626      	str	r6, [sp, #152]	; 0x98
 8002a96:	4646      	mov	r6, r8
 8002a98:	9b26      	ldr	r3, [sp, #152]	; 0x98
	for (uint16_t radius = 1; radius <= max_radius; radius++) {
 8002a9a:	3601      	adds	r6, #1
 8002a9c:	4698      	mov	r8, r3
 8002a9e:	9b02      	ldr	r3, [sp, #8]
 8002aa0:	b2b6      	uxth	r6, r6
 8002aa2:	42b3      	cmp	r3, r6
 8002aa4:	d300      	bcc.n	8002aa8 <find_first_around_cell.isra.0+0x298>
 8002aa6:	e744      	b.n	8002932 <find_first_around_cell.isra.0+0x122>
	return false;
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e781      	b.n	80029b0 <find_first_around_cell.isra.0+0x1a0>
 8002aac:	08005e6c 	.word	0x08005e6c
 8002ab0:	0800256d 	.word	0x0800256d
 8002ab4:	0800257d 	.word	0x0800257d
 8002ab8:	0800258d 	.word	0x0800258d
 8002abc:	0800259d 	.word	0x0800259d

08002ac0 <move_cleaner_to>:
														const MapPosition* target_position) {
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	4657      	mov	r7, sl
 8002ac4:	464e      	mov	r6, r9
 8002ac6:	46de      	mov	lr, fp
 8002ac8:	b5c0      	push	{r6, r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	001e      	movs	r6, r3
 8002ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ad0:	4692      	mov	sl, r2
 8002ad2:	469b      	mov	fp, r3
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002ad4:	465a      	mov	r2, fp
 8002ad6:	881b      	ldrh	r3, [r3, #0]
														const MapPosition* target_position) {
 8002ad8:	4689      	mov	r9, r1
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002ada:	6801      	ldr	r1, [r0, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	8852      	ldrh	r2, [r2, #2]
 8002ae0:	585b      	ldr	r3, [r3, r1]
														const MapPosition* target_position) {
 8002ae2:	0007      	movs	r7, r0
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d036      	beq.n	8002b58 <move_cleaner_to+0x98>
	while (!are_MapPositions_equal(&cleanerInfo->position, target_position)) {
 8002aea:	4659      	mov	r1, fp
 8002aec:	0030      	movs	r0, r6
 8002aee:	f000 fc07 	bl	8003300 <are_MapPositions_equal>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d12a      	bne.n	8002b4c <move_cleaner_to+0x8c>
		bool does_path_exist = find_best_path(&cleanerInfo->position, target_position, mapInfo, &path, &path_length);
 8002af6:	ab03      	add	r3, sp, #12
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	003a      	movs	r2, r7
 8002afc:	4659      	mov	r1, fp
 8002afe:	0030      	movs	r0, r6
 8002b00:	ab02      	add	r3, sp, #8
 8002b02:	f7ff fce1 	bl	80024c8 <find_best_path>
		if (!does_path_exist)
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d020      	beq.n	8002b4c <move_cleaner_to+0x8c>
		for (size_t i = 1; i < path_length; i++) {
 8002b0a:	9b03      	ldr	r3, [sp, #12]
 8002b0c:	2501      	movs	r5, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d804      	bhi.n	8002b1c <move_cleaner_to+0x5c>
 8002b12:	e012      	b.n	8002b3a <move_cleaner_to+0x7a>
 8002b14:	9b03      	ldr	r3, [sp, #12]
 8002b16:	3501      	adds	r5, #1
 8002b18:	429d      	cmp	r5, r3
 8002b1a:	d20e      	bcs.n	8002b3a <move_cleaner_to+0x7a>
			is_move_successful = move_cleaner_to_adjacent_position(mapInfo,
 8002b1c:	9b02      	ldr	r3, [sp, #8]
 8002b1e:	00ac      	lsls	r4, r5, #2
 8002b20:	469c      	mov	ip, r3
 8002b22:	4464      	add	r4, ip
 8002b24:	1ca3      	adds	r3, r4, #2
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	4652      	mov	r2, sl
 8002b2a:	0033      	movs	r3, r6
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	0038      	movs	r0, r7
 8002b30:	9400      	str	r4, [sp, #0]
 8002b32:	f7ff fd53 	bl	80025dc <move_cleaner_to_adjacent_position.isra.0>
			if (!is_move_successful)
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d1ec      	bne.n	8002b14 <move_cleaner_to+0x54>
		free(path);
 8002b3a:	9802      	ldr	r0, [sp, #8]
 8002b3c:	f002 f884 	bl	8004c48 <free>
	while (!are_MapPositions_equal(&cleanerInfo->position, target_position)) {
 8002b40:	4659      	mov	r1, fp
 8002b42:	0030      	movs	r0, r6
 8002b44:	f000 fbdc 	bl	8003300 <are_MapPositions_equal>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d0d4      	beq.n	8002af6 <move_cleaner_to+0x36>
}
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bce0      	pop	{r5, r6, r7}
 8002b50:	46bb      	mov	fp, r7
 8002b52:	46b2      	mov	sl, r6
 8002b54:	46a9      	mov	r9, r5
 8002b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert(mapInfo->map[target_position->row][target_position->col] != UNAVAILABLE);
 8002b58:	216f      	movs	r1, #111	; 0x6f
 8002b5a:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <move_cleaner_to+0xa4>)
 8002b5c:	4a02      	ldr	r2, [pc, #8]	; (8002b68 <move_cleaner_to+0xa8>)
 8002b5e:	4803      	ldr	r0, [pc, #12]	; (8002b6c <move_cleaner_to+0xac>)
 8002b60:	f002 f800 	bl	8004b64 <__assert_func>
 8002b64:	08005eb4 	.word	0x08005eb4
 8002b68:	08005f14 	.word	0x08005f14
 8002b6c:	08005efc 	.word	0x08005efc

08002b70 <start_drive>:
								CleanComponentsInfo* cleanComponentsInfo) {
 8002b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b72:	4657      	mov	r7, sl
 8002b74:	464e      	mov	r6, r9
 8002b76:	4645      	mov	r5, r8
 8002b78:	46de      	mov	lr, fp
 8002b7a:	b5e0      	push	{r5, r6, r7, lr}
 8002b7c:	b099      	sub	sp, #100	; 0x64
 8002b7e:	9106      	str	r1, [sp, #24]
 8002b80:	9207      	str	r2, [sp, #28]
	for (int r = 0; r < mapInfo->row_count; r++) {
 8002b82:	8886      	ldrh	r6, [r0, #4]
								CleanComponentsInfo* cleanComponentsInfo) {
 8002b84:	4680      	mov	r8, r0
 8002b86:	469a      	mov	sl, r3
	for (int r = 0; r < mapInfo->row_count; r++) {
 8002b88:	2e00      	cmp	r6, #0
 8002b8a:	d100      	bne.n	8002b8e <start_drive+0x1e>
 8002b8c:	e0c7      	b.n	8002d1e <start_drive+0x1ae>
 8002b8e:	2500      	movs	r5, #0
 8002b90:	4647      	mov	r7, r8
		for (int c = 0; c < mapInfo->column_count; c++) {
 8002b92:	88c0      	ldrh	r0, [r0, #6]
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d100      	bne.n	8002b9a <start_drive+0x2a>
 8002b98:	e0bd      	b.n	8002d16 <start_drive+0x1a6>
			if (mapInfo->map[r][c] == CLEANER_POS) {
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	00ab      	lsls	r3, r5, #2
 8002b9e:	589a      	ldr	r2, [r3, r2]
		for (int c = 0; c < mapInfo->column_count; c++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e003      	b.n	8002bac <start_drive+0x3c>
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	4298      	cmp	r0, r3
 8002ba8:	dc00      	bgt.n	8002bac <start_drive+0x3c>
 8002baa:	e0b4      	b.n	8002d16 <start_drive+0x1a6>
			if (mapInfo->map[r][c] == CLEANER_POS) {
 8002bac:	5cd1      	ldrb	r1, [r2, r3]
 8002bae:	18d4      	adds	r4, r2, r3
 8002bb0:	2903      	cmp	r1, #3
 8002bb2:	d1f7      	bne.n	8002ba4 <start_drive+0x34>
 8002bb4:	46b8      	mov	r8, r7
				cleanerInfo->direction = UP;
 8002bb6:	af0f      	add	r7, sp, #60	; 0x3c
				cleanerInfo->position.col = c;
 8002bb8:	807b      	strh	r3, [r7, #2]
				cleanerInfo->direction = UP;
 8002bba:	2200      	movs	r2, #0
				mapInfo->map[r][c] = TO_CLEAN;
 8002bbc:	2301      	movs	r3, #1
				cleanerInfo->direction = UP;
 8002bbe:	713a      	strb	r2, [r7, #4]
				cleanerInfo->position.row = r;
 8002bc0:	803d      	strh	r5, [r7, #0]
				mapInfo->map[r][c] = TO_CLEAN;
 8002bc2:	7023      	strb	r3, [r4, #0]
	if (mapInfo->map[up_left_corner.row][up_left_corner.col] == TO_CLEAN) {
 8002bc4:	4643      	mov	r3, r8
 8002bc6:	681b      	ldr	r3, [r3, #0]
	MapPosition up_left_corner = { .row = 0, .col = 0 };
 8002bc8:	9211      	str	r2, [sp, #68]	; 0x44
	if (mapInfo->map[up_left_corner.row][up_left_corner.col] == TO_CLEAN) {
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d017      	beq.n	8002c02 <start_drive+0x92>
	bool is_cell_to_clean_found = find_first_around_cell(&up_left_corner, mapInfo, target_position,
 8002bd2:	ab11      	add	r3, sp, #68	; 0x44
 8002bd4:	a806      	add	r0, sp, #24
 8002bd6:	469b      	mov	fp, r3
 8002bd8:	4684      	mov	ip, r0
 8002bda:	212e      	movs	r1, #46	; 0x2e
 8002bdc:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <start_drive+0x214>)
 8002bde:	ac09      	add	r4, sp, #36	; 0x24
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	4642      	mov	r2, r8
 8002be4:	0023      	movs	r3, r4
 8002be6:	4658      	mov	r0, fp
 8002be8:	4461      	add	r1, ip
 8002bea:	f7ff fe11 	bl	8002810 <find_first_around_cell.isra.0>
	if (!is_start_cell_found)
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d109      	bne.n	8002c06 <start_drive+0x96>
		return 2;
 8002bf2:	3002      	adds	r0, #2
}
 8002bf4:	b019      	add	sp, #100	; 0x64
 8002bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8002bf8:	46bb      	mov	fp, r7
 8002bfa:	46b2      	mov	sl, r6
 8002bfc:	46a9      	mov	r9, r5
 8002bfe:	46a0      	mov	r8, r4
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*target_position = up_left_corner;
 8002c02:	9209      	str	r2, [sp, #36]	; 0x24
	if (!is_start_cell_found)
 8002c04:	ac09      	add	r4, sp, #36	; 0x24
	bool can_move_to_start_position = move_cleaner_to(mapInfo,
 8002c06:	003b      	movs	r3, r7
 8002c08:	4640      	mov	r0, r8
 8002c0a:	9a07      	ldr	r2, [sp, #28]
 8002c0c:	9906      	ldr	r1, [sp, #24]
 8002c0e:	9400      	str	r4, [sp, #0]
 8002c10:	f7ff ff56 	bl	8002ac0 <move_cleaner_to>
	if (!can_move_to_start_position)
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d100      	bne.n	8002c1a <start_drive+0xaa>
 8002c18:	e0b2      	b.n	8002d80 <start_drive+0x210>
	mapInfo->map[start_position.row][start_position.col] = ALREADY_CLEANED;
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	8823      	ldrh	r3, [r4, #0]
 8002c1e:	6809      	ldr	r1, [r1, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	585b      	ldr	r3, [r3, r1]
 8002c24:	2102      	movs	r1, #2
 8002c26:	8862      	ldrh	r2, [r4, #2]
			mapInfo->map[next_cell.row][next_cell.col] = ALREADY_CLEANED;
 8002c28:	46c3      	mov	fp, r8
	mapInfo->map[start_position.row][start_position.col] = ALREADY_CLEANED;
 8002c2a:	5499      	strb	r1, [r3, r2]
	while (is_cleaning_ongoing) {
 8002c2c:	ab12      	add	r3, sp, #72	; 0x48
 8002c2e:	4699      	mov	r9, r3
 8002c30:	2301      	movs	r3, #1
 8002c32:	464a      	mov	r2, r9
 8002c34:	431a      	orrs	r2, r3
 8002c36:	ab11      	add	r3, sp, #68	; 0x44
			mapInfo->map[next_cell.row][next_cell.col] = ALREADY_CLEANED;
 8002c38:	4698      	mov	r8, r3
 8002c3a:	9203      	str	r2, [sp, #12]
 8002c3c:	ad0b      	add	r5, sp, #44	; 0x2c
 8002c3e:	ac0a      	add	r4, sp, #40	; 0x28
static bool find_next_cell_while_cleaning(const CleanerInfo* cleanerInfo,
 8002c40:	4643      	mov	r3, r8
 8002c42:	aa22      	add	r2, sp, #136	; 0x88
 8002c44:	619a      	str	r2, [r3, #24]
 8002c46:	465a      	mov	r2, fp
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	4a4e      	ldr	r2, [pc, #312]	; (8002d88 <start_drive+0x218>)
 8002c4e:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002c50:	c343      	stmia	r3!, {r0, r1, r6}
 8002c52:	ca03      	ldmia	r2!, {r0, r1}
 8002c54:	c303      	stmia	r3!, {r0, r1}
 8002c56:	464b      	mov	r3, r9
 8002c58:	4642      	mov	r2, r8
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <start_drive+0x21c>)
 8002c5e:	a917      	add	r1, sp, #92	; 0x5c
 8002c60:	611a      	str	r2, [r3, #16]
 8002c62:	4648      	mov	r0, r9
 8002c64:	f7fd fb68 	bl	8000338 <__clear_cache>
	MapPosition top_boundary = { .row = current_position->row - 1, .col = current_position->col };
 8002c68:	883b      	ldrh	r3, [r7, #0]
	boundaries[0] = is_boundary(&top_boundary);
 8002c6a:	9e03      	ldr	r6, [sp, #12]
	MapPosition top_boundary = { .row = current_position->row - 1, .col = current_position->col };
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	802b      	strh	r3, [r5, #0]
 8002c70:	887b      	ldrh	r3, [r7, #2]
	boundaries[0] = is_boundary(&top_boundary);
 8002c72:	0028      	movs	r0, r5
	MapPosition top_boundary = { .row = current_position->row - 1, .col = current_position->col };
 8002c74:	806b      	strh	r3, [r5, #2]
	boundaries[0] = is_boundary(&top_boundary);
 8002c76:	47b0      	blx	r6
	MapPosition right_boundary = { .row = current_position->row, .col = current_position->col + 1 };
 8002c78:	883b      	ldrh	r3, [r7, #0]
 8002c7a:	aa06      	add	r2, sp, #24
 8002c7c:	8313      	strh	r3, [r2, #24]
	boundaries[0] = is_boundary(&top_boundary);
 8002c7e:	9004      	str	r0, [sp, #16]
	MapPosition right_boundary = { .row = current_position->row, .col = current_position->col + 1 };
 8002c80:	887b      	ldrh	r3, [r7, #2]
	boundaries[1] = is_boundary(&right_boundary);
 8002c82:	9603      	str	r6, [sp, #12]
	MapPosition right_boundary = { .row = current_position->row, .col = current_position->col + 1 };
 8002c84:	3301      	adds	r3, #1
 8002c86:	8353      	strh	r3, [r2, #26]
	boundaries[1] = is_boundary(&right_boundary);
 8002c88:	ab0c      	add	r3, sp, #48	; 0x30
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	47b0      	blx	r6
	MapPosition bottom_boundary = { .row = current_position->row + 1, .col = current_position->col };
 8002c8e:	883b      	ldrh	r3, [r7, #0]
 8002c90:	a906      	add	r1, sp, #24
 8002c92:	3301      	adds	r3, #1
 8002c94:	838b      	strh	r3, [r1, #28]
 8002c96:	887b      	ldrh	r3, [r7, #2]
	boundaries[1] = is_boundary(&right_boundary);
 8002c98:	0006      	movs	r6, r0
	MapPosition bottom_boundary = { .row = current_position->row + 1, .col = current_position->col };
 8002c9a:	83cb      	strh	r3, [r1, #30]
	boundaries[2] = is_boundary(&bottom_boundary);
 8002c9c:	a90d      	add	r1, sp, #52	; 0x34
 8002c9e:	0008      	movs	r0, r1
 8002ca0:	9903      	ldr	r1, [sp, #12]
 8002ca2:	4788      	blx	r1
	MapPosition left_boundary = { .row = current_position->row, .col = current_position->col - 1 };
 8002ca4:	883b      	ldrh	r3, [r7, #0]
 8002ca6:	aa06      	add	r2, sp, #24
	boundaries[2] = is_boundary(&bottom_boundary);
 8002ca8:	9005      	str	r0, [sp, #20]
	MapPosition left_boundary = { .row = current_position->row, .col = current_position->col - 1 };
 8002caa:	8413      	strh	r3, [r2, #32]
 8002cac:	887b      	ldrh	r3, [r7, #2]
	boundaries[3] = is_boundary(&left_boundary);
 8002cae:	9903      	ldr	r1, [sp, #12]
	MapPosition left_boundary = { .row = current_position->row, .col = current_position->col - 1 };
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	8453      	strh	r3, [r2, #34]	; 0x22
	boundaries[3] = is_boundary(&left_boundary);
 8002cb4:	ab0e      	add	r3, sp, #56	; 0x38
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	4788      	blx	r1
	if (boundaries[0] && boundaries[1] && boundaries[2] && boundaries[3])
 8002cba:	9b04      	ldr	r3, [sp, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d03f      	beq.n	8002d40 <start_drive+0x1d0>
 8002cc0:	2e00      	cmp	r6, #0
 8002cc2:	d045      	beq.n	8002d50 <start_drive+0x1e0>
 8002cc4:	9b05      	ldr	r3, [sp, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d04b      	beq.n	8002d62 <start_drive+0x1f2>
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d129      	bne.n	8002d22 <start_drive+0x1b2>
		*next_cell = left_boundary;
 8002cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cd0:	9304      	str	r3, [sp, #16]
 8002cd2:	6023      	str	r3, [r4, #0]
}

static void enable_cleaning(CleanComponentsInfo* cleanComponentsInfo) {
#ifndef __TESTING__
	HAL_GPIO_WritePin(cleanComponentsInfo->vacuum_GPIOType, cleanComponentsInfo->vacuum_pin, GPIO_PIN_SET);
 8002cd4:	4653      	mov	r3, sl
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	8899      	ldrh	r1, [r3, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	f000 fcec 	bl	80036b8 <HAL_GPIO_WritePin>
			move_cleaner_to_adjacent_position(mapInfo, obstacle_found, motorsInfo, &cleanerInfo, &next_cell);
 8002ce0:	aa06      	add	r2, sp, #24
 8002ce2:	4694      	mov	ip, r2
 8002ce4:	2312      	movs	r3, #18
 8002ce6:	4463      	add	r3, ip
 8002ce8:	9a07      	ldr	r2, [sp, #28]
 8002cea:	9906      	ldr	r1, [sp, #24]
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	4658      	mov	r0, fp
 8002cf0:	003b      	movs	r3, r7
 8002cf2:	9400      	str	r4, [sp, #0]
 8002cf4:	f7ff fc72 	bl	80025dc <move_cleaner_to_adjacent_position.isra.0>
#endif
}

static void disable_cleaning(CleanComponentsInfo* cleanComponentsInfo) {
#ifndef __TESTING__
	HAL_GPIO_WritePin(cleanComponentsInfo->vacuum_GPIOType, cleanComponentsInfo->vacuum_pin, GPIO_PIN_RESET);
 8002cf8:	4653      	mov	r3, sl
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	8899      	ldrh	r1, [r3, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	f000 fcda 	bl	80036b8 <HAL_GPIO_WritePin>
				mapInfo->map[next_cell.row][next_cell.col] = ALREADY_CLEANED;
 8002d04:	4659      	mov	r1, fp
 8002d06:	8823      	ldrh	r3, [r4, #0]
 8002d08:	6809      	ldr	r1, [r1, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	585b      	ldr	r3, [r3, r1]
 8002d0e:	2102      	movs	r1, #2
 8002d10:	8862      	ldrh	r2, [r4, #2]
 8002d12:	5499      	strb	r1, [r3, r2]
	while (is_cleaning_ongoing) {
 8002d14:	e794      	b.n	8002c40 <start_drive+0xd0>
	for (int r = 0; r < mapInfo->row_count; r++) {
 8002d16:	3501      	adds	r5, #1
 8002d18:	42b5      	cmp	r5, r6
 8002d1a:	da00      	bge.n	8002d1e <start_drive+0x1ae>
 8002d1c:	e73a      	b.n	8002b94 <start_drive+0x24>
		return 1;
 8002d1e:	2001      	movs	r0, #1
 8002d20:	e768      	b.n	8002bf4 <start_drive+0x84>
			is_cleaning_ongoing = find_first_around_cell(&cleanerInfo.position, mapInfo, &next_cell,
 8002d22:	a806      	add	r0, sp, #24
 8002d24:	4684      	mov	ip, r0
 8002d26:	2126      	movs	r1, #38	; 0x26
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <start_drive+0x220>)
 8002d2a:	465a      	mov	r2, fp
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	0038      	movs	r0, r7
 8002d30:	0023      	movs	r3, r4
 8002d32:	4461      	add	r1, ip
 8002d34:	f7ff fd6c 	bl	8002810 <find_first_around_cell.isra.0>
			if (is_cleaning_ongoing) {
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	d116      	bne.n	8002d6a <start_drive+0x1fa>
	return 0;
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	e759      	b.n	8002bf4 <start_drive+0x84>
	else if (boundaries[1] && !boundaries[2])
 8002d40:	2e00      	cmp	r6, #0
 8002d42:	d108      	bne.n	8002d56 <start_drive+0x1e6>
	else if (boundaries[2] && !boundaries[3])
 8002d44:	9b05      	ldr	r3, [sp, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d108      	bne.n	8002d5c <start_drive+0x1ec>
		*next_cell = top_boundary;
 8002d4a:	682b      	ldr	r3, [r5, #0]
 8002d4c:	6023      	str	r3, [r4, #0]
		if (is_cell_available) {
 8002d4e:	e7c1      	b.n	8002cd4 <start_drive+0x164>
		*next_cell = right_boundary;
 8002d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d52:	6023      	str	r3, [r4, #0]
		if (is_cell_available) {
 8002d54:	e7be      	b.n	8002cd4 <start_drive+0x164>
	else if (boundaries[1] && !boundaries[2])
 8002d56:	9b05      	ldr	r3, [sp, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <start_drive+0x1f2>
	else if (boundaries[2] && !boundaries[3])
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d1f4      	bne.n	8002d4a <start_drive+0x1da>
 8002d60:	e7b5      	b.n	8002cce <start_drive+0x15e>
		*next_cell = bottom_boundary;
 8002d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d64:	9304      	str	r3, [sp, #16]
 8002d66:	6023      	str	r3, [r4, #0]
		if (is_cell_available) {
 8002d68:	e7b4      	b.n	8002cd4 <start_drive+0x164>
				bool can_reach_next_cell = move_cleaner_to(mapInfo, obstacle_found, motorsInfo, &cleanerInfo, &next_cell);
 8002d6a:	003b      	movs	r3, r7
 8002d6c:	4658      	mov	r0, fp
 8002d6e:	9a07      	ldr	r2, [sp, #28]
 8002d70:	9906      	ldr	r1, [sp, #24]
 8002d72:	9400      	str	r4, [sp, #0]
 8002d74:	f7ff fea4 	bl	8002ac0 <move_cleaner_to>
				if (!can_reach_next_cell)
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d1c3      	bne.n	8002d04 <start_drive+0x194>
					return 4;
 8002d7c:	3004      	adds	r0, #4
 8002d7e:	e739      	b.n	8002bf4 <start_drive+0x84>
		return 3;
 8002d80:	2003      	movs	r0, #3
 8002d82:	e737      	b.n	8002bf4 <start_drive+0x84>
 8002d84:	08002565 	.word	0x08002565
 8002d88:	08005e6c 	.word	0x08005e6c
 8002d8c:	080025ad 	.word	0x080025ad
 8002d90:	0800254d 	.word	0x0800254d

08002d94 <set_buzzer.constprop.0>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

static void set_buzzer(int millisec) {
 8002d94:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002d96:	2580      	movs	r5, #128	; 0x80
 8002d98:	24a0      	movs	r4, #160	; 0xa0
 8002d9a:	016d      	lsls	r5, r5, #5
 8002d9c:	05e4      	lsls	r4, r4, #23
 8002d9e:	0029      	movs	r1, r5
 8002da0:	2201      	movs	r2, #1
 8002da2:	0020      	movs	r0, r4
 8002da4:	f000 fc88 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_Delay(millisec);
 8002da8:	20fa      	movs	r0, #250	; 0xfa
 8002daa:	0040      	lsls	r0, r0, #1
 8002dac:	f000 fb2c 	bl	8003408 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002db0:	0029      	movs	r1, r5
 8002db2:	2200      	movs	r2, #0
 8002db4:	0020      	movs	r0, r4
 8002db6:	f000 fc7f 	bl	80036b8 <HAL_GPIO_WritePin>
}
 8002dba:	bd70      	pop	{r4, r5, r6, pc}

08002dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dbc:	b500      	push	{lr}
 8002dbe:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dc0:	2234      	movs	r2, #52	; 0x34
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	a80f      	add	r0, sp, #60	; 0x3c
 8002dc6:	f001 ff73 	bl	8004cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dca:	2214      	movs	r2, #20
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4668      	mov	r0, sp
 8002dd0:	f001 ff6e 	bl	8004cb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dd4:	2224      	movs	r2, #36	; 0x24
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	a805      	add	r0, sp, #20
 8002dda:	f001 ff69 	bl	8004cb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dde:	4919      	ldr	r1, [pc, #100]	; (8002e44 <SystemClock_Config+0x88>)
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <SystemClock_Config+0x8c>)
 8002de2:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de4:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de6:	401a      	ands	r2, r3
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002df0:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002df2:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002df4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002df6:	3b0f      	subs	r3, #15
 8002df8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002dfa:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002dfc:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002dfe:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002e00:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e02:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e04:	f000 fca4 	bl	8003750 <HAL_RCC_OscConfig>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d001      	beq.n	8002e10 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e0c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e0e:	e7fe      	b.n	8002e0e <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e10:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002e12:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e14:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e16:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e18:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e1e:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e20:	f000 ff8e 	bl	8003d40 <HAL_RCC_ClockConfig>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d001      	beq.n	8002e2c <SystemClock_Config+0x70>
 8002e28:	b672      	cpsid	i
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <SystemClock_Config+0x6e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e2c:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e2e:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e30:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e32:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e34:	f001 f894 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d001      	beq.n	8002e40 <SystemClock_Config+0x84>
 8002e3c:	b672      	cpsid	i
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <SystemClock_Config+0x82>
}
 8002e40:	b01d      	add	sp, #116	; 0x74
 8002e42:	bd00      	pop	{pc}
 8002e44:	40007000 	.word	0x40007000
 8002e48:	ffffe7ff 	.word	0xffffe7ff

08002e4c <main>:
{
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	46d6      	mov	lr, sl
 8002e50:	464f      	mov	r7, r9
 8002e52:	4646      	mov	r6, r8
 8002e54:	b5c0      	push	{r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e56:	2604      	movs	r6, #4
{
 8002e58:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5a:	ac08      	add	r4, sp, #32
  HAL_Init();
 8002e5c:	f000 faae 	bl	80033bc <HAL_Init>
  SystemClock_Config();
 8002e60:	f7ff ffac 	bl	8002dbc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	2214      	movs	r2, #20
 8002e66:	2100      	movs	r1, #0
 8002e68:	0020      	movs	r0, r4
 8002e6a:	f001 ff21 	bl	8004cb0 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2101      	movs	r1, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <main+0x1c0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	4689      	mov	r9, r1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin, GPIO_PIN_RESET);
 8002e76:	4866      	ldr	r0, [pc, #408]	; (8003010 <main+0x1c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e78:	4332      	orrs	r2, r6
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|VACUUM_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002e7e:	27c1      	movs	r7, #193	; 0xc1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e80:	4032      	ands	r2, r6
 8002e82:	9202      	str	r2, [sp, #8]
 8002e84:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|VACUUM_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002e88:	017f      	lsls	r7, r7, #5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin, GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	400b      	ands	r3, r1
 8002e94:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin, GPIO_PIN_RESET);
 8002e96:	310e      	adds	r1, #14
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e98:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin, GPIO_PIN_RESET);
 8002e9a:	f000 fc0d 	bl	80036b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|VACUUM_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002e9e:	20a0      	movs	r0, #160	; 0xa0
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	0039      	movs	r1, r7
 8002ea4:	05c0      	lsls	r0, r0, #23
 8002ea6:	f000 fc07 	bl	80036b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin;
 8002eaa:	230f      	movs	r3, #15
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = MOTOR_1___IN1_Pin|MOTOR_1___IN2_Pin|MOTOR_2___IN3_Pin|MOTOR_2___IN4_Pin;
 8002eae:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb0:	464b      	mov	r3, r9
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb2:	0021      	movs	r1, r4
 8002eb4:	4856      	ldr	r0, [pc, #344]	; (8003010 <main+0x1c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb6:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ebc:	f000 fb02 	bl	80034c4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec2:	464b      	mov	r3, r9
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	0021      	movs	r1, r4
 8002ec6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec8:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_5|VACUUM_Pin|BUZZER_Pin;
 8002eca:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	60e5      	str	r5, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	f000 faf8 	bl	80034c4 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002ed4:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <main+0x1c8>)
 8002ed6:	4698      	mov	r8, r3
 8002ed8:	4642      	mov	r2, r8
 8002eda:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <main+0x1cc>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002edc:	4640      	mov	r0, r8
  huart2.Instance = USART2;
 8002ede:	6013      	str	r3, [r2, #0]
  huart2.Init.BaudRate = 9600;
 8002ee0:	2396      	movs	r3, #150	; 0x96
 8002ee2:	019b      	lsls	r3, r3, #6
  huart2.Init.Mode = UART_MODE_RX;
 8002ee4:	6156      	str	r6, [r2, #20]
  huart2.Init.BaudRate = 9600;
 8002ee6:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee8:	6095      	str	r5, [r2, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002eea:	60d5      	str	r5, [r2, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eec:	6115      	str	r5, [r2, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	6195      	str	r5, [r2, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	61d5      	str	r5, [r2, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ef2:	6215      	str	r5, [r2, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef4:	6255      	str	r5, [r2, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ef6:	f001 fe01 	bl	8004afc <HAL_UART_Init>
 8002efa:	1e06      	subs	r6, r0, #0
 8002efc:	d001      	beq.n	8002f02 <main+0xb6>
 8002efe:	b672      	cpsid	i
  while (1)
 8002f00:	e7fe      	b.n	8002f00 <main+0xb4>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f02:	af06      	add	r7, sp, #24
 8002f04:	2208      	movs	r2, #8
 8002f06:	2100      	movs	r1, #0
 8002f08:	0038      	movs	r0, r7
 8002f0a:	f001 fed1 	bl	8004cb0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0e:	2210      	movs	r2, #16
 8002f10:	2100      	movs	r1, #0
 8002f12:	0020      	movs	r0, r4
 8002f14:	f001 fecc 	bl	8004cb0 <memset>
  htim2.Instance = TIM2;
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	4d40      	ldr	r5, [pc, #256]	; (800301c <main+0x1d0>)
 8002f1c:	05db      	lsls	r3, r3, #23
 8002f1e:	602b      	str	r3, [r5, #0]
  htim2.Init.Period = 10;
 8002f20:	230a      	movs	r3, #10
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f22:	0028      	movs	r0, r5
  htim2.Init.Prescaler = 0;
 8002f24:	606e      	str	r6, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f26:	60ae      	str	r6, [r5, #8]
  htim2.Init.Period = 10;
 8002f28:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2a:	612e      	str	r6, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2c:	616e      	str	r6, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f2e:	f001 f9f9 	bl	8004324 <HAL_TIM_PWM_Init>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d001      	beq.n	8002f3a <main+0xee>
 8002f36:	b672      	cpsid	i
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <main+0xec>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3a:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3c:	6078      	str	r0, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f3e:	0039      	movs	r1, r7
 8002f40:	0028      	movs	r0, r5
 8002f42:	f001 fad5 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f46:	1e02      	subs	r2, r0, #0
 8002f48:	d001      	beq.n	8002f4e <main+0x102>
 8002f4a:	b672      	cpsid	i
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <main+0x100>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f4e:	2360      	movs	r3, #96	; 0x60
 8002f50:	6023      	str	r3, [r4, #0]
  sConfigOC.Pulse = 1;
 8002f52:	464b      	mov	r3, r9
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f54:	60a0      	str	r0, [r4, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f56:	60e0      	str	r0, [r4, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f58:	0021      	movs	r1, r4
 8002f5a:	0028      	movs	r0, r5
  sConfigOC.Pulse = 1;
 8002f5c:	6063      	str	r3, [r4, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f5e:	f001 fa0d 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d001      	beq.n	8002f6a <main+0x11e>
 8002f66:	b672      	cpsid	i
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <main+0x11c>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	0021      	movs	r1, r4
 8002f6e:	0028      	movs	r0, r5
 8002f70:	f001 fa04 	bl	800437c <HAL_TIM_PWM_ConfigChannel>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d001      	beq.n	8002f7c <main+0x130>
 8002f78:	b672      	cpsid	i
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <main+0x12e>
  HAL_TIM_MspPostInit(&htim2);
 8002f7c:	0028      	movs	r0, r5
 8002f7e:	f000 f8e3 	bl	8003148 <HAL_TIM_MspPostInit>
 8002f82:	4b27      	ldr	r3, [pc, #156]	; (8003020 <main+0x1d4>)
 8002f84:	469a      	mov	sl, r3
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <main+0x1d8>)
 8002f88:	4699      	mov	r9, r3
	set_buzzer(500);
 8002f8a:	f7ff ff03 	bl	8002d94 <set_buzzer.constprop.0>
		initialize_map(&huart2, &mapInfo);
 8002f8e:	a904      	add	r1, sp, #16
 8002f90:	4640      	mov	r0, r8
 8002f92:	f000 f86d 	bl	8003070 <initialize_map>
	set_buzzer(500);
 8002f96:	f7ff fefd 	bl	8002d94 <set_buzzer.constprop.0>
	HAL_Delay(300);
 8002f9a:	2096      	movs	r0, #150	; 0x96
 8002f9c:	0040      	lsls	r0, r0, #1
 8002f9e:	f000 fa33 	bl	8003408 <HAL_Delay>
	set_buzzer(500);
 8002fa2:	f7ff fef7 	bl	8002d94 <set_buzzer.constprop.0>
		HAL_TIM_Base_Start(&htim2);
 8002fa6:	0028      	movs	r0, r5
 8002fa8:	f001 f91e 	bl	80041e8 <HAL_TIM_Base_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002fac:	2100      	movs	r1, #0
 8002fae:	0028      	movs	r0, r5
 8002fb0:	f001 f9dc 	bl	800436c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	0028      	movs	r0, r5
 8002fb8:	f001 f9d8 	bl	800436c <HAL_TIM_PWM_Start>
		MotorsInfo motorsInfo = {
 8002fbc:	0023      	movs	r3, r4
 8002fbe:	4652      	mov	r2, sl
 8002fc0:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002fc2:	c343      	stmia	r3!, {r0, r1, r6}
 8002fc4:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002fc6:	c343      	stmia	r3!, {r0, r1, r6}
 8002fc8:	ca03      	ldmia	r2!, {r0, r1}
 8002fca:	c303      	stmia	r3!, {r0, r1}
		CleanComponentsInfo cleanComponentsInfo = { .vacuum_GPIOType = VACUUM_GPIO_Port, .vacuum_pin = VACUUM_Pin };
 8002fcc:	4653      	mov	r3, sl
 8002fce:	003a      	movs	r2, r7
 8002fd0:	3320      	adds	r3, #32
 8002fd2:	cb03      	ldmia	r3!, {r0, r1}
 8002fd4:	c203      	stmia	r2!, {r0, r1}
		int result_code = start_drive(&mapInfo, &is_obstacle_found, &motorsInfo, &cleanComponentsInfo);
 8002fd6:	003b      	movs	r3, r7
 8002fd8:	0022      	movs	r2, r4
 8002fda:	4649      	mov	r1, r9
 8002fdc:	a804      	add	r0, sp, #16
 8002fde:	f7ff fdc7 	bl	8002b70 <start_drive>
		if (result_code != 0)
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d003      	beq.n	8002fee <main+0x1a2>
		free(mapInfo.map[0]);
 8002fe6:	9b04      	ldr	r3, [sp, #16]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	f001 fe2d 	bl	8004c48 <free>
		free(mapInfo.map);
 8002fee:	9b04      	ldr	r3, [sp, #16]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	f001 fe28 	bl	8004c48 <free>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	0028      	movs	r0, r5
 8002ffc:	f001 f9ba 	bl	8004374 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8003000:	2104      	movs	r1, #4
 8003002:	0028      	movs	r0, r5
 8003004:	f001 f9b6 	bl	8004374 <HAL_TIM_PWM_Stop>
  {
 8003008:	e7bf      	b.n	8002f8a <main+0x13e>
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40021000 	.word	0x40021000
 8003010:	50000800 	.word	0x50000800
 8003014:	200000e4 	.word	0x200000e4
 8003018:	40004400 	.word	0x40004400
 800301c:	200000a4 	.word	0x200000a4
 8003020:	08005e80 	.word	0x08005e80
 8003024:	20000094 	.word	0x20000094

08003028 <read_number>:

/*
 * @brief read characters until '|' is found. returns the int representing
 * the sequence of chars
 */
static int read_number(UART_HandleTypeDef *huart) {
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	b085      	sub	sp, #20
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 800302c:	af01      	add	r7, sp, #4
 800302e:	003a      	movs	r2, r7
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <read_number+0x44>)
static int read_number(UART_HandleTypeDef *huart) {
 8003032:	0006      	movs	r6, r0
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 8003034:	cb03      	ldmia	r3!, {r0, r1}
 8003036:	c203      	stmia	r2!, {r0, r1}
 8003038:	8819      	ldrh	r1, [r3, #0]
	uint8_t index = 0;
 800303a:	2400      	movs	r4, #0
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 800303c:	8011      	strh	r1, [r2, #0]
 800303e:	789b      	ldrb	r3, [r3, #2]
 8003040:	7093      	strb	r3, [r2, #2]
	uint8_t index = 0;
 8003042:	466b      	mov	r3, sp
 8003044:	1cdd      	adds	r5, r3, #3
	HAL_UART_Receive(huart, buffer, buffer_length, HAL_MAX_DELAY);
 8003046:	2301      	movs	r3, #1
 8003048:	2201      	movs	r2, #1
 800304a:	425b      	negs	r3, r3
 800304c:	0029      	movs	r1, r5
 800304e:	0030      	movs	r0, r6
 8003050:	f001 fc80 	bl	8004954 <HAL_UART_Receive>
	return c;
 8003054:	782b      	ldrb	r3, [r5, #0]
	char token;

	do {
		token = read_char(huart);
		if (token != '|') {
 8003056:	2b7c      	cmp	r3, #124	; 0x7c
 8003058:	d003      	beq.n	8003062 <read_number+0x3a>
			num[index] = token;
 800305a:	553b      	strb	r3, [r7, r4]
			index++;
 800305c:	3401      	adds	r4, #1
 800305e:	b2e4      	uxtb	r4, r4
		}
	} while (token != '|');
 8003060:	e7f1      	b.n	8003046 <read_number+0x1e>

	return atoi(num);
 8003062:	0038      	movs	r0, r7
 8003064:	f001 fd9c 	bl	8004ba0 <atoi>
}
 8003068:	b005      	add	sp, #20
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800306c:	08005ea8 	.word	0x08005ea8

08003070 <initialize_map>:

void initialize_map(UART_HandleTypeDef *huart, MapInfo* mapInfo) {
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003072:	464e      	mov	r6, r9
 8003074:	4645      	mov	r5, r8
 8003076:	46de      	mov	lr, fp
 8003078:	4657      	mov	r7, sl
 800307a:	b5e0      	push	{r5, r6, r7, lr}
 800307c:	b083      	sub	sp, #12
 800307e:	466b      	mov	r3, sp
 8003080:	0005      	movs	r5, r0
 8003082:	4689      	mov	r9, r1
 8003084:	1ddc      	adds	r4, r3, #7
	HAL_UART_Receive(huart, buffer, buffer_length, HAL_MAX_DELAY);
 8003086:	2301      	movs	r3, #1
 8003088:	2201      	movs	r2, #1
 800308a:	425b      	negs	r3, r3
 800308c:	0021      	movs	r1, r4
 800308e:	0028      	movs	r0, r5
 8003090:	f001 fc60 	bl	8004954 <HAL_UART_Receive>
	return c;
 8003094:	7823      	ldrb	r3, [r4, #0]
	char c;
	do {
		c = read_char(huart);
	} while (c != '&');
 8003096:	2b26      	cmp	r3, #38	; 0x26
 8003098:	d1f5      	bne.n	8003086 <initialize_map+0x16>

	int row_count = read_number(huart);
 800309a:	0028      	movs	r0, r5
 800309c:	f7ff ffc4 	bl	8003028 <read_number>
 80030a0:	4680      	mov	r8, r0
	int column_count = read_number(huart);
 80030a2:	0028      	movs	r0, r5
 80030a4:	f7ff ffc0 	bl	8003028 <read_number>

	// the matrix is allocated as a single array with all the memory needed.
	// in this way the DMA can place all the received bytes directly on the matrix.
	// map_rows contains the pointer to the other rows
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 80030a8:	4643      	mov	r3, r8
 80030aa:	009f      	lsls	r7, r3, #2
	int column_count = read_number(huart);
 80030ac:	0006      	movs	r6, r0
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 80030ae:	0038      	movs	r0, r7
 80030b0:	f001 fdc0 	bl	8004c34 <malloc>

	int map_size = row_count * column_count;
 80030b4:	4643      	mov	r3, r8
 80030b6:	4373      	muls	r3, r6
	CellType** map_rows = (CellType**)malloc(row_count * sizeof(CellType*));
 80030b8:	4682      	mov	sl, r0
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 80030ba:	0018      	movs	r0, r3
	int map_size = row_count * column_count;
 80030bc:	469b      	mov	fp, r3
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 80030be:	f001 fdb9 	bl	8004c34 <malloc>

	for (int r = 0; r < row_count; r++) {
 80030c2:	4643      	mov	r3, r8
	CellType* map = (CellType*)malloc(map_size * sizeof(CellType));
 80030c4:	0001      	movs	r1, r0
	for (int r = 0; r < row_count; r++) {
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	dd06      	ble.n	80030d8 <initialize_map+0x68>
 80030ca:	0002      	movs	r2, r0
 80030cc:	4653      	mov	r3, sl
 80030ce:	4457      	add	r7, sl
		map_rows[r] = &map[r * column_count];
 80030d0:	c304      	stmia	r3!, {r2}
	for (int r = 0; r < row_count; r++) {
 80030d2:	1992      	adds	r2, r2, r6
 80030d4:	429f      	cmp	r7, r3
 80030d6:	d1fb      	bne.n	80030d0 <initialize_map+0x60>
	HAL_UART_Receive(huart, buffer, buffer_length, HAL_MAX_DELAY);
 80030d8:	465b      	mov	r3, fp
 80030da:	b29a      	uxth	r2, r3
 80030dc:	2301      	movs	r3, #1
 80030de:	0028      	movs	r0, r5
 80030e0:	425b      	negs	r3, r3
 80030e2:	f001 fc37 	bl	8004954 <HAL_UART_Receive>
 80030e6:	2301      	movs	r3, #1
 80030e8:	2201      	movs	r2, #1
 80030ea:	0021      	movs	r1, r4
 80030ec:	0028      	movs	r0, r5
 80030ee:	425b      	negs	r3, r3
 80030f0:	f001 fc30 	bl	8004954 <HAL_UART_Receive>
	read_from_UART(huart, map, map_size);

	// should read flow terminator '&'
	read_char(huart);

	mapInfo->row_count = row_count;
 80030f4:	464b      	mov	r3, r9
 80030f6:	4642      	mov	r2, r8
 80030f8:	809a      	strh	r2, [r3, #4]
	mapInfo->column_count = column_count;
	mapInfo->map = map_rows;
 80030fa:	4652      	mov	r2, sl
	mapInfo->column_count = column_count;
 80030fc:	80de      	strh	r6, [r3, #6]
	mapInfo->map = map_rows;
 80030fe:	601a      	str	r2, [r3, #0]
}
 8003100:	b003      	add	sp, #12
 8003102:	bcf0      	pop	{r4, r5, r6, r7}
 8003104:	46bb      	mov	fp, r7
 8003106:	46b2      	mov	sl, r6
 8003108:	46a9      	mov	r9, r5
 800310a:	46a0      	mov	r8, r4
 800310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)

08003110 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003110:	2101      	movs	r1, #1
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_MspInit+0x18>)
 8003114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003116:	430a      	orrs	r2, r1
 8003118:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800311e:	0552      	lsls	r2, r2, #21
 8003120:	430a      	orrs	r2, r1
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003124:	4770      	bx	lr
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40021000 	.word	0x40021000

0800312c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	6802      	ldr	r2, [r0, #0]
 8003130:	05db      	lsls	r3, r3, #23
 8003132:	429a      	cmp	r2, r3
 8003134:	d000      	beq.n	8003138 <HAL_TIM_PWM_MspInit+0xc>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003136:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003138:	2101      	movs	r1, #1
 800313a:	4a02      	ldr	r2, [pc, #8]	; (8003144 <HAL_TIM_PWM_MspInit+0x18>)
 800313c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800313e:	430b      	orrs	r3, r1
 8003140:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003142:	e7f8      	b.n	8003136 <HAL_TIM_PWM_MspInit+0xa>
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003148:	b510      	push	{r4, lr}
 800314a:	0004      	movs	r4, r0
 800314c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314e:	2214      	movs	r2, #20
 8003150:	2100      	movs	r1, #0
 8003152:	a801      	add	r0, sp, #4
 8003154:	f001 fdac 	bl	8004cb0 <memset>
  if(htim->Instance==TIM2)
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003162:	b006      	add	sp, #24
 8003164:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	2301      	movs	r3, #1
 8003168:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <HAL_TIM_MspPostInit+0x4c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003170:	4319      	orrs	r1, r3
 8003172:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003174:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003176:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003178:	4013      	ands	r3, r2
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MOTOR_1___Speed_Pin|MOTOR_2___Speed_Pin;
 800317e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = MOTOR_1___Speed_Pin|MOTOR_2___Speed_Pin;
 8003182:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	3b01      	subs	r3, #1
 8003186:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800318c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	f000 f999 	bl	80034c4 <HAL_GPIO_Init>
}
 8003192:	e7e6      	b.n	8003162 <HAL_TIM_MspPostInit+0x1a>
 8003194:	40021000 	.word	0x40021000

08003198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003198:	b510      	push	{r4, lr}
 800319a:	0004      	movs	r4, r0
 800319c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319e:	2214      	movs	r2, #20
 80031a0:	2100      	movs	r1, #0
 80031a2:	a801      	add	r0, sp, #4
 80031a4:	f001 fd84 	bl	8004cb0 <memset>
  if(huart->Instance==USART2)
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_UART_MspInit+0x58>)
 80031aa:	6822      	ldr	r2, [r4, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031b0:	b006      	add	sp, #24
 80031b2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <HAL_UART_MspInit+0x5c>)
 80031b8:	0292      	lsls	r2, r2, #10
 80031ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80031be:	430a      	orrs	r2, r1
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c2:	2201      	movs	r2, #1
 80031c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	4311      	orrs	r1, r2
 80031ca:	62d9      	str	r1, [r3, #44]	; 0x2c
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ce:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d0:	401a      	ands	r2, r3
 80031d2:	9200      	str	r2, [sp, #0]
 80031d4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031d6:	230c      	movs	r3, #12
 80031d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	3b0a      	subs	r3, #10
 80031dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	3303      	adds	r3, #3
 80031e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80031e6:	3301      	adds	r3, #1
 80031e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	f000 f96b 	bl	80034c4 <HAL_GPIO_Init>
}
 80031ee:	e7df      	b.n	80031b0 <HAL_UART_MspInit+0x18>
 80031f0:	40004400 	.word	0x40004400
 80031f4:	40021000 	.word	0x40021000

080031f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <NMI_Handler>
 80031fa:	46c0      	nop			; (mov r8, r8)

080031fc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <HardFault_Handler>
 80031fe:	46c0      	nop			; (mov r8, r8)

08003200 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003200:	4770      	bx	lr
 8003202:	46c0      	nop			; (mov r8, r8)

08003204 <PendSV_Handler>:
 8003204:	4770      	bx	lr
 8003206:	46c0      	nop			; (mov r8, r8)

08003208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003208:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800320a:	f000 f8eb 	bl	80033e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800320e:	bd10      	pop	{r4, pc}

08003210 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003210:	2001      	movs	r0, #1
 8003212:	4770      	bx	lr

08003214 <_kill>:

int _kill(int pid, int sig)
{
 8003214:	b510      	push	{r4, lr}
	errno = EINVAL;
 8003216:	f001 fcd3 	bl	8004bc0 <__errno>
 800321a:	2316      	movs	r3, #22
 800321c:	6003      	str	r3, [r0, #0]
	return -1;
 800321e:	2001      	movs	r0, #1
}
 8003220:	4240      	negs	r0, r0
 8003222:	bd10      	pop	{r4, pc}

08003224 <_exit>:

void _exit (int status)
{
 8003224:	b510      	push	{r4, lr}
	errno = EINVAL;
 8003226:	f001 fccb 	bl	8004bc0 <__errno>
 800322a:	2316      	movs	r3, #22
 800322c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800322e:	e7fe      	b.n	800322e <_exit+0xa>

08003230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003234:	dd07      	ble.n	8003246 <_read+0x16>
 8003236:	000c      	movs	r4, r1
 8003238:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 800323a:	e000      	b.n	800323e <_read+0xe>
 800323c:	bf00      	nop
 800323e:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003240:	3401      	adds	r4, #1
 8003242:	42ac      	cmp	r4, r5
 8003244:	d1f9      	bne.n	800323a <_read+0xa>
	}

return len;
}
 8003246:	0030      	movs	r0, r6
 8003248:	bd70      	pop	{r4, r5, r6, pc}
 800324a:	46c0      	nop			; (mov r8, r8)

0800324c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003250:	dd07      	ble.n	8003262 <_write+0x16>
 8003252:	000c      	movs	r4, r1
 8003254:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 8003256:	7820      	ldrb	r0, [r4, #0]
 8003258:	3401      	adds	r4, #1
 800325a:	e000      	b.n	800325e <_write+0x12>
 800325c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	42ac      	cmp	r4, r5
 8003260:	d1f9      	bne.n	8003256 <_write+0xa>
	}
	return len;
}
 8003262:	0030      	movs	r0, r6
 8003264:	bd70      	pop	{r4, r5, r6, pc}
 8003266:	46c0      	nop			; (mov r8, r8)

08003268 <_close>:

int _close(int file)
{
	return -1;
 8003268:	2001      	movs	r0, #1
}
 800326a:	4240      	negs	r0, r0
 800326c:	4770      	bx	lr
 800326e:	46c0      	nop			; (mov r8, r8)

08003270 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	019b      	lsls	r3, r3, #6
	return 0;
}
 8003274:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003276:	604b      	str	r3, [r1, #4]
}
 8003278:	4770      	bx	lr
 800327a:	46c0      	nop			; (mov r8, r8)

0800327c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800327c:	2001      	movs	r0, #1
 800327e:	4770      	bx	lr

08003280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr

08003284 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003284:	490c      	ldr	r1, [pc, #48]	; (80032b8 <_sbrk+0x34>)
 8003286:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <_sbrk+0x38>)
{
 8003288:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800328a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800328c:	490c      	ldr	r1, [pc, #48]	; (80032c0 <_sbrk+0x3c>)
{
 800328e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003290:	6808      	ldr	r0, [r1, #0]
 8003292:	2800      	cmp	r0, #0
 8003294:	d004      	beq.n	80032a0 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003296:	18c3      	adds	r3, r0, r3
 8003298:	4293      	cmp	r3, r2
 800329a:	d806      	bhi.n	80032aa <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800329c:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800329e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80032a0:	4808      	ldr	r0, [pc, #32]	; (80032c4 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80032a2:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80032a4:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d9f8      	bls.n	800329c <_sbrk+0x18>
    errno = ENOMEM;
 80032aa:	f001 fc89 	bl	8004bc0 <__errno>
 80032ae:	230c      	movs	r3, #12
 80032b0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80032b2:	2001      	movs	r0, #1
 80032b4:	4240      	negs	r0, r0
 80032b6:	e7f2      	b.n	800329e <_sbrk+0x1a>
 80032b8:	00000400 	.word	0x00000400
 80032bc:	20002000 	.word	0x20002000
 80032c0:	20000098 	.word	0x20000098
 80032c4:	20000180 	.word	0x20000180

080032c8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032c8:	4770      	bx	lr
 80032ca:	46c0      	nop			; (mov r8, r8)

080032cc <is_row_valid>:
 */

#include "types/map.h"

inline bool is_row_valid(const MapInfo* mapInfo, uint16_t row) {
	return row >= 0 && row < mapInfo->row_count;
 80032cc:	8880      	ldrh	r0, [r0, #4]
 80032ce:	4281      	cmp	r1, r0
 80032d0:	4180      	sbcs	r0, r0
 80032d2:	4240      	negs	r0, r0
}
 80032d4:	4770      	bx	lr
 80032d6:	46c0      	nop			; (mov r8, r8)

080032d8 <is_column_valid>:

inline bool is_column_valid(const MapInfo* mapInfo, uint16_t column) {
	return column >= 0 && column < mapInfo->column_count;
 80032d8:	88c0      	ldrh	r0, [r0, #6]
 80032da:	4281      	cmp	r1, r0
 80032dc:	4180      	sbcs	r0, r0
 80032de:	4240      	negs	r0, r0
}
 80032e0:	4770      	bx	lr
 80032e2:	46c0      	nop			; (mov r8, r8)

080032e4 <is_cell_valid>:

inline bool is_cell_valid(const MapInfo* mapInfo, const MapPosition* cell) {
 80032e4:	b510      	push	{r4, lr}
	return is_row_valid(mapInfo, cell->row) && is_column_valid(mapInfo, cell->col);
 80032e6:	880c      	ldrh	r4, [r1, #0]
 80032e8:	8883      	ldrh	r3, [r0, #4]
inline bool is_cell_valid(const MapInfo* mapInfo, const MapPosition* cell) {
 80032ea:	0002      	movs	r2, r0
 80032ec:	2000      	movs	r0, #0
	return is_row_valid(mapInfo, cell->row) && is_column_valid(mapInfo, cell->col);
 80032ee:	429c      	cmp	r4, r3
 80032f0:	d204      	bcs.n	80032fc <is_cell_valid+0x18>
 80032f2:	884b      	ldrh	r3, [r1, #2]
 80032f4:	88d0      	ldrh	r0, [r2, #6]
 80032f6:	4283      	cmp	r3, r0
 80032f8:	4180      	sbcs	r0, r0
 80032fa:	4240      	negs	r0, r0
}
 80032fc:	bd10      	pop	{r4, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)

08003300 <are_MapPositions_equal>:

inline bool are_MapPositions_equal(const MapPosition* mp1, const MapPosition* mp2) {
 8003300:	b510      	push	{r4, lr}
	return mp1->row == mp2->row && mp1->col == mp2->col;
 8003302:	880a      	ldrh	r2, [r1, #0]
 8003304:	8804      	ldrh	r4, [r0, #0]
inline bool are_MapPositions_equal(const MapPosition* mp1, const MapPosition* mp2) {
 8003306:	0003      	movs	r3, r0
 8003308:	2000      	movs	r0, #0
	return mp1->row == mp2->row && mp1->col == mp2->col;
 800330a:	4294      	cmp	r4, r2
 800330c:	d105      	bne.n	800331a <are_MapPositions_equal+0x1a>
 800330e:	8858      	ldrh	r0, [r3, #2]
 8003310:	884b      	ldrh	r3, [r1, #2]
 8003312:	1ac0      	subs	r0, r0, r3
 8003314:	4243      	negs	r3, r0
 8003316:	4158      	adcs	r0, r3
 8003318:	b2c0      	uxtb	r0, r0
}
 800331a:	bd10      	pop	{r4, pc}

0800331c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800331c:	480d      	ldr	r0, [pc, #52]	; (8003354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800331e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003320:	480d      	ldr	r0, [pc, #52]	; (8003358 <LoopForever+0x6>)
  ldr r1, =_edata
 8003322:	490e      	ldr	r1, [pc, #56]	; (800335c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <LoopForever+0xe>)
  movs r3, #0
 8003326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003328:	e002      	b.n	8003330 <LoopCopyDataInit>

0800332a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800332c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800332e:	3304      	adds	r3, #4

08003330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003334:	d3f9      	bcc.n	800332a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003336:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003338:	4c0b      	ldr	r4, [pc, #44]	; (8003368 <LoopForever+0x16>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800333c:	e001      	b.n	8003342 <LoopFillZerobss>

0800333e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800333e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003340:	3204      	adds	r2, #4

08003342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003344:	d3fb      	bcc.n	800333e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003346:	f7ff ffbf 	bl	80032c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800334a:	f001 fc4f 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800334e:	f7ff fd7d 	bl	8002e4c <main>

08003352 <LoopForever>:

LoopForever:
    b LoopForever
 8003352:	e7fe      	b.n	8003352 <LoopForever>
  ldr   r0, =_estack
 8003354:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800335c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003360:	080061ac 	.word	0x080061ac
  ldr r2, =_sbss
 8003364:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003368:	2000017c 	.word	0x2000017c

0800336c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800336c:	e7fe      	b.n	800336c <ADC1_COMP_IRQHandler>
	...

08003370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003370:	b510      	push	{r4, lr}
 8003372:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003374:	20fa      	movs	r0, #250	; 0xfa
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_InitTick+0x40>)
 8003378:	0080      	lsls	r0, r0, #2
 800337a:	7819      	ldrb	r1, [r3, #0]
 800337c:	f7fc fece 	bl	800011c <__udivsi3>
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_InitTick+0x44>)
 8003382:	0001      	movs	r1, r0
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	f7fc fec9 	bl	800011c <__udivsi3>
 800338a:	f000 f881 	bl	8003490 <HAL_SYSTICK_Config>
 800338e:	2800      	cmp	r0, #0
 8003390:	d10c      	bne.n	80033ac <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8003392:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003394:	2c03      	cmp	r4, #3
 8003396:	d900      	bls.n	800339a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003398:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800339a:	3802      	subs	r0, #2
 800339c:	2200      	movs	r2, #0
 800339e:	0021      	movs	r1, r4
 80033a0:	f000 f844 	bl	800342c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_InitTick+0x48>)
 80033a6:	2000      	movs	r0, #0
 80033a8:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80033aa:	e7f5      	b.n	8003398 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
 80033ae:	e7f3      	b.n	8003398 <HAL_InitTick+0x28>
 80033b0:	2000000c 	.word	0x2000000c
 80033b4:	20000008 	.word	0x20000008
 80033b8:	20000010 	.word	0x20000010

080033bc <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80033bc:	2140      	movs	r1, #64	; 0x40
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <HAL_Init+0x24>)
{
 80033c0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80033c2:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033c4:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80033c6:	430b      	orrs	r3, r1
 80033c8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ca:	f7ff ffd1 	bl	8003370 <HAL_InitTick>
 80033ce:	1e04      	subs	r4, r0, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_Init+0x1c>
    status = HAL_ERROR;
 80033d2:	2401      	movs	r4, #1
}
 80033d4:	0020      	movs	r0, r4
 80033d6:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80033d8:	f7ff fe9a 	bl	8003110 <HAL_MspInit>
 80033dc:	e7fa      	b.n	80033d4 <HAL_Init+0x18>
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	40022000 	.word	0x40022000

080033e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80033e4:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <HAL_IncTick+0x10>)
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <HAL_IncTick+0x14>)
 80033e8:	6811      	ldr	r1, [r2, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	185b      	adds	r3, r3, r1
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	4770      	bx	lr
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000168 	.word	0x20000168
 80033f8:	2000000c 	.word	0x2000000c

080033fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <HAL_GetTick+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
}
 8003400:	4770      	bx	lr
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	20000168 	.word	0x20000168

08003408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800340c:	f7ff fff6 	bl	80033fc <HAL_GetTick>
 8003410:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	1c63      	adds	r3, r4, #1
 8003414:	d002      	beq.n	800341c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <HAL_Delay+0x20>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800341c:	f7ff ffee 	bl	80033fc <HAL_GetTick>
 8003420:	1b40      	subs	r0, r0, r5
 8003422:	42a0      	cmp	r0, r4
 8003424:	d3fa      	bcc.n	800341c <HAL_Delay+0x14>
  {
  }
}
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	2000000c 	.word	0x2000000c

0800342c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800342c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800342e:	2800      	cmp	r0, #0
 8003430:	db14      	blt.n	800345c <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_NVIC_SetPriority+0x5c>)
 8003434:	2203      	movs	r2, #3
 8003436:	469c      	mov	ip, r3
 8003438:	23ff      	movs	r3, #255	; 0xff
 800343a:	0884      	lsrs	r4, r0, #2
 800343c:	4010      	ands	r0, r2
 800343e:	001a      	movs	r2, r3
 8003440:	26c0      	movs	r6, #192	; 0xc0
 8003442:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003444:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003446:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003448:	400b      	ands	r3, r1
 800344a:	4083      	lsls	r3, r0
 800344c:	00a4      	lsls	r4, r4, #2
 800344e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003450:	00b6      	lsls	r6, r6, #2
 8003452:	59a5      	ldr	r5, [r4, r6]
 8003454:	4395      	bics	r5, r2
 8003456:	432b      	orrs	r3, r5
 8003458:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800345a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800345c:	4a0b      	ldr	r2, [pc, #44]	; (800348c <HAL_NVIC_SetPriority+0x60>)
 800345e:	230f      	movs	r3, #15
 8003460:	4694      	mov	ip, r2
 8003462:	2203      	movs	r2, #3
 8003464:	4003      	ands	r3, r0
 8003466:	4010      	ands	r0, r2
 8003468:	32fc      	adds	r2, #252	; 0xfc
 800346a:	0015      	movs	r5, r2
 800346c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800346e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003470:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003472:	400a      	ands	r2, r1
 8003474:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003476:	3b08      	subs	r3, #8
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4463      	add	r3, ip
 800347e:	69dc      	ldr	r4, [r3, #28]
 8003480:	43ac      	bics	r4, r5
 8003482:	4322      	orrs	r2, r4
 8003484:	61da      	str	r2, [r3, #28]
 8003486:	e7e8      	b.n	800345a <HAL_NVIC_SetPriority+0x2e>
 8003488:	e000e100 	.word	0xe000e100
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	1e43      	subs	r3, r0, #1
 8003494:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003496:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003498:	4293      	cmp	r3, r2
 800349a:	d20e      	bcs.n	80034ba <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800349c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034a0:	4807      	ldr	r0, [pc, #28]	; (80034c0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034a4:	6a03      	ldr	r3, [r0, #32]
 80034a6:	0609      	lsls	r1, r1, #24
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b6:	3307      	adds	r3, #7
 80034b8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80034ba:	4770      	bx	lr
 80034bc:	e000e010 	.word	0xe000e010
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c6:	464e      	mov	r6, r9
 80034c8:	46de      	mov	lr, fp
 80034ca:	4657      	mov	r7, sl
 80034cc:	4645      	mov	r5, r8
 80034ce:	b5e0      	push	{r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80034d0:	680a      	ldr	r2, [r1, #0]
{
 80034d2:	4689      	mov	r9, r1
  uint32_t position = 0x00U;
 80034d4:	2300      	movs	r3, #0
{
 80034d6:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 80034d8:	2a00      	cmp	r2, #0
 80034da:	d06c      	beq.n	80035b6 <HAL_GPIO_Init+0xf2>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80034dc:	2101      	movs	r1, #1
 80034de:	468b      	mov	fp, r1
 80034e0:	465c      	mov	r4, fp
 80034e2:	0015      	movs	r5, r2
 80034e4:	409c      	lsls	r4, r3
 80034e6:	4025      	ands	r5, r4
 80034e8:	46aa      	mov	sl, r5

    if (iocurrent)
 80034ea:	4222      	tst	r2, r4
 80034ec:	d05f      	beq.n	80035ae <HAL_GPIO_Init+0xea>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034ee:	464d      	mov	r5, r9
 80034f0:	2703      	movs	r7, #3
 80034f2:	686d      	ldr	r5, [r5, #4]
 80034f4:	402f      	ands	r7, r5
 80034f6:	1e7e      	subs	r6, r7, #1
 80034f8:	2e01      	cmp	r6, #1
 80034fa:	d963      	bls.n	80035c4 <HAL_GPIO_Init+0x100>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034fc:	0059      	lsls	r1, r3, #1
 80034fe:	468c      	mov	ip, r1
 8003500:	2f03      	cmp	r7, #3
 8003502:	d000      	beq.n	8003506 <HAL_GPIO_Init+0x42>
 8003504:	e0a7      	b.n	8003656 <HAL_GPIO_Init+0x192>
 8003506:	003c      	movs	r4, r7
 8003508:	408c      	lsls	r4, r1
 800350a:	43e1      	mvns	r1, r4
 800350c:	9100      	str	r1, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003510:	9e00      	ldr	r6, [sp, #0]
 8003512:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003514:	4326      	orrs	r6, r4
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003516:	24c0      	movs	r4, #192	; 0xc0
 8003518:	02a4      	lsls	r4, r4, #10
      GPIOx->MODER = temp;
 800351a:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800351c:	4225      	tst	r5, r4
 800351e:	d046      	beq.n	80035ae <HAL_GPIO_Init+0xea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003520:	465e      	mov	r6, fp
 8003522:	495e      	ldr	r1, [pc, #376]	; (800369c <HAL_GPIO_Init+0x1d8>)

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003524:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003526:	6b4c      	ldr	r4, [r1, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003528:	401f      	ands	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	4334      	orrs	r4, r6
 800352c:	634c      	str	r4, [r1, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800352e:	495c      	ldr	r1, [pc, #368]	; (80036a0 <HAL_GPIO_Init+0x1dc>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003530:	00bf      	lsls	r7, r7, #2
 8003532:	468c      	mov	ip, r1
 8003534:	210f      	movs	r1, #15
 8003536:	40b9      	lsls	r1, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8003538:	089c      	lsrs	r4, r3, #2
 800353a:	00a4      	lsls	r4, r4, #2
 800353c:	4464      	add	r4, ip
 800353e:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003540:	438e      	bics	r6, r1
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003542:	21a0      	movs	r1, #160	; 0xa0
 8003544:	05c9      	lsls	r1, r1, #23
 8003546:	4288      	cmp	r0, r1
 8003548:	d012      	beq.n	8003570 <HAL_GPIO_Init+0xac>
 800354a:	4956      	ldr	r1, [pc, #344]	; (80036a4 <HAL_GPIO_Init+0x1e0>)
 800354c:	4288      	cmp	r0, r1
 800354e:	d100      	bne.n	8003552 <HAL_GPIO_Init+0x8e>
 8003550:	e097      	b.n	8003682 <HAL_GPIO_Init+0x1be>
 8003552:	4955      	ldr	r1, [pc, #340]	; (80036a8 <HAL_GPIO_Init+0x1e4>)
 8003554:	4288      	cmp	r0, r1
 8003556:	d100      	bne.n	800355a <HAL_GPIO_Init+0x96>
 8003558:	e097      	b.n	800368a <HAL_GPIO_Init+0x1c6>
 800355a:	4954      	ldr	r1, [pc, #336]	; (80036ac <HAL_GPIO_Init+0x1e8>)
 800355c:	4288      	cmp	r0, r1
 800355e:	d100      	bne.n	8003562 <HAL_GPIO_Init+0x9e>
 8003560:	e08b      	b.n	800367a <HAL_GPIO_Init+0x1b6>
 8003562:	4953      	ldr	r1, [pc, #332]	; (80036b0 <HAL_GPIO_Init+0x1ec>)
 8003564:	4288      	cmp	r0, r1
 8003566:	d100      	bne.n	800356a <HAL_GPIO_Init+0xa6>
 8003568:	e093      	b.n	8003692 <HAL_GPIO_Init+0x1ce>
 800356a:	2106      	movs	r1, #6
 800356c:	40b9      	lsls	r1, r7
 800356e:	430e      	orrs	r6, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003570:	4950      	ldr	r1, [pc, #320]	; (80036b4 <HAL_GPIO_Init+0x1f0>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003572:	60a6      	str	r6, [r4, #8]
        temp = EXTI->IMR;
 8003574:	680c      	ldr	r4, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
 8003576:	4651      	mov	r1, sl
 8003578:	43cf      	mvns	r7, r1
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	0249      	lsls	r1, r1, #9
 800357e:	420d      	tst	r5, r1
 8003580:	d000      	beq.n	8003584 <HAL_GPIO_Init+0xc0>
 8003582:	e077      	b.n	8003674 <HAL_GPIO_Init+0x1b0>
        temp &= ~((uint32_t)iocurrent);
 8003584:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003586:	494b      	ldr	r1, [pc, #300]	; (80036b4 <HAL_GPIO_Init+0x1f0>)
 8003588:	600c      	str	r4, [r1, #0]

        temp = EXTI->EMR;
 800358a:	684e      	ldr	r6, [r1, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800358c:	03a9      	lsls	r1, r5, #14
 800358e:	d46e      	bmi.n	800366e <HAL_GPIO_Init+0x1aa>
        temp &= ~((uint32_t)iocurrent);
 8003590:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003592:	4948      	ldr	r1, [pc, #288]	; (80036b4 <HAL_GPIO_Init+0x1f0>)
 8003594:	604e      	str	r6, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003596:	688e      	ldr	r6, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003598:	02e9      	lsls	r1, r5, #11
 800359a:	d465      	bmi.n	8003668 <HAL_GPIO_Init+0x1a4>
        temp &= ~((uint32_t)iocurrent);
 800359c:	403e      	ands	r6, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800359e:	4945      	ldr	r1, [pc, #276]	; (80036b4 <HAL_GPIO_Init+0x1f0>)
 80035a0:	608e      	str	r6, [r1, #8]

        temp = EXTI->FTSR;
 80035a2:	68cc      	ldr	r4, [r1, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a4:	02a9      	lsls	r1, r5, #10
 80035a6:	d45b      	bmi.n	8003660 <HAL_GPIO_Init+0x19c>
        temp &= ~((uint32_t)iocurrent);
 80035a8:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80035aa:	4942      	ldr	r1, [pc, #264]	; (80036b4 <HAL_GPIO_Init+0x1f0>)
 80035ac:	60cc      	str	r4, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80035ae:	0014      	movs	r4, r2
      }
    }
    position++;
 80035b0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80035b2:	40dc      	lsrs	r4, r3
 80035b4:	d194      	bne.n	80034e0 <HAL_GPIO_Init+0x1c>
  }
}
 80035b6:	b003      	add	sp, #12
 80035b8:	bcf0      	pop	{r4, r5, r6, r7}
 80035ba:	46bb      	mov	fp, r7
 80035bc:	46b2      	mov	sl, r6
 80035be:	46a9      	mov	r9, r5
 80035c0:	46a0      	mov	r8, r4
 80035c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035c4:	005e      	lsls	r6, r3, #1
 80035c6:	46b4      	mov	ip, r6
        temp = GPIOx->OSPEEDR;
 80035c8:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035ca:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR;
 80035cc:	9101      	str	r1, [sp, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035ce:	4661      	mov	r1, ip
 80035d0:	408e      	lsls	r6, r1
 80035d2:	43f1      	mvns	r1, r6
 80035d4:	9100      	str	r1, [sp, #0]
 80035d6:	9901      	ldr	r1, [sp, #4]
 80035d8:	43b1      	bics	r1, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035da:	464e      	mov	r6, r9
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80035dc:	9101      	str	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035de:	68f1      	ldr	r1, [r6, #12]
 80035e0:	4666      	mov	r6, ip
 80035e2:	40b1      	lsls	r1, r6
 80035e4:	4688      	mov	r8, r1
 80035e6:	4646      	mov	r6, r8
 80035e8:	9901      	ldr	r1, [sp, #4]
 80035ea:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 80035ec:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 80035ee:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035f0:	43a1      	bics	r1, r4
 80035f2:	4688      	mov	r8, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f4:	4659      	mov	r1, fp
 80035f6:	092c      	lsrs	r4, r5, #4
 80035f8:	400c      	ands	r4, r1
 80035fa:	409c      	lsls	r4, r3
 80035fc:	4641      	mov	r1, r8
 80035fe:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 8003600:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003602:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003604:	9900      	ldr	r1, [sp, #0]
 8003606:	400c      	ands	r4, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003608:	4649      	mov	r1, r9
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800360a:	46a0      	mov	r8, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800360c:	688c      	ldr	r4, [r1, #8]
 800360e:	4661      	mov	r1, ip
 8003610:	408c      	lsls	r4, r1
 8003612:	4641      	mov	r1, r8
 8003614:	430c      	orrs	r4, r1
        GPIOx->PUPDR = temp;
 8003616:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003618:	4661      	mov	r1, ip
 800361a:	003c      	movs	r4, r7
 800361c:	408c      	lsls	r4, r1
 800361e:	2f02      	cmp	r7, #2
 8003620:	d000      	beq.n	8003624 <HAL_GPIO_Init+0x160>
 8003622:	e774      	b.n	800350e <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8003624:	08df      	lsrs	r7, r3, #3
 8003626:	00bf      	lsls	r7, r7, #2
 8003628:	19c7      	adds	r7, r0, r7
 800362a:	6a39      	ldr	r1, [r7, #32]
 800362c:	4688      	mov	r8, r1
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800362e:	2107      	movs	r1, #7
 8003630:	4019      	ands	r1, r3
 8003632:	0089      	lsls	r1, r1, #2
 8003634:	468c      	mov	ip, r1
 8003636:	210f      	movs	r1, #15
 8003638:	4666      	mov	r6, ip
 800363a:	40b1      	lsls	r1, r6
 800363c:	4646      	mov	r6, r8
 800363e:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003640:	4649      	mov	r1, r9
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003642:	46b0      	mov	r8, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003644:	4666      	mov	r6, ip
 8003646:	6909      	ldr	r1, [r1, #16]
 8003648:	40b1      	lsls	r1, r6
 800364a:	468c      	mov	ip, r1
 800364c:	4641      	mov	r1, r8
 800364e:	4666      	mov	r6, ip
 8003650:	4331      	orrs	r1, r6
        GPIOx->AFR[position >> 3U] = temp;
 8003652:	6239      	str	r1, [r7, #32]
 8003654:	e75b      	b.n	800350e <HAL_GPIO_Init+0x4a>
 8003656:	2603      	movs	r6, #3
 8003658:	408e      	lsls	r6, r1
 800365a:	43f1      	mvns	r1, r6
 800365c:	9100      	str	r1, [sp, #0]
 800365e:	e7d0      	b.n	8003602 <HAL_GPIO_Init+0x13e>
          temp |= iocurrent;
 8003660:	4651      	mov	r1, sl
 8003662:	4321      	orrs	r1, r4
 8003664:	000c      	movs	r4, r1
 8003666:	e7a0      	b.n	80035aa <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 8003668:	4651      	mov	r1, sl
 800366a:	430e      	orrs	r6, r1
 800366c:	e797      	b.n	800359e <HAL_GPIO_Init+0xda>
          temp |= iocurrent;
 800366e:	4651      	mov	r1, sl
 8003670:	430e      	orrs	r6, r1
 8003672:	e78e      	b.n	8003592 <HAL_GPIO_Init+0xce>
          temp |= iocurrent;
 8003674:	4651      	mov	r1, sl
 8003676:	430c      	orrs	r4, r1
 8003678:	e785      	b.n	8003586 <HAL_GPIO_Init+0xc2>
 800367a:	2103      	movs	r1, #3
 800367c:	40b9      	lsls	r1, r7
 800367e:	430e      	orrs	r6, r1
 8003680:	e776      	b.n	8003570 <HAL_GPIO_Init+0xac>
 8003682:	4659      	mov	r1, fp
 8003684:	40b9      	lsls	r1, r7
 8003686:	430e      	orrs	r6, r1
 8003688:	e772      	b.n	8003570 <HAL_GPIO_Init+0xac>
 800368a:	2102      	movs	r1, #2
 800368c:	40b9      	lsls	r1, r7
 800368e:	430e      	orrs	r6, r1
 8003690:	e76e      	b.n	8003570 <HAL_GPIO_Init+0xac>
 8003692:	2105      	movs	r1, #5
 8003694:	40b9      	lsls	r1, r7
 8003696:	430e      	orrs	r6, r1
 8003698:	e76a      	b.n	8003570 <HAL_GPIO_Init+0xac>
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	40021000 	.word	0x40021000
 80036a0:	40010000 	.word	0x40010000
 80036a4:	50000400 	.word	0x50000400
 80036a8:	50000800 	.word	0x50000800
 80036ac:	50000c00 	.word	0x50000c00
 80036b0:	50001c00 	.word	0x50001c00
 80036b4:	40010400 	.word	0x40010400

080036b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b8:	2a00      	cmp	r2, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036bc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80036be:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80036c0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80036c2:	e7fc      	b.n	80036be <HAL_GPIO_WritePin+0x6>

080036c4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036c4:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80036c6:	491c      	ldr	r1, [pc, #112]	; (8003738 <HAL_RCC_GetSysClockFreq+0x74>)
{
 80036c8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80036ca:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d00b      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x26>
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d014      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x3c>
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036da:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80036dc:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036de:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036e4:	3301      	adds	r3, #1
 80036e6:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80036e8:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 80036ea:	4814      	ldr	r0, [pc, #80]	; (800373c <HAL_RCC_GetSysClockFreq+0x78>)
 80036ec:	e7fc      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036ee:	6808      	ldr	r0, [r1, #0]
        sysclockfreq =  HSI_VALUE;
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80036f2:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80036f4:	17c0      	asrs	r0, r0, #31
 80036f6:	4018      	ands	r0, r3
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_GetSysClockFreq+0x80>)
 80036fa:	469c      	mov	ip, r3
 80036fc:	4460      	add	r0, ip
 80036fe:	e7f3      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003700:	0293      	lsls	r3, r2, #10
 8003702:	4811      	ldr	r0, [pc, #68]	; (8003748 <HAL_RCC_GetSysClockFreq+0x84>)
 8003704:	0f1b      	lsrs	r3, r3, #28
 8003706:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003708:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370a:	68cb      	ldr	r3, [r1, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800370c:	0f92      	lsrs	r2, r2, #30
 800370e:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003710:	03db      	lsls	r3, r3, #15
 8003712:	d40c      	bmi.n	800372e <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003714:	680b      	ldr	r3, [r1, #0]
 8003716:	06db      	lsls	r3, r3, #27
 8003718:	d50b      	bpl.n	8003732 <HAL_RCC_GetSysClockFreq+0x6e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800371a:	4a0c      	ldr	r2, [pc, #48]	; (800374c <HAL_RCC_GetSysClockFreq+0x88>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800371c:	2300      	movs	r3, #0
 800371e:	2100      	movs	r1, #0
 8003720:	f7fc fde2 	bl	80002e8 <__aeabi_lmul>
 8003724:	0022      	movs	r2, r4
 8003726:	2300      	movs	r3, #0
 8003728:	f7fc fdbe 	bl	80002a8 <__aeabi_uldivmod>
 800372c:	e7dc      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800372e:	4a03      	ldr	r2, [pc, #12]	; (800373c <HAL_RCC_GetSysClockFreq+0x78>)
 8003730:	e7f4      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x58>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003732:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_RCC_GetSysClockFreq+0x80>)
 8003734:	e7f2      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x58>
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	40021000 	.word	0x40021000
 800373c:	007a1200 	.word	0x007a1200
 8003740:	ff48e500 	.word	0xff48e500
 8003744:	00f42400 	.word	0x00f42400
 8003748:	08005f60 	.word	0x08005f60
 800374c:	003d0900 	.word	0x003d0900

08003750 <HAL_RCC_OscConfig>:
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	46d6      	mov	lr, sl
 8003754:	464f      	mov	r7, r9
 8003756:	4646      	mov	r6, r8
 8003758:	b5c0      	push	{r6, r7, lr}
 800375a:	0004      	movs	r4, r0
 800375c:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 800375e:	2800      	cmp	r0, #0
 8003760:	d100      	bne.n	8003764 <HAL_RCC_OscConfig+0x14>
 8003762:	e146      	b.n	80039f2 <HAL_RCC_OscConfig+0x2a2>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003764:	4bc8      	ldr	r3, [pc, #800]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003766:	250c      	movs	r5, #12
 8003768:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800376a:	68de      	ldr	r6, [r3, #12]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	025b      	lsls	r3, r3, #9
 8003770:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003774:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	07da      	lsls	r2, r3, #31
 8003778:	d533      	bpl.n	80037e2 <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800377a:	2d08      	cmp	r5, #8
 800377c:	d100      	bne.n	8003780 <HAL_RCC_OscConfig+0x30>
 800377e:	e12f      	b.n	80039e0 <HAL_RCC_OscConfig+0x290>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003780:	2d0c      	cmp	r5, #12
 8003782:	d100      	bne.n	8003786 <HAL_RCC_OscConfig+0x36>
 8003784:	e129      	b.n	80039da <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003786:	2080      	movs	r0, #128	; 0x80
 8003788:	6861      	ldr	r1, [r4, #4]
 800378a:	0240      	lsls	r0, r0, #9
 800378c:	4281      	cmp	r1, r0
 800378e:	d100      	bne.n	8003792 <HAL_RCC_OscConfig+0x42>
 8003790:	e161      	b.n	8003a56 <HAL_RCC_OscConfig+0x306>
 8003792:	22a0      	movs	r2, #160	; 0xa0
 8003794:	02d2      	lsls	r2, r2, #11
 8003796:	4291      	cmp	r1, r2
 8003798:	d100      	bne.n	800379c <HAL_RCC_OscConfig+0x4c>
 800379a:	e245      	b.n	8003c28 <HAL_RCC_OscConfig+0x4d8>
 800379c:	4fba      	ldr	r7, [pc, #744]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 800379e:	4bbb      	ldr	r3, [pc, #748]	; (8003a8c <HAL_RCC_OscConfig+0x33c>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	401a      	ands	r2, r3
 80037a4:	603a      	str	r2, [r7, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	4ab9      	ldr	r2, [pc, #740]	; (8003a90 <HAL_RCC_OscConfig+0x340>)
 80037aa:	4003      	ands	r3, r0
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	9b01      	ldr	r3, [sp, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4013      	ands	r3, r2
 80037b4:	603b      	str	r3, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b6:	2900      	cmp	r1, #0
 80037b8:	d000      	beq.n	80037bc <HAL_RCC_OscConfig+0x6c>
 80037ba:	e150      	b.n	8003a5e <HAL_RCC_OscConfig+0x30e>
        tickstart = HAL_GetTick();
 80037bc:	f7ff fe1e 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 80037c4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037c6:	4699      	mov	r9, r3
 80037c8:	e006      	b.n	80037d8 <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ca:	f7ff fe17 	bl	80033fc <HAL_GetTick>
 80037ce:	4643      	mov	r3, r8
 80037d0:	1ac0      	subs	r0, r0, r3
 80037d2:	2864      	cmp	r0, #100	; 0x64
 80037d4:	d900      	bls.n	80037d8 <HAL_RCC_OscConfig+0x88>
 80037d6:	e1cc      	b.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037d8:	464a      	mov	r2, r9
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	4213      	tst	r3, r2
 80037de:	d1f4      	bne.n	80037ca <HAL_RCC_OscConfig+0x7a>
 80037e0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	079a      	lsls	r2, r3, #30
 80037e4:	d527      	bpl.n	8003836 <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 80037e6:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e8:	2d04      	cmp	r5, #4
 80037ea:	d100      	bne.n	80037ee <HAL_RCC_OscConfig+0x9e>
 80037ec:	e16b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x376>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037ee:	2d0c      	cmp	r5, #12
 80037f0:	d100      	bne.n	80037f4 <HAL_RCC_OscConfig+0xa4>
 80037f2:	e165      	b.n	8003ac0 <HAL_RCC_OscConfig+0x370>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80037f4:	4ea4      	ldr	r6, [pc, #656]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
      if(hsi_state != RCC_HSI_OFF)
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d100      	bne.n	80037fc <HAL_RCC_OscConfig+0xac>
 80037fa:	e1d1      	b.n	8003ba0 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80037fc:	2109      	movs	r1, #9
 80037fe:	6832      	ldr	r2, [r6, #0]
 8003800:	438a      	bics	r2, r1
 8003802:	4313      	orrs	r3, r2
 8003804:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003806:	f7ff fdf9 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380a:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 800380c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800380e:	4698      	mov	r8, r3
 8003810:	e005      	b.n	800381e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003812:	f7ff fdf3 	bl	80033fc <HAL_GetTick>
 8003816:	1bc0      	subs	r0, r0, r7
 8003818:	2802      	cmp	r0, #2
 800381a:	d900      	bls.n	800381e <HAL_RCC_OscConfig+0xce>
 800381c:	e1a9      	b.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800381e:	4642      	mov	r2, r8
 8003820:	6833      	ldr	r3, [r6, #0]
 8003822:	421a      	tst	r2, r3
 8003824:	d0f5      	beq.n	8003812 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	6872      	ldr	r2, [r6, #4]
 8003828:	6923      	ldr	r3, [r4, #16]
 800382a:	499a      	ldr	r1, [pc, #616]	; (8003a94 <HAL_RCC_OscConfig+0x344>)
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	400a      	ands	r2, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	6073      	str	r3, [r6, #4]
 8003834:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003836:	06da      	lsls	r2, r3, #27
 8003838:	d52b      	bpl.n	8003892 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383a:	2d00      	cmp	r5, #0
 800383c:	d100      	bne.n	8003840 <HAL_RCC_OscConfig+0xf0>
 800383e:	e0df      	b.n	8003a00 <HAL_RCC_OscConfig+0x2b0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003840:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8003842:	4e91      	ldr	r6, [pc, #580]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003844:	2b00      	cmp	r3, #0
 8003846:	d100      	bne.n	800384a <HAL_RCC_OscConfig+0xfa>
 8003848:	e1bf      	b.n	8003bca <HAL_RCC_OscConfig+0x47a>
        __HAL_RCC_MSI_ENABLE();
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	6832      	ldr	r2, [r6, #0]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4313      	orrs	r3, r2
 8003852:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003854:	f7ff fdd2 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 800385c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800385e:	4698      	mov	r8, r3
 8003860:	e005      	b.n	800386e <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003862:	f7ff fdcb 	bl	80033fc <HAL_GetTick>
 8003866:	1bc0      	subs	r0, r0, r7
 8003868:	2802      	cmp	r0, #2
 800386a:	d900      	bls.n	800386e <HAL_RCC_OscConfig+0x11e>
 800386c:	e181      	b.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800386e:	4642      	mov	r2, r8
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	4213      	tst	r3, r2
 8003874:	d0f5      	beq.n	8003862 <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003876:	6873      	ldr	r3, [r6, #4]
 8003878:	4a87      	ldr	r2, [pc, #540]	; (8003a98 <HAL_RCC_OscConfig+0x348>)
 800387a:	4013      	ands	r3, r2
 800387c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800387e:	4313      	orrs	r3, r2
 8003880:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003882:	6872      	ldr	r2, [r6, #4]
 8003884:	6a23      	ldr	r3, [r4, #32]
 8003886:	0212      	lsls	r2, r2, #8
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	0a12      	lsrs	r2, r2, #8
 800388c:	4313      	orrs	r3, r2
 800388e:	6073      	str	r3, [r6, #4]
 8003890:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003892:	071a      	lsls	r2, r3, #28
 8003894:	d519      	bpl.n	80038ca <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003896:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003898:	4e7b      	ldr	r6, [pc, #492]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800389a:	2b00      	cmp	r3, #0
 800389c:	d100      	bne.n	80038a0 <HAL_RCC_OscConfig+0x150>
 800389e:	e16a      	b.n	8003b76 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_LSI_ENABLE();
 80038a0:	2201      	movs	r2, #1
 80038a2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80038a4:	4313      	orrs	r3, r2
 80038a6:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 80038a8:	f7ff fda8 	bl	80033fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038ac:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80038ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038b0:	4698      	mov	r8, r3
 80038b2:	e005      	b.n	80038c0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b4:	f7ff fda2 	bl	80033fc <HAL_GetTick>
 80038b8:	1bc0      	subs	r0, r0, r7
 80038ba:	2802      	cmp	r0, #2
 80038bc:	d900      	bls.n	80038c0 <HAL_RCC_OscConfig+0x170>
 80038be:	e158      	b.n	8003b72 <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038c0:	4642      	mov	r2, r8
 80038c2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80038c4:	421a      	tst	r2, r3
 80038c6:	d0f5      	beq.n	80038b4 <HAL_RCC_OscConfig+0x164>
 80038c8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ca:	075a      	lsls	r2, r3, #29
 80038cc:	d543      	bpl.n	8003956 <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ce:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80038d0:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d2:	4a6d      	ldr	r2, [pc, #436]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 80038d4:	055b      	lsls	r3, r3, #21
 80038d6:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80038d8:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4219      	tst	r1, r3
 80038dc:	d104      	bne.n	80038e8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80038e4:	2301      	movs	r3, #1
 80038e6:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	2780      	movs	r7, #128	; 0x80
 80038ea:	4e6c      	ldr	r6, [pc, #432]	; (8003a9c <HAL_RCC_OscConfig+0x34c>)
 80038ec:	007f      	lsls	r7, r7, #1
 80038ee:	6833      	ldr	r3, [r6, #0]
 80038f0:	423b      	tst	r3, r7
 80038f2:	d100      	bne.n	80038f6 <HAL_RCC_OscConfig+0x1a6>
 80038f4:	e12d      	b.n	8003b52 <HAL_RCC_OscConfig+0x402>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	68a3      	ldr	r3, [r4, #8]
 80038fa:	0052      	lsls	r2, r2, #1
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d100      	bne.n	8003902 <HAL_RCC_OscConfig+0x1b2>
 8003900:	e1d7      	b.n	8003cb2 <HAL_RCC_OscConfig+0x562>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d100      	bne.n	8003908 <HAL_RCC_OscConfig+0x1b8>
 8003906:	e108      	b.n	8003b1a <HAL_RCC_OscConfig+0x3ca>
 8003908:	21a0      	movs	r1, #160	; 0xa0
 800390a:	00c9      	lsls	r1, r1, #3
 800390c:	428b      	cmp	r3, r1
 800390e:	d100      	bne.n	8003912 <HAL_RCC_OscConfig+0x1c2>
 8003910:	e1f1      	b.n	8003cf6 <HAL_RCC_OscConfig+0x5a6>
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003914:	4962      	ldr	r1, [pc, #392]	; (8003aa0 <HAL_RCC_OscConfig+0x350>)
 8003916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003918:	400a      	ands	r2, r1
 800391a:	651a      	str	r2, [r3, #80]	; 0x50
 800391c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800391e:	4961      	ldr	r1, [pc, #388]	; (8003aa4 <HAL_RCC_OscConfig+0x354>)
 8003920:	400a      	ands	r2, r1
 8003922:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003924:	f7ff fd6a 	bl	80033fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003928:	2780      	movs	r7, #128	; 0x80
 800392a:	4b57      	ldr	r3, [pc, #348]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 800392c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800392e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <HAL_RCC_OscConfig+0x358>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003932:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003936:	e005      	b.n	8003944 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7ff fd60 	bl	80033fc <HAL_GetTick>
 800393c:	1b80      	subs	r0, r0, r6
 800393e:	4548      	cmp	r0, r9
 8003940:	d900      	bls.n	8003944 <HAL_RCC_OscConfig+0x1f4>
 8003942:	e116      	b.n	8003b72 <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003944:	4643      	mov	r3, r8
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	423b      	tst	r3, r7
 800394a:	d0f5      	beq.n	8003938 <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 800394c:	4653      	mov	r3, sl
 800394e:	2b01      	cmp	r3, #1
 8003950:	d100      	bne.n	8003954 <HAL_RCC_OscConfig+0x204>
 8003952:	e173      	b.n	8003c3c <HAL_RCC_OscConfig+0x4ec>
 8003954:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003956:	069b      	lsls	r3, r3, #26
 8003958:	d520      	bpl.n	800399c <HAL_RCC_OscConfig+0x24c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800395a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_HSI48_ENABLE();
 800395c:	4e4a      	ldr	r6, [pc, #296]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800395e:	2b00      	cmp	r3, #0
 8003960:	d100      	bne.n	8003964 <HAL_RCC_OscConfig+0x214>
 8003962:	e148      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_HSI48_ENABLE();
 8003964:	2101      	movs	r1, #1
 8003966:	68b2      	ldr	r2, [r6, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003968:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 800396a:	430a      	orrs	r2, r1
 800396c:	60b2      	str	r2, [r6, #8]
 800396e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003970:	4a4e      	ldr	r2, [pc, #312]	; (8003aac <HAL_RCC_OscConfig+0x35c>)
 8003972:	430b      	orrs	r3, r1
 8003974:	6373      	str	r3, [r6, #52]	; 0x34
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	6a11      	ldr	r1, [r2, #32]
 800397a:	019b      	lsls	r3, r3, #6
 800397c:	430b      	orrs	r3, r1
 800397e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003980:	f7ff fd3c 	bl	80033fc <HAL_GetTick>
 8003984:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003986:	e006      	b.n	8003996 <HAL_RCC_OscConfig+0x246>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003988:	f7ff fd38 	bl	80033fc <HAL_GetTick>
 800398c:	4643      	mov	r3, r8
 800398e:	1ac0      	subs	r0, r0, r3
 8003990:	2802      	cmp	r0, #2
 8003992:	d900      	bls.n	8003996 <HAL_RCC_OscConfig+0x246>
 8003994:	e0ed      	b.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003996:	68b3      	ldr	r3, [r6, #8]
 8003998:	421f      	tst	r7, r3
 800399a:	d0f5      	beq.n	8003988 <HAL_RCC_OscConfig+0x238>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800399c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d019      	beq.n	80039d6 <HAL_RCC_OscConfig+0x286>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a2:	2d0c      	cmp	r5, #12
 80039a4:	d100      	bne.n	80039a8 <HAL_RCC_OscConfig+0x258>
 80039a6:	e189      	b.n	8003cbc <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d100      	bne.n	80039ae <HAL_RCC_OscConfig+0x25e>
 80039ac:	e14d      	b.n	8003c4a <HAL_RCC_OscConfig+0x4fa>
        __HAL_RCC_PLL_DISABLE();
 80039ae:	4c36      	ldr	r4, [pc, #216]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 80039b0:	4a3f      	ldr	r2, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0x360>)
 80039b2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039b4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4013      	ands	r3, r2
 80039b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80039ba:	f7ff fd1f 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039be:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80039c0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039c2:	e005      	b.n	80039d0 <HAL_RCC_OscConfig+0x280>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7ff fd1a 	bl	80033fc <HAL_GetTick>
 80039c8:	1b40      	subs	r0, r0, r5
 80039ca:	2802      	cmp	r0, #2
 80039cc:	d900      	bls.n	80039d0 <HAL_RCC_OscConfig+0x280>
 80039ce:	e0d0      	b.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	4233      	tst	r3, r6
 80039d4:	d1f6      	bne.n	80039c4 <HAL_RCC_OscConfig+0x274>
  return HAL_OK;
 80039d6:	2000      	movs	r0, #0
 80039d8:	e00c      	b.n	80039f4 <HAL_RCC_OscConfig+0x2a4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039da:	2e00      	cmp	r6, #0
 80039dc:	d100      	bne.n	80039e0 <HAL_RCC_OscConfig+0x290>
 80039de:	e6d2      	b.n	8003786 <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	0392      	lsls	r2, r2, #14
 80039e6:	d400      	bmi.n	80039ea <HAL_RCC_OscConfig+0x29a>
 80039e8:	e6fb      	b.n	80037e2 <HAL_RCC_OscConfig+0x92>
 80039ea:	6862      	ldr	r2, [r4, #4]
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d000      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2a2>
 80039f0:	e6f7      	b.n	80037e2 <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 80039f2:	2001      	movs	r0, #1
}
 80039f4:	b002      	add	sp, #8
 80039f6:	bce0      	pop	{r5, r6, r7}
 80039f8:	46ba      	mov	sl, r7
 80039fa:	46b1      	mov	r9, r6
 80039fc:	46a8      	mov	r8, r5
 80039fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a00:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	059b      	lsls	r3, r3, #22
 8003a06:	d502      	bpl.n	8003a0e <HAL_RCC_OscConfig+0x2be>
 8003a08:	69e3      	ldr	r3, [r4, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f1      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0e:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003a10:	4821      	ldr	r0, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x348>)
 8003a12:	6851      	ldr	r1, [r2, #4]
 8003a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a16:	4001      	ands	r1, r0
 8003a18:	4319      	orrs	r1, r3
 8003a1a:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a1c:	6850      	ldr	r0, [r2, #4]
 8003a1e:	6a21      	ldr	r1, [r4, #32]
 8003a20:	0200      	lsls	r0, r0, #8
 8003a22:	0a00      	lsrs	r0, r0, #8
 8003a24:	0609      	lsls	r1, r1, #24
 8003a26:	4301      	orrs	r1, r0
 8003a28:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003a2a:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	0b5b      	lsrs	r3, r3, #13
 8003a30:	3301      	adds	r3, #1
 8003a32:	0212      	lsls	r2, r2, #8
 8003a34:	409a      	lsls	r2, r3
 8003a36:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003a38:	060a      	lsls	r2, r1, #24
 8003a3a:	491e      	ldr	r1, [pc, #120]	; (8003ab4 <HAL_RCC_OscConfig+0x364>)
 8003a3c:	0f12      	lsrs	r2, r2, #28
 8003a3e:	5c8a      	ldrb	r2, [r1, r2]
 8003a40:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003a42:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_RCC_OscConfig+0x368>)
 8003a44:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCC_OscConfig+0x36c>)
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f7ff fc91 	bl	8003370 <HAL_InitTick>
        if(status != HAL_OK)
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d1d0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x2a4>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	e71d      	b.n	8003892 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a56:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
 8003a58:	6813      	ldr	r3, [r2, #0]
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a5e:	f7ff fccd 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_OscConfig+0x338>)
        tickstart = HAL_GetTick();
 8003a64:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a66:	4699      	mov	r9, r3
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	029b      	lsls	r3, r3, #10
 8003a6c:	4698      	mov	r8, r3
 8003a6e:	e004      	b.n	8003a7a <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a70:	f7ff fcc4 	bl	80033fc <HAL_GetTick>
 8003a74:	1bc0      	subs	r0, r0, r7
 8003a76:	2864      	cmp	r0, #100	; 0x64
 8003a78:	d87b      	bhi.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4213      	tst	r3, r2
 8003a82:	d0f5      	beq.n	8003a70 <HAL_RCC_OscConfig+0x320>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	e6ac      	b.n	80037e2 <HAL_RCC_OscConfig+0x92>
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	fffeffff 	.word	0xfffeffff
 8003a90:	fffbffff 	.word	0xfffbffff
 8003a94:	ffffe0ff 	.word	0xffffe0ff
 8003a98:	ffff1fff 	.word	0xffff1fff
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	fffffeff 	.word	0xfffffeff
 8003aa4:	fffffbff 	.word	0xfffffbff
 8003aa8:	00001388 	.word	0x00001388
 8003aac:	40010000 	.word	0x40010000
 8003ab0:	feffffff 	.word	0xfeffffff
 8003ab4:	08005f48 	.word	0x08005f48
 8003ab8:	20000008 	.word	0x20000008
 8003abc:	20000010 	.word	0x20000010
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ac0:	2e00      	cmp	r6, #0
 8003ac2:	d000      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x376>
 8003ac4:	e696      	b.n	80037f4 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ac6:	4a91      	ldr	r2, [pc, #580]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	0752      	lsls	r2, r2, #29
 8003acc:	d502      	bpl.n	8003ad4 <HAL_RCC_OscConfig+0x384>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d100      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x384>
 8003ad2:	e78e      	b.n	80039f2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad4:	4e8d      	ldr	r6, [pc, #564]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
 8003ad6:	6922      	ldr	r2, [r4, #16]
 8003ad8:	6871      	ldr	r1, [r6, #4]
 8003ada:	488d      	ldr	r0, [pc, #564]	; (8003d10 <HAL_RCC_OscConfig+0x5c0>)
 8003adc:	0212      	lsls	r2, r2, #8
 8003ade:	4001      	ands	r1, r0
 8003ae0:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ae2:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ae6:	6832      	ldr	r2, [r6, #0]
 8003ae8:	438a      	bics	r2, r1
 8003aea:	4313      	orrs	r3, r2
 8003aec:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aee:	f7ff fde9 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003af2:	68f3      	ldr	r3, [r6, #12]
 8003af4:	4a87      	ldr	r2, [pc, #540]	; (8003d14 <HAL_RCC_OscConfig+0x5c4>)
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	0f1b      	lsrs	r3, r3, #28
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	40d8      	lsrs	r0, r3
 8003afe:	4b86      	ldr	r3, [pc, #536]	; (8003d18 <HAL_RCC_OscConfig+0x5c8>)
 8003b00:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003b02:	4b86      	ldr	r3, [pc, #536]	; (8003d1c <HAL_RCC_OscConfig+0x5cc>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f7ff fc33 	bl	8003370 <HAL_InitTick>
      if(status != HAL_OK)
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d000      	beq.n	8003b10 <HAL_RCC_OscConfig+0x3c0>
 8003b0e:	e771      	b.n	80039f4 <HAL_RCC_OscConfig+0x2a4>
 8003b10:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b12:	06da      	lsls	r2, r3, #27
 8003b14:	d400      	bmi.n	8003b18 <HAL_RCC_OscConfig+0x3c8>
 8003b16:	e6bc      	b.n	8003892 <HAL_RCC_OscConfig+0x142>
 8003b18:	e68f      	b.n	800383a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1a:	4e7c      	ldr	r6, [pc, #496]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
 8003b1c:	4a80      	ldr	r2, [pc, #512]	; (8003d20 <HAL_RCC_OscConfig+0x5d0>)
 8003b1e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003b20:	4013      	ands	r3, r2
 8003b22:	6533      	str	r3, [r6, #80]	; 0x50
 8003b24:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003b26:	4a7f      	ldr	r2, [pc, #508]	; (8003d24 <HAL_RCC_OscConfig+0x5d4>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003b2c:	f7ff fc66 	bl	80033fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8003b38:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b3c:	e004      	b.n	8003b48 <HAL_RCC_OscConfig+0x3f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7ff fc5d 	bl	80033fc <HAL_GetTick>
 8003b42:	1bc0      	subs	r0, r0, r7
 8003b44:	4548      	cmp	r0, r9
 8003b46:	d814      	bhi.n	8003b72 <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b48:	4642      	mov	r2, r8
 8003b4a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003b4c:	4213      	tst	r3, r2
 8003b4e:	d1f6      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3ee>
 8003b50:	e6fc      	b.n	800394c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b52:	6833      	ldr	r3, [r6, #0]
 8003b54:	433b      	orrs	r3, r7
 8003b56:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b58:	f7ff fc50 	bl	80033fc <HAL_GetTick>
 8003b5c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	6833      	ldr	r3, [r6, #0]
 8003b60:	423b      	tst	r3, r7
 8003b62:	d000      	beq.n	8003b66 <HAL_RCC_OscConfig+0x416>
 8003b64:	e6c7      	b.n	80038f6 <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7ff fc49 	bl	80033fc <HAL_GetTick>
 8003b6a:	4643      	mov	r3, r8
 8003b6c:	1ac0      	subs	r0, r0, r3
 8003b6e:	2864      	cmp	r0, #100	; 0x64
 8003b70:	d9f5      	bls.n	8003b5e <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 8003b72:	2003      	movs	r0, #3
 8003b74:	e73e      	b.n	80039f4 <HAL_RCC_OscConfig+0x2a4>
      __HAL_RCC_LSI_DISABLE();
 8003b76:	2201      	movs	r2, #1
 8003b78:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003b7a:	4393      	bics	r3, r2
 8003b7c:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003b7e:	f7ff fc3d 	bl	80033fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b82:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8003b84:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b86:	4698      	mov	r8, r3
 8003b88:	e004      	b.n	8003b94 <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8a:	f7ff fc37 	bl	80033fc <HAL_GetTick>
 8003b8e:	1bc0      	subs	r0, r0, r7
 8003b90:	2802      	cmp	r0, #2
 8003b92:	d8ee      	bhi.n	8003b72 <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b94:	4642      	mov	r2, r8
 8003b96:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003b98:	421a      	tst	r2, r3
 8003b9a:	d1f6      	bne.n	8003b8a <HAL_RCC_OscConfig+0x43a>
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	e694      	b.n	80038ca <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	6833      	ldr	r3, [r6, #0]
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003ba8:	f7ff fc28 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bac:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8003bae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bb0:	4698      	mov	r8, r3
 8003bb2:	e004      	b.n	8003bbe <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb4:	f7ff fc22 	bl	80033fc <HAL_GetTick>
 8003bb8:	1bc0      	subs	r0, r0, r7
 8003bba:	2802      	cmp	r0, #2
 8003bbc:	d8d9      	bhi.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	6833      	ldr	r3, [r6, #0]
 8003bc2:	421a      	tst	r2, r3
 8003bc4:	d1f6      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x464>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	e7a3      	b.n	8003b12 <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_MSI_DISABLE();
 8003bca:	6833      	ldr	r3, [r6, #0]
 8003bcc:	4a54      	ldr	r2, [pc, #336]	; (8003d20 <HAL_RCC_OscConfig+0x5d0>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003bd2:	f7ff fc13 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8003bda:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bdc:	4698      	mov	r8, r3
 8003bde:	e004      	b.n	8003bea <HAL_RCC_OscConfig+0x49a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003be0:	f7ff fc0c 	bl	80033fc <HAL_GetTick>
 8003be4:	1bc0      	subs	r0, r0, r7
 8003be6:	2802      	cmp	r0, #2
 8003be8:	d8c3      	bhi.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bea:	4642      	mov	r2, r8
 8003bec:	6833      	ldr	r3, [r6, #0]
 8003bee:	4213      	tst	r3, r2
 8003bf0:	d1f6      	bne.n	8003be0 <HAL_RCC_OscConfig+0x490>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	e64d      	b.n	8003892 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI48_DISABLE();
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	68b3      	ldr	r3, [r6, #8]
 8003bfa:	494c      	ldr	r1, [pc, #304]	; (8003d2c <HAL_RCC_OscConfig+0x5dc>)
 8003bfc:	4393      	bics	r3, r2
 8003bfe:	4a4c      	ldr	r2, [pc, #304]	; (8003d30 <HAL_RCC_OscConfig+0x5e0>)
 8003c00:	60b3      	str	r3, [r6, #8]
 8003c02:	6a13      	ldr	r3, [r2, #32]
 8003c04:	400b      	ands	r3, r1
 8003c06:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003c08:	f7ff fbf8 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c0c:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8003c0e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c10:	4698      	mov	r8, r3
 8003c12:	e004      	b.n	8003c1e <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c14:	f7ff fbf2 	bl	80033fc <HAL_GetTick>
 8003c18:	1bc0      	subs	r0, r0, r7
 8003c1a:	2802      	cmp	r0, #2
 8003c1c:	d8a9      	bhi.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c1e:	4642      	mov	r2, r8
 8003c20:	68b3      	ldr	r3, [r6, #8]
 8003c22:	421a      	tst	r2, r3
 8003c24:	d1f6      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4c4>
 8003c26:	e6b9      	b.n	800399c <HAL_RCC_OscConfig+0x24c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	4a38      	ldr	r2, [pc, #224]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
 8003c2c:	02db      	lsls	r3, r3, #11
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	6813      	ldr	r3, [r2, #0]
 8003c36:	4303      	orrs	r3, r0
 8003c38:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3a:	e710      	b.n	8003a5e <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4a33      	ldr	r2, [pc, #204]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
 8003c3e:	493d      	ldr	r1, [pc, #244]	; (8003d34 <HAL_RCC_OscConfig+0x5e4>)
 8003c40:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003c42:	400b      	ands	r3, r1
 8003c44:	6393      	str	r3, [r2, #56]	; 0x38
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	e685      	b.n	8003956 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4d30      	ldr	r5, [pc, #192]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
 8003c4c:	4a3a      	ldr	r2, [pc, #232]	; (8003d38 <HAL_RCC_OscConfig+0x5e8>)
 8003c4e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c50:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003c52:	4013      	ands	r3, r2
 8003c54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c56:	f7ff fbd1 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c5a:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003c5c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c5e:	e004      	b.n	8003c6a <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c60:	f7ff fbcc 	bl	80033fc <HAL_GetTick>
 8003c64:	1b80      	subs	r0, r0, r6
 8003c66:	2802      	cmp	r0, #2
 8003c68:	d883      	bhi.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	423b      	tst	r3, r7
 8003c6e:	d1f7      	bne.n	8003c60 <HAL_RCC_OscConfig+0x510>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c70:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c74:	68ea      	ldr	r2, [r5, #12]
 8003c76:	430b      	orrs	r3, r1
 8003c78:	4930      	ldr	r1, [pc, #192]	; (8003d3c <HAL_RCC_OscConfig+0x5ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c7a:	4e24      	ldr	r6, [pc, #144]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	682a      	ldr	r2, [r5, #0]
 8003c8a:	045b      	lsls	r3, r3, #17
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c90:	f7ff fbb4 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c94:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8003c96:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c98:	04ad      	lsls	r5, r5, #18
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCC_OscConfig+0x558>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7ff fbae 	bl	80033fc <HAL_GetTick>
 8003ca0:	1b00      	subs	r0, r0, r4
 8003ca2:	2802      	cmp	r0, #2
 8003ca4:	d900      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x558>
 8003ca6:	e764      	b.n	8003b72 <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ca8:	6833      	ldr	r3, [r6, #0]
 8003caa:	422b      	tst	r3, r5
 8003cac:	d0f6      	beq.n	8003c9c <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e6a0      	b.n	80039f4 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb2:	4a16      	ldr	r2, [pc, #88]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
 8003cb4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cba:	e633      	b.n	8003924 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d100      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x572>
 8003cc0:	e697      	b.n	80039f2 <HAL_RCC_OscConfig+0x2a2>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 8003cc8:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 8003ccc:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	401a      	ands	r2, r3
 8003cd0:	428a      	cmp	r2, r1
 8003cd2:	d000      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x586>
 8003cd4:	e68e      	b.n	80039f4 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003cd6:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd8:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003cda:	0392      	lsls	r2, r2, #14
 8003cdc:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	428a      	cmp	r2, r1
 8003ce0:	d000      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x594>
 8003ce2:	e687      	b.n	80039f4 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003ce4:	20c0      	movs	r0, #192	; 0xc0
 8003ce6:	0400      	lsls	r0, r0, #16
 8003ce8:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003cea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003cec:	1a18      	subs	r0, r3, r0
 8003cee:	1e43      	subs	r3, r0, #1
 8003cf0:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 8003cf2:	b2c0      	uxtb	r0, r0
 8003cf4:	e67e      	b.n	80039f4 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_OscConfig+0x5bc>)
 8003cf8:	3901      	subs	r1, #1
 8003cfa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003cfc:	39ff      	subs	r1, #255	; 0xff
 8003cfe:	4301      	orrs	r1, r0
 8003d00:	6519      	str	r1, [r3, #80]	; 0x50
 8003d02:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d04:	430a      	orrs	r2, r1
 8003d06:	651a      	str	r2, [r3, #80]	; 0x50
 8003d08:	e60c      	b.n	8003924 <HAL_RCC_OscConfig+0x1d4>
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	ffffe0ff 	.word	0xffffe0ff
 8003d14:	08005f48 	.word	0x08005f48
 8003d18:	20000008 	.word	0x20000008
 8003d1c:	20000010 	.word	0x20000010
 8003d20:	fffffeff 	.word	0xfffffeff
 8003d24:	fffffbff 	.word	0xfffffbff
 8003d28:	00001388 	.word	0x00001388
 8003d2c:	ffffdfff 	.word	0xffffdfff
 8003d30:	40010000 	.word	0x40010000
 8003d34:	efffffff 	.word	0xefffffff
 8003d38:	feffffff 	.word	0xfeffffff
 8003d3c:	ff02ffff 	.word	0xff02ffff

08003d40 <HAL_RCC_ClockConfig>:
{
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	46ce      	mov	lr, r9
 8003d44:	4647      	mov	r7, r8
 8003d46:	0005      	movs	r5, r0
 8003d48:	000c      	movs	r4, r1
 8003d4a:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d066      	beq.n	8003e1e <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	2201      	movs	r2, #1
 8003d52:	4e6b      	ldr	r6, [pc, #428]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	6833      	ldr	r3, [r6, #0]
 8003d56:	4013      	ands	r3, r2
 8003d58:	428b      	cmp	r3, r1
 8003d5a:	d362      	bcc.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	079a      	lsls	r2, r3, #30
 8003d60:	d506      	bpl.n	8003d70 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d62:	20f0      	movs	r0, #240	; 0xf0
 8003d64:	4967      	ldr	r1, [pc, #412]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	68ca      	ldr	r2, [r1, #12]
 8003d68:	4382      	bics	r2, r0
 8003d6a:	68a8      	ldr	r0, [r5, #8]
 8003d6c:	4302      	orrs	r2, r0
 8003d6e:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d70:	07db      	lsls	r3, r3, #31
 8003d72:	d52d      	bpl.n	8003dd0 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d74:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d76:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d78:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d7a:	2a02      	cmp	r2, #2
 8003d7c:	d04d      	beq.n	8003e1a <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d7e:	2a03      	cmp	r2, #3
 8003d80:	d100      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x44>
 8003d82:	e06f      	b.n	8003e64 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d84:	2a01      	cmp	r2, #1
 8003d86:	d100      	bne.n	8003d8a <HAL_RCC_ClockConfig+0x4a>
 8003d88:	e0a4      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x194>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d8a:	059b      	lsls	r3, r3, #22
 8003d8c:	d547      	bpl.n	8003e1e <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8e:	2103      	movs	r1, #3
 8003d90:	4e5c      	ldr	r6, [pc, #368]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	68f3      	ldr	r3, [r6, #12]
 8003d94:	438b      	bics	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8003d9a:	f7ff fb2f 	bl	80033fc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003da0:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d100      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x68>
 8003da6:	e075      	b.n	8003e94 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d100      	bne.n	8003dae <HAL_RCC_ClockConfig+0x6e>
 8003dac:	e082      	b.n	8003eb4 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d100      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x74>
 8003db2:	e094      	b.n	8003ede <HAL_RCC_ClockConfig+0x19e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003db4:	230c      	movs	r3, #12
 8003db6:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	4699      	mov	r9, r3
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x88>
 8003dbe:	f7ff fb1d 	bl	80033fc <HAL_GetTick>
 8003dc2:	1bc0      	subs	r0, r0, r7
 8003dc4:	4548      	cmp	r0, r9
 8003dc6:	d842      	bhi.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dc8:	4642      	mov	r2, r8
 8003dca:	68f3      	ldr	r3, [r6, #12]
 8003dcc:	421a      	tst	r2, r3
 8003dce:	d1f6      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4e4b      	ldr	r6, [pc, #300]	; (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	6833      	ldr	r3, [r6, #0]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d847      	bhi.n	8003e6c <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	075a      	lsls	r2, r3, #29
 8003de0:	d506      	bpl.n	8003df0 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de2:	4948      	ldr	r1, [pc, #288]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	4849      	ldr	r0, [pc, #292]	; (8003f0c <HAL_RCC_ClockConfig+0x1cc>)
 8003de6:	68ca      	ldr	r2, [r1, #12]
 8003de8:	4002      	ands	r2, r0
 8003dea:	68e8      	ldr	r0, [r5, #12]
 8003dec:	4302      	orrs	r2, r0
 8003dee:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	d42e      	bmi.n	8003e52 <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003df4:	f7ff fc66 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003df8:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	4a45      	ldr	r2, [pc, #276]	; (8003f10 <HAL_RCC_ClockConfig+0x1d0>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	0f1b      	lsrs	r3, r3, #28
 8003e02:	5cd3      	ldrb	r3, [r2, r3]
 8003e04:	40d8      	lsrs	r0, r3
 8003e06:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_RCC_ClockConfig+0x1d4>)
 8003e08:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003e0a:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <HAL_RCC_ClockConfig+0x1d8>)
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	f7ff faaf 	bl	8003370 <HAL_InitTick>
}
 8003e12:	bcc0      	pop	{r6, r7}
 8003e14:	46b9      	mov	r9, r7
 8003e16:	46b0      	mov	r8, r6
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e1a:	039b      	lsls	r3, r3, #14
 8003e1c:	d4b7      	bmi.n	8003d8e <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8003e1e:	2001      	movs	r0, #1
 8003e20:	e7f7      	b.n	8003e12 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	6833      	ldr	r3, [r6, #0]
 8003e24:	4393      	bics	r3, r2
 8003e26:	430b      	orrs	r3, r1
 8003e28:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e2a:	f7ff fae7 	bl	80033fc <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	2301      	movs	r3, #1
 8003e30:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e32:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 8003e34:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e36:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e38:	4642      	mov	r2, r8
 8003e3a:	6833      	ldr	r3, [r6, #0]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	42a3      	cmp	r3, r4
 8003e40:	d100      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x104>
 8003e42:	e78b      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7ff fada 	bl	80033fc <HAL_GetTick>
 8003e48:	1bc0      	subs	r0, r0, r7
 8003e4a:	4548      	cmp	r0, r9
 8003e4c:	d9f4      	bls.n	8003e38 <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8003e4e:	2003      	movs	r0, #3
 8003e50:	e7df      	b.n	8003e12 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e52:	492c      	ldr	r1, [pc, #176]	; (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	692b      	ldr	r3, [r5, #16]
 8003e56:	68ca      	ldr	r2, [r1, #12]
 8003e58:	4830      	ldr	r0, [pc, #192]	; (8003f1c <HAL_RCC_ClockConfig+0x1dc>)
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4002      	ands	r2, r0
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60cb      	str	r3, [r1, #12]
 8003e62:	e7c7      	b.n	8003df4 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	d492      	bmi.n	8003d8e <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8003e68:	2001      	movs	r0, #1
 8003e6a:	e7d2      	b.n	8003e12 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6c:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	0034      	movs	r4, r6
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e70:	4393      	bics	r3, r2
 8003e72:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e74:	f7ff fac2 	bl	80033fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 8003e7a:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7c:	2601      	movs	r6, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7e:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	421e      	tst	r6, r3
 8003e84:	d0aa      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e86:	f7ff fab9 	bl	80033fc <HAL_GetTick>
 8003e8a:	1bc0      	subs	r0, r0, r7
 8003e8c:	4540      	cmp	r0, r8
 8003e8e:	d9f7      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x140>
        return HAL_TIMEOUT;
 8003e90:	2003      	movs	r0, #3
 8003e92:	e7be      	b.n	8003e12 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e94:	330a      	adds	r3, #10
 8003e96:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9a:	4699      	mov	r9, r3
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCC_ClockConfig+0x168>
 8003e9e:	f7ff faad 	bl	80033fc <HAL_GetTick>
 8003ea2:	1bc0      	subs	r0, r0, r7
 8003ea4:	4548      	cmp	r0, r9
 8003ea6:	d8d2      	bhi.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	68f3      	ldr	r3, [r6, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d1f5      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x15e>
 8003eb2:	e78d      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb4:	3309      	adds	r3, #9
 8003eb6:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	4699      	mov	r9, r3
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x188>
 8003ebe:	f7ff fa9d 	bl	80033fc <HAL_GetTick>
 8003ec2:	1bc0      	subs	r0, r0, r7
 8003ec4:	4548      	cmp	r0, r9
 8003ec6:	d8c2      	bhi.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec8:	4642      	mov	r2, r8
 8003eca:	68f3      	ldr	r3, [r6, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d1f5      	bne.n	8003ebe <HAL_RCC_ClockConfig+0x17e>
 8003ed2:	e77d      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed4:	075b      	lsls	r3, r3, #29
 8003ed6:	d500      	bpl.n	8003eda <HAL_RCC_ClockConfig+0x19a>
 8003ed8:	e759      	b.n	8003d8e <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8003eda:	2001      	movs	r0, #1
 8003edc:	e799      	b.n	8003e12 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ede:	330b      	adds	r3, #11
 8003ee0:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	4699      	mov	r9, r3
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b2>
 8003ee8:	f7ff fa88 	bl	80033fc <HAL_GetTick>
 8003eec:	1bc0      	subs	r0, r0, r7
 8003eee:	4548      	cmp	r0, r9
 8003ef0:	d8ad      	bhi.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef2:	4642      	mov	r2, r8
 8003ef4:	68f3      	ldr	r3, [r6, #12]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d1f5      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x1a8>
 8003efc:	e768      	b.n	8003dd0 <HAL_RCC_ClockConfig+0x90>
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	40022000 	.word	0x40022000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	00001388 	.word	0x00001388
 8003f0c:	fffff8ff 	.word	0xfffff8ff
 8003f10:	08005f48 	.word	0x08005f48
 8003f14:	20000008 	.word	0x20000008
 8003f18:	20000010 	.word	0x20000010
 8003f1c:	ffffc7ff 	.word	0xffffc7ff

08003f20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	055b      	lsls	r3, r3, #21
 8003f28:	0f5b      	lsrs	r3, r3, #29
 8003f2a:	5cd3      	ldrb	r3, [r2, r3]
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003f2e:	6810      	ldr	r0, [r2, #0]
 8003f30:	40d8      	lsrs	r0, r3
}
 8003f32:	4770      	bx	lr
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08005f58 	.word	0x08005f58
 8003f3c:	20000008 	.word	0x20000008

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003f42:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	049b      	lsls	r3, r3, #18
 8003f48:	0f5b      	lsrs	r3, r3, #29
 8003f4a:	5cd3      	ldrb	r3, [r2, r3]
 8003f4c:	4a03      	ldr	r2, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003f4e:	6810      	ldr	r0, [r2, #0]
 8003f50:	40d8      	lsrs	r0, r3
}
 8003f52:	4770      	bx	lr
 8003f54:	40021000 	.word	0x40021000
 8003f58:	08005f58 	.word	0x08005f58
 8003f5c:	20000008 	.word	0x20000008

08003f60 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003f60:	2282      	movs	r2, #130	; 0x82
{
 8003f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f64:	46ce      	mov	lr, r9
 8003f66:	4647      	mov	r7, r8
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003f68:	6803      	ldr	r3, [r0, #0]
 8003f6a:	0112      	lsls	r2, r2, #4
{
 8003f6c:	0004      	movs	r4, r0
 8003f6e:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f70:	4213      	tst	r3, r2
 8003f72:	d059      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	4a7e      	ldr	r2, [pc, #504]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003f78:	055b      	lsls	r3, r3, #21
 8003f7a:	6b91      	ldr	r1, [r2, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8003f7c:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7e:	4219      	tst	r1, r3
 8003f80:	d100      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003f82:	e08c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	2680      	movs	r6, #128	; 0x80
 8003f86:	4d7b      	ldr	r5, [pc, #492]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8003f88:	0076      	lsls	r6, r6, #1
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	4233      	tst	r3, r6
 8003f8e:	d100      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f90:	e090      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f92:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003f94:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f96:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003f98:	4d75      	ldr	r5, [pc, #468]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003f9a:	0392      	lsls	r2, r2, #14
 8003f9c:	682b      	ldr	r3, [r5, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f9e:	4010      	ands	r0, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003fa0:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003fa2:	4298      	cmp	r0, r3
 8003fa4:	d100      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003fa6:	e0a5      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003fa8:	23c0      	movs	r3, #192	; 0xc0
 8003faa:	000a      	movs	r2, r1
 8003fac:	029b      	lsls	r3, r3, #10
 8003fae:	401a      	ands	r2, r3
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d100      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fb4:	e0b7      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003fb6:	486e      	ldr	r0, [pc, #440]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003fb8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003fba:	0005      	movs	r5, r0
 8003fbc:	401d      	ands	r5, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003fbe:	4218      	tst	r0, r3
 8003fc0:	d100      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fc2:	e089      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fc4:	6823      	ldr	r3, [r4, #0]
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003fc6:	4295      	cmp	r5, r2
 8003fc8:	d100      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003fca:	e0a1      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fcc:	0698      	lsls	r0, r3, #26
 8003fce:	d400      	bmi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003fd0:	e09e      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003fd2:	4d67      	ldr	r5, [pc, #412]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003fd4:	4b68      	ldr	r3, [pc, #416]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003fd6:	6d2e      	ldr	r6, [r5, #80]	; 0x50

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fd8:	6d28      	ldr	r0, [r5, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003fda:	4033      	ands	r3, r6
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fdc:	4684      	mov	ip, r0
 8003fde:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003fe0:	4698      	mov	r8, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe2:	4663      	mov	r3, ip
 8003fe4:	0300      	lsls	r0, r0, #12
 8003fe6:	4318      	orrs	r0, r3
 8003fe8:	6528      	str	r0, [r5, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8003fec:	4b63      	ldr	r3, [pc, #396]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8003fee:	4018      	ands	r0, r3

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003ff0:	4643      	mov	r3, r8
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff2:	6528      	str	r0, [r5, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003ff4:	652b      	str	r3, [r5, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003ff6:	05f3      	lsls	r3, r6, #23
 8003ff8:	d500      	bpl.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003ffa:	e0a0      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003ffc:	6823      	ldr	r3, [r4, #0]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ffe:	20c0      	movs	r0, #192	; 0xc0
 8004000:	0280      	lsls	r0, r0, #10
 8004002:	4282      	cmp	r2, r0
 8004004:	d169      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004006:	20c0      	movs	r0, #192	; 0xc0
 8004008:	0380      	lsls	r0, r0, #14
 800400a:	4008      	ands	r0, r1
 800400c:	4958      	ldr	r1, [pc, #352]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800400e:	4d5c      	ldr	r5, [pc, #368]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004010:	680a      	ldr	r2, [r1, #0]
 8004012:	402a      	ands	r2, r5
 8004014:	4310      	orrs	r0, r2
 8004016:	22c0      	movs	r2, #192	; 0xc0
 8004018:	6008      	str	r0, [r1, #0]
 800401a:	4855      	ldr	r0, [pc, #340]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800401c:	0292      	lsls	r2, r2, #10
 800401e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004020:	430a      	orrs	r2, r1
 8004022:	6502      	str	r2, [r0, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004024:	2f01      	cmp	r7, #1
 8004026:	d05e      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004028:	07da      	lsls	r2, r3, #31
 800402a:	d506      	bpl.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800402c:	2003      	movs	r0, #3
 800402e:	4950      	ldr	r1, [pc, #320]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004030:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004032:	4382      	bics	r2, r0
 8004034:	68e0      	ldr	r0, [r4, #12]
 8004036:	4302      	orrs	r2, r0
 8004038:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800403a:	079a      	lsls	r2, r3, #30
 800403c:	d506      	bpl.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403e:	200c      	movs	r0, #12
 8004040:	494b      	ldr	r1, [pc, #300]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004042:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004044:	4382      	bics	r2, r0
 8004046:	6920      	ldr	r0, [r4, #16]
 8004048:	4302      	orrs	r2, r0
 800404a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800404c:	075a      	lsls	r2, r3, #29
 800404e:	d506      	bpl.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004050:	4947      	ldr	r1, [pc, #284]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004052:	484c      	ldr	r0, [pc, #304]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004054:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004056:	4002      	ands	r2, r0
 8004058:	6960      	ldr	r0, [r4, #20]
 800405a:	4302      	orrs	r2, r0
 800405c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800405e:	071a      	lsls	r2, r3, #28
 8004060:	d506      	bpl.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004062:	4943      	ldr	r1, [pc, #268]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004064:	4848      	ldr	r0, [pc, #288]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004066:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004068:	4002      	ands	r2, r0
 800406a:	69a0      	ldr	r0, [r4, #24]
 800406c:	4302      	orrs	r2, r0
 800406e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004070:	065a      	lsls	r2, r3, #25
 8004072:	d506      	bpl.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004074:	493e      	ldr	r1, [pc, #248]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004076:	4845      	ldr	r0, [pc, #276]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004078:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800407a:	4002      	ands	r2, r0
 800407c:	6a20      	ldr	r0, [r4, #32]
 800407e:	4302      	orrs	r2, r0
 8004080:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004082:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	d506      	bpl.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004088:	4a39      	ldr	r2, [pc, #228]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800408a:	4941      	ldr	r1, [pc, #260]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800408c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800408e:	400b      	ands	r3, r1
 8004090:	69e1      	ldr	r1, [r4, #28]
 8004092:	430b      	orrs	r3, r1
 8004094:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8004096:	bcc0      	pop	{r6, r7}
 8004098:	46b9      	mov	r9, r7
 800409a:	46b0      	mov	r8, r6
 800409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a0:	6b91      	ldr	r1, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4d34      	ldr	r5, [pc, #208]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x214>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6393      	str	r3, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	0076      	lsls	r6, r6, #1
      pwrclkchanged = SET;
 80040ac:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4233      	tst	r3, r6
 80040b0:	d000      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040b2:	e76e      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	4333      	orrs	r3, r6
 80040b8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80040ba:	f7ff f99f 	bl	80033fc <HAL_GetTick>
 80040be:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	4233      	tst	r3, r6
 80040c4:	d000      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80040c6:	e764      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c8:	f7ff f998 	bl	80033fc <HAL_GetTick>
 80040cc:	4643      	mov	r3, r8
 80040ce:	1ac0      	subs	r0, r0, r3
 80040d0:	2864      	cmp	r0, #100	; 0x64
 80040d2:	d9f5      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          return HAL_TIMEOUT;
 80040d4:	2003      	movs	r0, #3
 80040d6:	e7de      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	4825      	ldr	r0, [pc, #148]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80040dc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80040de:	430a      	orrs	r2, r1
 80040e0:	6502      	str	r2, [r0, #80]	; 0x50
    if(pwrclkchanged == SET)
 80040e2:	2f01      	cmp	r7, #1
 80040e4:	d1a0      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80040e8:	492a      	ldr	r1, [pc, #168]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80040ea:	400a      	ands	r2, r1
 80040ec:	6382      	str	r2, [r0, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ee:	07da      	lsls	r2, r3, #31
 80040f0:	d5a3      	bpl.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80040f2:	e79b      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xcc>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80040f4:	68a3      	ldr	r3, [r4, #8]
 80040f6:	401a      	ands	r2, r3
 80040f8:	4282      	cmp	r2, r0
 80040fa:	d000      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80040fc:	e754      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80040fe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004100:	22c0      	movs	r2, #192	; 0xc0
 8004102:	001d      	movs	r5, r3
 8004104:	0292      	lsls	r2, r2, #10
 8004106:	4015      	ands	r5, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004108:	4213      	tst	r3, r2
 800410a:	d02d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800410c:	400a      	ands	r2, r1
 800410e:	e759      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004110:	20c0      	movs	r0, #192	; 0xc0
 8004112:	68a6      	ldr	r6, [r4, #8]
 8004114:	0280      	lsls	r0, r0, #10
 8004116:	4030      	ands	r0, r6
 8004118:	42a8      	cmp	r0, r5
 800411a:	d100      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800411c:	e76f      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800411e:	0518      	lsls	r0, r3, #20
 8004120:	d400      	bmi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8004122:	e76c      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004124:	e755      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004128:	681d      	ldr	r5, [r3, #0]
 800412a:	03ad      	lsls	r5, r5, #14
 800412c:	d41e      	bmi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	001d      	movs	r5, r3
 8004132:	4015      	ands	r5, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004134:	4213      	tst	r3, r2
 8004136:	d000      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004138:	e744      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	e766      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 800413e:	f7ff f95d 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x238>)
        tickstart = HAL_GetTick();
 800414a:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800414e:	e004      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7ff f954 	bl	80033fc <HAL_GetTick>
 8004154:	1b80      	subs	r0, r0, r6
 8004156:	4548      	cmp	r0, r9
 8004158:	d8bc      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800415a:	4642      	mov	r2, r8
 800415c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800415e:	4213      	tst	r3, r2
 8004160:	d0f6      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004162:	22c0      	movs	r2, #192	; 0xc0
 8004164:	6861      	ldr	r1, [r4, #4]
 8004166:	0292      	lsls	r2, r2, #10
 8004168:	400a      	ands	r2, r1
 800416a:	e747      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
          return HAL_ERROR;
 800416c:	2001      	movs	r0, #1
 800416e:	e792      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004170:	40021000 	.word	0x40021000
 8004174:	40007000 	.word	0x40007000
 8004178:	fffcffff 	.word	0xfffcffff
 800417c:	fff7ffff 	.word	0xfff7ffff
 8004180:	ffcfffff 	.word	0xffcfffff
 8004184:	fffff3ff 	.word	0xfffff3ff
 8004188:	ffffcfff 	.word	0xffffcfff
 800418c:	fbffffff 	.word	0xfbffffff
 8004190:	fff3ffff 	.word	0xfff3ffff
 8004194:	efffffff 	.word	0xefffffff
 8004198:	00001388 	.word	0x00001388

0800419c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800419c:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 800419e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a0:	05d2      	lsls	r2, r2, #23
 80041a2:	4290      	cmp	r0, r2
 80041a4:	d005      	beq.n	80041b2 <TIM_Base_SetConfig+0x16>
 80041a6:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <TIM_Base_SetConfig+0x40>)
 80041a8:	4290      	cmp	r0, r2
 80041aa:	d002      	beq.n	80041b2 <TIM_Base_SetConfig+0x16>
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <TIM_Base_SetConfig+0x44>)
 80041ae:	4290      	cmp	r0, r2
 80041b0:	d107      	bne.n	80041c2 <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b2:	2270      	movs	r2, #112	; 0x70
 80041b4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80041b6:	684a      	ldr	r2, [r1, #4]
 80041b8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ba:	4a0a      	ldr	r2, [pc, #40]	; (80041e4 <TIM_Base_SetConfig+0x48>)
 80041bc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041be:	68ca      	ldr	r2, [r1, #12]
 80041c0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c2:	2280      	movs	r2, #128	; 0x80
 80041c4:	4393      	bics	r3, r2
 80041c6:	690a      	ldr	r2, [r1, #16]
 80041c8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80041ca:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041cc:	688b      	ldr	r3, [r1, #8]
 80041ce:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d0:	680b      	ldr	r3, [r1, #0]
 80041d2:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d4:	2301      	movs	r3, #1
 80041d6:	6143      	str	r3, [r0, #20]
}
 80041d8:	4770      	bx	lr
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	40010800 	.word	0x40010800
 80041e0:	40011400 	.word	0x40011400
 80041e4:	fffffcff 	.word	0xfffffcff

080041e8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80041e8:	2239      	movs	r2, #57	; 0x39
 80041ea:	5c81      	ldrb	r1, [r0, r2]
{
 80041ec:	0003      	movs	r3, r0
    return HAL_ERROR;
 80041ee:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80041f0:	2901      	cmp	r1, #1
 80041f2:	d110      	bne.n	8004216 <HAL_TIM_Base_Start+0x2e>
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	3101      	adds	r1, #1
 80041f6:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	05d2      	lsls	r2, r2, #23
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00a      	beq.n	8004218 <HAL_TIM_Base_Start+0x30>
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <HAL_TIM_Base_Start+0x4c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <HAL_TIM_Base_Start+0x30>
 8004208:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <HAL_TIM_Base_Start+0x50>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4310      	orrs	r0, r2
 8004212:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8004214:	2000      	movs	r0, #0
}
 8004216:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004218:	2207      	movs	r2, #7
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421e:	2a06      	cmp	r2, #6
 8004220:	d005      	beq.n	800422e <HAL_TIM_Base_Start+0x46>
      __HAL_TIM_ENABLE(htim);
 8004222:	2101      	movs	r1, #1
 8004224:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004226:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e7f3      	b.n	8004216 <HAL_TIM_Base_Start+0x2e>
  return HAL_OK;
 800422e:	2000      	movs	r0, #0
 8004230:	e7f1      	b.n	8004216 <HAL_TIM_Base_Start+0x2e>
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	40010800 	.word	0x40010800
 8004238:	40011400 	.word	0x40011400

0800423c <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800423c:	2900      	cmp	r1, #0
 800423e:	d120      	bne.n	8004282 <HAL_TIM_OC_Start+0x46>
 8004240:	233a      	movs	r3, #58	; 0x3a
 8004242:	5cc2      	ldrb	r2, [r0, r3]
 8004244:	2a01      	cmp	r2, #1
 8004246:	d124      	bne.n	8004292 <HAL_TIM_OC_Start+0x56>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004248:	2202      	movs	r2, #2
 800424a:	54c2      	strb	r2, [r0, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800424c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800424e:	221f      	movs	r2, #31
 8004250:	2001      	movs	r0, #1
 8004252:	4011      	ands	r1, r2
 8004254:	0002      	movs	r2, r0
 8004256:	408a      	lsls	r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004258:	6a19      	ldr	r1, [r3, #32]
 800425a:	4391      	bics	r1, r2
 800425c:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800425e:	6a19      	ldr	r1, [r3, #32]
 8004260:	430a      	orrs	r2, r1
 8004262:	621a      	str	r2, [r3, #32]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004264:	2280      	movs	r2, #128	; 0x80
 8004266:	05d2      	lsls	r2, r2, #23
 8004268:	4293      	cmp	r3, r2
 800426a:	d014      	beq.n	8004296 <HAL_TIM_OC_Start+0x5a>
 800426c:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <HAL_TIM_OC_Start+0x88>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d011      	beq.n	8004296 <HAL_TIM_OC_Start+0x5a>
 8004272:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <HAL_TIM_OC_Start+0x8c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <HAL_TIM_OC_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	4310      	orrs	r0, r2
 800427c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800427e:	2000      	movs	r0, #0
}
 8004280:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004282:	2904      	cmp	r1, #4
 8004284:	d012      	beq.n	80042ac <HAL_TIM_OC_Start+0x70>
 8004286:	2908      	cmp	r1, #8
 8004288:	d017      	beq.n	80042ba <HAL_TIM_OC_Start+0x7e>
 800428a:	233d      	movs	r3, #61	; 0x3d
 800428c:	5cc2      	ldrb	r2, [r0, r3]
 800428e:	2a01      	cmp	r2, #1
 8004290:	d0da      	beq.n	8004248 <HAL_TIM_OC_Start+0xc>
    return HAL_ERROR;
 8004292:	2001      	movs	r0, #1
 8004294:	e7f4      	b.n	8004280 <HAL_TIM_OC_Start+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004296:	2207      	movs	r2, #7
 8004298:	6899      	ldr	r1, [r3, #8]
 800429a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429c:	2a06      	cmp	r2, #6
 800429e:	d00a      	beq.n	80042b6 <HAL_TIM_OC_Start+0x7a>
      __HAL_TIM_ENABLE(htim);
 80042a0:	2101      	movs	r1, #1
 80042a2:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80042a4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e7e9      	b.n	8004280 <HAL_TIM_OC_Start+0x44>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ac:	233b      	movs	r3, #59	; 0x3b
 80042ae:	5cc2      	ldrb	r2, [r0, r3]
 80042b0:	2a01      	cmp	r2, #1
 80042b2:	d0c9      	beq.n	8004248 <HAL_TIM_OC_Start+0xc>
 80042b4:	e7ed      	b.n	8004292 <HAL_TIM_OC_Start+0x56>
  return HAL_OK;
 80042b6:	2000      	movs	r0, #0
 80042b8:	e7e2      	b.n	8004280 <HAL_TIM_OC_Start+0x44>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ba:	233c      	movs	r3, #60	; 0x3c
 80042bc:	5cc2      	ldrb	r2, [r0, r3]
 80042be:	2a01      	cmp	r2, #1
 80042c0:	d0c2      	beq.n	8004248 <HAL_TIM_OC_Start+0xc>
 80042c2:	e7e6      	b.n	8004292 <HAL_TIM_OC_Start+0x56>
 80042c4:	40010800 	.word	0x40010800
 80042c8:	40011400 	.word	0x40011400

080042cc <HAL_TIM_OC_Stop>:
{
 80042cc:	b570      	push	{r4, r5, r6, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042ce:	2501      	movs	r5, #1
 80042d0:	241f      	movs	r4, #31
 80042d2:	002e      	movs	r6, r5
 80042d4:	400c      	ands	r4, r1
 80042d6:	40a6      	lsls	r6, r4
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042d8:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	43b2      	bics	r2, r6
 80042de:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	621a      	str	r2, [r3, #32]
  __HAL_TIM_DISABLE(htim);
 80042e4:	6a1c      	ldr	r4, [r3, #32]
 80042e6:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <HAL_TIM_OC_Stop+0x54>)
 80042e8:	4214      	tst	r4, r2
 80042ea:	d102      	bne.n	80042f2 <HAL_TIM_OC_Stop+0x26>
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	43aa      	bics	r2, r5
 80042f0:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042f2:	2900      	cmp	r1, #0
 80042f4:	d104      	bne.n	8004300 <HAL_TIM_OC_Stop+0x34>
 80042f6:	233a      	movs	r3, #58	; 0x3a
 80042f8:	2201      	movs	r2, #1
 80042fa:	54c2      	strb	r2, [r0, r3]
}
 80042fc:	2000      	movs	r0, #0
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	2904      	cmp	r1, #4
 8004302:	d005      	beq.n	8004310 <HAL_TIM_OC_Stop+0x44>
 8004304:	2908      	cmp	r1, #8
 8004306:	d007      	beq.n	8004318 <HAL_TIM_OC_Stop+0x4c>
 8004308:	233d      	movs	r3, #61	; 0x3d
 800430a:	2201      	movs	r2, #1
 800430c:	54c2      	strb	r2, [r0, r3]
 800430e:	e7f5      	b.n	80042fc <HAL_TIM_OC_Stop+0x30>
 8004310:	233b      	movs	r3, #59	; 0x3b
 8004312:	2201      	movs	r2, #1
 8004314:	54c2      	strb	r2, [r0, r3]
 8004316:	e7f1      	b.n	80042fc <HAL_TIM_OC_Stop+0x30>
 8004318:	233c      	movs	r3, #60	; 0x3c
 800431a:	2201      	movs	r2, #1
 800431c:	54c2      	strb	r2, [r0, r3]
 800431e:	e7ed      	b.n	80042fc <HAL_TIM_OC_Stop+0x30>
 8004320:	00001111 	.word	0x00001111

08004324 <HAL_TIM_PWM_Init>:
{
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004328:	d01e      	beq.n	8004368 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	2339      	movs	r3, #57	; 0x39
 800432c:	5cc3      	ldrb	r3, [r0, r3]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d014      	beq.n	800435e <HAL_TIM_PWM_Init+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004338:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800433a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433c:	c901      	ldmia	r1!, {r0}
 800433e:	f7ff ff2d 	bl	800419c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004342:	2301      	movs	r3, #1
 8004344:	223e      	movs	r2, #62	; 0x3e
  return HAL_OK;
 8004346:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004348:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434a:	3a04      	subs	r2, #4
 800434c:	54a3      	strb	r3, [r4, r2]
 800434e:	3201      	adds	r2, #1
 8004350:	54a3      	strb	r3, [r4, r2]
 8004352:	3201      	adds	r2, #1
 8004354:	54a3      	strb	r3, [r4, r2]
 8004356:	3201      	adds	r2, #1
 8004358:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800435a:	5563      	strb	r3, [r4, r5]
}
 800435c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800435e:	3338      	adds	r3, #56	; 0x38
 8004360:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004362:	f7fe fee3 	bl	800312c <HAL_TIM_PWM_MspInit>
 8004366:	e7e5      	b.n	8004334 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8004368:	2001      	movs	r0, #1
 800436a:	e7f7      	b.n	800435c <HAL_TIM_PWM_Init+0x38>

0800436c <HAL_TIM_PWM_Start>:
 800436c:	b510      	push	{r4, lr}
 800436e:	f7ff ff65 	bl	800423c <HAL_TIM_OC_Start>
 8004372:	bd10      	pop	{r4, pc}

08004374 <HAL_TIM_PWM_Stop>:
 8004374:	b510      	push	{r4, lr}
 8004376:	f7ff ffa9 	bl	80042cc <HAL_TIM_OC_Stop>
 800437a:	bd10      	pop	{r4, pc}

0800437c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800437c:	2338      	movs	r3, #56	; 0x38
{
 800437e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004380:	5cc4      	ldrb	r4, [r0, r3]
{
 8004382:	0005      	movs	r5, r0
  __HAL_LOCK(htim);
 8004384:	2c01      	cmp	r4, #1
 8004386:	d100      	bne.n	800438a <HAL_TIM_PWM_ConfigChannel+0xe>
 8004388:	e0a3      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x156>
 800438a:	2001      	movs	r0, #1
 800438c:	54e8      	strb	r0, [r5, r3]
  switch (Channel)
 800438e:	2a08      	cmp	r2, #8
 8004390:	d05a      	beq.n	8004448 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8004392:	d82f      	bhi.n	80043f4 <HAL_TIM_PWM_ConfigChannel+0x78>
 8004394:	2a00      	cmp	r2, #0
 8004396:	d100      	bne.n	800439a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004398:	e079      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x112>
 800439a:	2a04      	cmp	r2, #4
 800439c:	d126      	bne.n	80043ec <HAL_TIM_PWM_ConfigChannel+0x70>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439e:	2010      	movs	r0, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043a0:	682b      	ldr	r3, [r5, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043a2:	4c4d      	ldr	r4, [pc, #308]	; (80044d8 <HAL_TIM_PWM_ConfigChannel+0x15c>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	4382      	bics	r2, r0
 80043a8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80043aa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80043ac:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80043ae:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b0:	4004      	ands	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b2:	6808      	ldr	r0, [r1, #0]
 80043b4:	0200      	lsls	r0, r0, #8
 80043b6:	4320      	orrs	r0, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80043b8:	2420      	movs	r4, #32
 80043ba:	43a2      	bics	r2, r4
 80043bc:	0014      	movs	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043be:	688a      	ldr	r2, [r1, #8]
  TIMx->CR2 = tmpcr2;
 80043c0:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043c2:	0112      	lsls	r2, r2, #4
  TIMx->CCMR1 = tmpccmrx;
 80043c4:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80043c6:	6848      	ldr	r0, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043c8:	4322      	orrs	r2, r4
  TIMx->CCR2 = OC_Config->Pulse;
 80043ca:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80043cc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	6998      	ldr	r0, [r3, #24]
 80043d2:	0112      	lsls	r2, r2, #4
 80043d4:	4302      	orrs	r2, r0
 80043d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	4840      	ldr	r0, [pc, #256]	; (80044dc <HAL_TIM_PWM_ConfigChannel+0x160>)
 80043dc:	4002      	ands	r2, r0
 80043de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e0:	68ca      	ldr	r2, [r1, #12]
 80043e2:	6998      	ldr	r0, [r3, #24]
 80043e4:	0212      	lsls	r2, r2, #8
 80043e6:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043ea:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80043ec:	2338      	movs	r3, #56	; 0x38
 80043ee:	2200      	movs	r2, #0
 80043f0:	54ea      	strb	r2, [r5, r3]
}
 80043f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (Channel)
 80043f4:	2001      	movs	r0, #1
 80043f6:	2a0c      	cmp	r2, #12
 80043f8:	d1f8      	bne.n	80043ec <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043fa:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043fc:	4838      	ldr	r0, [pc, #224]	; (80044e0 <HAL_TIM_PWM_ConfigChannel+0x164>)
 80043fe:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004400:	4c35      	ldr	r4, [pc, #212]	; (80044d8 <HAL_TIM_PWM_ConfigChannel+0x15c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004402:	4002      	ands	r2, r0
 8004404:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004406:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004408:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800440a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800440c:	4004      	ands	r4, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800440e:	6808      	ldr	r0, [r1, #0]
 8004410:	0200      	lsls	r0, r0, #8
 8004412:	4320      	orrs	r0, r4
  tmpccer &= ~TIM_CCER_CC4P;
 8004414:	4c33      	ldr	r4, [pc, #204]	; (80044e4 <HAL_TIM_PWM_ConfigChannel+0x168>)
 8004416:	4014      	ands	r4, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004418:	688a      	ldr	r2, [r1, #8]
  TIMx->CR2 = tmpcr2;
 800441a:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800441c:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 800441e:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004420:	6848      	ldr	r0, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004422:	4322      	orrs	r2, r4
  TIMx->CCR4 = OC_Config->Pulse;
 8004424:	6418      	str	r0, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004426:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004428:	2280      	movs	r2, #128	; 0x80
 800442a:	69d8      	ldr	r0, [r3, #28]
 800442c:	0112      	lsls	r2, r2, #4
 800442e:	4302      	orrs	r2, r0
 8004430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	4829      	ldr	r0, [pc, #164]	; (80044dc <HAL_TIM_PWM_ConfigChannel+0x160>)
 8004436:	4002      	ands	r2, r0
 8004438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800443a:	68ca      	ldr	r2, [r1, #12]
 800443c:	69d8      	ldr	r0, [r3, #28]
 800443e:	0212      	lsls	r2, r2, #8
 8004440:	4302      	orrs	r2, r0
 8004442:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2000      	movs	r0, #0
      break;
 8004446:	e7d1      	b.n	80043ec <HAL_TIM_PWM_ConfigChannel+0x70>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004448:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800444a:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800444c:	4c26      	ldr	r4, [pc, #152]	; (80044e8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800444e:	6a18      	ldr	r0, [r3, #32]
 8004450:	4020      	ands	r0, r4
 8004452:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004454:	6a18      	ldr	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004456:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004458:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800445a:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 800445c:	680e      	ldr	r6, [r1, #0]
 800445e:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC3P;
 8004460:	4e22      	ldr	r6, [pc, #136]	; (80044ec <HAL_TIM_PWM_ConfigChannel+0x170>)
 8004462:	4006      	ands	r6, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004464:	6888      	ldr	r0, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8004466:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004468:	0200      	lsls	r0, r0, #8
  TIMx->CCMR2 = tmpccmrx;
 800446a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800446c:	684c      	ldr	r4, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800446e:	4330      	orrs	r0, r6
  TIMx->CCR3 = OC_Config->Pulse;
 8004470:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004472:	6218      	str	r0, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004474:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004476:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004478:	4302      	orrs	r2, r0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447a:	2004      	movs	r0, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800447c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	4382      	bics	r2, r0
 8004482:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004484:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004488:	430a      	orrs	r2, r1
 800448a:	61da      	str	r2, [r3, #28]
      break;
 800448c:	e7ae      	b.n	80043ec <HAL_TIM_PWM_ConfigChannel+0x70>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800448e:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004490:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	4382      	bics	r2, r0
 8004496:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004498:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800449a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800449c:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800449e:	43b0      	bics	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 80044a0:	680e      	ldr	r6, [r1, #0]
 80044a2:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 80044a4:	2602      	movs	r6, #2
 80044a6:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 80044a8:	688e      	ldr	r6, [r1, #8]
  TIMx->CR2 = tmpcr2;
 80044aa:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80044ac:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80044ae:	6848      	ldr	r0, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 80044b0:	4332      	orrs	r2, r6
  TIMx->CCR1 = OC_Config->Pulse;
 80044b2:	6358      	str	r0, [r3, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b4:	2008      	movs	r0, #8
  TIMx->CCER = tmpccer;
 80044b6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b8:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044ba:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044bc:	4302      	orrs	r2, r0
 80044be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	3804      	subs	r0, #4
 80044c4:	4382      	bics	r2, r0
 80044c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044c8:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044cc:	430a      	orrs	r2, r1
 80044ce:	619a      	str	r2, [r3, #24]
      break;
 80044d0:	e78c      	b.n	80043ec <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 80044d2:	2002      	movs	r0, #2
 80044d4:	e78d      	b.n	80043f2 <HAL_TIM_PWM_ConfigChannel+0x76>
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	ffff8cff 	.word	0xffff8cff
 80044dc:	fffffbff 	.word	0xfffffbff
 80044e0:	ffffefff 	.word	0xffffefff
 80044e4:	ffffdfff 	.word	0xffffdfff
 80044e8:	fffffeff 	.word	0xfffffeff
 80044ec:	fffffdff 	.word	0xfffffdff

080044f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f0:	2338      	movs	r3, #56	; 0x38
{
 80044f2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80044f4:	5cc3      	ldrb	r3, [r0, r3]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d021      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fa:	2339      	movs	r3, #57	; 0x39
 80044fc:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044fe:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8004502:	6803      	ldr	r3, [r0, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004506:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004508:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800450a:	680d      	ldr	r5, [r1, #0]
 800450c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	05d2      	lsls	r2, r2, #23
 8004514:	4293      	cmp	r3, r2
 8004516:	d005      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004518:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d002      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d104      	bne.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004528:	684a      	ldr	r2, [r1, #4]
 800452a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800452c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800452e:	2339      	movs	r3, #57	; 0x39
 8004530:	2201      	movs	r2, #1
 8004532:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004534:	2200      	movs	r2, #0
 8004536:	3b01      	subs	r3, #1
 8004538:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800453a:	2000      	movs	r0, #0
}
 800453c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800453e:	2002      	movs	r0, #2
 8004540:	e7fc      	b.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	40010800 	.word	0x40010800
 8004548:	40011400 	.word	0x40011400

0800454c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004550:	6925      	ldr	r5, [r4, #16]
 8004552:	68a3      	ldr	r3, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004554:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004556:	432b      	orrs	r3, r5
 8004558:	6965      	ldr	r5, [r4, #20]
 800455a:	69c1      	ldr	r1, [r0, #28]
 800455c:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455e:	6810      	ldr	r0, [r2, #0]
 8004560:	4d76      	ldr	r5, [pc, #472]	; (800473c <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004562:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004564:	4028      	ands	r0, r5
 8004566:	4303      	orrs	r3, r0
 8004568:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456a:	6853      	ldr	r3, [r2, #4]
 800456c:	4874      	ldr	r0, [pc, #464]	; (8004740 <UART_SetConfig+0x1f4>)
 800456e:	4003      	ands	r3, r0
 8004570:	68e0      	ldr	r0, [r4, #12]
 8004572:	4303      	orrs	r3, r0
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004574:	4873      	ldr	r0, [pc, #460]	; (8004744 <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004576:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004578:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800457a:	4282      	cmp	r2, r0
 800457c:	d061      	beq.n	8004642 <UART_SetConfig+0xf6>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800457e:	6a25      	ldr	r5, [r4, #32]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004580:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004582:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004584:	4d70      	ldr	r5, [pc, #448]	; (8004748 <UART_SetConfig+0x1fc>)
 8004586:	4028      	ands	r0, r5
 8004588:	4303      	orrs	r3, r0
 800458a:	6093      	str	r3, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800458c:	4b6f      	ldr	r3, [pc, #444]	; (800474c <UART_SetConfig+0x200>)
 800458e:	429a      	cmp	r2, r3
 8004590:	d007      	beq.n	80045a2 <UART_SetConfig+0x56>
 8004592:	4b6f      	ldr	r3, [pc, #444]	; (8004750 <UART_SetConfig+0x204>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d014      	beq.n	80045c2 <UART_SetConfig+0x76>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8004598:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800459e:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 80045a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a2:	4b6c      	ldr	r3, [pc, #432]	; (8004754 <UART_SetConfig+0x208>)
 80045a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a6:	2303      	movs	r3, #3
 80045a8:	4013      	ands	r3, r2
 80045aa:	3b01      	subs	r3, #1
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d800      	bhi.n	80045b2 <UART_SetConfig+0x66>
 80045b0:	e098      	b.n	80046e4 <UART_SetConfig+0x198>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	4299      	cmp	r1, r3
 80045b8:	d100      	bne.n	80045bc <UART_SetConfig+0x70>
 80045ba:	e0af      	b.n	800471c <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7ff fcc0 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
        break;
 80045c0:	e07c      	b.n	80046bc <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c2:	4b64      	ldr	r3, [pc, #400]	; (8004754 <UART_SetConfig+0x208>)
 80045c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045c6:	230c      	movs	r3, #12
 80045c8:	4013      	ands	r3, r2
 80045ca:	4a63      	ldr	r2, [pc, #396]	; (8004758 <UART_SetConfig+0x20c>)
 80045cc:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	0212      	lsls	r2, r2, #8
 80045d2:	4291      	cmp	r1, r2
 80045d4:	d018      	beq.n	8004608 <UART_SetConfig+0xbc>
    switch (clocksource)
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d8de      	bhi.n	8004598 <UART_SetConfig+0x4c>
 80045da:	4a60      	ldr	r2, [pc, #384]	; (800475c <UART_SetConfig+0x210>)
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	58d3      	ldr	r3, [r2, r3]
 80045e0:	469f      	mov	pc, r3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e2:	2080      	movs	r0, #128	; 0x80
 80045e4:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045e6:	6863      	ldr	r3, [r4, #4]
 80045e8:	6861      	ldr	r1, [r4, #4]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	1818      	adds	r0, r3, r0
 80045ee:	f7fb fd95 	bl	800011c <__udivsi3>
 80045f2:	0400      	lsls	r0, r0, #16
 80045f4:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f6:	0002      	movs	r2, r0
 80045f8:	4b59      	ldr	r3, [pc, #356]	; (8004760 <UART_SetConfig+0x214>)
 80045fa:	3a10      	subs	r2, #16
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d8cb      	bhi.n	8004598 <UART_SetConfig+0x4c>
        huart->Instance->BRR = usartdiv;
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	60d8      	str	r0, [r3, #12]
 8004604:	2000      	movs	r0, #0
 8004606:	e7c8      	b.n	800459a <UART_SetConfig+0x4e>
    switch (clocksource)
 8004608:	2b08      	cmp	r3, #8
 800460a:	d8c5      	bhi.n	8004598 <UART_SetConfig+0x4c>
 800460c:	4a55      	ldr	r2, [pc, #340]	; (8004764 <UART_SetConfig+0x218>)
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	58d3      	ldr	r3, [r2, r3]
 8004612:	469f      	mov	pc, r3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004614:	2080      	movs	r0, #128	; 0x80
 8004616:	0240      	lsls	r0, r0, #9
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004618:	6863      	ldr	r3, [r4, #4]
 800461a:	6861      	ldr	r1, [r4, #4]
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	1818      	adds	r0, r3, r0
 8004620:	f7fb fd7c 	bl	800011c <__udivsi3>
 8004624:	0403      	lsls	r3, r0, #16
 8004626:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004628:	494d      	ldr	r1, [pc, #308]	; (8004760 <UART_SetConfig+0x214>)
 800462a:	3a10      	subs	r2, #16
 800462c:	428a      	cmp	r2, r1
 800462e:	d8b3      	bhi.n	8004598 <UART_SetConfig+0x4c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004630:	4a4d      	ldr	r2, [pc, #308]	; (8004768 <UART_SetConfig+0x21c>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004632:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004634:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004636:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	4318      	orrs	r0, r3
 800463c:	60d0      	str	r0, [r2, #12]
 800463e:	2000      	movs	r0, #0
 8004640:	e7ab      	b.n	800459a <UART_SetConfig+0x4e>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004642:	6891      	ldr	r1, [r2, #8]
 8004644:	4840      	ldr	r0, [pc, #256]	; (8004748 <UART_SetConfig+0x1fc>)
 8004646:	4001      	ands	r1, r0
 8004648:	430b      	orrs	r3, r1
 800464a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800464c:	22c0      	movs	r2, #192	; 0xc0
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	4840      	ldr	r0, [pc, #256]	; (8004754 <UART_SetConfig+0x208>)
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004656:	0109      	lsls	r1, r1, #4
 8004658:	4013      	ands	r3, r2
 800465a:	428b      	cmp	r3, r1
 800465c:	d048      	beq.n	80046f0 <UART_SetConfig+0x1a4>
 800465e:	d80c      	bhi.n	800467a <UART_SetConfig+0x12e>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d042      	beq.n	80046ea <UART_SetConfig+0x19e>
 8004664:	2280      	movs	r2, #128	; 0x80
 8004666:	00d2      	lsls	r2, r2, #3
 8004668:	4293      	cmp	r3, r2
 800466a:	d000      	beq.n	800466e <UART_SetConfig+0x122>
 800466c:	e794      	b.n	8004598 <UART_SetConfig+0x4c>
        pclk = HAL_RCC_GetSysClockFreq();
 800466e:	f7ff f829 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004672:	2800      	cmp	r0, #0
 8004674:	d106      	bne.n	8004684 <UART_SetConfig+0x138>
 8004676:	2000      	movs	r0, #0
 8004678:	e78f      	b.n	800459a <UART_SetConfig+0x4e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467a:	4293      	cmp	r3, r2
 800467c:	d000      	beq.n	8004680 <UART_SetConfig+0x134>
 800467e:	e78b      	b.n	8004598 <UART_SetConfig+0x4c>
 8004680:	2080      	movs	r0, #128	; 0x80
 8004682:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004684:	6862      	ldr	r2, [r4, #4]
 8004686:	0053      	lsls	r3, r2, #1
 8004688:	189b      	adds	r3, r3, r2
 800468a:	4283      	cmp	r3, r0
 800468c:	d900      	bls.n	8004690 <UART_SetConfig+0x144>
 800468e:	e783      	b.n	8004598 <UART_SetConfig+0x4c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004690:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004692:	4283      	cmp	r3, r0
 8004694:	d200      	bcs.n	8004698 <UART_SetConfig+0x14c>
 8004696:	e77f      	b.n	8004598 <UART_SetConfig+0x4c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004698:	2100      	movs	r1, #0
 800469a:	0e07      	lsrs	r7, r0, #24
 800469c:	0206      	lsls	r6, r0, #8
 800469e:	0850      	lsrs	r0, r2, #1
 80046a0:	2300      	movs	r3, #0
 80046a2:	1980      	adds	r0, r0, r6
 80046a4:	4179      	adcs	r1, r7
 80046a6:	f7fb fdff 	bl	80002a8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046aa:	4b30      	ldr	r3, [pc, #192]	; (800476c <UART_SetConfig+0x220>)
 80046ac:	18c2      	adds	r2, r0, r3
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <UART_SetConfig+0x224>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d900      	bls.n	80046b6 <UART_SetConfig+0x16a>
 80046b4:	e770      	b.n	8004598 <UART_SetConfig+0x4c>
 80046b6:	e7a3      	b.n	8004600 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 80046b8:	f7ff f804 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80046bc:	2800      	cmp	r0, #0
 80046be:	d192      	bne.n	80045e6 <UART_SetConfig+0x9a>
 80046c0:	2000      	movs	r0, #0
 80046c2:	e76a      	b.n	800459a <UART_SetConfig+0x4e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c4:	2010      	movs	r0, #16
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <UART_SetConfig+0x208>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80046cc:	4243      	negs	r3, r0
 80046ce:	4158      	adcs	r0, r3
 80046d0:	4b28      	ldr	r3, [pc, #160]	; (8004774 <UART_SetConfig+0x228>)
 80046d2:	4240      	negs	r0, r0
 80046d4:	4018      	ands	r0, r3
 80046d6:	4b28      	ldr	r3, [pc, #160]	; (8004778 <UART_SetConfig+0x22c>)
 80046d8:	469c      	mov	ip, r3
 80046da:	4460      	add	r0, ip
 80046dc:	e783      	b.n	80045e6 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046de:	f7ff fc1f 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
        break;
 80046e2:	e7eb      	b.n	80046bc <UART_SetConfig+0x170>
 80046e4:	4a25      	ldr	r2, [pc, #148]	; (800477c <UART_SetConfig+0x230>)
 80046e6:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80046e8:	e771      	b.n	80045ce <UART_SetConfig+0x82>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ea:	f7ff fc19 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
        break;
 80046ee:	e7c0      	b.n	8004672 <UART_SetConfig+0x126>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046f0:	6803      	ldr	r3, [r0, #0]
 80046f2:	2010      	movs	r0, #16
 80046f4:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80046f6:	4243      	negs	r3, r0
 80046f8:	4158      	adcs	r0, r3
 80046fa:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <UART_SetConfig+0x228>)
 80046fc:	4240      	negs	r0, r0
 80046fe:	4018      	ands	r0, r3
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <UART_SetConfig+0x22c>)
 8004702:	469c      	mov	ip, r3
 8004704:	4460      	add	r0, ip
 8004706:	e7bd      	b.n	8004684 <UART_SetConfig+0x138>
        pclk = HAL_RCC_GetSysClockFreq();
 8004708:	f7fe ffdc 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800470c:	2800      	cmp	r0, #0
 800470e:	d100      	bne.n	8004712 <UART_SetConfig+0x1c6>
 8004710:	e778      	b.n	8004604 <UART_SetConfig+0xb8>
 8004712:	0040      	lsls	r0, r0, #1
 8004714:	e780      	b.n	8004618 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004716:	f7ff fc03 	bl	8003f20 <HAL_RCC_GetPCLK1Freq>
        break;
 800471a:	e7f7      	b.n	800470c <UART_SetConfig+0x1c0>
        pclk = HAL_RCC_GetPCLK2Freq();
 800471c:	f7ff fc10 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
        break;
 8004720:	e7f4      	b.n	800470c <UART_SetConfig+0x1c0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004722:	2010      	movs	r0, #16
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <UART_SetConfig+0x208>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4018      	ands	r0, r3
 800472a:	4243      	negs	r3, r0
 800472c:	4158      	adcs	r0, r3
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <UART_SetConfig+0x234>)
 8004730:	4240      	negs	r0, r0
 8004732:	4018      	ands	r0, r3
 8004734:	4b13      	ldr	r3, [pc, #76]	; (8004784 <UART_SetConfig+0x238>)
 8004736:	469c      	mov	ip, r3
 8004738:	4460      	add	r0, ip
 800473a:	e76d      	b.n	8004618 <UART_SetConfig+0xcc>
 800473c:	efff69f3 	.word	0xefff69f3
 8004740:	ffffcfff 	.word	0xffffcfff
 8004744:	40004800 	.word	0x40004800
 8004748:	fffff4ff 	.word	0xfffff4ff
 800474c:	40013800 	.word	0x40013800
 8004750:	40004400 	.word	0x40004400
 8004754:	40021000 	.word	0x40021000
 8004758:	08005fb8 	.word	0x08005fb8
 800475c:	08005f6c 	.word	0x08005f6c
 8004760:	0000ffef 	.word	0x0000ffef
 8004764:	08005f90 	.word	0x08005f90
 8004768:	0000fff0 	.word	0x0000fff0
 800476c:	fffffd00 	.word	0xfffffd00
 8004770:	000ffcff 	.word	0x000ffcff
 8004774:	00b71b00 	.word	0x00b71b00
 8004778:	003d0900 	.word	0x003d0900
 800477c:	08005fb4 	.word	0x08005fb4
 8004780:	016e3600 	.word	0x016e3600
 8004784:	007a1200 	.word	0x007a1200

08004788 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004788:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800478a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800478c:	07da      	lsls	r2, r3, #31
 800478e:	d506      	bpl.n	800479e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004790:	6801      	ldr	r1, [r0, #0]
 8004792:	4c28      	ldr	r4, [pc, #160]	; (8004834 <UART_AdvFeatureConfig+0xac>)
 8004794:	684a      	ldr	r2, [r1, #4]
 8004796:	4022      	ands	r2, r4
 8004798:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800479a:	4322      	orrs	r2, r4
 800479c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800479e:	079a      	lsls	r2, r3, #30
 80047a0:	d506      	bpl.n	80047b0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047a2:	6801      	ldr	r1, [r0, #0]
 80047a4:	4c24      	ldr	r4, [pc, #144]	; (8004838 <UART_AdvFeatureConfig+0xb0>)
 80047a6:	684a      	ldr	r2, [r1, #4]
 80047a8:	4022      	ands	r2, r4
 80047aa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80047ac:	4322      	orrs	r2, r4
 80047ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047b0:	075a      	lsls	r2, r3, #29
 80047b2:	d506      	bpl.n	80047c2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b4:	6801      	ldr	r1, [r0, #0]
 80047b6:	4c21      	ldr	r4, [pc, #132]	; (800483c <UART_AdvFeatureConfig+0xb4>)
 80047b8:	684a      	ldr	r2, [r1, #4]
 80047ba:	4022      	ands	r2, r4
 80047bc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80047be:	4322      	orrs	r2, r4
 80047c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047c2:	071a      	lsls	r2, r3, #28
 80047c4:	d506      	bpl.n	80047d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c6:	6801      	ldr	r1, [r0, #0]
 80047c8:	4c1d      	ldr	r4, [pc, #116]	; (8004840 <UART_AdvFeatureConfig+0xb8>)
 80047ca:	684a      	ldr	r2, [r1, #4]
 80047cc:	4022      	ands	r2, r4
 80047ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80047d0:	4322      	orrs	r2, r4
 80047d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d4:	06da      	lsls	r2, r3, #27
 80047d6:	d506      	bpl.n	80047e6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d8:	6801      	ldr	r1, [r0, #0]
 80047da:	4c1a      	ldr	r4, [pc, #104]	; (8004844 <UART_AdvFeatureConfig+0xbc>)
 80047dc:	688a      	ldr	r2, [r1, #8]
 80047de:	4022      	ands	r2, r4
 80047e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80047e2:	4322      	orrs	r2, r4
 80047e4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e6:	069a      	lsls	r2, r3, #26
 80047e8:	d506      	bpl.n	80047f8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ea:	6801      	ldr	r1, [r0, #0]
 80047ec:	4c16      	ldr	r4, [pc, #88]	; (8004848 <UART_AdvFeatureConfig+0xc0>)
 80047ee:	688a      	ldr	r2, [r1, #8]
 80047f0:	4022      	ands	r2, r4
 80047f2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80047f4:	4322      	orrs	r2, r4
 80047f6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f8:	065a      	lsls	r2, r3, #25
 80047fa:	d50a      	bpl.n	8004812 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047fc:	6801      	ldr	r1, [r0, #0]
 80047fe:	4d13      	ldr	r5, [pc, #76]	; (800484c <UART_AdvFeatureConfig+0xc4>)
 8004800:	684a      	ldr	r2, [r1, #4]
 8004802:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004804:	402a      	ands	r2, r5
 8004806:	4322      	orrs	r2, r4
 8004808:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	0352      	lsls	r2, r2, #13
 800480e:	4294      	cmp	r4, r2
 8004810:	d009      	beq.n	8004826 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	d506      	bpl.n	8004824 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004816:	6802      	ldr	r2, [r0, #0]
 8004818:	490d      	ldr	r1, [pc, #52]	; (8004850 <UART_AdvFeatureConfig+0xc8>)
 800481a:	6853      	ldr	r3, [r2, #4]
 800481c:	400b      	ands	r3, r1
 800481e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004820:	430b      	orrs	r3, r1
 8004822:	6053      	str	r3, [r2, #4]
  }
}
 8004824:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004826:	684a      	ldr	r2, [r1, #4]
 8004828:	4c0a      	ldr	r4, [pc, #40]	; (8004854 <UART_AdvFeatureConfig+0xcc>)
 800482a:	4022      	ands	r2, r4
 800482c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800482e:	4322      	orrs	r2, r4
 8004830:	604a      	str	r2, [r1, #4]
 8004832:	e7ee      	b.n	8004812 <UART_AdvFeatureConfig+0x8a>
 8004834:	fffdffff 	.word	0xfffdffff
 8004838:	fffeffff 	.word	0xfffeffff
 800483c:	fffbffff 	.word	0xfffbffff
 8004840:	ffff7fff 	.word	0xffff7fff
 8004844:	ffffefff 	.word	0xffffefff
 8004848:	ffffdfff 	.word	0xffffdfff
 800484c:	ffefffff 	.word	0xffefffff
 8004850:	fff7ffff 	.word	0xfff7ffff
 8004854:	ff9fffff 	.word	0xff9fffff

08004858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	4657      	mov	r7, sl
 800485c:	464e      	mov	r6, r9
 800485e:	4645      	mov	r5, r8
 8004860:	46de      	mov	lr, fp
 8004862:	b5e0      	push	{r5, r6, r7, lr}
 8004864:	0016      	movs	r6, r2
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004866:	2204      	movs	r2, #4
 8004868:	4692      	mov	sl, r2
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800486a:	2280      	movs	r2, #128	; 0x80
 800486c:	0112      	lsls	r2, r2, #4
{
 800486e:	4699      	mov	r9, r3
 8004870:	4680      	mov	r8, r0
 8004872:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004874:	4693      	mov	fp, r2
{
 8004876:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004878:	6803      	ldr	r3, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800487a:	e001      	b.n	8004880 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800487c:	1c7a      	adds	r2, r7, #1
 800487e:	d10d      	bne.n	800489c <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004880:	69dc      	ldr	r4, [r3, #28]
 8004882:	402c      	ands	r4, r5
 8004884:	1b64      	subs	r4, r4, r5
 8004886:	4262      	negs	r2, r4
 8004888:	4154      	adcs	r4, r2
 800488a:	42b4      	cmp	r4, r6
 800488c:	d0f6      	beq.n	800487c <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800488e:	2000      	movs	r0, #0
}
 8004890:	bcf0      	pop	{r4, r5, r6, r7}
 8004892:	46bb      	mov	fp, r7
 8004894:	46b2      	mov	sl, r6
 8004896:	46a9      	mov	r9, r5
 8004898:	46a0      	mov	r8, r4
 800489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489c:	f7fe fdae 	bl	80033fc <HAL_GetTick>
 80048a0:	464b      	mov	r3, r9
 80048a2:	1ac0      	subs	r0, r0, r3
 80048a4:	42b8      	cmp	r0, r7
 80048a6:	d830      	bhi.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048a8:	2f00      	cmp	r7, #0
 80048aa:	d02e      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048ac:	4643      	mov	r3, r8
 80048ae:	4651      	mov	r1, sl
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4211      	tst	r1, r2
 80048b6:	d0e3      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b8:	4659      	mov	r1, fp
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	420a      	tst	r2, r1
 80048be:	d0df      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c0:	6219      	str	r1, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c2:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c6:	2201      	movs	r2, #1
 80048c8:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048cc:	4643      	mov	r3, r8
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	4c1f      	ldr	r4, [pc, #124]	; (8004950 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80048d2:	680b      	ldr	r3, [r1, #0]
 80048d4:	4023      	ands	r3, r4
 80048d6:	600b      	str	r3, [r1, #0]
 80048d8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048dc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e0:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	4643      	mov	r3, r8
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	688b      	ldr	r3, [r1, #8]
 80048ea:	4393      	bics	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
 80048ee:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80048f2:	2320      	movs	r3, #32
 80048f4:	4642      	mov	r2, r8
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f6:	4641      	mov	r1, r8
          huart->gState = HAL_UART_STATE_READY;
 80048f8:	6793      	str	r3, [r2, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048fa:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 8004900:	2200      	movs	r2, #0
 8004902:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 8004904:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004906:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8004908:	e7c2      	b.n	8004890 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	2201      	movs	r2, #1
 8004910:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004914:	4643      	mov	r3, r8
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800491a:	680b      	ldr	r3, [r1, #0]
 800491c:	4023      	ands	r3, r4
 800491e:	600b      	str	r3, [r1, #0]
 8004920:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004924:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004928:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	4643      	mov	r3, r8
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	688b      	ldr	r3, [r1, #8]
 8004932:	4393      	bics	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
 8004936:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800493a:	2320      	movs	r3, #32
 800493c:	4642      	mov	r2, r8
        __HAL_UNLOCK(huart);
 800493e:	4641      	mov	r1, r8
        huart->gState = HAL_UART_STATE_READY;
 8004940:	6793      	str	r3, [r2, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004942:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8004944:	2200      	movs	r2, #0
 8004946:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 8004948:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800494a:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 800494c:	e7a0      	b.n	8004890 <UART_WaitOnFlagUntilTimeout+0x38>
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	fffffe5f 	.word	0xfffffe5f

08004954 <HAL_UART_Receive>:
{
 8004954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004956:	464f      	mov	r7, r9
 8004958:	4646      	mov	r6, r8
 800495a:	46d6      	mov	lr, sl
 800495c:	b5c0      	push	{r6, r7, lr}
 800495e:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004960:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8004962:	0004      	movs	r4, r0
 8004964:	000d      	movs	r5, r1
 8004966:	0016      	movs	r6, r2
 8004968:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800496a:	2b20      	cmp	r3, #32
 800496c:	d161      	bne.n	8004a32 <HAL_UART_Receive+0xde>
    if ((pData == NULL) || (Size == 0U))
 800496e:	2900      	cmp	r1, #0
 8004970:	d058      	beq.n	8004a24 <HAL_UART_Receive+0xd0>
 8004972:	2a00      	cmp	r2, #0
 8004974:	d056      	beq.n	8004a24 <HAL_UART_Receive+0xd0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	6882      	ldr	r2, [r0, #8]
 800497a:	015b      	lsls	r3, r3, #5
 800497c:	429a      	cmp	r2, r3
 800497e:	d04c      	beq.n	8004a1a <HAL_UART_Receive+0xc6>
    __HAL_LOCK(huart);
 8004980:	2374      	movs	r3, #116	; 0x74
 8004982:	5ce2      	ldrb	r2, [r4, r3]
 8004984:	2a01      	cmp	r2, #1
 8004986:	d054      	beq.n	8004a32 <HAL_UART_Receive+0xde>
 8004988:	2201      	movs	r2, #1
 800498a:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	2300      	movs	r3, #0
 800498e:	4699      	mov	r9, r3
 8004990:	464a      	mov	r2, r9
 8004992:	3380      	adds	r3, #128	; 0x80
 8004994:	50e2      	str	r2, [r4, r3]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004996:	3b5e      	subs	r3, #94	; 0x5e
 8004998:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	6622      	str	r2, [r4, #96]	; 0x60
    tickstart = HAL_GetTick();
 800499c:	f7fe fd2e 	bl	80033fc <HAL_GetTick>
    huart->RxXferSize  = Size;
 80049a0:	2358      	movs	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80049a2:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 80049a4:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 80049a6:	3302      	adds	r3, #2
 80049a8:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 80049aa:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80049ac:	4680      	mov	r8, r0
    UART_MASK_COMPUTATION(huart);
 80049ae:	0152      	lsls	r2, r2, #5
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_UART_Receive+0xe2>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d154      	bne.n	8004a62 <HAL_UART_Receive+0x10e>
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d145      	bne.n	8004a4a <HAL_UART_Receive+0xf6>
 80049be:	235c      	movs	r3, #92	; 0x5c
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	52e2      	strh	r2, [r4, r3]
 80049c4:	33a3      	adds	r3, #163	; 0xa3
 80049c6:	4699      	mov	r9, r3
      pdata16bits = NULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	469a      	mov	sl, r3
    __HAL_UNLOCK(huart);
 80049cc:	2374      	movs	r3, #116	; 0x74
 80049ce:	2200      	movs	r2, #0
 80049d0:	54e2      	strb	r2, [r4, r3]
    while (huart->RxXferCount > 0U)
 80049d2:	3b1a      	subs	r3, #26
 80049d4:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 80049d6:	265a      	movs	r6, #90	; 0x5a
    while (huart->RxXferCount > 0U)
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <HAL_UART_Receive+0x9c>
 80049dc:	e03b      	b.n	8004a56 <HAL_UART_Receive+0x102>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80049de:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80049e0:	3501      	adds	r5, #1
      huart->RxXferCount--;
 80049e2:	5ba2      	ldrh	r2, [r4, r6]
 80049e4:	3a01      	subs	r2, #1
 80049e6:	b292      	uxth	r2, r2
 80049e8:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 80049ea:	5ba3      	ldrh	r3, [r4, r6]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d032      	beq.n	8004a56 <HAL_UART_Receive+0x102>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049f0:	4643      	mov	r3, r8
 80049f2:	2200      	movs	r2, #0
 80049f4:	2120      	movs	r1, #32
 80049f6:	0020      	movs	r0, r4
 80049f8:	9700      	str	r7, [sp, #0]
 80049fa:	f7ff ff2d 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d12d      	bne.n	8004a5e <HAL_UART_Receive+0x10a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a02:	464a      	mov	r2, r9
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 8004a0a:	2d00      	cmp	r5, #0
 8004a0c:	d1e7      	bne.n	80049de <HAL_UART_Receive+0x8a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a0e:	4652      	mov	r2, sl
 8004a10:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 8004a12:	2302      	movs	r3, #2
 8004a14:	469c      	mov	ip, r3
 8004a16:	44e2      	add	sl, ip
 8004a18:	e7e3      	b.n	80049e2 <HAL_UART_Receive+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1a:	6903      	ldr	r3, [r0, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1af      	bne.n	8004980 <HAL_UART_Receive+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a20:	07cb      	lsls	r3, r1, #31
 8004a22:	d5ad      	bpl.n	8004980 <HAL_UART_Receive+0x2c>
      return  HAL_ERROR;
 8004a24:	2001      	movs	r0, #1
}
 8004a26:	b002      	add	sp, #8
 8004a28:	bce0      	pop	{r5, r6, r7}
 8004a2a:	46ba      	mov	sl, r7
 8004a2c:	46b1      	mov	r9, r6
 8004a2e:	46a8      	mov	r8, r5
 8004a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8004a32:	2002      	movs	r0, #2
 8004a34:	e7f7      	b.n	8004a26 <HAL_UART_Receive+0xd2>
    UART_MASK_COMPUTATION(huart);
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1c0      	bne.n	80049be <HAL_UART_Receive+0x6a>
 8004a3c:	225c      	movs	r2, #92	; 0x5c
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_UART_Receive+0x134>)
 8004a40:	46aa      	mov	sl, r5
 8004a42:	4699      	mov	r9, r3
      pdata8bits  = NULL;
 8004a44:	2500      	movs	r5, #0
 8004a46:	52a3      	strh	r3, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a48:	e7c0      	b.n	80049cc <HAL_UART_Receive+0x78>
    UART_MASK_COMPUTATION(huart);
 8004a4a:	235c      	movs	r3, #92	; 0x5c
 8004a4c:	227f      	movs	r2, #127	; 0x7f
 8004a4e:	52e2      	strh	r2, [r4, r3]
 8004a50:	3323      	adds	r3, #35	; 0x23
 8004a52:	4699      	mov	r9, r3
 8004a54:	e7b8      	b.n	80049c8 <HAL_UART_Receive+0x74>
    huart->RxState = HAL_UART_STATE_READY;
 8004a56:	2320      	movs	r3, #32
    return HAL_OK;
 8004a58:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8004a5c:	e7e3      	b.n	8004a26 <HAL_UART_Receive+0xd2>
        return HAL_TIMEOUT;
 8004a5e:	2003      	movs	r0, #3
 8004a60:	e7e1      	b.n	8004a26 <HAL_UART_Receive+0xd2>
    UART_MASK_COMPUTATION(huart);
 8004a62:	2280      	movs	r2, #128	; 0x80
 8004a64:	0552      	lsls	r2, r2, #21
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d005      	beq.n	8004a76 <HAL_UART_Receive+0x122>
 8004a6a:	235c      	movs	r3, #92	; 0x5c
 8004a6c:	464a      	mov	r2, r9
 8004a6e:	52e2      	strh	r2, [r4, r3]
 8004a70:	2300      	movs	r3, #0
 8004a72:	4699      	mov	r9, r3
 8004a74:	e7a8      	b.n	80049c8 <HAL_UART_Receive+0x74>
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0e6      	beq.n	8004a4a <HAL_UART_Receive+0xf6>
 8004a7c:	235c      	movs	r3, #92	; 0x5c
 8004a7e:	223f      	movs	r2, #63	; 0x3f
 8004a80:	52e2      	strh	r2, [r4, r3]
 8004a82:	3b1d      	subs	r3, #29
 8004a84:	4699      	mov	r9, r3
 8004a86:	e79f      	b.n	80049c8 <HAL_UART_Receive+0x74>
 8004a88:	000001ff 	.word	0x000001ff

08004a8c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	2200      	movs	r2, #0
{
 8004a90:	b530      	push	{r4, r5, lr}
 8004a92:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a94:	50c2      	str	r2, [r0, r3]
{
 8004a96:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 8004a98:	f7fe fcb0 	bl	80033fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a9c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004a9e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	0712      	lsls	r2, r2, #28
 8004aa4:	d40c      	bmi.n	8004ac0 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	075b      	lsls	r3, r3, #29
 8004aaa:	d418      	bmi.n	8004ade <UART_CheckIdleState+0x52>
  huart->gState = HAL_UART_STATE_READY;
 8004aac:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004aae:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8004ab0:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	2300      	movs	r3, #0
  return HAL_OK;
 8004ab6:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab8:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8004aba:	54a3      	strb	r3, [r4, r2]
}
 8004abc:	b003      	add	sp, #12
 8004abe:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <UART_CheckIdleState+0x6c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	0389      	lsls	r1, r1, #14
 8004aca:	0003      	movs	r3, r0
 8004acc:	0020      	movs	r0, r4
 8004ace:	f7ff fec3 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d10e      	bne.n	8004af4 <UART_CheckIdleState+0x68>
 8004ad6:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	075b      	lsls	r3, r3, #29
 8004adc:	d5e6      	bpl.n	8004aac <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ade:	2180      	movs	r1, #128	; 0x80
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <UART_CheckIdleState+0x6c>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	0020      	movs	r0, r4
 8004ae8:	002b      	movs	r3, r5
 8004aea:	03c9      	lsls	r1, r1, #15
 8004aec:	f7ff feb4 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d0db      	beq.n	8004aac <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8004af4:	2003      	movs	r0, #3
 8004af6:	e7e1      	b.n	8004abc <UART_CheckIdleState+0x30>
 8004af8:	01ffffff 	.word	0x01ffffff

08004afc <HAL_UART_Init>:
{
 8004afc:	b510      	push	{r4, lr}
 8004afe:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004b00:	d026      	beq.n	8004b50 <HAL_UART_Init+0x54>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d025      	beq.n	8004b54 <HAL_UART_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b08:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b0e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004b10:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b12:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004b14:	438b      	bics	r3, r1
 8004b16:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b18:	f7ff fd18 	bl	800454c <UART_SetConfig>
 8004b1c:	2801      	cmp	r0, #1
 8004b1e:	d017      	beq.n	8004b50 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d110      	bne.n	8004b48 <HAL_UART_Init+0x4c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	490d      	ldr	r1, [pc, #52]	; (8004b60 <HAL_UART_Init+0x64>)
 8004b2a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004b2c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b30:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	438a      	bics	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	3929      	subs	r1, #41	; 0x29
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004b42:	f7ff ffa3 	bl	8004a8c <UART_CheckIdleState>
}
 8004b46:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8004b48:	0020      	movs	r0, r4
 8004b4a:	f7ff fe1d 	bl	8004788 <UART_AdvFeatureConfig>
 8004b4e:	e7ea      	b.n	8004b26 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004b50:	2001      	movs	r0, #1
 8004b52:	e7f8      	b.n	8004b46 <HAL_UART_Init+0x4a>
    huart->Lock = HAL_UNLOCKED;
 8004b54:	2274      	movs	r2, #116	; 0x74
 8004b56:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8004b58:	f7fe fb1e 	bl	8003198 <HAL_UART_MspInit>
 8004b5c:	e7d4      	b.n	8004b08 <HAL_UART_Init+0xc>
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	ffffb7ff 	.word	0xffffb7ff

08004b64 <__assert_func>:
 8004b64:	b530      	push	{r4, r5, lr}
 8004b66:	0014      	movs	r4, r2
 8004b68:	001a      	movs	r2, r3
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <__assert_func+0x2c>)
 8004b6c:	0005      	movs	r5, r0
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	b085      	sub	sp, #20
 8004b72:	68d8      	ldr	r0, [r3, #12]
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <__assert_func+0x30>)
 8004b76:	2c00      	cmp	r4, #0
 8004b78:	d101      	bne.n	8004b7e <__assert_func+0x1a>
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <__assert_func+0x34>)
 8004b7c:	001c      	movs	r4, r3
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	9100      	str	r1, [sp, #0]
 8004b82:	002b      	movs	r3, r5
 8004b84:	4905      	ldr	r1, [pc, #20]	; (8004b9c <__assert_func+0x38>)
 8004b86:	9402      	str	r4, [sp, #8]
 8004b88:	f000 f820 	bl	8004bcc <fiprintf>
 8004b8c:	f000 fdb6 	bl	80056fc <abort>
 8004b90:	20000014 	.word	0x20000014
 8004b94:	08005fc5 	.word	0x08005fc5
 8004b98:	08006000 	.word	0x08006000
 8004b9c:	08005fd2 	.word	0x08005fd2

08004ba0 <atoi>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	220a      	movs	r2, #10
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	f000 fccf 	bl	8005548 <strtol>
 8004baa:	bd10      	pop	{r4, pc}

08004bac <calloc>:
 8004bac:	b510      	push	{r4, lr}
 8004bae:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <calloc+0x10>)
 8004bb0:	000a      	movs	r2, r1
 8004bb2:	0001      	movs	r1, r0
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	f000 f883 	bl	8004cc0 <_calloc_r>
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	20000014 	.word	0x20000014

08004bc0 <__errno>:
 8004bc0:	4b01      	ldr	r3, [pc, #4]	; (8004bc8 <__errno+0x8>)
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	4770      	bx	lr
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	20000014 	.word	0x20000014

08004bcc <fiprintf>:
 8004bcc:	b40e      	push	{r1, r2, r3}
 8004bce:	b503      	push	{r0, r1, lr}
 8004bd0:	0001      	movs	r1, r0
 8004bd2:	ab03      	add	r3, sp, #12
 8004bd4:	4804      	ldr	r0, [pc, #16]	; (8004be8 <fiprintf+0x1c>)
 8004bd6:	cb04      	ldmia	r3!, {r2}
 8004bd8:	6800      	ldr	r0, [r0, #0]
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	f000 f94e 	bl	8004e7c <_vfiprintf_r>
 8004be0:	b002      	add	sp, #8
 8004be2:	bc08      	pop	{r3}
 8004be4:	b003      	add	sp, #12
 8004be6:	4718      	bx	r3
 8004be8:	20000014 	.word	0x20000014

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	2600      	movs	r6, #0
 8004bf0:	4d0c      	ldr	r5, [pc, #48]	; (8004c24 <__libc_init_array+0x38>)
 8004bf2:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf4:	1b64      	subs	r4, r4, r5
 8004bf6:	10a4      	asrs	r4, r4, #2
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	2600      	movs	r6, #0
 8004bfe:	f001 f915 	bl	8005e2c <_init>
 8004c02:	4d0a      	ldr	r5, [pc, #40]	; (8004c2c <__libc_init_array+0x40>)
 8004c04:	4c0a      	ldr	r4, [pc, #40]	; (8004c30 <__libc_init_array+0x44>)
 8004c06:	1b64      	subs	r4, r4, r5
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	00b3      	lsls	r3, r6, #2
 8004c12:	58eb      	ldr	r3, [r5, r3]
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	00b3      	lsls	r3, r6, #2
 8004c1c:	58eb      	ldr	r3, [r5, r3]
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	080061a4 	.word	0x080061a4
 8004c28:	080061a4 	.word	0x080061a4
 8004c2c:	080061a4 	.word	0x080061a4
 8004c30:	080061a8 	.word	0x080061a8

08004c34 <malloc>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <malloc+0x10>)
 8004c38:	0001      	movs	r1, r0
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	f000 f898 	bl	8004d70 <_malloc_r>
 8004c40:	bd10      	pop	{r4, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	20000014 	.word	0x20000014

08004c48 <free>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <free+0x10>)
 8004c4c:	0001      	movs	r1, r0
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	f000 f844 	bl	8004cdc <_free_r>
 8004c54:	bd10      	pop	{r4, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	20000014 	.word	0x20000014

08004c5c <memcmp>:
 8004c5c:	b530      	push	{r4, r5, lr}
 8004c5e:	2400      	movs	r4, #0
 8004c60:	3901      	subs	r1, #1
 8004c62:	42a2      	cmp	r2, r4
 8004c64:	d101      	bne.n	8004c6a <memcmp+0xe>
 8004c66:	2000      	movs	r0, #0
 8004c68:	e005      	b.n	8004c76 <memcmp+0x1a>
 8004c6a:	5d03      	ldrb	r3, [r0, r4]
 8004c6c:	3401      	adds	r4, #1
 8004c6e:	5d0d      	ldrb	r5, [r1, r4]
 8004c70:	42ab      	cmp	r3, r5
 8004c72:	d0f6      	beq.n	8004c62 <memcmp+0x6>
 8004c74:	1b58      	subs	r0, r3, r5
 8004c76:	bd30      	pop	{r4, r5, pc}

08004c78 <memcpy>:
 8004c78:	2300      	movs	r3, #0
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d100      	bne.n	8004c82 <memcpy+0xa>
 8004c80:	bd10      	pop	{r4, pc}
 8004c82:	5ccc      	ldrb	r4, [r1, r3]
 8004c84:	54c4      	strb	r4, [r0, r3]
 8004c86:	3301      	adds	r3, #1
 8004c88:	e7f8      	b.n	8004c7c <memcpy+0x4>

08004c8a <memmove>:
 8004c8a:	b510      	push	{r4, lr}
 8004c8c:	4288      	cmp	r0, r1
 8004c8e:	d902      	bls.n	8004c96 <memmove+0xc>
 8004c90:	188b      	adds	r3, r1, r2
 8004c92:	4298      	cmp	r0, r3
 8004c94:	d303      	bcc.n	8004c9e <memmove+0x14>
 8004c96:	2300      	movs	r3, #0
 8004c98:	e007      	b.n	8004caa <memmove+0x20>
 8004c9a:	5c8b      	ldrb	r3, [r1, r2]
 8004c9c:	5483      	strb	r3, [r0, r2]
 8004c9e:	3a01      	subs	r2, #1
 8004ca0:	d2fb      	bcs.n	8004c9a <memmove+0x10>
 8004ca2:	bd10      	pop	{r4, pc}
 8004ca4:	5ccc      	ldrb	r4, [r1, r3]
 8004ca6:	54c4      	strb	r4, [r0, r3]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d1fa      	bne.n	8004ca4 <memmove+0x1a>
 8004cae:	e7f8      	b.n	8004ca2 <memmove+0x18>

08004cb0 <memset>:
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	1882      	adds	r2, r0, r2
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d100      	bne.n	8004cba <memset+0xa>
 8004cb8:	4770      	bx	lr
 8004cba:	7019      	strb	r1, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	e7f9      	b.n	8004cb4 <memset+0x4>

08004cc0 <_calloc_r>:
 8004cc0:	434a      	muls	r2, r1
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	0011      	movs	r1, r2
 8004cc6:	0015      	movs	r5, r2
 8004cc8:	f000 f852 	bl	8004d70 <_malloc_r>
 8004ccc:	1e04      	subs	r4, r0, #0
 8004cce:	d003      	beq.n	8004cd8 <_calloc_r+0x18>
 8004cd0:	002a      	movs	r2, r5
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	f7ff ffec 	bl	8004cb0 <memset>
 8004cd8:	0020      	movs	r0, r4
 8004cda:	bd70      	pop	{r4, r5, r6, pc}

08004cdc <_free_r>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	0005      	movs	r5, r0
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	d010      	beq.n	8004d06 <_free_r+0x2a>
 8004ce4:	1f0c      	subs	r4, r1, #4
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da00      	bge.n	8004cee <_free_r+0x12>
 8004cec:	18e4      	adds	r4, r4, r3
 8004cee:	0028      	movs	r0, r5
 8004cf0:	f000 ff56 	bl	8005ba0 <__malloc_lock>
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <_free_r+0x90>)
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <_free_r+0x2c>
 8004cfc:	6063      	str	r3, [r4, #4]
 8004cfe:	6014      	str	r4, [r2, #0]
 8004d00:	0028      	movs	r0, r5
 8004d02:	f000 ff55 	bl	8005bb0 <__malloc_unlock>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	d908      	bls.n	8004d1e <_free_r+0x42>
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	1860      	adds	r0, r4, r1
 8004d10:	4283      	cmp	r3, r0
 8004d12:	d1f3      	bne.n	8004cfc <_free_r+0x20>
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	1841      	adds	r1, r0, r1
 8004d1a:	6021      	str	r1, [r4, #0]
 8004d1c:	e7ee      	b.n	8004cfc <_free_r+0x20>
 8004d1e:	001a      	movs	r2, r3
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <_free_r+0x4e>
 8004d26:	42a3      	cmp	r3, r4
 8004d28:	d9f9      	bls.n	8004d1e <_free_r+0x42>
 8004d2a:	6811      	ldr	r1, [r2, #0]
 8004d2c:	1850      	adds	r0, r2, r1
 8004d2e:	42a0      	cmp	r0, r4
 8004d30:	d10b      	bne.n	8004d4a <_free_r+0x6e>
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	1809      	adds	r1, r1, r0
 8004d36:	1850      	adds	r0, r2, r1
 8004d38:	6011      	str	r1, [r2, #0]
 8004d3a:	4283      	cmp	r3, r0
 8004d3c:	d1e0      	bne.n	8004d00 <_free_r+0x24>
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	1841      	adds	r1, r0, r1
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	6053      	str	r3, [r2, #4]
 8004d48:	e7da      	b.n	8004d00 <_free_r+0x24>
 8004d4a:	42a0      	cmp	r0, r4
 8004d4c:	d902      	bls.n	8004d54 <_free_r+0x78>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	e7d5      	b.n	8004d00 <_free_r+0x24>
 8004d54:	6821      	ldr	r1, [r4, #0]
 8004d56:	1860      	adds	r0, r4, r1
 8004d58:	4283      	cmp	r3, r0
 8004d5a:	d103      	bne.n	8004d64 <_free_r+0x88>
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	1841      	adds	r1, r0, r1
 8004d62:	6021      	str	r1, [r4, #0]
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	6054      	str	r4, [r2, #4]
 8004d68:	e7ca      	b.n	8004d00 <_free_r+0x24>
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	2000009c 	.word	0x2000009c

08004d70 <_malloc_r>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	2303      	movs	r3, #3
 8004d74:	1ccd      	adds	r5, r1, #3
 8004d76:	439d      	bics	r5, r3
 8004d78:	3508      	adds	r5, #8
 8004d7a:	0006      	movs	r6, r0
 8004d7c:	2d0c      	cmp	r5, #12
 8004d7e:	d21f      	bcs.n	8004dc0 <_malloc_r+0x50>
 8004d80:	250c      	movs	r5, #12
 8004d82:	42a9      	cmp	r1, r5
 8004d84:	d81e      	bhi.n	8004dc4 <_malloc_r+0x54>
 8004d86:	0030      	movs	r0, r6
 8004d88:	f000 ff0a 	bl	8005ba0 <__malloc_lock>
 8004d8c:	4925      	ldr	r1, [pc, #148]	; (8004e24 <_malloc_r+0xb4>)
 8004d8e:	680a      	ldr	r2, [r1, #0]
 8004d90:	0014      	movs	r4, r2
 8004d92:	2c00      	cmp	r4, #0
 8004d94:	d11a      	bne.n	8004dcc <_malloc_r+0x5c>
 8004d96:	4f24      	ldr	r7, [pc, #144]	; (8004e28 <_malloc_r+0xb8>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <_malloc_r+0x38>
 8004d9e:	0021      	movs	r1, r4
 8004da0:	0030      	movs	r0, r6
 8004da2:	f000 fb31 	bl	8005408 <_sbrk_r>
 8004da6:	6038      	str	r0, [r7, #0]
 8004da8:	0029      	movs	r1, r5
 8004daa:	0030      	movs	r0, r6
 8004dac:	f000 fb2c 	bl	8005408 <_sbrk_r>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d12b      	bne.n	8004e0c <_malloc_r+0x9c>
 8004db4:	230c      	movs	r3, #12
 8004db6:	0030      	movs	r0, r6
 8004db8:	6033      	str	r3, [r6, #0]
 8004dba:	f000 fef9 	bl	8005bb0 <__malloc_unlock>
 8004dbe:	e003      	b.n	8004dc8 <_malloc_r+0x58>
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	dade      	bge.n	8004d82 <_malloc_r+0x12>
 8004dc4:	230c      	movs	r3, #12
 8004dc6:	6033      	str	r3, [r6, #0]
 8004dc8:	2000      	movs	r0, #0
 8004dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	1b5b      	subs	r3, r3, r5
 8004dd0:	d419      	bmi.n	8004e06 <_malloc_r+0x96>
 8004dd2:	2b0b      	cmp	r3, #11
 8004dd4:	d903      	bls.n	8004dde <_malloc_r+0x6e>
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	18e4      	adds	r4, r4, r3
 8004dda:	6025      	str	r5, [r4, #0]
 8004ddc:	e003      	b.n	8004de6 <_malloc_r+0x76>
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	42a2      	cmp	r2, r4
 8004de2:	d10e      	bne.n	8004e02 <_malloc_r+0x92>
 8004de4:	600b      	str	r3, [r1, #0]
 8004de6:	0030      	movs	r0, r6
 8004de8:	f000 fee2 	bl	8005bb0 <__malloc_unlock>
 8004dec:	0020      	movs	r0, r4
 8004dee:	2207      	movs	r2, #7
 8004df0:	300b      	adds	r0, #11
 8004df2:	1d23      	adds	r3, r4, #4
 8004df4:	4390      	bics	r0, r2
 8004df6:	1ac2      	subs	r2, r0, r3
 8004df8:	4298      	cmp	r0, r3
 8004dfa:	d0e6      	beq.n	8004dca <_malloc_r+0x5a>
 8004dfc:	1a1b      	subs	r3, r3, r0
 8004dfe:	50a3      	str	r3, [r4, r2]
 8004e00:	e7e3      	b.n	8004dca <_malloc_r+0x5a>
 8004e02:	6053      	str	r3, [r2, #4]
 8004e04:	e7ef      	b.n	8004de6 <_malloc_r+0x76>
 8004e06:	0022      	movs	r2, r4
 8004e08:	6864      	ldr	r4, [r4, #4]
 8004e0a:	e7c2      	b.n	8004d92 <_malloc_r+0x22>
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	1cc4      	adds	r4, r0, #3
 8004e10:	439c      	bics	r4, r3
 8004e12:	42a0      	cmp	r0, r4
 8004e14:	d0e1      	beq.n	8004dda <_malloc_r+0x6a>
 8004e16:	1a21      	subs	r1, r4, r0
 8004e18:	0030      	movs	r0, r6
 8004e1a:	f000 faf5 	bl	8005408 <_sbrk_r>
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	d1db      	bne.n	8004dda <_malloc_r+0x6a>
 8004e22:	e7c7      	b.n	8004db4 <_malloc_r+0x44>
 8004e24:	2000009c 	.word	0x2000009c
 8004e28:	200000a0 	.word	0x200000a0

08004e2c <__sfputc_r>:
 8004e2c:	6893      	ldr	r3, [r2, #8]
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	3b01      	subs	r3, #1
 8004e32:	6093      	str	r3, [r2, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da04      	bge.n	8004e42 <__sfputc_r+0x16>
 8004e38:	6994      	ldr	r4, [r2, #24]
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	db07      	blt.n	8004e4e <__sfputc_r+0x22>
 8004e3e:	290a      	cmp	r1, #10
 8004e40:	d005      	beq.n	8004e4e <__sfputc_r+0x22>
 8004e42:	6813      	ldr	r3, [r2, #0]
 8004e44:	1c58      	adds	r0, r3, #1
 8004e46:	6010      	str	r0, [r2, #0]
 8004e48:	7019      	strb	r1, [r3, #0]
 8004e4a:	0008      	movs	r0, r1
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	f000 fb87 	bl	8005560 <__swbuf_r>
 8004e52:	0001      	movs	r1, r0
 8004e54:	e7f9      	b.n	8004e4a <__sfputc_r+0x1e>

08004e56 <__sfputs_r>:
 8004e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e58:	0006      	movs	r6, r0
 8004e5a:	000f      	movs	r7, r1
 8004e5c:	0014      	movs	r4, r2
 8004e5e:	18d5      	adds	r5, r2, r3
 8004e60:	42ac      	cmp	r4, r5
 8004e62:	d101      	bne.n	8004e68 <__sfputs_r+0x12>
 8004e64:	2000      	movs	r0, #0
 8004e66:	e007      	b.n	8004e78 <__sfputs_r+0x22>
 8004e68:	7821      	ldrb	r1, [r4, #0]
 8004e6a:	003a      	movs	r2, r7
 8004e6c:	0030      	movs	r0, r6
 8004e6e:	f7ff ffdd 	bl	8004e2c <__sfputc_r>
 8004e72:	3401      	adds	r4, #1
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d1f3      	bne.n	8004e60 <__sfputs_r+0xa>
 8004e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e7c <_vfiprintf_r>:
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7e:	b0a1      	sub	sp, #132	; 0x84
 8004e80:	0006      	movs	r6, r0
 8004e82:	000c      	movs	r4, r1
 8004e84:	001f      	movs	r7, r3
 8004e86:	9203      	str	r2, [sp, #12]
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d004      	beq.n	8004e96 <_vfiprintf_r+0x1a>
 8004e8c:	6983      	ldr	r3, [r0, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <_vfiprintf_r+0x1a>
 8004e92:	f000 fd69 	bl	8005968 <__sinit>
 8004e96:	4b8e      	ldr	r3, [pc, #568]	; (80050d0 <_vfiprintf_r+0x254>)
 8004e98:	429c      	cmp	r4, r3
 8004e9a:	d11c      	bne.n	8004ed6 <_vfiprintf_r+0x5a>
 8004e9c:	6874      	ldr	r4, [r6, #4]
 8004e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea0:	07db      	lsls	r3, r3, #31
 8004ea2:	d405      	bmi.n	8004eb0 <_vfiprintf_r+0x34>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	059b      	lsls	r3, r3, #22
 8004ea8:	d402      	bmi.n	8004eb0 <_vfiprintf_r+0x34>
 8004eaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eac:	f000 fdfd 	bl	8005aaa <__retarget_lock_acquire_recursive>
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	071b      	lsls	r3, r3, #28
 8004eb4:	d502      	bpl.n	8004ebc <_vfiprintf_r+0x40>
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11d      	bne.n	8004ef8 <_vfiprintf_r+0x7c>
 8004ebc:	0021      	movs	r1, r4
 8004ebe:	0030      	movs	r0, r6
 8004ec0:	f000 fba4 	bl	800560c <__swsetup_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d017      	beq.n	8004ef8 <_vfiprintf_r+0x7c>
 8004ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eca:	07db      	lsls	r3, r3, #31
 8004ecc:	d50d      	bpl.n	8004eea <_vfiprintf_r+0x6e>
 8004ece:	2001      	movs	r0, #1
 8004ed0:	4240      	negs	r0, r0
 8004ed2:	b021      	add	sp, #132	; 0x84
 8004ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed6:	4b7f      	ldr	r3, [pc, #508]	; (80050d4 <_vfiprintf_r+0x258>)
 8004ed8:	429c      	cmp	r4, r3
 8004eda:	d101      	bne.n	8004ee0 <_vfiprintf_r+0x64>
 8004edc:	68b4      	ldr	r4, [r6, #8]
 8004ede:	e7de      	b.n	8004e9e <_vfiprintf_r+0x22>
 8004ee0:	4b7d      	ldr	r3, [pc, #500]	; (80050d8 <_vfiprintf_r+0x25c>)
 8004ee2:	429c      	cmp	r4, r3
 8004ee4:	d1db      	bne.n	8004e9e <_vfiprintf_r+0x22>
 8004ee6:	68f4      	ldr	r4, [r6, #12]
 8004ee8:	e7d9      	b.n	8004e9e <_vfiprintf_r+0x22>
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	059b      	lsls	r3, r3, #22
 8004eee:	d4ee      	bmi.n	8004ece <_vfiprintf_r+0x52>
 8004ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ef2:	f000 fddb 	bl	8005aac <__retarget_lock_release_recursive>
 8004ef6:	e7ea      	b.n	8004ece <_vfiprintf_r+0x52>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	ad08      	add	r5, sp, #32
 8004efc:	616b      	str	r3, [r5, #20]
 8004efe:	3320      	adds	r3, #32
 8004f00:	766b      	strb	r3, [r5, #25]
 8004f02:	3310      	adds	r3, #16
 8004f04:	76ab      	strb	r3, [r5, #26]
 8004f06:	9707      	str	r7, [sp, #28]
 8004f08:	9f03      	ldr	r7, [sp, #12]
 8004f0a:	783b      	ldrb	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <_vfiprintf_r+0x98>
 8004f10:	2b25      	cmp	r3, #37	; 0x25
 8004f12:	d14e      	bne.n	8004fb2 <_vfiprintf_r+0x136>
 8004f14:	9b03      	ldr	r3, [sp, #12]
 8004f16:	1afb      	subs	r3, r7, r3
 8004f18:	9305      	str	r3, [sp, #20]
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	429f      	cmp	r7, r3
 8004f1e:	d00d      	beq.n	8004f3c <_vfiprintf_r+0xc0>
 8004f20:	9b05      	ldr	r3, [sp, #20]
 8004f22:	0021      	movs	r1, r4
 8004f24:	0030      	movs	r0, r6
 8004f26:	9a03      	ldr	r2, [sp, #12]
 8004f28:	f7ff ff95 	bl	8004e56 <__sfputs_r>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d100      	bne.n	8004f32 <_vfiprintf_r+0xb6>
 8004f30:	e0b5      	b.n	800509e <_vfiprintf_r+0x222>
 8004f32:	696a      	ldr	r2, [r5, #20]
 8004f34:	9b05      	ldr	r3, [sp, #20]
 8004f36:	4694      	mov	ip, r2
 8004f38:	4463      	add	r3, ip
 8004f3a:	616b      	str	r3, [r5, #20]
 8004f3c:	783b      	ldrb	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d100      	bne.n	8004f44 <_vfiprintf_r+0xc8>
 8004f42:	e0ac      	b.n	800509e <_vfiprintf_r+0x222>
 8004f44:	2201      	movs	r2, #1
 8004f46:	1c7b      	adds	r3, r7, #1
 8004f48:	9303      	str	r3, [sp, #12]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	4252      	negs	r2, r2
 8004f4e:	606a      	str	r2, [r5, #4]
 8004f50:	a904      	add	r1, sp, #16
 8004f52:	3254      	adds	r2, #84	; 0x54
 8004f54:	1852      	adds	r2, r2, r1
 8004f56:	602b      	str	r3, [r5, #0]
 8004f58:	60eb      	str	r3, [r5, #12]
 8004f5a:	60ab      	str	r3, [r5, #8]
 8004f5c:	7013      	strb	r3, [r2, #0]
 8004f5e:	65ab      	str	r3, [r5, #88]	; 0x58
 8004f60:	9b03      	ldr	r3, [sp, #12]
 8004f62:	2205      	movs	r2, #5
 8004f64:	7819      	ldrb	r1, [r3, #0]
 8004f66:	485d      	ldr	r0, [pc, #372]	; (80050dc <_vfiprintf_r+0x260>)
 8004f68:	f000 fe0e 	bl	8005b88 <memchr>
 8004f6c:	9b03      	ldr	r3, [sp, #12]
 8004f6e:	1c5f      	adds	r7, r3, #1
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d120      	bne.n	8004fb6 <_vfiprintf_r+0x13a>
 8004f74:	682a      	ldr	r2, [r5, #0]
 8004f76:	06d3      	lsls	r3, r2, #27
 8004f78:	d504      	bpl.n	8004f84 <_vfiprintf_r+0x108>
 8004f7a:	2353      	movs	r3, #83	; 0x53
 8004f7c:	a904      	add	r1, sp, #16
 8004f7e:	185b      	adds	r3, r3, r1
 8004f80:	2120      	movs	r1, #32
 8004f82:	7019      	strb	r1, [r3, #0]
 8004f84:	0713      	lsls	r3, r2, #28
 8004f86:	d504      	bpl.n	8004f92 <_vfiprintf_r+0x116>
 8004f88:	2353      	movs	r3, #83	; 0x53
 8004f8a:	a904      	add	r1, sp, #16
 8004f8c:	185b      	adds	r3, r3, r1
 8004f8e:	212b      	movs	r1, #43	; 0x2b
 8004f90:	7019      	strb	r1, [r3, #0]
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b2a      	cmp	r3, #42	; 0x2a
 8004f98:	d016      	beq.n	8004fc8 <_vfiprintf_r+0x14c>
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	68eb      	ldr	r3, [r5, #12]
 8004f9e:	9f03      	ldr	r7, [sp, #12]
 8004fa0:	783a      	ldrb	r2, [r7, #0]
 8004fa2:	1c78      	adds	r0, r7, #1
 8004fa4:	3a30      	subs	r2, #48	; 0x30
 8004fa6:	4684      	mov	ip, r0
 8004fa8:	2a09      	cmp	r2, #9
 8004faa:	d94f      	bls.n	800504c <_vfiprintf_r+0x1d0>
 8004fac:	2900      	cmp	r1, #0
 8004fae:	d111      	bne.n	8004fd4 <_vfiprintf_r+0x158>
 8004fb0:	e017      	b.n	8004fe2 <_vfiprintf_r+0x166>
 8004fb2:	3701      	adds	r7, #1
 8004fb4:	e7a9      	b.n	8004f0a <_vfiprintf_r+0x8e>
 8004fb6:	4b49      	ldr	r3, [pc, #292]	; (80050dc <_vfiprintf_r+0x260>)
 8004fb8:	682a      	ldr	r2, [r5, #0]
 8004fba:	1ac0      	subs	r0, r0, r3
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4083      	lsls	r3, r0
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	602b      	str	r3, [r5, #0]
 8004fc4:	9703      	str	r7, [sp, #12]
 8004fc6:	e7cb      	b.n	8004f60 <_vfiprintf_r+0xe4>
 8004fc8:	9b07      	ldr	r3, [sp, #28]
 8004fca:	1d19      	adds	r1, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	9107      	str	r1, [sp, #28]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	db01      	blt.n	8004fd8 <_vfiprintf_r+0x15c>
 8004fd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fd6:	e004      	b.n	8004fe2 <_vfiprintf_r+0x166>
 8004fd8:	425b      	negs	r3, r3
 8004fda:	60eb      	str	r3, [r5, #12]
 8004fdc:	2302      	movs	r3, #2
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	783b      	ldrb	r3, [r7, #0]
 8004fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fe6:	d10a      	bne.n	8004ffe <_vfiprintf_r+0x182>
 8004fe8:	787b      	ldrb	r3, [r7, #1]
 8004fea:	2b2a      	cmp	r3, #42	; 0x2a
 8004fec:	d137      	bne.n	800505e <_vfiprintf_r+0x1e2>
 8004fee:	9b07      	ldr	r3, [sp, #28]
 8004ff0:	3702      	adds	r7, #2
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	9207      	str	r2, [sp, #28]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	db2d      	blt.n	8005058 <_vfiprintf_r+0x1dc>
 8004ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffe:	2203      	movs	r2, #3
 8005000:	7839      	ldrb	r1, [r7, #0]
 8005002:	4837      	ldr	r0, [pc, #220]	; (80050e0 <_vfiprintf_r+0x264>)
 8005004:	f000 fdc0 	bl	8005b88 <memchr>
 8005008:	2800      	cmp	r0, #0
 800500a:	d007      	beq.n	800501c <_vfiprintf_r+0x1a0>
 800500c:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <_vfiprintf_r+0x264>)
 800500e:	682a      	ldr	r2, [r5, #0]
 8005010:	1ac0      	subs	r0, r0, r3
 8005012:	2340      	movs	r3, #64	; 0x40
 8005014:	4083      	lsls	r3, r0
 8005016:	4313      	orrs	r3, r2
 8005018:	3701      	adds	r7, #1
 800501a:	602b      	str	r3, [r5, #0]
 800501c:	7839      	ldrb	r1, [r7, #0]
 800501e:	1c7b      	adds	r3, r7, #1
 8005020:	2206      	movs	r2, #6
 8005022:	4830      	ldr	r0, [pc, #192]	; (80050e4 <_vfiprintf_r+0x268>)
 8005024:	9303      	str	r3, [sp, #12]
 8005026:	7629      	strb	r1, [r5, #24]
 8005028:	f000 fdae 	bl	8005b88 <memchr>
 800502c:	2800      	cmp	r0, #0
 800502e:	d045      	beq.n	80050bc <_vfiprintf_r+0x240>
 8005030:	4b2d      	ldr	r3, [pc, #180]	; (80050e8 <_vfiprintf_r+0x26c>)
 8005032:	2b00      	cmp	r3, #0
 8005034:	d127      	bne.n	8005086 <_vfiprintf_r+0x20a>
 8005036:	2207      	movs	r2, #7
 8005038:	9b07      	ldr	r3, [sp, #28]
 800503a:	3307      	adds	r3, #7
 800503c:	4393      	bics	r3, r2
 800503e:	3308      	adds	r3, #8
 8005040:	9307      	str	r3, [sp, #28]
 8005042:	696b      	ldr	r3, [r5, #20]
 8005044:	9a04      	ldr	r2, [sp, #16]
 8005046:	189b      	adds	r3, r3, r2
 8005048:	616b      	str	r3, [r5, #20]
 800504a:	e75d      	b.n	8004f08 <_vfiprintf_r+0x8c>
 800504c:	210a      	movs	r1, #10
 800504e:	434b      	muls	r3, r1
 8005050:	4667      	mov	r7, ip
 8005052:	189b      	adds	r3, r3, r2
 8005054:	3909      	subs	r1, #9
 8005056:	e7a3      	b.n	8004fa0 <_vfiprintf_r+0x124>
 8005058:	2301      	movs	r3, #1
 800505a:	425b      	negs	r3, r3
 800505c:	e7ce      	b.n	8004ffc <_vfiprintf_r+0x180>
 800505e:	2300      	movs	r3, #0
 8005060:	001a      	movs	r2, r3
 8005062:	3701      	adds	r7, #1
 8005064:	606b      	str	r3, [r5, #4]
 8005066:	7839      	ldrb	r1, [r7, #0]
 8005068:	1c78      	adds	r0, r7, #1
 800506a:	3930      	subs	r1, #48	; 0x30
 800506c:	4684      	mov	ip, r0
 800506e:	2909      	cmp	r1, #9
 8005070:	d903      	bls.n	800507a <_vfiprintf_r+0x1fe>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0c3      	beq.n	8004ffe <_vfiprintf_r+0x182>
 8005076:	9209      	str	r2, [sp, #36]	; 0x24
 8005078:	e7c1      	b.n	8004ffe <_vfiprintf_r+0x182>
 800507a:	230a      	movs	r3, #10
 800507c:	435a      	muls	r2, r3
 800507e:	4667      	mov	r7, ip
 8005080:	1852      	adds	r2, r2, r1
 8005082:	3b09      	subs	r3, #9
 8005084:	e7ef      	b.n	8005066 <_vfiprintf_r+0x1ea>
 8005086:	ab07      	add	r3, sp, #28
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	0022      	movs	r2, r4
 800508c:	0029      	movs	r1, r5
 800508e:	0030      	movs	r0, r6
 8005090:	4b16      	ldr	r3, [pc, #88]	; (80050ec <_vfiprintf_r+0x270>)
 8005092:	e000      	b.n	8005096 <_vfiprintf_r+0x21a>
 8005094:	bf00      	nop
 8005096:	9004      	str	r0, [sp, #16]
 8005098:	9b04      	ldr	r3, [sp, #16]
 800509a:	3301      	adds	r3, #1
 800509c:	d1d1      	bne.n	8005042 <_vfiprintf_r+0x1c6>
 800509e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050a0:	07db      	lsls	r3, r3, #31
 80050a2:	d405      	bmi.n	80050b0 <_vfiprintf_r+0x234>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	059b      	lsls	r3, r3, #22
 80050a8:	d402      	bmi.n	80050b0 <_vfiprintf_r+0x234>
 80050aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ac:	f000 fcfe 	bl	8005aac <__retarget_lock_release_recursive>
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	065b      	lsls	r3, r3, #25
 80050b4:	d500      	bpl.n	80050b8 <_vfiprintf_r+0x23c>
 80050b6:	e70a      	b.n	8004ece <_vfiprintf_r+0x52>
 80050b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80050ba:	e70a      	b.n	8004ed2 <_vfiprintf_r+0x56>
 80050bc:	ab07      	add	r3, sp, #28
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	0022      	movs	r2, r4
 80050c2:	0029      	movs	r1, r5
 80050c4:	0030      	movs	r0, r6
 80050c6:	4b09      	ldr	r3, [pc, #36]	; (80050ec <_vfiprintf_r+0x270>)
 80050c8:	f000 f882 	bl	80051d0 <_printf_i>
 80050cc:	e7e3      	b.n	8005096 <_vfiprintf_r+0x21a>
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	0800615c 	.word	0x0800615c
 80050d4:	0800617c 	.word	0x0800617c
 80050d8:	0800613c 	.word	0x0800613c
 80050dc:	08006008 	.word	0x08006008
 80050e0:	0800600e 	.word	0x0800600e
 80050e4:	08006012 	.word	0x08006012
 80050e8:	00000000 	.word	0x00000000
 80050ec:	08004e57 	.word	0x08004e57

080050f0 <_printf_common>:
 80050f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050f2:	0015      	movs	r5, r2
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	688a      	ldr	r2, [r1, #8]
 80050f8:	690b      	ldr	r3, [r1, #16]
 80050fa:	000c      	movs	r4, r1
 80050fc:	9000      	str	r0, [sp, #0]
 80050fe:	4293      	cmp	r3, r2
 8005100:	da00      	bge.n	8005104 <_printf_common+0x14>
 8005102:	0013      	movs	r3, r2
 8005104:	0022      	movs	r2, r4
 8005106:	602b      	str	r3, [r5, #0]
 8005108:	3243      	adds	r2, #67	; 0x43
 800510a:	7812      	ldrb	r2, [r2, #0]
 800510c:	2a00      	cmp	r2, #0
 800510e:	d001      	beq.n	8005114 <_printf_common+0x24>
 8005110:	3301      	adds	r3, #1
 8005112:	602b      	str	r3, [r5, #0]
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	069b      	lsls	r3, r3, #26
 8005118:	d502      	bpl.n	8005120 <_printf_common+0x30>
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	3302      	adds	r3, #2
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	2306      	movs	r3, #6
 8005124:	0017      	movs	r7, r2
 8005126:	401f      	ands	r7, r3
 8005128:	421a      	tst	r2, r3
 800512a:	d027      	beq.n	800517c <_printf_common+0x8c>
 800512c:	0023      	movs	r3, r4
 800512e:	3343      	adds	r3, #67	; 0x43
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	1e5a      	subs	r2, r3, #1
 8005134:	4193      	sbcs	r3, r2
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	0692      	lsls	r2, r2, #26
 800513a:	d430      	bmi.n	800519e <_printf_common+0xae>
 800513c:	0022      	movs	r2, r4
 800513e:	9901      	ldr	r1, [sp, #4]
 8005140:	9800      	ldr	r0, [sp, #0]
 8005142:	9e08      	ldr	r6, [sp, #32]
 8005144:	3243      	adds	r2, #67	; 0x43
 8005146:	47b0      	blx	r6
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d025      	beq.n	8005198 <_printf_common+0xa8>
 800514c:	2306      	movs	r3, #6
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	682a      	ldr	r2, [r5, #0]
 8005152:	68e1      	ldr	r1, [r4, #12]
 8005154:	2500      	movs	r5, #0
 8005156:	4003      	ands	r3, r0
 8005158:	2b04      	cmp	r3, #4
 800515a:	d103      	bne.n	8005164 <_printf_common+0x74>
 800515c:	1a8d      	subs	r5, r1, r2
 800515e:	43eb      	mvns	r3, r5
 8005160:	17db      	asrs	r3, r3, #31
 8005162:	401d      	ands	r5, r3
 8005164:	68a3      	ldr	r3, [r4, #8]
 8005166:	6922      	ldr	r2, [r4, #16]
 8005168:	4293      	cmp	r3, r2
 800516a:	dd01      	ble.n	8005170 <_printf_common+0x80>
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	18ed      	adds	r5, r5, r3
 8005170:	2700      	movs	r7, #0
 8005172:	42bd      	cmp	r5, r7
 8005174:	d120      	bne.n	80051b8 <_printf_common+0xc8>
 8005176:	2000      	movs	r0, #0
 8005178:	e010      	b.n	800519c <_printf_common+0xac>
 800517a:	3701      	adds	r7, #1
 800517c:	68e3      	ldr	r3, [r4, #12]
 800517e:	682a      	ldr	r2, [r5, #0]
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	42bb      	cmp	r3, r7
 8005184:	ddd2      	ble.n	800512c <_printf_common+0x3c>
 8005186:	0022      	movs	r2, r4
 8005188:	2301      	movs	r3, #1
 800518a:	9901      	ldr	r1, [sp, #4]
 800518c:	9800      	ldr	r0, [sp, #0]
 800518e:	9e08      	ldr	r6, [sp, #32]
 8005190:	3219      	adds	r2, #25
 8005192:	47b0      	blx	r6
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d1f0      	bne.n	800517a <_printf_common+0x8a>
 8005198:	2001      	movs	r0, #1
 800519a:	4240      	negs	r0, r0
 800519c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800519e:	2030      	movs	r0, #48	; 0x30
 80051a0:	18e1      	adds	r1, r4, r3
 80051a2:	3143      	adds	r1, #67	; 0x43
 80051a4:	7008      	strb	r0, [r1, #0]
 80051a6:	0021      	movs	r1, r4
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	3145      	adds	r1, #69	; 0x45
 80051ac:	7809      	ldrb	r1, [r1, #0]
 80051ae:	18a2      	adds	r2, r4, r2
 80051b0:	3243      	adds	r2, #67	; 0x43
 80051b2:	3302      	adds	r3, #2
 80051b4:	7011      	strb	r1, [r2, #0]
 80051b6:	e7c1      	b.n	800513c <_printf_common+0x4c>
 80051b8:	0022      	movs	r2, r4
 80051ba:	2301      	movs	r3, #1
 80051bc:	9901      	ldr	r1, [sp, #4]
 80051be:	9800      	ldr	r0, [sp, #0]
 80051c0:	9e08      	ldr	r6, [sp, #32]
 80051c2:	321a      	adds	r2, #26
 80051c4:	47b0      	blx	r6
 80051c6:	1c43      	adds	r3, r0, #1
 80051c8:	d0e6      	beq.n	8005198 <_printf_common+0xa8>
 80051ca:	3701      	adds	r7, #1
 80051cc:	e7d1      	b.n	8005172 <_printf_common+0x82>
	...

080051d0 <_printf_i>:
 80051d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d2:	b08b      	sub	sp, #44	; 0x2c
 80051d4:	9206      	str	r2, [sp, #24]
 80051d6:	000a      	movs	r2, r1
 80051d8:	3243      	adds	r2, #67	; 0x43
 80051da:	9307      	str	r3, [sp, #28]
 80051dc:	9005      	str	r0, [sp, #20]
 80051de:	9204      	str	r2, [sp, #16]
 80051e0:	7e0a      	ldrb	r2, [r1, #24]
 80051e2:	000c      	movs	r4, r1
 80051e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051e6:	2a78      	cmp	r2, #120	; 0x78
 80051e8:	d806      	bhi.n	80051f8 <_printf_i+0x28>
 80051ea:	2a62      	cmp	r2, #98	; 0x62
 80051ec:	d808      	bhi.n	8005200 <_printf_i+0x30>
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	d100      	bne.n	80051f4 <_printf_i+0x24>
 80051f2:	e0c0      	b.n	8005376 <_printf_i+0x1a6>
 80051f4:	2a58      	cmp	r2, #88	; 0x58
 80051f6:	d052      	beq.n	800529e <_printf_i+0xce>
 80051f8:	0026      	movs	r6, r4
 80051fa:	3642      	adds	r6, #66	; 0x42
 80051fc:	7032      	strb	r2, [r6, #0]
 80051fe:	e022      	b.n	8005246 <_printf_i+0x76>
 8005200:	0010      	movs	r0, r2
 8005202:	3863      	subs	r0, #99	; 0x63
 8005204:	2815      	cmp	r0, #21
 8005206:	d8f7      	bhi.n	80051f8 <_printf_i+0x28>
 8005208:	f7fa ff7e 	bl	8000108 <__gnu_thumb1_case_shi>
 800520c:	001f0016 	.word	0x001f0016
 8005210:	fff6fff6 	.word	0xfff6fff6
 8005214:	fff6fff6 	.word	0xfff6fff6
 8005218:	fff6001f 	.word	0xfff6001f
 800521c:	fff6fff6 	.word	0xfff6fff6
 8005220:	00a8fff6 	.word	0x00a8fff6
 8005224:	009a0036 	.word	0x009a0036
 8005228:	fff6fff6 	.word	0xfff6fff6
 800522c:	fff600b9 	.word	0xfff600b9
 8005230:	fff60036 	.word	0xfff60036
 8005234:	009efff6 	.word	0x009efff6
 8005238:	0026      	movs	r6, r4
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	3642      	adds	r6, #66	; 0x42
 800523e:	1d11      	adds	r1, r2, #4
 8005240:	6019      	str	r1, [r3, #0]
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	7033      	strb	r3, [r6, #0]
 8005246:	2301      	movs	r3, #1
 8005248:	e0a7      	b.n	800539a <_printf_i+0x1ca>
 800524a:	6808      	ldr	r0, [r1, #0]
 800524c:	6819      	ldr	r1, [r3, #0]
 800524e:	1d0a      	adds	r2, r1, #4
 8005250:	0605      	lsls	r5, r0, #24
 8005252:	d50b      	bpl.n	800526c <_printf_i+0x9c>
 8005254:	680d      	ldr	r5, [r1, #0]
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	2d00      	cmp	r5, #0
 800525a:	da03      	bge.n	8005264 <_printf_i+0x94>
 800525c:	232d      	movs	r3, #45	; 0x2d
 800525e:	9a04      	ldr	r2, [sp, #16]
 8005260:	426d      	negs	r5, r5
 8005262:	7013      	strb	r3, [r2, #0]
 8005264:	4b61      	ldr	r3, [pc, #388]	; (80053ec <_printf_i+0x21c>)
 8005266:	270a      	movs	r7, #10
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	e032      	b.n	80052d2 <_printf_i+0x102>
 800526c:	680d      	ldr	r5, [r1, #0]
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	0641      	lsls	r1, r0, #25
 8005272:	d5f1      	bpl.n	8005258 <_printf_i+0x88>
 8005274:	b22d      	sxth	r5, r5
 8005276:	e7ef      	b.n	8005258 <_printf_i+0x88>
 8005278:	680d      	ldr	r5, [r1, #0]
 800527a:	6819      	ldr	r1, [r3, #0]
 800527c:	1d08      	adds	r0, r1, #4
 800527e:	6018      	str	r0, [r3, #0]
 8005280:	062e      	lsls	r6, r5, #24
 8005282:	d501      	bpl.n	8005288 <_printf_i+0xb8>
 8005284:	680d      	ldr	r5, [r1, #0]
 8005286:	e003      	b.n	8005290 <_printf_i+0xc0>
 8005288:	066d      	lsls	r5, r5, #25
 800528a:	d5fb      	bpl.n	8005284 <_printf_i+0xb4>
 800528c:	680d      	ldr	r5, [r1, #0]
 800528e:	b2ad      	uxth	r5, r5
 8005290:	4b56      	ldr	r3, [pc, #344]	; (80053ec <_printf_i+0x21c>)
 8005292:	270a      	movs	r7, #10
 8005294:	9303      	str	r3, [sp, #12]
 8005296:	2a6f      	cmp	r2, #111	; 0x6f
 8005298:	d117      	bne.n	80052ca <_printf_i+0xfa>
 800529a:	2708      	movs	r7, #8
 800529c:	e015      	b.n	80052ca <_printf_i+0xfa>
 800529e:	3145      	adds	r1, #69	; 0x45
 80052a0:	700a      	strb	r2, [r1, #0]
 80052a2:	4a52      	ldr	r2, [pc, #328]	; (80053ec <_printf_i+0x21c>)
 80052a4:	9203      	str	r2, [sp, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	6821      	ldr	r1, [r4, #0]
 80052aa:	ca20      	ldmia	r2!, {r5}
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	0608      	lsls	r0, r1, #24
 80052b0:	d550      	bpl.n	8005354 <_printf_i+0x184>
 80052b2:	07cb      	lsls	r3, r1, #31
 80052b4:	d502      	bpl.n	80052bc <_printf_i+0xec>
 80052b6:	2320      	movs	r3, #32
 80052b8:	4319      	orrs	r1, r3
 80052ba:	6021      	str	r1, [r4, #0]
 80052bc:	2710      	movs	r7, #16
 80052be:	2d00      	cmp	r5, #0
 80052c0:	d103      	bne.n	80052ca <_printf_i+0xfa>
 80052c2:	2320      	movs	r3, #32
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	439a      	bics	r2, r3
 80052c8:	6022      	str	r2, [r4, #0]
 80052ca:	0023      	movs	r3, r4
 80052cc:	2200      	movs	r2, #0
 80052ce:	3343      	adds	r3, #67	; 0x43
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	60a3      	str	r3, [r4, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	db03      	blt.n	80052e2 <_printf_i+0x112>
 80052da:	2204      	movs	r2, #4
 80052dc:	6821      	ldr	r1, [r4, #0]
 80052de:	4391      	bics	r1, r2
 80052e0:	6021      	str	r1, [r4, #0]
 80052e2:	2d00      	cmp	r5, #0
 80052e4:	d102      	bne.n	80052ec <_printf_i+0x11c>
 80052e6:	9e04      	ldr	r6, [sp, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00c      	beq.n	8005306 <_printf_i+0x136>
 80052ec:	9e04      	ldr	r6, [sp, #16]
 80052ee:	0028      	movs	r0, r5
 80052f0:	0039      	movs	r1, r7
 80052f2:	f7fa ff99 	bl	8000228 <__aeabi_uidivmod>
 80052f6:	9b03      	ldr	r3, [sp, #12]
 80052f8:	3e01      	subs	r6, #1
 80052fa:	5c5b      	ldrb	r3, [r3, r1]
 80052fc:	7033      	strb	r3, [r6, #0]
 80052fe:	002b      	movs	r3, r5
 8005300:	0005      	movs	r5, r0
 8005302:	429f      	cmp	r7, r3
 8005304:	d9f3      	bls.n	80052ee <_printf_i+0x11e>
 8005306:	2f08      	cmp	r7, #8
 8005308:	d109      	bne.n	800531e <_printf_i+0x14e>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	07db      	lsls	r3, r3, #31
 800530e:	d506      	bpl.n	800531e <_printf_i+0x14e>
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	6922      	ldr	r2, [r4, #16]
 8005314:	4293      	cmp	r3, r2
 8005316:	dc02      	bgt.n	800531e <_printf_i+0x14e>
 8005318:	2330      	movs	r3, #48	; 0x30
 800531a:	3e01      	subs	r6, #1
 800531c:	7033      	strb	r3, [r6, #0]
 800531e:	9b04      	ldr	r3, [sp, #16]
 8005320:	1b9b      	subs	r3, r3, r6
 8005322:	6123      	str	r3, [r4, #16]
 8005324:	9b07      	ldr	r3, [sp, #28]
 8005326:	0021      	movs	r1, r4
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	9805      	ldr	r0, [sp, #20]
 800532c:	9b06      	ldr	r3, [sp, #24]
 800532e:	aa09      	add	r2, sp, #36	; 0x24
 8005330:	f7ff fede 	bl	80050f0 <_printf_common>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d135      	bne.n	80053a4 <_printf_i+0x1d4>
 8005338:	2001      	movs	r0, #1
 800533a:	4240      	negs	r0, r0
 800533c:	b00b      	add	sp, #44	; 0x2c
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005340:	2220      	movs	r2, #32
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	6022      	str	r2, [r4, #0]
 8005348:	0022      	movs	r2, r4
 800534a:	2178      	movs	r1, #120	; 0x78
 800534c:	3245      	adds	r2, #69	; 0x45
 800534e:	7011      	strb	r1, [r2, #0]
 8005350:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <_printf_i+0x220>)
 8005352:	e7a7      	b.n	80052a4 <_printf_i+0xd4>
 8005354:	0648      	lsls	r0, r1, #25
 8005356:	d5ac      	bpl.n	80052b2 <_printf_i+0xe2>
 8005358:	b2ad      	uxth	r5, r5
 800535a:	e7aa      	b.n	80052b2 <_printf_i+0xe2>
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	680d      	ldr	r5, [r1, #0]
 8005360:	1d10      	adds	r0, r2, #4
 8005362:	6949      	ldr	r1, [r1, #20]
 8005364:	6018      	str	r0, [r3, #0]
 8005366:	6813      	ldr	r3, [r2, #0]
 8005368:	062e      	lsls	r6, r5, #24
 800536a:	d501      	bpl.n	8005370 <_printf_i+0x1a0>
 800536c:	6019      	str	r1, [r3, #0]
 800536e:	e002      	b.n	8005376 <_printf_i+0x1a6>
 8005370:	066d      	lsls	r5, r5, #25
 8005372:	d5fb      	bpl.n	800536c <_printf_i+0x19c>
 8005374:	8019      	strh	r1, [r3, #0]
 8005376:	2300      	movs	r3, #0
 8005378:	9e04      	ldr	r6, [sp, #16]
 800537a:	6123      	str	r3, [r4, #16]
 800537c:	e7d2      	b.n	8005324 <_printf_i+0x154>
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	1d11      	adds	r1, r2, #4
 8005382:	6019      	str	r1, [r3, #0]
 8005384:	6816      	ldr	r6, [r2, #0]
 8005386:	2100      	movs	r1, #0
 8005388:	0030      	movs	r0, r6
 800538a:	6862      	ldr	r2, [r4, #4]
 800538c:	f000 fbfc 	bl	8005b88 <memchr>
 8005390:	2800      	cmp	r0, #0
 8005392:	d001      	beq.n	8005398 <_printf_i+0x1c8>
 8005394:	1b80      	subs	r0, r0, r6
 8005396:	6060      	str	r0, [r4, #4]
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	2300      	movs	r3, #0
 800539e:	9a04      	ldr	r2, [sp, #16]
 80053a0:	7013      	strb	r3, [r2, #0]
 80053a2:	e7bf      	b.n	8005324 <_printf_i+0x154>
 80053a4:	6923      	ldr	r3, [r4, #16]
 80053a6:	0032      	movs	r2, r6
 80053a8:	9906      	ldr	r1, [sp, #24]
 80053aa:	9805      	ldr	r0, [sp, #20]
 80053ac:	9d07      	ldr	r5, [sp, #28]
 80053ae:	47a8      	blx	r5
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d0c1      	beq.n	8005338 <_printf_i+0x168>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	079b      	lsls	r3, r3, #30
 80053b8:	d415      	bmi.n	80053e6 <_printf_i+0x216>
 80053ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053bc:	68e0      	ldr	r0, [r4, #12]
 80053be:	4298      	cmp	r0, r3
 80053c0:	dabc      	bge.n	800533c <_printf_i+0x16c>
 80053c2:	0018      	movs	r0, r3
 80053c4:	e7ba      	b.n	800533c <_printf_i+0x16c>
 80053c6:	0022      	movs	r2, r4
 80053c8:	2301      	movs	r3, #1
 80053ca:	9906      	ldr	r1, [sp, #24]
 80053cc:	9805      	ldr	r0, [sp, #20]
 80053ce:	9e07      	ldr	r6, [sp, #28]
 80053d0:	3219      	adds	r2, #25
 80053d2:	47b0      	blx	r6
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d0af      	beq.n	8005338 <_printf_i+0x168>
 80053d8:	3501      	adds	r5, #1
 80053da:	68e3      	ldr	r3, [r4, #12]
 80053dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	42ab      	cmp	r3, r5
 80053e2:	dcf0      	bgt.n	80053c6 <_printf_i+0x1f6>
 80053e4:	e7e9      	b.n	80053ba <_printf_i+0x1ea>
 80053e6:	2500      	movs	r5, #0
 80053e8:	e7f7      	b.n	80053da <_printf_i+0x20a>
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	08006019 	.word	0x08006019
 80053f0:	0800602a 	.word	0x0800602a

080053f4 <realloc>:
 80053f4:	b510      	push	{r4, lr}
 80053f6:	4b03      	ldr	r3, [pc, #12]	; (8005404 <realloc+0x10>)
 80053f8:	000a      	movs	r2, r1
 80053fa:	0001      	movs	r1, r0
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	f000 fbdf 	bl	8005bc0 <_realloc_r>
 8005402:	bd10      	pop	{r4, pc}
 8005404:	20000014 	.word	0x20000014

08005408 <_sbrk_r>:
 8005408:	2300      	movs	r3, #0
 800540a:	b570      	push	{r4, r5, r6, lr}
 800540c:	4d06      	ldr	r5, [pc, #24]	; (8005428 <_sbrk_r+0x20>)
 800540e:	0004      	movs	r4, r0
 8005410:	0008      	movs	r0, r1
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fd ff36 	bl	8003284 <_sbrk>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d103      	bne.n	8005424 <_sbrk_r+0x1c>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d000      	beq.n	8005424 <_sbrk_r+0x1c>
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	bd70      	pop	{r4, r5, r6, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	20000178 	.word	0x20000178

0800542c <_strtol_l.isra.0>:
 800542c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800542e:	b087      	sub	sp, #28
 8005430:	001e      	movs	r6, r3
 8005432:	9005      	str	r0, [sp, #20]
 8005434:	9101      	str	r1, [sp, #4]
 8005436:	9202      	str	r2, [sp, #8]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d045      	beq.n	80054c8 <_strtol_l.isra.0+0x9c>
 800543c:	0008      	movs	r0, r1
 800543e:	2b24      	cmp	r3, #36	; 0x24
 8005440:	d842      	bhi.n	80054c8 <_strtol_l.isra.0+0x9c>
 8005442:	4b3f      	ldr	r3, [pc, #252]	; (8005540 <_strtol_l.isra.0+0x114>)
 8005444:	2208      	movs	r2, #8
 8005446:	469c      	mov	ip, r3
 8005448:	0003      	movs	r3, r0
 800544a:	4661      	mov	r1, ip
 800544c:	781c      	ldrb	r4, [r3, #0]
 800544e:	1c45      	adds	r5, r0, #1
 8005450:	5d09      	ldrb	r1, [r1, r4]
 8005452:	0028      	movs	r0, r5
 8005454:	000f      	movs	r7, r1
 8005456:	4017      	ands	r7, r2
 8005458:	4211      	tst	r1, r2
 800545a:	d1f5      	bne.n	8005448 <_strtol_l.isra.0+0x1c>
 800545c:	2c2d      	cmp	r4, #45	; 0x2d
 800545e:	d13a      	bne.n	80054d6 <_strtol_l.isra.0+0xaa>
 8005460:	2701      	movs	r7, #1
 8005462:	782c      	ldrb	r4, [r5, #0]
 8005464:	1c9d      	adds	r5, r3, #2
 8005466:	2e00      	cmp	r6, #0
 8005468:	d065      	beq.n	8005536 <_strtol_l.isra.0+0x10a>
 800546a:	2e10      	cmp	r6, #16
 800546c:	d109      	bne.n	8005482 <_strtol_l.isra.0+0x56>
 800546e:	2c30      	cmp	r4, #48	; 0x30
 8005470:	d107      	bne.n	8005482 <_strtol_l.isra.0+0x56>
 8005472:	2220      	movs	r2, #32
 8005474:	782b      	ldrb	r3, [r5, #0]
 8005476:	4393      	bics	r3, r2
 8005478:	2b58      	cmp	r3, #88	; 0x58
 800547a:	d157      	bne.n	800552c <_strtol_l.isra.0+0x100>
 800547c:	2610      	movs	r6, #16
 800547e:	786c      	ldrb	r4, [r5, #1]
 8005480:	3502      	adds	r5, #2
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <_strtol_l.isra.0+0x118>)
 8005484:	0031      	movs	r1, r6
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	0018      	movs	r0, r3
 800548a:	9303      	str	r3, [sp, #12]
 800548c:	f7fa fecc 	bl	8000228 <__aeabi_uidivmod>
 8005490:	2300      	movs	r3, #0
 8005492:	2201      	movs	r2, #1
 8005494:	4684      	mov	ip, r0
 8005496:	0018      	movs	r0, r3
 8005498:	9104      	str	r1, [sp, #16]
 800549a:	4252      	negs	r2, r2
 800549c:	0021      	movs	r1, r4
 800549e:	3930      	subs	r1, #48	; 0x30
 80054a0:	2909      	cmp	r1, #9
 80054a2:	d81d      	bhi.n	80054e0 <_strtol_l.isra.0+0xb4>
 80054a4:	000c      	movs	r4, r1
 80054a6:	42a6      	cmp	r6, r4
 80054a8:	dd28      	ble.n	80054fc <_strtol_l.isra.0+0xd0>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	db24      	blt.n	80054f8 <_strtol_l.isra.0+0xcc>
 80054ae:	0013      	movs	r3, r2
 80054b0:	4584      	cmp	ip, r0
 80054b2:	d306      	bcc.n	80054c2 <_strtol_l.isra.0+0x96>
 80054b4:	d102      	bne.n	80054bc <_strtol_l.isra.0+0x90>
 80054b6:	9904      	ldr	r1, [sp, #16]
 80054b8:	42a1      	cmp	r1, r4
 80054ba:	db02      	blt.n	80054c2 <_strtol_l.isra.0+0x96>
 80054bc:	2301      	movs	r3, #1
 80054be:	4370      	muls	r0, r6
 80054c0:	1820      	adds	r0, r4, r0
 80054c2:	782c      	ldrb	r4, [r5, #0]
 80054c4:	3501      	adds	r5, #1
 80054c6:	e7e9      	b.n	800549c <_strtol_l.isra.0+0x70>
 80054c8:	f7ff fb7a 	bl	8004bc0 <__errno>
 80054cc:	2316      	movs	r3, #22
 80054ce:	6003      	str	r3, [r0, #0]
 80054d0:	2000      	movs	r0, #0
 80054d2:	b007      	add	sp, #28
 80054d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d6:	2c2b      	cmp	r4, #43	; 0x2b
 80054d8:	d1c5      	bne.n	8005466 <_strtol_l.isra.0+0x3a>
 80054da:	782c      	ldrb	r4, [r5, #0]
 80054dc:	1c9d      	adds	r5, r3, #2
 80054de:	e7c2      	b.n	8005466 <_strtol_l.isra.0+0x3a>
 80054e0:	0021      	movs	r1, r4
 80054e2:	3941      	subs	r1, #65	; 0x41
 80054e4:	2919      	cmp	r1, #25
 80054e6:	d801      	bhi.n	80054ec <_strtol_l.isra.0+0xc0>
 80054e8:	3c37      	subs	r4, #55	; 0x37
 80054ea:	e7dc      	b.n	80054a6 <_strtol_l.isra.0+0x7a>
 80054ec:	0021      	movs	r1, r4
 80054ee:	3961      	subs	r1, #97	; 0x61
 80054f0:	2919      	cmp	r1, #25
 80054f2:	d803      	bhi.n	80054fc <_strtol_l.isra.0+0xd0>
 80054f4:	3c57      	subs	r4, #87	; 0x57
 80054f6:	e7d6      	b.n	80054a6 <_strtol_l.isra.0+0x7a>
 80054f8:	0013      	movs	r3, r2
 80054fa:	e7e2      	b.n	80054c2 <_strtol_l.isra.0+0x96>
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da09      	bge.n	8005514 <_strtol_l.isra.0+0xe8>
 8005500:	2322      	movs	r3, #34	; 0x22
 8005502:	9a05      	ldr	r2, [sp, #20]
 8005504:	9803      	ldr	r0, [sp, #12]
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	9b02      	ldr	r3, [sp, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0e1      	beq.n	80054d2 <_strtol_l.isra.0+0xa6>
 800550e:	1e6b      	subs	r3, r5, #1
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	e007      	b.n	8005524 <_strtol_l.isra.0+0xf8>
 8005514:	2f00      	cmp	r7, #0
 8005516:	d000      	beq.n	800551a <_strtol_l.isra.0+0xee>
 8005518:	4240      	negs	r0, r0
 800551a:	9a02      	ldr	r2, [sp, #8]
 800551c:	2a00      	cmp	r2, #0
 800551e:	d0d8      	beq.n	80054d2 <_strtol_l.isra.0+0xa6>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f4      	bne.n	800550e <_strtol_l.isra.0+0xe2>
 8005524:	9b02      	ldr	r3, [sp, #8]
 8005526:	9a01      	ldr	r2, [sp, #4]
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e7d2      	b.n	80054d2 <_strtol_l.isra.0+0xa6>
 800552c:	2430      	movs	r4, #48	; 0x30
 800552e:	2e00      	cmp	r6, #0
 8005530:	d1a7      	bne.n	8005482 <_strtol_l.isra.0+0x56>
 8005532:	3608      	adds	r6, #8
 8005534:	e7a5      	b.n	8005482 <_strtol_l.isra.0+0x56>
 8005536:	2c30      	cmp	r4, #48	; 0x30
 8005538:	d09b      	beq.n	8005472 <_strtol_l.isra.0+0x46>
 800553a:	260a      	movs	r6, #10
 800553c:	e7a1      	b.n	8005482 <_strtol_l.isra.0+0x56>
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	0800603c 	.word	0x0800603c
 8005544:	7fffffff 	.word	0x7fffffff

08005548 <strtol>:
 8005548:	b510      	push	{r4, lr}
 800554a:	0013      	movs	r3, r2
 800554c:	000a      	movs	r2, r1
 800554e:	0001      	movs	r1, r0
 8005550:	4802      	ldr	r0, [pc, #8]	; (800555c <strtol+0x14>)
 8005552:	6800      	ldr	r0, [r0, #0]
 8005554:	f7ff ff6a 	bl	800542c <_strtol_l.isra.0>
 8005558:	bd10      	pop	{r4, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	20000014 	.word	0x20000014

08005560 <__swbuf_r>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	0005      	movs	r5, r0
 8005564:	000e      	movs	r6, r1
 8005566:	0014      	movs	r4, r2
 8005568:	2800      	cmp	r0, #0
 800556a:	d004      	beq.n	8005576 <__swbuf_r+0x16>
 800556c:	6983      	ldr	r3, [r0, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <__swbuf_r+0x16>
 8005572:	f000 f9f9 	bl	8005968 <__sinit>
 8005576:	4b22      	ldr	r3, [pc, #136]	; (8005600 <__swbuf_r+0xa0>)
 8005578:	429c      	cmp	r4, r3
 800557a:	d12e      	bne.n	80055da <__swbuf_r+0x7a>
 800557c:	686c      	ldr	r4, [r5, #4]
 800557e:	69a3      	ldr	r3, [r4, #24]
 8005580:	60a3      	str	r3, [r4, #8]
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	071b      	lsls	r3, r3, #28
 8005586:	d532      	bpl.n	80055ee <__swbuf_r+0x8e>
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d02f      	beq.n	80055ee <__swbuf_r+0x8e>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	6922      	ldr	r2, [r4, #16]
 8005592:	b2f7      	uxtb	r7, r6
 8005594:	1a98      	subs	r0, r3, r2
 8005596:	6963      	ldr	r3, [r4, #20]
 8005598:	b2f6      	uxtb	r6, r6
 800559a:	4283      	cmp	r3, r0
 800559c:	dc05      	bgt.n	80055aa <__swbuf_r+0x4a>
 800559e:	0021      	movs	r1, r4
 80055a0:	0028      	movs	r0, r5
 80055a2:	f000 f93f 	bl	8005824 <_fflush_r>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d127      	bne.n	80055fa <__swbuf_r+0x9a>
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	3001      	adds	r0, #1
 80055ae:	3b01      	subs	r3, #1
 80055b0:	60a3      	str	r3, [r4, #8]
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	701f      	strb	r7, [r3, #0]
 80055ba:	6963      	ldr	r3, [r4, #20]
 80055bc:	4283      	cmp	r3, r0
 80055be:	d004      	beq.n	80055ca <__swbuf_r+0x6a>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	07db      	lsls	r3, r3, #31
 80055c4:	d507      	bpl.n	80055d6 <__swbuf_r+0x76>
 80055c6:	2e0a      	cmp	r6, #10
 80055c8:	d105      	bne.n	80055d6 <__swbuf_r+0x76>
 80055ca:	0021      	movs	r1, r4
 80055cc:	0028      	movs	r0, r5
 80055ce:	f000 f929 	bl	8005824 <_fflush_r>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d111      	bne.n	80055fa <__swbuf_r+0x9a>
 80055d6:	0030      	movs	r0, r6
 80055d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <__swbuf_r+0xa4>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	d101      	bne.n	80055e4 <__swbuf_r+0x84>
 80055e0:	68ac      	ldr	r4, [r5, #8]
 80055e2:	e7cc      	b.n	800557e <__swbuf_r+0x1e>
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <__swbuf_r+0xa8>)
 80055e6:	429c      	cmp	r4, r3
 80055e8:	d1c9      	bne.n	800557e <__swbuf_r+0x1e>
 80055ea:	68ec      	ldr	r4, [r5, #12]
 80055ec:	e7c7      	b.n	800557e <__swbuf_r+0x1e>
 80055ee:	0021      	movs	r1, r4
 80055f0:	0028      	movs	r0, r5
 80055f2:	f000 f80b 	bl	800560c <__swsetup_r>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d0c9      	beq.n	800558e <__swbuf_r+0x2e>
 80055fa:	2601      	movs	r6, #1
 80055fc:	4276      	negs	r6, r6
 80055fe:	e7ea      	b.n	80055d6 <__swbuf_r+0x76>
 8005600:	0800615c 	.word	0x0800615c
 8005604:	0800617c 	.word	0x0800617c
 8005608:	0800613c 	.word	0x0800613c

0800560c <__swsetup_r>:
 800560c:	4b37      	ldr	r3, [pc, #220]	; (80056ec <__swsetup_r+0xe0>)
 800560e:	b570      	push	{r4, r5, r6, lr}
 8005610:	681d      	ldr	r5, [r3, #0]
 8005612:	0006      	movs	r6, r0
 8005614:	000c      	movs	r4, r1
 8005616:	2d00      	cmp	r5, #0
 8005618:	d005      	beq.n	8005626 <__swsetup_r+0x1a>
 800561a:	69ab      	ldr	r3, [r5, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <__swsetup_r+0x1a>
 8005620:	0028      	movs	r0, r5
 8005622:	f000 f9a1 	bl	8005968 <__sinit>
 8005626:	4b32      	ldr	r3, [pc, #200]	; (80056f0 <__swsetup_r+0xe4>)
 8005628:	429c      	cmp	r4, r3
 800562a:	d10f      	bne.n	800564c <__swsetup_r+0x40>
 800562c:	686c      	ldr	r4, [r5, #4]
 800562e:	230c      	movs	r3, #12
 8005630:	5ee2      	ldrsh	r2, [r4, r3]
 8005632:	b293      	uxth	r3, r2
 8005634:	0711      	lsls	r1, r2, #28
 8005636:	d42d      	bmi.n	8005694 <__swsetup_r+0x88>
 8005638:	06d9      	lsls	r1, r3, #27
 800563a:	d411      	bmi.n	8005660 <__swsetup_r+0x54>
 800563c:	2309      	movs	r3, #9
 800563e:	2001      	movs	r0, #1
 8005640:	6033      	str	r3, [r6, #0]
 8005642:	3337      	adds	r3, #55	; 0x37
 8005644:	4313      	orrs	r3, r2
 8005646:	81a3      	strh	r3, [r4, #12]
 8005648:	4240      	negs	r0, r0
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <__swsetup_r+0xe8>)
 800564e:	429c      	cmp	r4, r3
 8005650:	d101      	bne.n	8005656 <__swsetup_r+0x4a>
 8005652:	68ac      	ldr	r4, [r5, #8]
 8005654:	e7eb      	b.n	800562e <__swsetup_r+0x22>
 8005656:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <__swsetup_r+0xec>)
 8005658:	429c      	cmp	r4, r3
 800565a:	d1e8      	bne.n	800562e <__swsetup_r+0x22>
 800565c:	68ec      	ldr	r4, [r5, #12]
 800565e:	e7e6      	b.n	800562e <__swsetup_r+0x22>
 8005660:	075b      	lsls	r3, r3, #29
 8005662:	d513      	bpl.n	800568c <__swsetup_r+0x80>
 8005664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005666:	2900      	cmp	r1, #0
 8005668:	d008      	beq.n	800567c <__swsetup_r+0x70>
 800566a:	0023      	movs	r3, r4
 800566c:	3344      	adds	r3, #68	; 0x44
 800566e:	4299      	cmp	r1, r3
 8005670:	d002      	beq.n	8005678 <__swsetup_r+0x6c>
 8005672:	0030      	movs	r0, r6
 8005674:	f7ff fb32 	bl	8004cdc <_free_r>
 8005678:	2300      	movs	r3, #0
 800567a:	6363      	str	r3, [r4, #52]	; 0x34
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	4393      	bics	r3, r2
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	2300      	movs	r3, #0
 8005686:	6063      	str	r3, [r4, #4]
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	2308      	movs	r3, #8
 800568e:	89a2      	ldrh	r2, [r4, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	81a3      	strh	r3, [r4, #12]
 8005694:	6923      	ldr	r3, [r4, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <__swsetup_r+0xa6>
 800569a:	21a0      	movs	r1, #160	; 0xa0
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	0089      	lsls	r1, r1, #2
 80056a2:	0092      	lsls	r2, r2, #2
 80056a4:	400b      	ands	r3, r1
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <__swsetup_r+0xa6>
 80056aa:	0021      	movs	r1, r4
 80056ac:	0030      	movs	r0, r6
 80056ae:	f000 fa27 	bl	8005b00 <__smakebuf_r>
 80056b2:	220c      	movs	r2, #12
 80056b4:	5ea3      	ldrsh	r3, [r4, r2]
 80056b6:	2001      	movs	r0, #1
 80056b8:	001a      	movs	r2, r3
 80056ba:	b299      	uxth	r1, r3
 80056bc:	4002      	ands	r2, r0
 80056be:	4203      	tst	r3, r0
 80056c0:	d00f      	beq.n	80056e2 <__swsetup_r+0xd6>
 80056c2:	2200      	movs	r2, #0
 80056c4:	60a2      	str	r2, [r4, #8]
 80056c6:	6962      	ldr	r2, [r4, #20]
 80056c8:	4252      	negs	r2, r2
 80056ca:	61a2      	str	r2, [r4, #24]
 80056cc:	2000      	movs	r0, #0
 80056ce:	6922      	ldr	r2, [r4, #16]
 80056d0:	4282      	cmp	r2, r0
 80056d2:	d1ba      	bne.n	800564a <__swsetup_r+0x3e>
 80056d4:	060a      	lsls	r2, r1, #24
 80056d6:	d5b8      	bpl.n	800564a <__swsetup_r+0x3e>
 80056d8:	2240      	movs	r2, #64	; 0x40
 80056da:	4313      	orrs	r3, r2
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	3801      	subs	r0, #1
 80056e0:	e7b3      	b.n	800564a <__swsetup_r+0x3e>
 80056e2:	0788      	lsls	r0, r1, #30
 80056e4:	d400      	bmi.n	80056e8 <__swsetup_r+0xdc>
 80056e6:	6962      	ldr	r2, [r4, #20]
 80056e8:	60a2      	str	r2, [r4, #8]
 80056ea:	e7ef      	b.n	80056cc <__swsetup_r+0xc0>
 80056ec:	20000014 	.word	0x20000014
 80056f0:	0800615c 	.word	0x0800615c
 80056f4:	0800617c 	.word	0x0800617c
 80056f8:	0800613c 	.word	0x0800613c

080056fc <abort>:
 80056fc:	2006      	movs	r0, #6
 80056fe:	b510      	push	{r4, lr}
 8005700:	f000 faae 	bl	8005c60 <raise>
 8005704:	2001      	movs	r0, #1
 8005706:	f7fd fd8d 	bl	8003224 <_exit>
	...

0800570c <__sflush_r>:
 800570c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800570e:	898b      	ldrh	r3, [r1, #12]
 8005710:	0005      	movs	r5, r0
 8005712:	000c      	movs	r4, r1
 8005714:	071a      	lsls	r2, r3, #28
 8005716:	d45f      	bmi.n	80057d8 <__sflush_r+0xcc>
 8005718:	684a      	ldr	r2, [r1, #4]
 800571a:	2a00      	cmp	r2, #0
 800571c:	dc04      	bgt.n	8005728 <__sflush_r+0x1c>
 800571e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005720:	2a00      	cmp	r2, #0
 8005722:	dc01      	bgt.n	8005728 <__sflush_r+0x1c>
 8005724:	2000      	movs	r0, #0
 8005726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005728:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800572a:	2f00      	cmp	r7, #0
 800572c:	d0fa      	beq.n	8005724 <__sflush_r+0x18>
 800572e:	2200      	movs	r2, #0
 8005730:	2180      	movs	r1, #128	; 0x80
 8005732:	682e      	ldr	r6, [r5, #0]
 8005734:	602a      	str	r2, [r5, #0]
 8005736:	001a      	movs	r2, r3
 8005738:	0149      	lsls	r1, r1, #5
 800573a:	400a      	ands	r2, r1
 800573c:	420b      	tst	r3, r1
 800573e:	d034      	beq.n	80057aa <__sflush_r+0x9e>
 8005740:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	075b      	lsls	r3, r3, #29
 8005746:	d506      	bpl.n	8005756 <__sflush_r+0x4a>
 8005748:	6863      	ldr	r3, [r4, #4]
 800574a:	1ac0      	subs	r0, r0, r3
 800574c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <__sflush_r+0x4a>
 8005752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005754:	1ac0      	subs	r0, r0, r3
 8005756:	0002      	movs	r2, r0
 8005758:	6a21      	ldr	r1, [r4, #32]
 800575a:	2300      	movs	r3, #0
 800575c:	0028      	movs	r0, r5
 800575e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005760:	47b8      	blx	r7
 8005762:	89a1      	ldrh	r1, [r4, #12]
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d106      	bne.n	8005776 <__sflush_r+0x6a>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	2b1d      	cmp	r3, #29
 800576c:	d831      	bhi.n	80057d2 <__sflush_r+0xc6>
 800576e:	4a2c      	ldr	r2, [pc, #176]	; (8005820 <__sflush_r+0x114>)
 8005770:	40da      	lsrs	r2, r3
 8005772:	07d3      	lsls	r3, r2, #31
 8005774:	d52d      	bpl.n	80057d2 <__sflush_r+0xc6>
 8005776:	2300      	movs	r3, #0
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	04cb      	lsls	r3, r1, #19
 8005780:	d505      	bpl.n	800578e <__sflush_r+0x82>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	d102      	bne.n	800578c <__sflush_r+0x80>
 8005786:	682b      	ldr	r3, [r5, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d100      	bne.n	800578e <__sflush_r+0x82>
 800578c:	6560      	str	r0, [r4, #84]	; 0x54
 800578e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005790:	602e      	str	r6, [r5, #0]
 8005792:	2900      	cmp	r1, #0
 8005794:	d0c6      	beq.n	8005724 <__sflush_r+0x18>
 8005796:	0023      	movs	r3, r4
 8005798:	3344      	adds	r3, #68	; 0x44
 800579a:	4299      	cmp	r1, r3
 800579c:	d002      	beq.n	80057a4 <__sflush_r+0x98>
 800579e:	0028      	movs	r0, r5
 80057a0:	f7ff fa9c 	bl	8004cdc <_free_r>
 80057a4:	2000      	movs	r0, #0
 80057a6:	6360      	str	r0, [r4, #52]	; 0x34
 80057a8:	e7bd      	b.n	8005726 <__sflush_r+0x1a>
 80057aa:	2301      	movs	r3, #1
 80057ac:	0028      	movs	r0, r5
 80057ae:	6a21      	ldr	r1, [r4, #32]
 80057b0:	47b8      	blx	r7
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	d1c5      	bne.n	8005742 <__sflush_r+0x36>
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0c2      	beq.n	8005742 <__sflush_r+0x36>
 80057bc:	2b1d      	cmp	r3, #29
 80057be:	d001      	beq.n	80057c4 <__sflush_r+0xb8>
 80057c0:	2b16      	cmp	r3, #22
 80057c2:	d101      	bne.n	80057c8 <__sflush_r+0xbc>
 80057c4:	602e      	str	r6, [r5, #0]
 80057c6:	e7ad      	b.n	8005724 <__sflush_r+0x18>
 80057c8:	2340      	movs	r3, #64	; 0x40
 80057ca:	89a2      	ldrh	r2, [r4, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	e7a9      	b.n	8005726 <__sflush_r+0x1a>
 80057d2:	2340      	movs	r3, #64	; 0x40
 80057d4:	430b      	orrs	r3, r1
 80057d6:	e7fa      	b.n	80057ce <__sflush_r+0xc2>
 80057d8:	690f      	ldr	r7, [r1, #16]
 80057da:	2f00      	cmp	r7, #0
 80057dc:	d0a2      	beq.n	8005724 <__sflush_r+0x18>
 80057de:	680a      	ldr	r2, [r1, #0]
 80057e0:	600f      	str	r7, [r1, #0]
 80057e2:	1bd2      	subs	r2, r2, r7
 80057e4:	9201      	str	r2, [sp, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	079b      	lsls	r3, r3, #30
 80057ea:	d100      	bne.n	80057ee <__sflush_r+0xe2>
 80057ec:	694a      	ldr	r2, [r1, #20]
 80057ee:	60a2      	str	r2, [r4, #8]
 80057f0:	9b01      	ldr	r3, [sp, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dc00      	bgt.n	80057f8 <__sflush_r+0xec>
 80057f6:	e795      	b.n	8005724 <__sflush_r+0x18>
 80057f8:	003a      	movs	r2, r7
 80057fa:	0028      	movs	r0, r5
 80057fc:	9b01      	ldr	r3, [sp, #4]
 80057fe:	6a21      	ldr	r1, [r4, #32]
 8005800:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005802:	47b0      	blx	r6
 8005804:	2800      	cmp	r0, #0
 8005806:	dc06      	bgt.n	8005816 <__sflush_r+0x10a>
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	2001      	movs	r0, #1
 800580c:	89a2      	ldrh	r2, [r4, #12]
 800580e:	4240      	negs	r0, r0
 8005810:	4313      	orrs	r3, r2
 8005812:	81a3      	strh	r3, [r4, #12]
 8005814:	e787      	b.n	8005726 <__sflush_r+0x1a>
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	183f      	adds	r7, r7, r0
 800581a:	1a1b      	subs	r3, r3, r0
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	e7e7      	b.n	80057f0 <__sflush_r+0xe4>
 8005820:	20400001 	.word	0x20400001

08005824 <_fflush_r>:
 8005824:	690b      	ldr	r3, [r1, #16]
 8005826:	b570      	push	{r4, r5, r6, lr}
 8005828:	0005      	movs	r5, r0
 800582a:	000c      	movs	r4, r1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <_fflush_r+0x12>
 8005830:	2500      	movs	r5, #0
 8005832:	0028      	movs	r0, r5
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	2800      	cmp	r0, #0
 8005838:	d004      	beq.n	8005844 <_fflush_r+0x20>
 800583a:	6983      	ldr	r3, [r0, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <_fflush_r+0x20>
 8005840:	f000 f892 	bl	8005968 <__sinit>
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <_fflush_r+0x74>)
 8005846:	429c      	cmp	r4, r3
 8005848:	d11b      	bne.n	8005882 <_fflush_r+0x5e>
 800584a:	686c      	ldr	r4, [r5, #4]
 800584c:	220c      	movs	r2, #12
 800584e:	5ea3      	ldrsh	r3, [r4, r2]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ed      	beq.n	8005830 <_fflush_r+0xc>
 8005854:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005856:	07d2      	lsls	r2, r2, #31
 8005858:	d404      	bmi.n	8005864 <_fflush_r+0x40>
 800585a:	059b      	lsls	r3, r3, #22
 800585c:	d402      	bmi.n	8005864 <_fflush_r+0x40>
 800585e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005860:	f000 f923 	bl	8005aaa <__retarget_lock_acquire_recursive>
 8005864:	0028      	movs	r0, r5
 8005866:	0021      	movs	r1, r4
 8005868:	f7ff ff50 	bl	800570c <__sflush_r>
 800586c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800586e:	0005      	movs	r5, r0
 8005870:	07db      	lsls	r3, r3, #31
 8005872:	d4de      	bmi.n	8005832 <_fflush_r+0xe>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	059b      	lsls	r3, r3, #22
 8005878:	d4db      	bmi.n	8005832 <_fflush_r+0xe>
 800587a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800587c:	f000 f916 	bl	8005aac <__retarget_lock_release_recursive>
 8005880:	e7d7      	b.n	8005832 <_fflush_r+0xe>
 8005882:	4b06      	ldr	r3, [pc, #24]	; (800589c <_fflush_r+0x78>)
 8005884:	429c      	cmp	r4, r3
 8005886:	d101      	bne.n	800588c <_fflush_r+0x68>
 8005888:	68ac      	ldr	r4, [r5, #8]
 800588a:	e7df      	b.n	800584c <_fflush_r+0x28>
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <_fflush_r+0x7c>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d1dc      	bne.n	800584c <_fflush_r+0x28>
 8005892:	68ec      	ldr	r4, [r5, #12]
 8005894:	e7da      	b.n	800584c <_fflush_r+0x28>
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	0800615c 	.word	0x0800615c
 800589c:	0800617c 	.word	0x0800617c
 80058a0:	0800613c 	.word	0x0800613c

080058a4 <std>:
 80058a4:	2300      	movs	r3, #0
 80058a6:	b510      	push	{r4, lr}
 80058a8:	0004      	movs	r4, r0
 80058aa:	6003      	str	r3, [r0, #0]
 80058ac:	6043      	str	r3, [r0, #4]
 80058ae:	6083      	str	r3, [r0, #8]
 80058b0:	8181      	strh	r1, [r0, #12]
 80058b2:	6643      	str	r3, [r0, #100]	; 0x64
 80058b4:	0019      	movs	r1, r3
 80058b6:	81c2      	strh	r2, [r0, #14]
 80058b8:	6103      	str	r3, [r0, #16]
 80058ba:	6143      	str	r3, [r0, #20]
 80058bc:	6183      	str	r3, [r0, #24]
 80058be:	2208      	movs	r2, #8
 80058c0:	305c      	adds	r0, #92	; 0x5c
 80058c2:	f7ff f9f5 	bl	8004cb0 <memset>
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <std+0x38>)
 80058c8:	6263      	str	r3, [r4, #36]	; 0x24
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <std+0x3c>)
 80058cc:	6224      	str	r4, [r4, #32]
 80058ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <std+0x40>)
 80058d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058d4:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <std+0x44>)
 80058d6:	6323      	str	r3, [r4, #48]	; 0x30
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	08005ca1 	.word	0x08005ca1
 80058e0:	08005cc9 	.word	0x08005cc9
 80058e4:	08005d01 	.word	0x08005d01
 80058e8:	08005d2d 	.word	0x08005d2d

080058ec <_cleanup_r>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4902      	ldr	r1, [pc, #8]	; (80058f8 <_cleanup_r+0xc>)
 80058f0:	f000 f8ba 	bl	8005a68 <_fwalk_reent>
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	08005825 	.word	0x08005825

080058fc <__sfmoreglue>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	2568      	movs	r5, #104	; 0x68
 8005900:	1e4a      	subs	r2, r1, #1
 8005902:	4355      	muls	r5, r2
 8005904:	000e      	movs	r6, r1
 8005906:	0029      	movs	r1, r5
 8005908:	3174      	adds	r1, #116	; 0x74
 800590a:	f7ff fa31 	bl	8004d70 <_malloc_r>
 800590e:	1e04      	subs	r4, r0, #0
 8005910:	d008      	beq.n	8005924 <__sfmoreglue+0x28>
 8005912:	2100      	movs	r1, #0
 8005914:	002a      	movs	r2, r5
 8005916:	6001      	str	r1, [r0, #0]
 8005918:	6046      	str	r6, [r0, #4]
 800591a:	300c      	adds	r0, #12
 800591c:	60a0      	str	r0, [r4, #8]
 800591e:	3268      	adds	r2, #104	; 0x68
 8005920:	f7ff f9c6 	bl	8004cb0 <memset>
 8005924:	0020      	movs	r0, r4
 8005926:	bd70      	pop	{r4, r5, r6, pc}

08005928 <__sfp_lock_acquire>:
 8005928:	b510      	push	{r4, lr}
 800592a:	4802      	ldr	r0, [pc, #8]	; (8005934 <__sfp_lock_acquire+0xc>)
 800592c:	f000 f8bd 	bl	8005aaa <__retarget_lock_acquire_recursive>
 8005930:	bd10      	pop	{r4, pc}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	20000174 	.word	0x20000174

08005938 <__sfp_lock_release>:
 8005938:	b510      	push	{r4, lr}
 800593a:	4802      	ldr	r0, [pc, #8]	; (8005944 <__sfp_lock_release+0xc>)
 800593c:	f000 f8b6 	bl	8005aac <__retarget_lock_release_recursive>
 8005940:	bd10      	pop	{r4, pc}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	20000174 	.word	0x20000174

08005948 <__sinit_lock_acquire>:
 8005948:	b510      	push	{r4, lr}
 800594a:	4802      	ldr	r0, [pc, #8]	; (8005954 <__sinit_lock_acquire+0xc>)
 800594c:	f000 f8ad 	bl	8005aaa <__retarget_lock_acquire_recursive>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	2000016f 	.word	0x2000016f

08005958 <__sinit_lock_release>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4802      	ldr	r0, [pc, #8]	; (8005964 <__sinit_lock_release+0xc>)
 800595c:	f000 f8a6 	bl	8005aac <__retarget_lock_release_recursive>
 8005960:	bd10      	pop	{r4, pc}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	2000016f 	.word	0x2000016f

08005968 <__sinit>:
 8005968:	b513      	push	{r0, r1, r4, lr}
 800596a:	0004      	movs	r4, r0
 800596c:	f7ff ffec 	bl	8005948 <__sinit_lock_acquire>
 8005970:	69a3      	ldr	r3, [r4, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <__sinit+0x14>
 8005976:	f7ff ffef 	bl	8005958 <__sinit_lock_release>
 800597a:	bd13      	pop	{r0, r1, r4, pc}
 800597c:	64a3      	str	r3, [r4, #72]	; 0x48
 800597e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005980:	6523      	str	r3, [r4, #80]	; 0x50
 8005982:	4b13      	ldr	r3, [pc, #76]	; (80059d0 <__sinit+0x68>)
 8005984:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <__sinit+0x6c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	62a2      	str	r2, [r4, #40]	; 0x28
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	42a3      	cmp	r3, r4
 800598e:	d101      	bne.n	8005994 <__sinit+0x2c>
 8005990:	2301      	movs	r3, #1
 8005992:	61a3      	str	r3, [r4, #24]
 8005994:	0020      	movs	r0, r4
 8005996:	f000 f81f 	bl	80059d8 <__sfp>
 800599a:	6060      	str	r0, [r4, #4]
 800599c:	0020      	movs	r0, r4
 800599e:	f000 f81b 	bl	80059d8 <__sfp>
 80059a2:	60a0      	str	r0, [r4, #8]
 80059a4:	0020      	movs	r0, r4
 80059a6:	f000 f817 	bl	80059d8 <__sfp>
 80059aa:	2200      	movs	r2, #0
 80059ac:	2104      	movs	r1, #4
 80059ae:	60e0      	str	r0, [r4, #12]
 80059b0:	6860      	ldr	r0, [r4, #4]
 80059b2:	f7ff ff77 	bl	80058a4 <std>
 80059b6:	2201      	movs	r2, #1
 80059b8:	2109      	movs	r1, #9
 80059ba:	68a0      	ldr	r0, [r4, #8]
 80059bc:	f7ff ff72 	bl	80058a4 <std>
 80059c0:	2202      	movs	r2, #2
 80059c2:	2112      	movs	r1, #18
 80059c4:	68e0      	ldr	r0, [r4, #12]
 80059c6:	f7ff ff6d 	bl	80058a4 <std>
 80059ca:	2301      	movs	r3, #1
 80059cc:	61a3      	str	r3, [r4, #24]
 80059ce:	e7d2      	b.n	8005976 <__sinit+0xe>
 80059d0:	08006004 	.word	0x08006004
 80059d4:	080058ed 	.word	0x080058ed

080059d8 <__sfp>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	0007      	movs	r7, r0
 80059dc:	f7ff ffa4 	bl	8005928 <__sfp_lock_acquire>
 80059e0:	4b1f      	ldr	r3, [pc, #124]	; (8005a60 <__sfp+0x88>)
 80059e2:	681e      	ldr	r6, [r3, #0]
 80059e4:	69b3      	ldr	r3, [r6, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <__sfp+0x18>
 80059ea:	0030      	movs	r0, r6
 80059ec:	f7ff ffbc 	bl	8005968 <__sinit>
 80059f0:	3648      	adds	r6, #72	; 0x48
 80059f2:	68b4      	ldr	r4, [r6, #8]
 80059f4:	6873      	ldr	r3, [r6, #4]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	d504      	bpl.n	8005a04 <__sfp+0x2c>
 80059fa:	6833      	ldr	r3, [r6, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <__sfp+0x6e>
 8005a00:	6836      	ldr	r6, [r6, #0]
 8005a02:	e7f6      	b.n	80059f2 <__sfp+0x1a>
 8005a04:	220c      	movs	r2, #12
 8005a06:	5ea5      	ldrsh	r5, [r4, r2]
 8005a08:	2d00      	cmp	r5, #0
 8005a0a:	d11a      	bne.n	8005a42 <__sfp+0x6a>
 8005a0c:	0020      	movs	r0, r4
 8005a0e:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <__sfp+0x8c>)
 8005a10:	3058      	adds	r0, #88	; 0x58
 8005a12:	60e3      	str	r3, [r4, #12]
 8005a14:	6665      	str	r5, [r4, #100]	; 0x64
 8005a16:	f000 f847 	bl	8005aa8 <__retarget_lock_init_recursive>
 8005a1a:	f7ff ff8d 	bl	8005938 <__sfp_lock_release>
 8005a1e:	0020      	movs	r0, r4
 8005a20:	2208      	movs	r2, #8
 8005a22:	0029      	movs	r1, r5
 8005a24:	6025      	str	r5, [r4, #0]
 8005a26:	60a5      	str	r5, [r4, #8]
 8005a28:	6065      	str	r5, [r4, #4]
 8005a2a:	6125      	str	r5, [r4, #16]
 8005a2c:	6165      	str	r5, [r4, #20]
 8005a2e:	61a5      	str	r5, [r4, #24]
 8005a30:	305c      	adds	r0, #92	; 0x5c
 8005a32:	f7ff f93d 	bl	8004cb0 <memset>
 8005a36:	6365      	str	r5, [r4, #52]	; 0x34
 8005a38:	63a5      	str	r5, [r4, #56]	; 0x38
 8005a3a:	64a5      	str	r5, [r4, #72]	; 0x48
 8005a3c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005a3e:	0020      	movs	r0, r4
 8005a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a42:	3468      	adds	r4, #104	; 0x68
 8005a44:	e7d7      	b.n	80059f6 <__sfp+0x1e>
 8005a46:	2104      	movs	r1, #4
 8005a48:	0038      	movs	r0, r7
 8005a4a:	f7ff ff57 	bl	80058fc <__sfmoreglue>
 8005a4e:	1e04      	subs	r4, r0, #0
 8005a50:	6030      	str	r0, [r6, #0]
 8005a52:	d1d5      	bne.n	8005a00 <__sfp+0x28>
 8005a54:	f7ff ff70 	bl	8005938 <__sfp_lock_release>
 8005a58:	230c      	movs	r3, #12
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	e7ef      	b.n	8005a3e <__sfp+0x66>
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	08006004 	.word	0x08006004
 8005a64:	ffff0001 	.word	0xffff0001

08005a68 <_fwalk_reent>:
 8005a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a6a:	0004      	movs	r4, r0
 8005a6c:	0006      	movs	r6, r0
 8005a6e:	2700      	movs	r7, #0
 8005a70:	9101      	str	r1, [sp, #4]
 8005a72:	3448      	adds	r4, #72	; 0x48
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	68a5      	ldr	r5, [r4, #8]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	9b00      	ldr	r3, [sp, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	d504      	bpl.n	8005a8c <_fwalk_reent+0x24>
 8005a82:	6824      	ldr	r4, [r4, #0]
 8005a84:	2c00      	cmp	r4, #0
 8005a86:	d1f5      	bne.n	8005a74 <_fwalk_reent+0xc>
 8005a88:	0038      	movs	r0, r7
 8005a8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a8c:	89ab      	ldrh	r3, [r5, #12]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d908      	bls.n	8005aa4 <_fwalk_reent+0x3c>
 8005a92:	220e      	movs	r2, #14
 8005a94:	5eab      	ldrsh	r3, [r5, r2]
 8005a96:	3301      	adds	r3, #1
 8005a98:	d004      	beq.n	8005aa4 <_fwalk_reent+0x3c>
 8005a9a:	0029      	movs	r1, r5
 8005a9c:	0030      	movs	r0, r6
 8005a9e:	9b01      	ldr	r3, [sp, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	4307      	orrs	r7, r0
 8005aa4:	3568      	adds	r5, #104	; 0x68
 8005aa6:	e7e8      	b.n	8005a7a <_fwalk_reent+0x12>

08005aa8 <__retarget_lock_init_recursive>:
 8005aa8:	4770      	bx	lr

08005aaa <__retarget_lock_acquire_recursive>:
 8005aaa:	4770      	bx	lr

08005aac <__retarget_lock_release_recursive>:
 8005aac:	4770      	bx	lr
	...

08005ab0 <__swhatbuf_r>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	000e      	movs	r6, r1
 8005ab4:	001d      	movs	r5, r3
 8005ab6:	230e      	movs	r3, #14
 8005ab8:	5ec9      	ldrsh	r1, [r1, r3]
 8005aba:	0014      	movs	r4, r2
 8005abc:	b096      	sub	sp, #88	; 0x58
 8005abe:	2900      	cmp	r1, #0
 8005ac0:	da07      	bge.n	8005ad2 <__swhatbuf_r+0x22>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	89b3      	ldrh	r3, [r6, #12]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	d411      	bmi.n	8005af0 <__swhatbuf_r+0x40>
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	e00f      	b.n	8005af2 <__swhatbuf_r+0x42>
 8005ad2:	466a      	mov	r2, sp
 8005ad4:	f000 f956 	bl	8005d84 <_fstat_r>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	dbf2      	blt.n	8005ac2 <__swhatbuf_r+0x12>
 8005adc:	23f0      	movs	r3, #240	; 0xf0
 8005ade:	9901      	ldr	r1, [sp, #4]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	4019      	ands	r1, r3
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <__swhatbuf_r+0x4c>)
 8005ae6:	18c9      	adds	r1, r1, r3
 8005ae8:	424b      	negs	r3, r1
 8005aea:	4159      	adcs	r1, r3
 8005aec:	6029      	str	r1, [r5, #0]
 8005aee:	e7ed      	b.n	8005acc <__swhatbuf_r+0x1c>
 8005af0:	2340      	movs	r3, #64	; 0x40
 8005af2:	2000      	movs	r0, #0
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	b016      	add	sp, #88	; 0x58
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	ffffe000 	.word	0xffffe000

08005b00 <__smakebuf_r>:
 8005b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b02:	2602      	movs	r6, #2
 8005b04:	898b      	ldrh	r3, [r1, #12]
 8005b06:	0005      	movs	r5, r0
 8005b08:	000c      	movs	r4, r1
 8005b0a:	4233      	tst	r3, r6
 8005b0c:	d006      	beq.n	8005b1c <__smakebuf_r+0x1c>
 8005b0e:	0023      	movs	r3, r4
 8005b10:	3347      	adds	r3, #71	; 0x47
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	6123      	str	r3, [r4, #16]
 8005b16:	2301      	movs	r3, #1
 8005b18:	6163      	str	r3, [r4, #20]
 8005b1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005b1c:	466a      	mov	r2, sp
 8005b1e:	ab01      	add	r3, sp, #4
 8005b20:	f7ff ffc6 	bl	8005ab0 <__swhatbuf_r>
 8005b24:	9900      	ldr	r1, [sp, #0]
 8005b26:	0007      	movs	r7, r0
 8005b28:	0028      	movs	r0, r5
 8005b2a:	f7ff f921 	bl	8004d70 <_malloc_r>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d108      	bne.n	8005b44 <__smakebuf_r+0x44>
 8005b32:	220c      	movs	r2, #12
 8005b34:	5ea3      	ldrsh	r3, [r4, r2]
 8005b36:	059a      	lsls	r2, r3, #22
 8005b38:	d4ef      	bmi.n	8005b1a <__smakebuf_r+0x1a>
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	4393      	bics	r3, r2
 8005b3e:	431e      	orrs	r6, r3
 8005b40:	81a6      	strh	r6, [r4, #12]
 8005b42:	e7e4      	b.n	8005b0e <__smakebuf_r+0xe>
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <__smakebuf_r+0x84>)
 8005b46:	62ab      	str	r3, [r5, #40]	; 0x28
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	89a2      	ldrh	r2, [r4, #12]
 8005b4c:	6020      	str	r0, [r4, #0]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	9b00      	ldr	r3, [sp, #0]
 8005b54:	6120      	str	r0, [r4, #16]
 8005b56:	6163      	str	r3, [r4, #20]
 8005b58:	9b01      	ldr	r3, [sp, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <__smakebuf_r+0x7a>
 8005b5e:	0028      	movs	r0, r5
 8005b60:	230e      	movs	r3, #14
 8005b62:	5ee1      	ldrsh	r1, [r4, r3]
 8005b64:	f000 f920 	bl	8005da8 <_isatty_r>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d006      	beq.n	8005b7a <__smakebuf_r+0x7a>
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	4393      	bics	r3, r2
 8005b72:	001a      	movs	r2, r3
 8005b74:	2301      	movs	r3, #1
 8005b76:	4313      	orrs	r3, r2
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	89a0      	ldrh	r0, [r4, #12]
 8005b7c:	4307      	orrs	r7, r0
 8005b7e:	81a7      	strh	r7, [r4, #12]
 8005b80:	e7cb      	b.n	8005b1a <__smakebuf_r+0x1a>
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	080058ed 	.word	0x080058ed

08005b88 <memchr>:
 8005b88:	b2c9      	uxtb	r1, r1
 8005b8a:	1882      	adds	r2, r0, r2
 8005b8c:	4290      	cmp	r0, r2
 8005b8e:	d101      	bne.n	8005b94 <memchr+0xc>
 8005b90:	2000      	movs	r0, #0
 8005b92:	4770      	bx	lr
 8005b94:	7803      	ldrb	r3, [r0, #0]
 8005b96:	428b      	cmp	r3, r1
 8005b98:	d0fb      	beq.n	8005b92 <memchr+0xa>
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	e7f6      	b.n	8005b8c <memchr+0x4>
	...

08005ba0 <__malloc_lock>:
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	4802      	ldr	r0, [pc, #8]	; (8005bac <__malloc_lock+0xc>)
 8005ba4:	f7ff ff81 	bl	8005aaa <__retarget_lock_acquire_recursive>
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	20000170 	.word	0x20000170

08005bb0 <__malloc_unlock>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4802      	ldr	r0, [pc, #8]	; (8005bbc <__malloc_unlock+0xc>)
 8005bb4:	f7ff ff7a 	bl	8005aac <__retarget_lock_release_recursive>
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	20000170 	.word	0x20000170

08005bc0 <_realloc_r>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	0007      	movs	r7, r0
 8005bc4:	000d      	movs	r5, r1
 8005bc6:	0016      	movs	r6, r2
 8005bc8:	2900      	cmp	r1, #0
 8005bca:	d105      	bne.n	8005bd8 <_realloc_r+0x18>
 8005bcc:	0011      	movs	r1, r2
 8005bce:	f7ff f8cf 	bl	8004d70 <_malloc_r>
 8005bd2:	0004      	movs	r4, r0
 8005bd4:	0020      	movs	r0, r4
 8005bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	d103      	bne.n	8005be4 <_realloc_r+0x24>
 8005bdc:	f7ff f87e 	bl	8004cdc <_free_r>
 8005be0:	0034      	movs	r4, r6
 8005be2:	e7f7      	b.n	8005bd4 <_realloc_r+0x14>
 8005be4:	f000 f906 	bl	8005df4 <_malloc_usable_size_r>
 8005be8:	002c      	movs	r4, r5
 8005bea:	42b0      	cmp	r0, r6
 8005bec:	d2f2      	bcs.n	8005bd4 <_realloc_r+0x14>
 8005bee:	0031      	movs	r1, r6
 8005bf0:	0038      	movs	r0, r7
 8005bf2:	f7ff f8bd 	bl	8004d70 <_malloc_r>
 8005bf6:	1e04      	subs	r4, r0, #0
 8005bf8:	d0ec      	beq.n	8005bd4 <_realloc_r+0x14>
 8005bfa:	0029      	movs	r1, r5
 8005bfc:	0032      	movs	r2, r6
 8005bfe:	f7ff f83b 	bl	8004c78 <memcpy>
 8005c02:	0029      	movs	r1, r5
 8005c04:	0038      	movs	r0, r7
 8005c06:	f7ff f869 	bl	8004cdc <_free_r>
 8005c0a:	e7e3      	b.n	8005bd4 <_realloc_r+0x14>

08005c0c <_raise_r>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	0004      	movs	r4, r0
 8005c10:	000d      	movs	r5, r1
 8005c12:	291f      	cmp	r1, #31
 8005c14:	d904      	bls.n	8005c20 <_raise_r+0x14>
 8005c16:	2316      	movs	r3, #22
 8005c18:	6003      	str	r3, [r0, #0]
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	4240      	negs	r0, r0
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <_raise_r+0x24>
 8005c26:	008a      	lsls	r2, r1, #2
 8005c28:	189b      	adds	r3, r3, r2
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	d108      	bne.n	8005c42 <_raise_r+0x36>
 8005c30:	0020      	movs	r0, r4
 8005c32:	f000 f831 	bl	8005c98 <_getpid_r>
 8005c36:	002a      	movs	r2, r5
 8005c38:	0001      	movs	r1, r0
 8005c3a:	0020      	movs	r0, r4
 8005c3c:	f000 f81a 	bl	8005c74 <_kill_r>
 8005c40:	e7ed      	b.n	8005c1e <_raise_r+0x12>
 8005c42:	2000      	movs	r0, #0
 8005c44:	2a01      	cmp	r2, #1
 8005c46:	d0ea      	beq.n	8005c1e <_raise_r+0x12>
 8005c48:	1c51      	adds	r1, r2, #1
 8005c4a:	d103      	bne.n	8005c54 <_raise_r+0x48>
 8005c4c:	2316      	movs	r3, #22
 8005c4e:	3001      	adds	r0, #1
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	e7e4      	b.n	8005c1e <_raise_r+0x12>
 8005c54:	2400      	movs	r4, #0
 8005c56:	0028      	movs	r0, r5
 8005c58:	601c      	str	r4, [r3, #0]
 8005c5a:	4790      	blx	r2
 8005c5c:	0020      	movs	r0, r4
 8005c5e:	e7de      	b.n	8005c1e <_raise_r+0x12>

08005c60 <raise>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <raise+0x10>)
 8005c64:	0001      	movs	r1, r0
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	f7ff ffd0 	bl	8005c0c <_raise_r>
 8005c6c:	bd10      	pop	{r4, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	20000014 	.word	0x20000014

08005c74 <_kill_r>:
 8005c74:	2300      	movs	r3, #0
 8005c76:	b570      	push	{r4, r5, r6, lr}
 8005c78:	4d06      	ldr	r5, [pc, #24]	; (8005c94 <_kill_r+0x20>)
 8005c7a:	0004      	movs	r4, r0
 8005c7c:	0008      	movs	r0, r1
 8005c7e:	0011      	movs	r1, r2
 8005c80:	602b      	str	r3, [r5, #0]
 8005c82:	f7fd fac7 	bl	8003214 <_kill>
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	d103      	bne.n	8005c92 <_kill_r+0x1e>
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d000      	beq.n	8005c92 <_kill_r+0x1e>
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	20000178 	.word	0x20000178

08005c98 <_getpid_r>:
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	f7fd fab9 	bl	8003210 <_getpid>
 8005c9e:	bd10      	pop	{r4, pc}

08005ca0 <__sread>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	000c      	movs	r4, r1
 8005ca4:	250e      	movs	r5, #14
 8005ca6:	5f49      	ldrsh	r1, [r1, r5]
 8005ca8:	f000 f8ac 	bl	8005e04 <_read_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	db03      	blt.n	8005cb8 <__sread+0x18>
 8005cb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005cb2:	181b      	adds	r3, r3, r0
 8005cb4:	6563      	str	r3, [r4, #84]	; 0x54
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	4a02      	ldr	r2, [pc, #8]	; (8005cc4 <__sread+0x24>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	81a3      	strh	r3, [r4, #12]
 8005cc0:	e7f9      	b.n	8005cb6 <__sread+0x16>
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	ffffefff 	.word	0xffffefff

08005cc8 <__swrite>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	001f      	movs	r7, r3
 8005ccc:	898b      	ldrh	r3, [r1, #12]
 8005cce:	0005      	movs	r5, r0
 8005cd0:	000c      	movs	r4, r1
 8005cd2:	0016      	movs	r6, r2
 8005cd4:	05db      	lsls	r3, r3, #23
 8005cd6:	d505      	bpl.n	8005ce4 <__swrite+0x1c>
 8005cd8:	230e      	movs	r3, #14
 8005cda:	5ec9      	ldrsh	r1, [r1, r3]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2302      	movs	r3, #2
 8005ce0:	f000 f874 	bl	8005dcc <_lseek_r>
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	4a05      	ldr	r2, [pc, #20]	; (8005cfc <__swrite+0x34>)
 8005ce8:	0028      	movs	r0, r5
 8005cea:	4013      	ands	r3, r2
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	0032      	movs	r2, r6
 8005cf0:	230e      	movs	r3, #14
 8005cf2:	5ee1      	ldrsh	r1, [r4, r3]
 8005cf4:	003b      	movs	r3, r7
 8005cf6:	f000 f81f 	bl	8005d38 <_write_r>
 8005cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfc:	ffffefff 	.word	0xffffefff

08005d00 <__sseek>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	000c      	movs	r4, r1
 8005d04:	250e      	movs	r5, #14
 8005d06:	5f49      	ldrsh	r1, [r1, r5]
 8005d08:	f000 f860 	bl	8005dcc <_lseek_r>
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	1c42      	adds	r2, r0, #1
 8005d10:	d103      	bne.n	8005d1a <__sseek+0x1a>
 8005d12:	4a05      	ldr	r2, [pc, #20]	; (8005d28 <__sseek+0x28>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	bd70      	pop	{r4, r5, r6, pc}
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	0152      	lsls	r2, r2, #5
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	6560      	str	r0, [r4, #84]	; 0x54
 8005d24:	e7f8      	b.n	8005d18 <__sseek+0x18>
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	ffffefff 	.word	0xffffefff

08005d2c <__sclose>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	230e      	movs	r3, #14
 8005d30:	5ec9      	ldrsh	r1, [r1, r3]
 8005d32:	f000 f815 	bl	8005d60 <_close_r>
 8005d36:	bd10      	pop	{r4, pc}

08005d38 <_write_r>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	0004      	movs	r4, r0
 8005d3c:	0008      	movs	r0, r1
 8005d3e:	0011      	movs	r1, r2
 8005d40:	001a      	movs	r2, r3
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d05      	ldr	r5, [pc, #20]	; (8005d5c <_write_r+0x24>)
 8005d46:	602b      	str	r3, [r5, #0]
 8005d48:	f7fd fa80 	bl	800324c <_write>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d103      	bne.n	8005d58 <_write_r+0x20>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d000      	beq.n	8005d58 <_write_r+0x20>
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	bd70      	pop	{r4, r5, r6, pc}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	20000178 	.word	0x20000178

08005d60 <_close_r>:
 8005d60:	2300      	movs	r3, #0
 8005d62:	b570      	push	{r4, r5, r6, lr}
 8005d64:	4d06      	ldr	r5, [pc, #24]	; (8005d80 <_close_r+0x20>)
 8005d66:	0004      	movs	r4, r0
 8005d68:	0008      	movs	r0, r1
 8005d6a:	602b      	str	r3, [r5, #0]
 8005d6c:	f7fd fa7c 	bl	8003268 <_close>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d103      	bne.n	8005d7c <_close_r+0x1c>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d000      	beq.n	8005d7c <_close_r+0x1c>
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	20000178 	.word	0x20000178

08005d84 <_fstat_r>:
 8005d84:	2300      	movs	r3, #0
 8005d86:	b570      	push	{r4, r5, r6, lr}
 8005d88:	4d06      	ldr	r5, [pc, #24]	; (8005da4 <_fstat_r+0x20>)
 8005d8a:	0004      	movs	r4, r0
 8005d8c:	0008      	movs	r0, r1
 8005d8e:	0011      	movs	r1, r2
 8005d90:	602b      	str	r3, [r5, #0]
 8005d92:	f7fd fa6d 	bl	8003270 <_fstat>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	d103      	bne.n	8005da2 <_fstat_r+0x1e>
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d000      	beq.n	8005da2 <_fstat_r+0x1e>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	20000178 	.word	0x20000178

08005da8 <_isatty_r>:
 8005da8:	2300      	movs	r3, #0
 8005daa:	b570      	push	{r4, r5, r6, lr}
 8005dac:	4d06      	ldr	r5, [pc, #24]	; (8005dc8 <_isatty_r+0x20>)
 8005dae:	0004      	movs	r4, r0
 8005db0:	0008      	movs	r0, r1
 8005db2:	602b      	str	r3, [r5, #0]
 8005db4:	f7fd fa62 	bl	800327c <_isatty>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d103      	bne.n	8005dc4 <_isatty_r+0x1c>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d000      	beq.n	8005dc4 <_isatty_r+0x1c>
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	bd70      	pop	{r4, r5, r6, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	20000178 	.word	0x20000178

08005dcc <_lseek_r>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	0004      	movs	r4, r0
 8005dd0:	0008      	movs	r0, r1
 8005dd2:	0011      	movs	r1, r2
 8005dd4:	001a      	movs	r2, r3
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4d05      	ldr	r5, [pc, #20]	; (8005df0 <_lseek_r+0x24>)
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	f7fd fa50 	bl	8003280 <_lseek>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d103      	bne.n	8005dec <_lseek_r+0x20>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d000      	beq.n	8005dec <_lseek_r+0x20>
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	20000178 	.word	0x20000178

08005df4 <_malloc_usable_size_r>:
 8005df4:	1f0b      	subs	r3, r1, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	1f18      	subs	r0, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da01      	bge.n	8005e02 <_malloc_usable_size_r+0xe>
 8005dfe:	580b      	ldr	r3, [r1, r0]
 8005e00:	18c0      	adds	r0, r0, r3
 8005e02:	4770      	bx	lr

08005e04 <_read_r>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	0004      	movs	r4, r0
 8005e08:	0008      	movs	r0, r1
 8005e0a:	0011      	movs	r1, r2
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4d05      	ldr	r5, [pc, #20]	; (8005e28 <_read_r+0x24>)
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	f7fd fa0c 	bl	8003230 <_read>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d103      	bne.n	8005e24 <_read_r+0x20>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d000      	beq.n	8005e24 <_read_r+0x20>
 8005e22:	6023      	str	r3, [r4, #0]
 8005e24:	bd70      	pop	{r4, r5, r6, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	20000178 	.word	0x20000178

08005e2c <_init>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr

08005e38 <_fini>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr
