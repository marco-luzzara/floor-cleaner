
cleaner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc0  08002cc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cc8  08002cc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08002d40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002d40  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a888  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187e  00000000  00000000  0002a920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f1d  00000000  00000000  0002cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000950d  00000000  00000000  00040e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076f7b  00000000  00000000  0004a322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c129d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a48  00000000  00000000  000c12f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b2c 	.word	0x08002b2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002b2c 	.word	0x08002b2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fa5d 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f811 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f8ab 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ae:	f000 f879 	bl	80005a4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	int row_count, column_count;
  	uint8_t** map = get_map(&huart2, &row_count, &column_count);
 80004b2:	1d3a      	adds	r2, r7, #4
 80004b4:	2308      	movs	r3, #8
 80004b6:	18f9      	adds	r1, r7, r3
 80004b8:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <main+0x2c>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 f90c 	bl	80006d8 <get_map>
 80004c0:	0003      	movs	r3, r0
 80004c2:	60fb      	str	r3, [r7, #12]
  {
 80004c4:	e7f5      	b.n	80004b2 <main+0x16>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	20000098 	.word	0x20000098

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b09d      	sub	sp, #116	; 0x74
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	2438      	movs	r4, #56	; 0x38
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	2338      	movs	r3, #56	; 0x38
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f002 fa01 	bl	80028e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e2:	2324      	movs	r3, #36	; 0x24
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	0018      	movs	r0, r3
 80004e8:	2314      	movs	r3, #20
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f002 f9f9 	bl	80028e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f2:	003b      	movs	r3, r7
 80004f4:	0018      	movs	r0, r3
 80004f6:	2324      	movs	r3, #36	; 0x24
 80004f8:	001a      	movs	r2, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	f002 f9f2 	bl	80028e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	4b26      	ldr	r3, [pc, #152]	; (800059c <SystemClock_Config+0xd0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <SystemClock_Config+0xd4>)
 8000506:	401a      	ands	r2, r3
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <SystemClock_Config+0xd0>)
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0109      	lsls	r1, r1, #4
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2210      	movs	r2, #16
 8000518:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	22a0      	movs	r2, #160	; 0xa0
 800052a:	0212      	lsls	r2, r2, #8
 800052c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	187b      	adds	r3, r7, r1
 8000536:	0018      	movs	r0, r3
 8000538:	f000 fcac 	bl	8000e94 <HAL_RCC_OscConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000540:	f000 f876 	bl	8000630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	2124      	movs	r1, #36	; 0x24
 8000546:	187b      	adds	r3, r7, r1
 8000548:	220f      	movs	r2, #15
 800054a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2100      	movs	r1, #0
 8000568:	0018      	movs	r0, r3
 800056a:	f001 f857 	bl	800161c <HAL_RCC_ClockConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000572:	f000 f85d 	bl	8000630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000576:	003b      	movs	r3, r7
 8000578:	2202      	movs	r2, #2
 800057a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000582:	003b      	movs	r3, r7
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fa6d 	bl	8001a64 <HAL_RCCEx_PeriphCLKConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800058e:	f000 f84f 	bl	8000630 <Error_Handler>
  }
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b01d      	add	sp, #116	; 0x74
 8000598:	bd90      	pop	{r4, r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40007000 	.word	0x40007000
 80005a0:	ffffe7ff 	.word	0xffffe7ff

080005a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <MX_USART2_UART_Init+0x5c>)
 80005ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005b0:	2296      	movs	r2, #150	; 0x96
 80005b2:	0192      	lsls	r2, r2, #6
 80005b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fb9f 	bl	8001d2c <HAL_UART_Init>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f2:	f000 f81d 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000098 	.word	0x20000098
 8000600:	40004400 	.word	0x40004400

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_GPIO_Init+0x28>)
 800060c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_GPIO_Init+0x28>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <MX_GPIO_Init+0x28>)
 8000618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40021000 	.word	0x40021000

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x8>

0800063a <read_char>:
#include "stm32l0xx_hal.h"

/*
 * @brief read a single char from uart
 */
char read_char(UART_HandleTypeDef *huart) {
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
	char c;
	HAL_UART_Receive(huart, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8000642:	2301      	movs	r3, #1
 8000644:	425b      	negs	r3, r3
 8000646:	240f      	movs	r4, #15
 8000648:	1939      	adds	r1, r7, r4
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	2201      	movs	r2, #1
 800064e:	f001 fbc1 	bl	8001dd4 <HAL_UART_Receive>

	return c;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	781b      	ldrb	r3, [r3, #0]
}
 8000656:	0018      	movs	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	b005      	add	sp, #20
 800065c:	bd90      	pop	{r4, r7, pc}
	...

08000660 <read_number>:

/*
 * @brief read characters until '|' is found. returns the int representing
 * the sequence of chars
 */
int read_number(UART_HandleTypeDef *huart) {
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	char num[] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' };
 8000668:	2308      	movs	r3, #8
 800066a:	18fb      	adds	r3, r7, r3
 800066c:	4a19      	ldr	r2, [pc, #100]	; (80006d4 <read_number+0x74>)
 800066e:	ca03      	ldmia	r2!, {r0, r1}
 8000670:	c303      	stmia	r3!, {r0, r1}
 8000672:	8811      	ldrh	r1, [r2, #0]
 8000674:	8019      	strh	r1, [r3, #0]
 8000676:	7892      	ldrb	r2, [r2, #2]
 8000678:	709a      	strb	r2, [r3, #2]
	uint8_t index = 0;
 800067a:	2317      	movs	r3, #23
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
	char token;

	do {
		token = read_char(huart);
 8000682:	2516      	movs	r5, #22
 8000684:	197c      	adds	r4, r7, r5
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff ffd6 	bl	800063a <read_char>
 800068e:	0003      	movs	r3, r0
 8000690:	7023      	strb	r3, [r4, #0]
		if (token != '|') {
 8000692:	0029      	movs	r1, r5
 8000694:	187b      	adds	r3, r7, r1
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b7c      	cmp	r3, #124	; 0x7c
 800069a:	d00c      	beq.n	80006b6 <read_number+0x56>
			num[index] = token;
 800069c:	2017      	movs	r0, #23
 800069e:	183b      	adds	r3, r7, r0
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2208      	movs	r2, #8
 80006a4:	18ba      	adds	r2, r7, r2
 80006a6:	1879      	adds	r1, r7, r1
 80006a8:	7809      	ldrb	r1, [r1, #0]
 80006aa:	54d1      	strb	r1, [r2, r3]
			index++;
 80006ac:	183b      	adds	r3, r7, r0
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	183b      	adds	r3, r7, r0
 80006b2:	3201      	adds	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
		}
	} while (token != '|');
 80006b6:	2316      	movs	r3, #22
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b7c      	cmp	r3, #124	; 0x7c
 80006be:	d1e0      	bne.n	8000682 <read_number+0x22>

	return atoi(num);
 80006c0:	2308      	movs	r3, #8
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 f8d3 	bl	8002870 <atoi>
 80006ca:	0003      	movs	r3, r0
}
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b006      	add	sp, #24
 80006d2:	bdb0      	pop	{r4, r5, r7, pc}
 80006d4:	08002b44 	.word	0x08002b44

080006d8 <get_map>:

uint8_t** get_map(UART_HandleTypeDef *huart, int* row_count, int* column_count) {
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
	char c;
	do {
		c = read_char(huart);
 80006e4:	251f      	movs	r5, #31
 80006e6:	197c      	adds	r4, r7, r5
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ffa5 	bl	800063a <read_char>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]
	} while (c != '&');
 80006f4:	197b      	adds	r3, r7, r5
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b26      	cmp	r3, #38	; 0x26
 80006fa:	d1f3      	bne.n	80006e4 <get_map+0xc>

	*row_count = read_number(huart);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff ffae 	bl	8000660 <read_number>
 8000704:	0002      	movs	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	601a      	str	r2, [r3, #0]
	*column_count = read_number(huart);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	0018      	movs	r0, r3
 800070e:	f7ff ffa7 	bl	8000660 <read_number>
 8000712:	0002      	movs	r2, r0
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	601a      	str	r2, [r3, #0]

	uint8_t** map = (uint8_t**)malloc(*row_count * sizeof(uint8_t*));
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	0018      	movs	r0, r3
 8000720:	f002 f8d6 	bl	80028d0 <malloc>
 8000724:	0003      	movs	r3, r0
 8000726:	61bb      	str	r3, [r7, #24]

	for (int r = 0; r < *row_count; r++)
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
 800072c:	e033      	b.n	8000796 <get_map+0xbe>
	{
		map[r] = (uint8_t*)malloc(*column_count * sizeof(uint8_t));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	0019      	movs	r1, r3
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	18d4      	adds	r4, r2, r3
 800073c:	0008      	movs	r0, r1
 800073e:	f002 f8c7 	bl	80028d0 <malloc>
 8000742:	0003      	movs	r3, r0
 8000744:	6023      	str	r3, [r4, #0]
		for (int c = 0; c < *column_count; c++) {
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
 800074a:	e01c      	b.n	8000786 <get_map+0xae>
			char cell[] = { '\0', '\0' };
 800074c:	2414      	movs	r4, #20
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2200      	movs	r2, #0
 8000752:	801a      	strh	r2, [r3, #0]
			cell[0] = read_char(huart);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff ff6f 	bl	800063a <read_char>
 800075c:	0003      	movs	r3, r0
 800075e:	001a      	movs	r2, r3
 8000760:	193b      	adds	r3, r7, r4
 8000762:	701a      	strb	r2, [r3, #0]
			map[r][c] = (uint8_t) atoi(cell);
 8000764:	193b      	adds	r3, r7, r4
 8000766:	0018      	movs	r0, r3
 8000768:	f002 f882 	bl	8002870 <atoi>
 800076c:	0001      	movs	r1, r0
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	69ba      	ldr	r2, [r7, #24]
 8000774:	18d3      	adds	r3, r2, r3
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	18d3      	adds	r3, r2, r3
 800077c:	b2ca      	uxtb	r2, r1
 800077e:	701a      	strb	r2, [r3, #0]
		for (int c = 0; c < *column_count; c++) {
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	3301      	adds	r3, #1
 8000784:	623b      	str	r3, [r7, #32]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6a3a      	ldr	r2, [r7, #32]
 800078c:	429a      	cmp	r2, r3
 800078e:	dbdd      	blt.n	800074c <get_map+0x74>
	for (int r = 0; r < *row_count; r++)
 8000790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000792:	3301      	adds	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800079c:	429a      	cmp	r2, r3
 800079e:	dbc6      	blt.n	800072e <get_map+0x56>
		}
	}

	// should read flow terminator '&'
	read_char(huart);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff49 	bl	800063a <read_char>

	return map;
 80007a8:	69bb      	ldr	r3, [r7, #24]
}
 80007aa:	0018      	movs	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b00a      	add	sp, #40	; 0x28
 80007b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <HAL_MspInit+0x24>)
 80007ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x24>)
 80007be:	2101      	movs	r1, #1
 80007c0:	430a      	orrs	r2, r1
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <HAL_MspInit+0x24>)
 80007c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <HAL_MspInit+0x24>)
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	0549      	lsls	r1, r1, #21
 80007ce:	430a      	orrs	r2, r1
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	240c      	movs	r4, #12
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	0018      	movs	r0, r3
 80007ea:	2314      	movs	r3, #20
 80007ec:	001a      	movs	r2, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	f002 f878 	bl	80028e4 <memset>
  if(huart->Instance==USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a18      	ldr	r2, [pc, #96]	; (800085c <HAL_UART_MspInit+0x80>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d129      	bne.n	8000852 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_UART_MspInit+0x84>)
 8000800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x84>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0289      	lsls	r1, r1, #10
 8000808:	430a      	orrs	r2, r1
 800080a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_UART_MspInit+0x84>)
 800080e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_UART_MspInit+0x84>)
 8000812:	2101      	movs	r1, #1
 8000814:	430a      	orrs	r2, r1
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_UART_MspInit+0x84>)
 800081a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081c:	2201      	movs	r2, #1
 800081e:	4013      	ands	r3, r2
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000824:	0021      	movs	r1, r4
 8000826:	187b      	adds	r3, r7, r1
 8000828:	220c      	movs	r2, #12
 800082a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2202      	movs	r2, #2
 8000830:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2203      	movs	r2, #3
 800083c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2204      	movs	r2, #4
 8000842:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	187a      	adds	r2, r7, r1
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f9ab 	bl	8000ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b009      	add	sp, #36	; 0x24
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40004400 	.word	0x40004400
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f8be 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	18d3      	adds	r3, r2, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f001 ffda 	bl	800287c <__errno>
 80008c8:	0003      	movs	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	425b      	negs	r3, r3
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	18d2      	adds	r2, r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <_sbrk+0x64>)
 80008e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b006      	add	sp, #24
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20002000 	.word	0x20002000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	20000130 	.word	0x20000130

08000900 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490e      	ldr	r1, [pc, #56]	; (800094c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0b      	ldr	r4, [pc, #44]	; (8000958 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000936:	f7ff ffe3 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f001 ffa5 	bl	8002888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff fdad 	bl	800049c <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   r0, =_estack
 8000944:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000950:	08002cd0 	.word	0x08002cd0
  ldr r2, =_sbss
 8000954:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000958:	20000130 	.word	0x20000130

0800095c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_COMP_IRQHandler>
	...

08000960 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_Init+0x3c>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_Init+0x3c>)
 8000972:	2140      	movs	r1, #64	; 0x40
 8000974:	430a      	orrs	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f811 	bl	80009a0 <HAL_InitTick>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d003      	beq.n	800098a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e001      	b.n	800098e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098a:	f7ff ff13 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
}
 8000992:	0018      	movs	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40022000 	.word	0x40022000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_InitTick+0x5c>)
 80009aa:	681c      	ldr	r4, [r3, #0]
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x60>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	0019      	movs	r1, r3
 80009b2:	23fa      	movs	r3, #250	; 0xfa
 80009b4:	0098      	lsls	r0, r3, #2
 80009b6:	f7ff fba7 	bl	8000108 <__udivsi3>
 80009ba:	0003      	movs	r3, r0
 80009bc:	0019      	movs	r1, r3
 80009be:	0020      	movs	r0, r4
 80009c0:	f7ff fba2 	bl	8000108 <__udivsi3>
 80009c4:	0003      	movs	r3, r0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 f8e1 	bl	8000b8e <HAL_SYSTICK_Config>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e00f      	b.n	80009f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d80b      	bhi.n	80009f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	2301      	movs	r3, #1
 80009de:	425b      	negs	r3, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 f8be 	bl	8000b64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_InitTick+0x64>)
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b003      	add	sp, #12
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	18d2      	adds	r2, r2, r3
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000008 	.word	0x20000008
 8000a28:	2000011c 	.word	0x2000011c

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	2000011c 	.word	0x2000011c

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	0002      	movs	r2, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b7f      	cmp	r3, #127	; 0x7f
 8000a54:	d828      	bhi.n	8000aa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a56:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <__NVIC_SetPriority+0xd4>)
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	33c0      	adds	r3, #192	; 0xc0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	589b      	ldr	r3, [r3, r2]
 8000a66:	1dfa      	adds	r2, r7, #7
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	400a      	ands	r2, r1
 8000a70:	00d2      	lsls	r2, r2, #3
 8000a72:	21ff      	movs	r1, #255	; 0xff
 8000a74:	4091      	lsls	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	43d2      	mvns	r2, r2
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	019b      	lsls	r3, r3, #6
 8000a82:	22ff      	movs	r2, #255	; 0xff
 8000a84:	401a      	ands	r2, r3
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	4003      	ands	r3, r0
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a94:	481f      	ldr	r0, [pc, #124]	; (8000b14 <__NVIC_SetPriority+0xd4>)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b25b      	sxtb	r3, r3
 8000a9c:	089b      	lsrs	r3, r3, #2
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	33c0      	adds	r3, #192	; 0xc0
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aa6:	e031      	b.n	8000b0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <__NVIC_SetPriority+0xd8>)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0019      	movs	r1, r3
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	400b      	ands	r3, r1
 8000ab4:	3b08      	subs	r3, #8
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3306      	adds	r3, #6
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	3304      	adds	r3, #4
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1dfa      	adds	r2, r7, #7
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	2203      	movs	r2, #3
 8000aca:	400a      	ands	r2, r1
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	21ff      	movs	r1, #255	; 0xff
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	1dfb      	adds	r3, r7, #7
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4003      	ands	r3, r0
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	001c      	movs	r4, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	4023      	ands	r3, r4
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	430a      	orrs	r2, r1
 8000b02:	3306      	adds	r3, #6
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	18c3      	adds	r3, r0, r3
 8000b08:	3304      	adds	r3, #4
 8000b0a:	601a      	str	r2, [r3, #0]
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b003      	add	sp, #12
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1e5a      	subs	r2, r3, #1
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	045b      	lsls	r3, r3, #17
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d301      	bcc.n	8000b34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b30:	2301      	movs	r3, #1
 8000b32:	e010      	b.n	8000b56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <SysTick_Config+0x44>)
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	3a01      	subs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	425b      	negs	r3, r3
 8000b40:	2103      	movs	r1, #3
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff ff7c 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x44>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x44>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	210f      	movs	r1, #15
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	1c02      	adds	r2, r0, #0
 8000b74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ff5d 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ffbf 	bl	8000b1c <SysTick_Config>
 8000b9e:	0003      	movs	r3, r0
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bbe:	e14f      	b.n	8000e60 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <HAL_GPIO_Init+0x30>
 8000bd6:	e140      	b.n	8000e5a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d005      	beq.n	8000bf0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2203      	movs	r2, #3
 8000bea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d130      	bne.n	8000c52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	409a      	lsls	r2, r3
 8000bfe:	0013      	movs	r3, r2
 8000c00:	43da      	mvns	r2, r3
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	409a      	lsls	r2, r3
 8000c12:	0013      	movs	r3, r2
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c26:	2201      	movs	r2, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2203      	movs	r2, #3
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d017      	beq.n	8000c8e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2203      	movs	r2, #3
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d123      	bne.n	8000ce2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	58d3      	ldr	r3, [r2, r3]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	2207      	movs	r2, #7
 8000cac:	4013      	ands	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	2107      	movs	r1, #7
 8000cc6:	400b      	ands	r3, r1
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3208      	adds	r2, #8
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	6939      	ldr	r1, [r7, #16]
 8000ce0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2203      	movs	r2, #3
 8000d00:	401a      	ands	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	23c0      	movs	r3, #192	; 0xc0
 8000d1c:	029b      	lsls	r3, r3, #10
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d100      	bne.n	8000d24 <HAL_GPIO_Init+0x17c>
 8000d22:	e09a      	b.n	8000e5a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d24:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d28:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d30:	4a52      	ldr	r2, [pc, #328]	; (8000e7c <HAL_GPIO_Init+0x2d4>)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	589b      	ldr	r3, [r3, r2]
 8000d3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2203      	movs	r2, #3
 8000d42:	4013      	ands	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	23a0      	movs	r3, #160	; 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d019      	beq.n	8000d92 <HAL_GPIO_Init+0x1ea>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a47      	ldr	r2, [pc, #284]	; (8000e80 <HAL_GPIO_Init+0x2d8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x1e6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <HAL_GPIO_Init+0x2dc>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00d      	beq.n	8000d8a <HAL_GPIO_Init+0x1e2>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a45      	ldr	r2, [pc, #276]	; (8000e88 <HAL_GPIO_Init+0x2e0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <HAL_GPIO_Init+0x1de>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a44      	ldr	r2, [pc, #272]	; (8000e8c <HAL_GPIO_Init+0x2e4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_GPIO_Init+0x1da>
 8000d7e:	2305      	movs	r3, #5
 8000d80:	e008      	b.n	8000d94 <HAL_GPIO_Init+0x1ec>
 8000d82:	2306      	movs	r3, #6
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x1ec>
 8000d86:	2303      	movs	r3, #3
 8000d88:	e004      	b.n	8000d94 <HAL_GPIO_Init+0x1ec>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e002      	b.n	8000d94 <HAL_GPIO_Init+0x1ec>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <HAL_GPIO_Init+0x1ec>
 8000d92:	2300      	movs	r3, #0
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	2103      	movs	r1, #3
 8000d98:	400a      	ands	r2, r1
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	4093      	lsls	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da4:	4935      	ldr	r1, [pc, #212]	; (8000e7c <HAL_GPIO_Init+0x2d4>)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	025b      	lsls	r3, r3, #9
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43da      	mvns	r2, r3
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	029b      	lsls	r3, r3, #10
 8000df4:	4013      	ands	r3, r2
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	035b      	lsls	r3, r3, #13
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	039b      	lsls	r3, r3, #14
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_GPIO_Init+0x2e8>)
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	40da      	lsrs	r2, r3
 8000e68:	1e13      	subs	r3, r2, #0
 8000e6a:	d000      	beq.n	8000e6e <HAL_GPIO_Init+0x2c6>
 8000e6c:	e6a8      	b.n	8000bc0 <HAL_GPIO_Init+0x18>
  }
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b006      	add	sp, #24
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	50000400 	.word	0x50000400
 8000e84:	50000800 	.word	0x50000800
 8000e88:	50000c00 	.word	0x50000c00
 8000e8c:	50001c00 	.word	0x50001c00
 8000e90:	40010400 	.word	0x40010400

08000e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b5b0      	push	{r4, r5, r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f000 fbaf 	bl	8001606 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea8:	4bcf      	ldr	r3, [pc, #828]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	220c      	movs	r2, #12
 8000eae:	4013      	ands	r3, r2
 8000eb0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb2:	4bcd      	ldr	r3, [pc, #820]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	025b      	lsls	r3, r3, #9
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d100      	bne.n	8000eca <HAL_RCC_OscConfig+0x36>
 8000ec8:	e07e      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d007      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b0c      	cmp	r3, #12
 8000ed4:	d112      	bne.n	8000efc <HAL_RCC_OscConfig+0x68>
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	025b      	lsls	r3, r3, #9
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d10d      	bne.n	8000efc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	4bc1      	ldr	r3, [pc, #772]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	029b      	lsls	r3, r3, #10
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d100      	bne.n	8000eee <HAL_RCC_OscConfig+0x5a>
 8000eec:	e06b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x132>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d167      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f000 fb85 	bl	8001606 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d107      	bne.n	8000f18 <HAL_RCC_OscConfig+0x84>
 8000f08:	4bb7      	ldr	r3, [pc, #732]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4bb6      	ldr	r3, [pc, #728]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e027      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	02db      	lsls	r3, r3, #11
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d10e      	bne.n	8000f42 <HAL_RCC_OscConfig+0xae>
 8000f24:	4bb0      	ldr	r3, [pc, #704]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4baf      	ldr	r3, [pc, #700]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	02c9      	lsls	r1, r1, #11
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	4bad      	ldr	r3, [pc, #692]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4bac      	ldr	r3, [pc, #688]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	0249      	lsls	r1, r1, #9
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e012      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f42:	4ba9      	ldr	r3, [pc, #676]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f48:	49a8      	ldr	r1, [pc, #672]	; (80011ec <HAL_RCC_OscConfig+0x358>)
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	4ba6      	ldr	r3, [pc, #664]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	025b      	lsls	r3, r3, #9
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4ba2      	ldr	r3, [pc, #648]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4ba1      	ldr	r3, [pc, #644]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f62:	49a3      	ldr	r1, [pc, #652]	; (80011f0 <HAL_RCC_OscConfig+0x35c>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d015      	beq.n	8000f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fd5c 	bl	8000a2c <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f78:	e009      	b.n	8000f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fd57 	bl	8000a2c <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b64      	cmp	r3, #100	; 0x64
 8000f86:	d902      	bls.n	8000f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f000 fb3c 	bl	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f8e:	4b96      	ldr	r3, [pc, #600]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	029b      	lsls	r3, r3, #10
 8000f96:	4013      	ands	r3, r2
 8000f98:	d0ef      	beq.n	8000f7a <HAL_RCC_OscConfig+0xe6>
 8000f9a:	e015      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd46 	bl	8000a2c <HAL_GetTick>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa6:	f7ff fd41 	bl	8000a2c <HAL_GetTick>
 8000faa:	0002      	movs	r2, r0
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b64      	cmp	r3, #100	; 0x64
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e326      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fb8:	4b8b      	ldr	r3, [pc, #556]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d1f0      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x112>
 8000fc4:	e000      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x140>
 8000fd2:	e08b      	b.n	80010ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	2b0c      	cmp	r3, #12
 8000fe4:	d13e      	bne.n	8001064 <HAL_RCC_OscConfig+0x1d0>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d13b      	bne.n	8001064 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000fec:	4b7e      	ldr	r3, [pc, #504]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d004      	beq.n	8001000 <HAL_RCC_OscConfig+0x16c>
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e302      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001000:	4b79      	ldr	r3, [pc, #484]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	4a7b      	ldr	r2, [pc, #492]	; (80011f4 <HAL_RCC_OscConfig+0x360>)
 8001006:	4013      	ands	r3, r2
 8001008:	0019      	movs	r1, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	021a      	lsls	r2, r3, #8
 8001010:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001012:	430a      	orrs	r2, r1
 8001014:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001016:	4b74      	ldr	r3, [pc, #464]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2209      	movs	r2, #9
 800101c:	4393      	bics	r3, r2
 800101e:	0019      	movs	r1, r3
 8001020:	4b71      	ldr	r3, [pc, #452]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001028:	f000 fc40 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800102c:	0001      	movs	r1, r0
 800102e:	4b6e      	ldr	r3, [pc, #440]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	220f      	movs	r2, #15
 8001036:	4013      	ands	r3, r2
 8001038:	4a6f      	ldr	r2, [pc, #444]	; (80011f8 <HAL_RCC_OscConfig+0x364>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	000a      	movs	r2, r1
 800103e:	40da      	lsrs	r2, r3
 8001040:	4b6e      	ldr	r3, [pc, #440]	; (80011fc <HAL_RCC_OscConfig+0x368>)
 8001042:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001044:	4b6e      	ldr	r3, [pc, #440]	; (8001200 <HAL_RCC_OscConfig+0x36c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2513      	movs	r5, #19
 800104a:	197c      	adds	r4, r7, r5
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff fca7 	bl	80009a0 <HAL_InitTick>
 8001052:	0003      	movs	r3, r0
 8001054:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001056:	197b      	adds	r3, r7, r5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d046      	beq.n	80010ec <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800105e:	197b      	adds	r3, r7, r5
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	e2d0      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d027      	beq.n	80010ba <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2209      	movs	r2, #9
 8001070:	4393      	bics	r3, r2
 8001072:	0019      	movs	r1, r3
 8001074:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fcd6 	bl	8000a2c <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fcd1 	bl	8000a2c <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e2b6      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001098:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2204      	movs	r2, #4
 800109e:	4013      	ands	r3, r2
 80010a0:	d0f1      	beq.n	8001086 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a53      	ldr	r2, [pc, #332]	; (80011f4 <HAL_RCC_OscConfig+0x360>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	0019      	movs	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	021a      	lsls	r2, r3, #8
 80010b2:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010b4:	430a      	orrs	r2, r1
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	e018      	b.n	80010ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ba:	4b4b      	ldr	r3, [pc, #300]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	438a      	bics	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fcb1 	bl	8000a2c <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fcac 	bl	8000a2c <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e291      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	d1f1      	bne.n	80010d0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2210      	movs	r2, #16
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_RCC_OscConfig+0x264>
 80010f6:	e0a1      	b.n	800123c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d140      	bne.n	8001180 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4013      	ands	r3, r2
 8001108:	d005      	beq.n	8001116 <HAL_RCC_OscConfig+0x282>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e277      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001116:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a3a      	ldr	r2, [pc, #232]	; (8001204 <HAL_RCC_OscConfig+0x370>)
 800111c:	4013      	ands	r3, r2
 800111e:	0019      	movs	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001126:	430a      	orrs	r2, r1
 8001128:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	0a19      	lsrs	r1, r3, #8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	061a      	lsls	r2, r3, #24
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 800113a:	430a      	orrs	r2, r1
 800113c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	0b5b      	lsrs	r3, r3, #13
 8001144:	3301      	adds	r3, #1
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	0212      	lsls	r2, r2, #8
 800114a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	210f      	movs	r1, #15
 8001154:	400b      	ands	r3, r1
 8001156:	4928      	ldr	r1, [pc, #160]	; (80011f8 <HAL_RCC_OscConfig+0x364>)
 8001158:	5ccb      	ldrb	r3, [r1, r3]
 800115a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_RCC_OscConfig+0x368>)
 800115e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_RCC_OscConfig+0x36c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2513      	movs	r5, #19
 8001166:	197c      	adds	r4, r7, r5
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff fc19 	bl	80009a0 <HAL_InitTick>
 800116e:	0003      	movs	r3, r0
 8001170:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001172:	197b      	adds	r3, r7, r5
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d060      	beq.n	800123c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800117a:	197b      	adds	r3, r7, r5
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	e242      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d03f      	beq.n	8001208 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0049      	lsls	r1, r1, #1
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fc49 	bl	8000a2c <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc44 	bl	8000a2c <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e229      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_RCC_OscConfig+0x370>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	0019      	movs	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011ce:	430a      	orrs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	0a19      	lsrs	r1, r3, #8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	061a      	lsls	r2, r3, #24
 80011e0:	4b01      	ldr	r3, [pc, #4]	; (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	e029      	b.n	800123c <HAL_RCC_OscConfig+0x3a8>
 80011e8:	40021000 	.word	0x40021000
 80011ec:	fffeffff 	.word	0xfffeffff
 80011f0:	fffbffff 	.word	0xfffbffff
 80011f4:	ffffe0ff 	.word	0xffffe0ff
 80011f8:	08002b50 	.word	0x08002b50
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000004 	.word	0x20000004
 8001204:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001208:	4bbd      	ldr	r3, [pc, #756]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4bbc      	ldr	r3, [pc, #752]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 800120e:	49bd      	ldr	r1, [pc, #756]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fc0a 	bl	8000a2c <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121e:	f7ff fc05 	bl	8000a2c <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1ea      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001230:	4bb3      	ldr	r3, [pc, #716]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2208      	movs	r2, #8
 8001242:	4013      	ands	r3, r2
 8001244:	d036      	beq.n	80012b4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d019      	beq.n	8001282 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4bac      	ldr	r3, [pc, #688]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001252:	4bab      	ldr	r3, [pc, #684]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fbe7 	bl	8000a2c <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fbe2 	bl	8000a2c <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1c7      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001276:	4ba2      	ldr	r3, [pc, #648]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d0f1      	beq.n	8001264 <HAL_RCC_OscConfig+0x3d0>
 8001280:	e018      	b.n	80012b4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001282:	4b9f      	ldr	r3, [pc, #636]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001286:	4b9e      	ldr	r3, [pc, #632]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001288:	2101      	movs	r1, #1
 800128a:	438a      	bics	r2, r1
 800128c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fbcd 	bl	8000a2c <HAL_GetTick>
 8001292:	0003      	movs	r3, r0
 8001294:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fbc8 	bl	8000a2c <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1ad      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012aa:	4b95      	ldr	r3, [pc, #596]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80012ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d1f1      	bne.n	8001298 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2204      	movs	r2, #4
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_RCC_OscConfig+0x42c>
 80012be:	e0ae      	b.n	800141e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c0:	2027      	movs	r0, #39	; 0x27
 80012c2:	183b      	adds	r3, r7, r0
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c8:	4b8d      	ldr	r3, [pc, #564]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80012ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	055b      	lsls	r3, r3, #21
 80012d0:	4013      	ands	r3, r2
 80012d2:	d109      	bne.n	80012e8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	4b8a      	ldr	r3, [pc, #552]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80012d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d8:	4b89      	ldr	r3, [pc, #548]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	0549      	lsls	r1, r1, #21
 80012de:	430a      	orrs	r2, r1
 80012e0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b87      	ldr	r3, [pc, #540]	; (8001508 <HAL_RCC_OscConfig+0x674>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d11a      	bne.n	800132a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f4:	4b84      	ldr	r3, [pc, #528]	; (8001508 <HAL_RCC_OscConfig+0x674>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b83      	ldr	r3, [pc, #524]	; (8001508 <HAL_RCC_OscConfig+0x674>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fb93 	bl	8000a2c <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7ff fb8e 	bl	8000a2c <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e173      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b7a      	ldr	r3, [pc, #488]	; (8001508 <HAL_RCC_OscConfig+0x674>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4013      	ands	r3, r2
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	429a      	cmp	r2, r3
 8001334:	d107      	bne.n	8001346 <HAL_RCC_OscConfig+0x4b2>
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800133a:	4b71      	ldr	r3, [pc, #452]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	0049      	lsls	r1, r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	651a      	str	r2, [r3, #80]	; 0x50
 8001344:	e031      	b.n	80013aa <HAL_RCC_OscConfig+0x516>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d4>
 800134e:	4b6c      	ldr	r3, [pc, #432]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001352:	4b6b      	ldr	r3, [pc, #428]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001354:	496b      	ldr	r1, [pc, #428]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 8001356:	400a      	ands	r2, r1
 8001358:	651a      	str	r2, [r3, #80]	; 0x50
 800135a:	4b69      	ldr	r3, [pc, #420]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 800135c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800135e:	4b68      	ldr	r3, [pc, #416]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001360:	496a      	ldr	r1, [pc, #424]	; (800150c <HAL_RCC_OscConfig+0x678>)
 8001362:	400a      	ands	r2, r1
 8001364:	651a      	str	r2, [r3, #80]	; 0x50
 8001366:	e020      	b.n	80013aa <HAL_RCC_OscConfig+0x516>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	23a0      	movs	r3, #160	; 0xa0
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	429a      	cmp	r2, r3
 8001372:	d10e      	bne.n	8001392 <HAL_RCC_OscConfig+0x4fe>
 8001374:	4b62      	ldr	r3, [pc, #392]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001378:	4b61      	ldr	r3, [pc, #388]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	00c9      	lsls	r1, r1, #3
 800137e:	430a      	orrs	r2, r1
 8001380:	651a      	str	r2, [r3, #80]	; 0x50
 8001382:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001386:	4b5e      	ldr	r3, [pc, #376]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0049      	lsls	r1, r1, #1
 800138c:	430a      	orrs	r2, r1
 800138e:	651a      	str	r2, [r3, #80]	; 0x50
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0x516>
 8001392:	4b5b      	ldr	r3, [pc, #364]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001396:	4b5a      	ldr	r3, [pc, #360]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001398:	495a      	ldr	r1, [pc, #360]	; (8001504 <HAL_RCC_OscConfig+0x670>)
 800139a:	400a      	ands	r2, r1
 800139c:	651a      	str	r2, [r3, #80]	; 0x50
 800139e:	4b58      	ldr	r3, [pc, #352]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80013a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013a2:	4b57      	ldr	r3, [pc, #348]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80013a4:	4959      	ldr	r1, [pc, #356]	; (800150c <HAL_RCC_OscConfig+0x678>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d015      	beq.n	80013de <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb3b 	bl	8000a2c <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013ba:	e009      	b.n	80013d0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb36 	bl	8000a2c <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4a52      	ldr	r2, [pc, #328]	; (8001510 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e11a      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013d0:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80013d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d0ef      	beq.n	80013bc <HAL_RCC_OscConfig+0x528>
 80013dc:	e014      	b.n	8001408 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fb25 	bl	8000a2c <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb20 	bl	8000a2c <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a47      	ldr	r2, [pc, #284]	; (8001510 <HAL_RCC_OscConfig+0x67c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e104      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013fc:	4b40      	ldr	r3, [pc, #256]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80013fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d1ef      	bne.n	80013e8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001408:	2327      	movs	r3, #39	; 0x27
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d105      	bne.n	800141e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001412:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001418:	493e      	ldr	r1, [pc, #248]	; (8001514 <HAL_RCC_OscConfig+0x680>)
 800141a:	400a      	ands	r2, r1
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2220      	movs	r2, #32
 8001424:	4013      	ands	r3, r2
 8001426:	d049      	beq.n	80014bc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d026      	beq.n	800147e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 800143e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001442:	2101      	movs	r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
 8001448:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_RCC_OscConfig+0x684>)
 800144a:	6a1a      	ldr	r2, [r3, #32]
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <HAL_RCC_OscConfig+0x684>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0189      	lsls	r1, r1, #6
 8001452:	430a      	orrs	r2, r1
 8001454:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fae9 	bl	8000a2c <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001460:	f7ff fae4 	bl	8000a2c <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0c9      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d0f1      	beq.n	8001460 <HAL_RCC_OscConfig+0x5cc>
 800147c:	e01e      	b.n	80014bc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001484:	2101      	movs	r1, #1
 8001486:	438a      	bics	r2, r1
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_RCC_OscConfig+0x684>)
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_RCC_OscConfig+0x684>)
 8001490:	4922      	ldr	r1, [pc, #136]	; (800151c <HAL_RCC_OscConfig+0x688>)
 8001492:	400a      	ands	r2, r1
 8001494:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fac9 	bl	8000a2c <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014a0:	f7ff fac4 	bl	8000a2c <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e0a9      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d1f1      	bne.n	80014a0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x632>
 80014c4:	e09e      	b.n	8001604 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d100      	bne.n	80014ce <HAL_RCC_OscConfig+0x63a>
 80014cc:	e077      	b.n	80015be <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d158      	bne.n	8001588 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_RCC_OscConfig+0x66c>)
 80014dc:	4910      	ldr	r1, [pc, #64]	; (8001520 <HAL_RCC_OscConfig+0x68c>)
 80014de:	400a      	ands	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff faa3 	bl	8000a2c <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ea:	e01b      	b.n	8001524 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fa9e 	bl	8000a2c <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d914      	bls.n	8001524 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e083      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	40021000 	.word	0x40021000
 8001504:	fffffeff 	.word	0xfffffeff
 8001508:	40007000 	.word	0x40007000
 800150c:	fffffbff 	.word	0xfffffbff
 8001510:	00001388 	.word	0x00001388
 8001514:	efffffff 	.word	0xefffffff
 8001518:	40010000 	.word	0x40010000
 800151c:	ffffdfff 	.word	0xffffdfff
 8001520:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001524:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	049b      	lsls	r3, r3, #18
 800152c:	4013      	ands	r3, r2
 800152e:	d1dd      	bne.n	80014ec <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001530:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4a37      	ldr	r2, [pc, #220]	; (8001614 <HAL_RCC_OscConfig+0x780>)
 8001536:	4013      	ands	r3, r2
 8001538:	0019      	movs	r1, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001548:	431a      	orrs	r2, r3
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 800154c:	430a      	orrs	r2, r1
 800154e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0449      	lsls	r1, r1, #17
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fa65 	bl	8000a2c <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fa60 	bl	8000a2c <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e045      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	049b      	lsls	r3, r3, #18
 8001582:	4013      	ands	r3, r2
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x6d4>
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 800158e:	4922      	ldr	r1, [pc, #136]	; (8001618 <HAL_RCC_OscConfig+0x784>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fa4a 	bl	8000a2c <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff fa45 	bl	8000a2c <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e02a      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	049b      	lsls	r3, r3, #18
 80015b8:	4013      	ands	r3, r2
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x70a>
 80015bc:	e022      	b.n	8001604 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e01d      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_RCC_OscConfig+0x77c>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	401a      	ands	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	429a      	cmp	r2, r3
 80015de:	d10f      	bne.n	8001600 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	23f0      	movs	r3, #240	; 0xf0
 80015e4:	039b      	lsls	r3, r3, #14
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	23c0      	movs	r3, #192	; 0xc0
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	401a      	ands	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b00a      	add	sp, #40	; 0x28
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40021000 	.word	0x40021000
 8001614:	ff02ffff 	.word	0xff02ffff
 8001618:	feffffff 	.word	0xfeffffff

0800161c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e128      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b96      	ldr	r3, [pc, #600]	; (800188c <HAL_RCC_ClockConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d91e      	bls.n	800167c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b93      	ldr	r3, [pc, #588]	; (800188c <HAL_RCC_ClockConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	4393      	bics	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	4b90      	ldr	r3, [pc, #576]	; (800188c <HAL_RCC_ClockConfig+0x270>)
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001650:	f7ff f9ec 	bl	8000a2c <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001658:	e009      	b.n	800166e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165a:	f7ff f9e7 	bl	8000a2c <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4a8a      	ldr	r2, [pc, #552]	; (8001890 <HAL_RCC_ClockConfig+0x274>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e109      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b87      	ldr	r3, [pc, #540]	; (800188c <HAL_RCC_ClockConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2201      	movs	r2, #1
 8001674:	4013      	ands	r3, r2
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d1ee      	bne.n	800165a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d009      	beq.n	800169a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001686:	4b83      	ldr	r3, [pc, #524]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	22f0      	movs	r2, #240	; 0xf0
 800168c:	4393      	bics	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	4b7f      	ldr	r3, [pc, #508]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001696:	430a      	orrs	r2, r1
 8001698:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2201      	movs	r2, #1
 80016a0:	4013      	ands	r3, r2
 80016a2:	d100      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x8a>
 80016a4:	e089      	b.n	80017ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ae:	4b79      	ldr	r3, [pc, #484]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	d120      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0e1      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016c6:	4b73      	ldr	r3, [pc, #460]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	049b      	lsls	r3, r3, #18
 80016ce:	4013      	ands	r3, r2
 80016d0:	d114      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0d5      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016de:	4b6d      	ldr	r3, [pc, #436]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2204      	movs	r2, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	d109      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0ca      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ec:	4b69      	ldr	r3, [pc, #420]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0c2      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fc:	4b65      	ldr	r3, [pc, #404]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2203      	movs	r2, #3
 8001702:	4393      	bics	r3, r2
 8001704:	0019      	movs	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4b62      	ldr	r3, [pc, #392]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 800170c:	430a      	orrs	r2, r1
 800170e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff f98c 	bl	8000a2c <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d111      	bne.n	8001744 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001720:	e009      	b.n	8001736 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7ff f983 	bl	8000a2c <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a58      	ldr	r2, [pc, #352]	; (8001890 <HAL_RCC_ClockConfig+0x274>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0a5      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001736:	4b57      	ldr	r3, [pc, #348]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	220c      	movs	r2, #12
 800173c:	4013      	ands	r3, r2
 800173e:	2b08      	cmp	r3, #8
 8001740:	d1ef      	bne.n	8001722 <HAL_RCC_ClockConfig+0x106>
 8001742:	e03a      	b.n	80017ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d111      	bne.n	8001770 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174c:	e009      	b.n	8001762 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174e:	f7ff f96d 	bl	8000a2c <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_RCC_ClockConfig+0x274>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e08f      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	220c      	movs	r2, #12
 8001768:	4013      	ands	r3, r2
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d1ef      	bne.n	800174e <HAL_RCC_ClockConfig+0x132>
 800176e:	e024      	b.n	80017ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d11b      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001778:	e009      	b.n	800178e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177a:	f7ff f957 	bl	8000a2c <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	4a42      	ldr	r2, [pc, #264]	; (8001890 <HAL_RCC_ClockConfig+0x274>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e079      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800178e:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	220c      	movs	r2, #12
 8001794:	4013      	ands	r3, r2
 8001796:	2b04      	cmp	r3, #4
 8001798:	d1ef      	bne.n	800177a <HAL_RCC_ClockConfig+0x15e>
 800179a:	e00e      	b.n	80017ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff f946 	bl	8000a2c <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4a3a      	ldr	r2, [pc, #232]	; (8001890 <HAL_RCC_ClockConfig+0x274>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e068      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017b0:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	220c      	movs	r2, #12
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_ClockConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d21e      	bcs.n	8001806 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_ClockConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4393      	bics	r3, r2
 80017d0:	0019      	movs	r1, r3
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_RCC_ClockConfig+0x270>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017da:	f7ff f927 	bl	8000a2c <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	e009      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff f922 	bl	8000a2c <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	4a28      	ldr	r2, [pc, #160]	; (8001890 <HAL_RCC_ClockConfig+0x274>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e044      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_ClockConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d1ee      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2204      	movs	r2, #4
 800180c:	4013      	ands	r3, r2
 800180e:	d009      	beq.n	8001824 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4a20      	ldr	r2, [pc, #128]	; (8001898 <HAL_RCC_ClockConfig+0x27c>)
 8001816:	4013      	ands	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2208      	movs	r2, #8
 800182a:	4013      	ands	r3, r2
 800182c:	d00a      	beq.n	8001844 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_RCC_ClockConfig+0x280>)
 8001834:	4013      	ands	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	00da      	lsls	r2, r3, #3
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001840:	430a      	orrs	r2, r1
 8001842:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001844:	f000 f832 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001848:	0001      	movs	r1, r0
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_RCC_ClockConfig+0x278>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	220f      	movs	r2, #15
 8001852:	4013      	ands	r3, r2
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_RCC_ClockConfig+0x284>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	000a      	movs	r2, r1
 800185a:	40da      	lsrs	r2, r3
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_RCC_ClockConfig+0x288>)
 800185e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_RCC_ClockConfig+0x28c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	250b      	movs	r5, #11
 8001866:	197c      	adds	r4, r7, r5
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff f899 	bl	80009a0 <HAL_InitTick>
 800186e:	0003      	movs	r3, r0
 8001870:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001872:	197b      	adds	r3, r7, r5
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	e000      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b004      	add	sp, #16
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40022000 	.word	0x40022000
 8001890:	00001388 	.word	0x00001388
 8001894:	40021000 	.word	0x40021000
 8001898:	fffff8ff 	.word	0xfffff8ff
 800189c:	ffffc7ff 	.word	0xffffc7ff
 80018a0:	08002b50 	.word	0x08002b50
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ba:	230c      	movs	r3, #12
 80018bc:	4013      	ands	r3, r2
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d014      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x40>
 80018c2:	d900      	bls.n	80018c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80018c4:	e07b      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x112>
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d002      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x24>
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ce:	e076      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018d0:	4b44      	ldr	r3, [pc, #272]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2210      	movs	r2, #16
 80018d6:	4013      	ands	r3, r2
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018da:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018de:	e07c      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <HAL_RCC_GetSysClockFreq+0x140>)
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018e4:	e079      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ea:	e076      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	0c9a      	lsrs	r2, r3, #18
 80018f0:	230f      	movs	r3, #15
 80018f2:	401a      	ands	r2, r3
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	0d9a      	lsrs	r2, r3, #22
 80018fe:	2303      	movs	r3, #3
 8001900:	4013      	ands	r3, r2
 8001902:	3301      	adds	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	025b      	lsls	r3, r3, #9
 800190e:	4013      	ands	r3, r2
 8001910:	d01a      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	4a35      	ldr	r2, [pc, #212]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800191c:	2300      	movs	r3, #0
 800191e:	69b8      	ldr	r0, [r7, #24]
 8001920:	69f9      	ldr	r1, [r7, #28]
 8001922:	f7fe fc9d 	bl	8000260 <__aeabi_lmul>
 8001926:	0002      	movs	r2, r0
 8001928:	000b      	movs	r3, r1
 800192a:	0010      	movs	r0, r2
 800192c:	0019      	movs	r1, r3
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f7fe fc71 	bl	8000220 <__aeabi_uldivmod>
 800193e:	0002      	movs	r2, r0
 8001940:	000b      	movs	r3, r1
 8001942:	0013      	movs	r3, r2
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
 8001946:	e037      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2210      	movs	r2, #16
 800194e:	4013      	ands	r3, r2
 8001950:	d01a      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800195c:	2300      	movs	r3, #0
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	f7fe fc7d 	bl	8000260 <__aeabi_lmul>
 8001966:	0002      	movs	r2, r0
 8001968:	000b      	movs	r3, r1
 800196a:	0010      	movs	r0, r2
 800196c:	0019      	movs	r1, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f7fe fc51 	bl	8000220 <__aeabi_uldivmod>
 800197e:	0002      	movs	r2, r0
 8001980:	000b      	movs	r3, r1
 8001982:	0013      	movs	r3, r2
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
 8001986:	e017      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	0018      	movs	r0, r3
 800198c:	2300      	movs	r3, #0
 800198e:	0019      	movs	r1, r3
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <HAL_RCC_GetSysClockFreq+0x140>)
 8001992:	2300      	movs	r3, #0
 8001994:	f7fe fc64 	bl	8000260 <__aeabi_lmul>
 8001998:	0002      	movs	r2, r0
 800199a:	000b      	movs	r3, r1
 800199c:	0010      	movs	r0, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	001c      	movs	r4, r3
 80019a4:	2300      	movs	r3, #0
 80019a6:	001d      	movs	r5, r3
 80019a8:	0022      	movs	r2, r4
 80019aa:	002b      	movs	r3, r5
 80019ac:	f7fe fc38 	bl	8000220 <__aeabi_uldivmod>
 80019b0:	0002      	movs	r2, r0
 80019b2:	000b      	movs	r3, r1
 80019b4:	0013      	movs	r3, r2
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80019b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019bc:	e00d      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0b5b      	lsrs	r3, r3, #13
 80019c4:	2207      	movs	r2, #7
 80019c6:	4013      	ands	r3, r2
 80019c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	3301      	adds	r3, #1
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	0212      	lsls	r2, r2, #8
 80019d2:	409a      	lsls	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019d8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b00e      	add	sp, #56	; 0x38
 80019e2:	bdb0      	pop	{r4, r5, r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	003d0900 	.word	0x003d0900
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	08002b68 	.word	0x08002b68

080019f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a10:	f7ff fff2 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a14:	0001      	movs	r1, r0
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	4013      	ands	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	40d9      	lsrs	r1, r3
 8001a26:	000b      	movs	r3, r1
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08002b60 	.word	0x08002b60

08001a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a3c:	f7ff ffdc 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a40:	0001      	movs	r1, r0
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	0adb      	lsrs	r3, r3, #11
 8001a48:	2207      	movs	r2, #7
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	40d9      	lsrs	r1, r3
 8001a52:	000b      	movs	r3, r1
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08002b60 	.word	0x08002b60

08001a64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a6c:	2317      	movs	r3, #23
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d106      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4013      	ands	r3, r2
 8001a88:	d100      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001a8a:	e0d9      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8c:	4b9c      	ldr	r3, [pc, #624]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	055b      	lsls	r3, r3, #21
 8001a94:	4013      	ands	r3, r2
 8001a96:	d10a      	bne.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	4b99      	ldr	r3, [pc, #612]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9c:	4b98      	ldr	r3, [pc, #608]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	0549      	lsls	r1, r1, #21
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b95      	ldr	r3, [pc, #596]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d11a      	bne.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b91      	ldr	r3, [pc, #580]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	0049      	lsls	r1, r1, #1
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac8:	f7fe ffb0 	bl	8000a2c <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7fe ffab 	bl	8000a2c <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b64      	cmp	r3, #100	; 0x64
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e108      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b87      	ldr	r3, [pc, #540]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001af0:	4b83      	ldr	r3, [pc, #524]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	23c0      	movs	r3, #192	; 0xc0
 8001af6:	039b      	lsls	r3, r3, #14
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	23c0      	movs	r3, #192	; 0xc0
 8001b02:	039b      	lsls	r3, r3, #14
 8001b04:	4013      	ands	r3, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	23c0      	movs	r3, #192	; 0xc0
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	4013      	ands	r3, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	23c0      	movs	r3, #192	; 0xc0
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	401a      	ands	r2, r3
 8001b26:	23c0      	movs	r3, #192	; 0xc0
 8001b28:	029b      	lsls	r3, r3, #10
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d10a      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b2e:	4b74      	ldr	r3, [pc, #464]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	029b      	lsls	r3, r3, #10
 8001b36:	401a      	ands	r2, r3
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0d8      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b44:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b48:	23c0      	movs	r3, #192	; 0xc0
 8001b4a:	029b      	lsls	r3, r3, #10
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d049      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	23c0      	movs	r3, #192	; 0xc0
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d004      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d10d      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	23c0      	movs	r3, #192	; 0xc0
 8001b76:	029b      	lsls	r3, r3, #10
 8001b78:	4013      	ands	r3, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d034      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d02e      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b8c:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b90:	4a5d      	ldr	r2, [pc, #372]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b96:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b9a:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0309      	lsls	r1, r1, #12
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba4:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ba8:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001baa:	4958      	ldr	r1, [pc, #352]	; (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d014      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe ff34 	bl	8000a2c <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc8:	e009      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe ff2f 	bl	8000a2c <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a4e      	ldr	r2, [pc, #312]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e08b      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bde:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0ef      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	23c0      	movs	r3, #192	; 0xc0
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	23c0      	movs	r3, #192	; 0xc0
 8001bf6:	029b      	lsls	r3, r3, #10
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d10c      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001bfc:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a44      	ldr	r2, [pc, #272]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	23c0      	movs	r3, #192	; 0xc0
 8001c0c:	039b      	lsls	r3, r3, #14
 8001c0e:	401a      	ands	r2, r3
 8001c10:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
 8001c20:	029b      	lsls	r3, r3, #10
 8001c22:	401a      	ands	r2, r3
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c2a:	2317      	movs	r3, #23
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d105      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c38:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c3a:	4937      	ldr	r1, [pc, #220]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	2203      	movs	r2, #3
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	4393      	bics	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2204      	movs	r2, #4
 8001c82:	4013      	ands	r3, r2
 8001c84:	d009      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1a      	ldr	r2, [r3, #32]
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69da      	ldr	r2, [r3, #28]
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b006      	add	sp, #24
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
 8001d08:	fffcffff 	.word	0xfffcffff
 8001d0c:	fff7ffff 	.word	0xfff7ffff
 8001d10:	00001388 	.word	0x00001388
 8001d14:	ffcfffff 	.word	0xffcfffff
 8001d18:	efffffff 	.word	0xefffffff
 8001d1c:	fffff3ff 	.word	0xfffff3ff
 8001d20:	ffffcfff 	.word	0xffffcfff
 8001d24:	fbffffff 	.word	0xfbffffff
 8001d28:	fff3ffff 	.word	0xfff3ffff

08001d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e044      	b.n	8001dc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d107      	bne.n	8001d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2274      	movs	r2, #116	; 0x74
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7fe fd43 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2224      	movs	r2, #36	; 0x24
 8001d5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2101      	movs	r1, #1
 8001d68:	438a      	bics	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f91e 	bl	8001fb0 <UART_SetConfig>
 8001d74:	0003      	movs	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e024      	b.n	8001dc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 fbb1 	bl	80024f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	490d      	ldr	r1, [pc, #52]	; (8001dd0 <HAL_UART_Init+0xa4>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	212a      	movs	r1, #42	; 0x2a
 8001daa:	438a      	bics	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 fc49 	bl	8002658 <UART_CheckIdleState>
 8001dc6:	0003      	movs	r3, r0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	ffffb7ff 	.word	0xffffb7ff

08001dd4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	1dbb      	adds	r3, r7, #6
 8001de2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d000      	beq.n	8001dee <HAL_UART_Receive+0x1a>
 8001dec:	e0d9      	b.n	8001fa2 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_UART_Receive+0x28>
 8001df4:	1dbb      	adds	r3, r7, #6
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0d1      	b.n	8001fa4 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	015b      	lsls	r3, r3, #5
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d109      	bne.n	8001e20 <HAL_UART_Receive+0x4c>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c1      	b.n	8001fa4 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2274      	movs	r2, #116	; 0x74
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_UART_Receive+0x5a>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e0ba      	b.n	8001fa4 <HAL_UART_Receive+0x1d0>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2274      	movs	r2, #116	; 0x74
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2280      	movs	r2, #128	; 0x80
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2222      	movs	r2, #34	; 0x22
 8001e42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e4a:	f7fe fdef 	bl	8000a2c <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	1dba      	adds	r2, r7, #6
 8001e56:	2158      	movs	r1, #88	; 0x58
 8001e58:	8812      	ldrh	r2, [r2, #0]
 8001e5a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1dba      	adds	r2, r7, #6
 8001e60:	215a      	movs	r1, #90	; 0x5a
 8001e62:	8812      	ldrh	r2, [r2, #0]
 8001e64:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	015b      	lsls	r3, r3, #5
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d10d      	bne.n	8001e8e <HAL_UART_Receive+0xba>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d104      	bne.n	8001e84 <HAL_UART_Receive+0xb0>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	225c      	movs	r2, #92	; 0x5c
 8001e7e:	494b      	ldr	r1, [pc, #300]	; (8001fac <HAL_UART_Receive+0x1d8>)
 8001e80:	5299      	strh	r1, [r3, r2]
 8001e82:	e02e      	b.n	8001ee2 <HAL_UART_Receive+0x10e>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	225c      	movs	r2, #92	; 0x5c
 8001e88:	21ff      	movs	r1, #255	; 0xff
 8001e8a:	5299      	strh	r1, [r3, r2]
 8001e8c:	e029      	b.n	8001ee2 <HAL_UART_Receive+0x10e>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10d      	bne.n	8001eb2 <HAL_UART_Receive+0xde>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d104      	bne.n	8001ea8 <HAL_UART_Receive+0xd4>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	225c      	movs	r2, #92	; 0x5c
 8001ea2:	21ff      	movs	r1, #255	; 0xff
 8001ea4:	5299      	strh	r1, [r3, r2]
 8001ea6:	e01c      	b.n	8001ee2 <HAL_UART_Receive+0x10e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	225c      	movs	r2, #92	; 0x5c
 8001eac:	217f      	movs	r1, #127	; 0x7f
 8001eae:	5299      	strh	r1, [r3, r2]
 8001eb0:	e017      	b.n	8001ee2 <HAL_UART_Receive+0x10e>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	055b      	lsls	r3, r3, #21
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d10d      	bne.n	8001eda <HAL_UART_Receive+0x106>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d104      	bne.n	8001ed0 <HAL_UART_Receive+0xfc>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	225c      	movs	r2, #92	; 0x5c
 8001eca:	217f      	movs	r1, #127	; 0x7f
 8001ecc:	5299      	strh	r1, [r3, r2]
 8001ece:	e008      	b.n	8001ee2 <HAL_UART_Receive+0x10e>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	225c      	movs	r2, #92	; 0x5c
 8001ed4:	213f      	movs	r1, #63	; 0x3f
 8001ed6:	5299      	strh	r1, [r3, r2]
 8001ed8:	e003      	b.n	8001ee2 <HAL_UART_Receive+0x10e>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	225c      	movs	r2, #92	; 0x5c
 8001ede:	2100      	movs	r1, #0
 8001ee0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001ee2:	2312      	movs	r3, #18
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	215c      	movs	r1, #92	; 0x5c
 8001eea:	5a52      	ldrh	r2, [r2, r1]
 8001eec:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	015b      	lsls	r3, r3, #5
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d108      	bne.n	8001f0c <HAL_UART_Receive+0x138>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	e003      	b.n	8001f14 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2274      	movs	r2, #116	; 0x74
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001f1c:	e036      	b.n	8001f8c <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	0013      	movs	r3, r2
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	f000 fbdc 	bl	80026e8 <UART_WaitOnFlagUntilTimeout>
 8001f30:	1e03      	subs	r3, r0, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e035      	b.n	8001fa4 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10e      	bne.n	8001f5c <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2212      	movs	r2, #18
 8001f48:	18ba      	adds	r2, r7, r2
 8001f4a:	8812      	ldrh	r2, [r2, #0]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	3302      	adds	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	e00e      	b.n	8001f7a <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2212      	movs	r2, #18
 8001f66:	18ba      	adds	r2, r7, r2
 8001f68:	8812      	ldrh	r2, [r2, #0]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	225a      	movs	r2, #90	; 0x5a
 8001f7e:	5a9b      	ldrh	r3, [r3, r2]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b299      	uxth	r1, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	225a      	movs	r2, #90	; 0x5a
 8001f8a:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	225a      	movs	r2, #90	; 0x5a
 8001f90:	5a9b      	ldrh	r3, [r3, r2]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1c2      	bne.n	8001f1e <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
  }
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b008      	add	sp, #32
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	000001ff 	.word	0x000001ff

08001fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b08e      	sub	sp, #56	; 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fb8:	231a      	movs	r3, #26
 8001fba:	2218      	movs	r2, #24
 8001fbc:	4694      	mov	ip, r2
 8001fbe:	44bc      	add	ip, r7
 8001fc0:	4463      	add	r3, ip
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4ac1      	ldr	r2, [pc, #772]	; (80022ec <UART_SetConfig+0x33c>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4abd      	ldr	r2, [pc, #756]	; (80022f0 <UART_SetConfig+0x340>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4ab7      	ldr	r2, [pc, #732]	; (80022f4 <UART_SetConfig+0x344>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002022:	4313      	orrs	r3, r2
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4ab2      	ldr	r2, [pc, #712]	; (80022f8 <UART_SetConfig+0x348>)
 800202e:	4013      	ands	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4aae      	ldr	r2, [pc, #696]	; (80022fc <UART_SetConfig+0x34c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d136      	bne.n	80020b4 <UART_SetConfig+0x104>
 8002046:	4bae      	ldr	r3, [pc, #696]	; (8002300 <UART_SetConfig+0x350>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	2203      	movs	r2, #3
 800204c:	4013      	ands	r3, r2
 800204e:	2b03      	cmp	r3, #3
 8002050:	d020      	beq.n	8002094 <UART_SetConfig+0xe4>
 8002052:	d827      	bhi.n	80020a4 <UART_SetConfig+0xf4>
 8002054:	2b02      	cmp	r3, #2
 8002056:	d00d      	beq.n	8002074 <UART_SetConfig+0xc4>
 8002058:	d824      	bhi.n	80020a4 <UART_SetConfig+0xf4>
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <UART_SetConfig+0xb4>
 800205e:	2b01      	cmp	r3, #1
 8002060:	d010      	beq.n	8002084 <UART_SetConfig+0xd4>
 8002062:	e01f      	b.n	80020a4 <UART_SetConfig+0xf4>
 8002064:	231b      	movs	r3, #27
 8002066:	2218      	movs	r2, #24
 8002068:	4694      	mov	ip, r2
 800206a:	44bc      	add	ip, r7
 800206c:	4463      	add	r3, ip
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e0ab      	b.n	80021cc <UART_SetConfig+0x21c>
 8002074:	231b      	movs	r3, #27
 8002076:	2218      	movs	r2, #24
 8002078:	4694      	mov	ip, r2
 800207a:	44bc      	add	ip, r7
 800207c:	4463      	add	r3, ip
 800207e:	2202      	movs	r2, #2
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e0a3      	b.n	80021cc <UART_SetConfig+0x21c>
 8002084:	231b      	movs	r3, #27
 8002086:	2218      	movs	r2, #24
 8002088:	4694      	mov	ip, r2
 800208a:	44bc      	add	ip, r7
 800208c:	4463      	add	r3, ip
 800208e:	2204      	movs	r2, #4
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e09b      	b.n	80021cc <UART_SetConfig+0x21c>
 8002094:	231b      	movs	r3, #27
 8002096:	2218      	movs	r2, #24
 8002098:	4694      	mov	ip, r2
 800209a:	44bc      	add	ip, r7
 800209c:	4463      	add	r3, ip
 800209e:	2208      	movs	r2, #8
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e093      	b.n	80021cc <UART_SetConfig+0x21c>
 80020a4:	231b      	movs	r3, #27
 80020a6:	2218      	movs	r2, #24
 80020a8:	4694      	mov	ip, r2
 80020aa:	44bc      	add	ip, r7
 80020ac:	4463      	add	r3, ip
 80020ae:	2210      	movs	r2, #16
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e08b      	b.n	80021cc <UART_SetConfig+0x21c>
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a92      	ldr	r2, [pc, #584]	; (8002304 <UART_SetConfig+0x354>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d136      	bne.n	800212c <UART_SetConfig+0x17c>
 80020be:	4b90      	ldr	r3, [pc, #576]	; (8002300 <UART_SetConfig+0x350>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	220c      	movs	r2, #12
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d020      	beq.n	800210c <UART_SetConfig+0x15c>
 80020ca:	d827      	bhi.n	800211c <UART_SetConfig+0x16c>
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d00d      	beq.n	80020ec <UART_SetConfig+0x13c>
 80020d0:	d824      	bhi.n	800211c <UART_SetConfig+0x16c>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <UART_SetConfig+0x12c>
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d010      	beq.n	80020fc <UART_SetConfig+0x14c>
 80020da:	e01f      	b.n	800211c <UART_SetConfig+0x16c>
 80020dc:	231b      	movs	r3, #27
 80020de:	2218      	movs	r2, #24
 80020e0:	4694      	mov	ip, r2
 80020e2:	44bc      	add	ip, r7
 80020e4:	4463      	add	r3, ip
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e06f      	b.n	80021cc <UART_SetConfig+0x21c>
 80020ec:	231b      	movs	r3, #27
 80020ee:	2218      	movs	r2, #24
 80020f0:	4694      	mov	ip, r2
 80020f2:	44bc      	add	ip, r7
 80020f4:	4463      	add	r3, ip
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e067      	b.n	80021cc <UART_SetConfig+0x21c>
 80020fc:	231b      	movs	r3, #27
 80020fe:	2218      	movs	r2, #24
 8002100:	4694      	mov	ip, r2
 8002102:	44bc      	add	ip, r7
 8002104:	4463      	add	r3, ip
 8002106:	2204      	movs	r2, #4
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e05f      	b.n	80021cc <UART_SetConfig+0x21c>
 800210c:	231b      	movs	r3, #27
 800210e:	2218      	movs	r2, #24
 8002110:	4694      	mov	ip, r2
 8002112:	44bc      	add	ip, r7
 8002114:	4463      	add	r3, ip
 8002116:	2208      	movs	r2, #8
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e057      	b.n	80021cc <UART_SetConfig+0x21c>
 800211c:	231b      	movs	r3, #27
 800211e:	2218      	movs	r2, #24
 8002120:	4694      	mov	ip, r2
 8002122:	44bc      	add	ip, r7
 8002124:	4463      	add	r3, ip
 8002126:	2210      	movs	r2, #16
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e04f      	b.n	80021cc <UART_SetConfig+0x21c>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a70      	ldr	r2, [pc, #448]	; (80022f4 <UART_SetConfig+0x344>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d143      	bne.n	80021be <UART_SetConfig+0x20e>
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <UART_SetConfig+0x350>)
 8002138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800213a:	23c0      	movs	r3, #192	; 0xc0
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4013      	ands	r3, r2
 8002140:	22c0      	movs	r2, #192	; 0xc0
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	4293      	cmp	r3, r2
 8002146:	d02a      	beq.n	800219e <UART_SetConfig+0x1ee>
 8002148:	22c0      	movs	r2, #192	; 0xc0
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	4293      	cmp	r3, r2
 800214e:	d82e      	bhi.n	80021ae <UART_SetConfig+0x1fe>
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	4293      	cmp	r3, r2
 8002156:	d012      	beq.n	800217e <UART_SetConfig+0x1ce>
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	4293      	cmp	r3, r2
 800215e:	d826      	bhi.n	80021ae <UART_SetConfig+0x1fe>
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <UART_SetConfig+0x1be>
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	00d2      	lsls	r2, r2, #3
 8002168:	4293      	cmp	r3, r2
 800216a:	d010      	beq.n	800218e <UART_SetConfig+0x1de>
 800216c:	e01f      	b.n	80021ae <UART_SetConfig+0x1fe>
 800216e:	231b      	movs	r3, #27
 8002170:	2218      	movs	r2, #24
 8002172:	4694      	mov	ip, r2
 8002174:	44bc      	add	ip, r7
 8002176:	4463      	add	r3, ip
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e026      	b.n	80021cc <UART_SetConfig+0x21c>
 800217e:	231b      	movs	r3, #27
 8002180:	2218      	movs	r2, #24
 8002182:	4694      	mov	ip, r2
 8002184:	44bc      	add	ip, r7
 8002186:	4463      	add	r3, ip
 8002188:	2202      	movs	r2, #2
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e01e      	b.n	80021cc <UART_SetConfig+0x21c>
 800218e:	231b      	movs	r3, #27
 8002190:	2218      	movs	r2, #24
 8002192:	4694      	mov	ip, r2
 8002194:	44bc      	add	ip, r7
 8002196:	4463      	add	r3, ip
 8002198:	2204      	movs	r2, #4
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e016      	b.n	80021cc <UART_SetConfig+0x21c>
 800219e:	231b      	movs	r3, #27
 80021a0:	2218      	movs	r2, #24
 80021a2:	4694      	mov	ip, r2
 80021a4:	44bc      	add	ip, r7
 80021a6:	4463      	add	r3, ip
 80021a8:	2208      	movs	r2, #8
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e00e      	b.n	80021cc <UART_SetConfig+0x21c>
 80021ae:	231b      	movs	r3, #27
 80021b0:	2218      	movs	r2, #24
 80021b2:	4694      	mov	ip, r2
 80021b4:	44bc      	add	ip, r7
 80021b6:	4463      	add	r3, ip
 80021b8:	2210      	movs	r2, #16
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e006      	b.n	80021cc <UART_SetConfig+0x21c>
 80021be:	231b      	movs	r3, #27
 80021c0:	2218      	movs	r2, #24
 80021c2:	4694      	mov	ip, r2
 80021c4:	44bc      	add	ip, r7
 80021c6:	4463      	add	r3, ip
 80021c8:	2210      	movs	r2, #16
 80021ca:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a48      	ldr	r2, [pc, #288]	; (80022f4 <UART_SetConfig+0x344>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d000      	beq.n	80021d8 <UART_SetConfig+0x228>
 80021d6:	e09b      	b.n	8002310 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80021d8:	231b      	movs	r3, #27
 80021da:	2218      	movs	r2, #24
 80021dc:	4694      	mov	ip, r2
 80021de:	44bc      	add	ip, r7
 80021e0:	4463      	add	r3, ip
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d01d      	beq.n	8002224 <UART_SetConfig+0x274>
 80021e8:	dc20      	bgt.n	800222c <UART_SetConfig+0x27c>
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d015      	beq.n	800221a <UART_SetConfig+0x26a>
 80021ee:	dc1d      	bgt.n	800222c <UART_SetConfig+0x27c>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <UART_SetConfig+0x24a>
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d005      	beq.n	8002204 <UART_SetConfig+0x254>
 80021f8:	e018      	b.n	800222c <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021fa:	f7ff fc07 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 80021fe:	0003      	movs	r3, r0
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002202:	e01d      	b.n	8002240 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002204:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <UART_SetConfig+0x350>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2210      	movs	r2, #16
 800220a:	4013      	ands	r3, r2
 800220c:	d002      	beq.n	8002214 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <UART_SetConfig+0x358>)
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002212:	e015      	b.n	8002240 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002214:	4b3d      	ldr	r3, [pc, #244]	; (800230c <UART_SetConfig+0x35c>)
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002218:	e012      	b.n	8002240 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800221a:	f7ff fb47 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800221e:	0003      	movs	r3, r0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002222:	e00d      	b.n	8002240 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800222a:	e009      	b.n	8002240 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002230:	231a      	movs	r3, #26
 8002232:	2218      	movs	r2, #24
 8002234:	4694      	mov	ip, r2
 8002236:	44bc      	add	ip, r7
 8002238:	4463      	add	r3, ip
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
        break;
 800223e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d100      	bne.n	8002248 <UART_SetConfig+0x298>
 8002246:	e139      	b.n	80024bc <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	0013      	movs	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	189b      	adds	r3, r3, r2
 8002252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002254:	429a      	cmp	r2, r3
 8002256:	d305      	bcc.n	8002264 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800225e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002260:	429a      	cmp	r2, r3
 8002262:	d907      	bls.n	8002274 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002264:	231a      	movs	r3, #26
 8002266:	2218      	movs	r2, #24
 8002268:	4694      	mov	ip, r2
 800226a:	44bc      	add	ip, r7
 800226c:	4463      	add	r3, ip
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e123      	b.n	80024bc <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	6939      	ldr	r1, [r7, #16]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	000b      	movs	r3, r1
 8002282:	0e1b      	lsrs	r3, r3, #24
 8002284:	0010      	movs	r0, r2
 8002286:	0205      	lsls	r5, r0, #8
 8002288:	431d      	orrs	r5, r3
 800228a:	000b      	movs	r3, r1
 800228c:	021c      	lsls	r4, r3, #8
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68b8      	ldr	r0, [r7, #8]
 800229c:	68f9      	ldr	r1, [r7, #12]
 800229e:	1900      	adds	r0, r0, r4
 80022a0:	4169      	adcs	r1, r5
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	2300      	movs	r3, #0
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f7fd ffb6 	bl	8000220 <__aeabi_uldivmod>
 80022b4:	0002      	movs	r2, r0
 80022b6:	000b      	movs	r3, r1
 80022b8:	0013      	movs	r3, r2
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022be:	23c0      	movs	r3, #192	; 0xc0
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d309      	bcc.n	80022da <UART_SetConfig+0x32a>
 80022c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	035b      	lsls	r3, r3, #13
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d204      	bcs.n	80022da <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	e0f0      	b.n	80024bc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80022da:	231a      	movs	r3, #26
 80022dc:	2218      	movs	r2, #24
 80022de:	4694      	mov	ip, r2
 80022e0:	44bc      	add	ip, r7
 80022e2:	4463      	add	r3, ip
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e0e8      	b.n	80024bc <UART_SetConfig+0x50c>
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	efff69f3 	.word	0xefff69f3
 80022f0:	ffffcfff 	.word	0xffffcfff
 80022f4:	40004800 	.word	0x40004800
 80022f8:	fffff4ff 	.word	0xfffff4ff
 80022fc:	40013800 	.word	0x40013800
 8002300:	40021000 	.word	0x40021000
 8002304:	40004400 	.word	0x40004400
 8002308:	003d0900 	.word	0x003d0900
 800230c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	429a      	cmp	r2, r3
 800231a:	d000      	beq.n	800231e <UART_SetConfig+0x36e>
 800231c:	e074      	b.n	8002408 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800231e:	231b      	movs	r3, #27
 8002320:	2218      	movs	r2, #24
 8002322:	4694      	mov	ip, r2
 8002324:	44bc      	add	ip, r7
 8002326:	4463      	add	r3, ip
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d822      	bhi.n	8002374 <UART_SetConfig+0x3c4>
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <UART_SetConfig+0x52c>)
 8002332:	18d3      	adds	r3, r2, r3
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002338:	f7ff fb68 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 800233c:	0003      	movs	r3, r0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002340:	e022      	b.n	8002388 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002342:	f7ff fb79 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 8002346:	0003      	movs	r3, r0
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800234a:	e01d      	b.n	8002388 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800234c:	4b64      	ldr	r3, [pc, #400]	; (80024e0 <UART_SetConfig+0x530>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2210      	movs	r2, #16
 8002352:	4013      	ands	r3, r2
 8002354:	d002      	beq.n	800235c <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <UART_SetConfig+0x534>)
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800235a:	e015      	b.n	8002388 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 800235c:	4b62      	ldr	r3, [pc, #392]	; (80024e8 <UART_SetConfig+0x538>)
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002360:	e012      	b.n	8002388 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002362:	f7ff faa3 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002366:	0003      	movs	r3, r0
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800236a:	e00d      	b.n	8002388 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002372:	e009      	b.n	8002388 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002378:	231a      	movs	r3, #26
 800237a:	2218      	movs	r2, #24
 800237c:	4694      	mov	ip, r2
 800237e:	44bc      	add	ip, r7
 8002380:	4463      	add	r3, ip
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
        break;
 8002386:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d100      	bne.n	8002390 <UART_SetConfig+0x3e0>
 800238e:	e095      	b.n	80024bc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	005a      	lsls	r2, r3, #1
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	18d2      	adds	r2, r2, r3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0019      	movs	r1, r3
 80023a2:	0010      	movs	r0, r2
 80023a4:	f7fd feb0 	bl	8000108 <__udivsi3>
 80023a8:	0003      	movs	r3, r0
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d921      	bls.n	80023f8 <UART_SetConfig+0x448>
 80023b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	025b      	lsls	r3, r3, #9
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d21c      	bcs.n	80023f8 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	200e      	movs	r0, #14
 80023c4:	2418      	movs	r4, #24
 80023c6:	193b      	adds	r3, r7, r4
 80023c8:	181b      	adds	r3, r3, r0
 80023ca:	210f      	movs	r1, #15
 80023cc:	438a      	bics	r2, r1
 80023ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2207      	movs	r2, #7
 80023d8:	4013      	ands	r3, r2
 80023da:	b299      	uxth	r1, r3
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	181b      	adds	r3, r3, r0
 80023e0:	193a      	adds	r2, r7, r4
 80023e2:	1812      	adds	r2, r2, r0
 80023e4:	8812      	ldrh	r2, [r2, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	193a      	adds	r2, r7, r4
 80023f0:	1812      	adds	r2, r2, r0
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	e061      	b.n	80024bc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80023f8:	231a      	movs	r3, #26
 80023fa:	2218      	movs	r2, #24
 80023fc:	4694      	mov	ip, r2
 80023fe:	44bc      	add	ip, r7
 8002400:	4463      	add	r3, ip
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e059      	b.n	80024bc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002408:	231b      	movs	r3, #27
 800240a:	2218      	movs	r2, #24
 800240c:	4694      	mov	ip, r2
 800240e:	44bc      	add	ip, r7
 8002410:	4463      	add	r3, ip
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d822      	bhi.n	800245e <UART_SetConfig+0x4ae>
 8002418:	009a      	lsls	r2, r3, #2
 800241a:	4b34      	ldr	r3, [pc, #208]	; (80024ec <UART_SetConfig+0x53c>)
 800241c:	18d3      	adds	r3, r2, r3
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002422:	f7ff faf3 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8002426:	0003      	movs	r3, r0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800242a:	e022      	b.n	8002472 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800242c:	f7ff fb04 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 8002430:	0003      	movs	r3, r0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002434:	e01d      	b.n	8002472 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <UART_SetConfig+0x530>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2210      	movs	r2, #16
 800243c:	4013      	ands	r3, r2
 800243e:	d002      	beq.n	8002446 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <UART_SetConfig+0x534>)
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002444:	e015      	b.n	8002472 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002446:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <UART_SetConfig+0x538>)
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800244a:	e012      	b.n	8002472 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800244c:	f7ff fa2e 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002450:	0003      	movs	r3, r0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002454:	e00d      	b.n	8002472 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800245c:	e009      	b.n	8002472 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002462:	231a      	movs	r3, #26
 8002464:	2218      	movs	r2, #24
 8002466:	4694      	mov	ip, r2
 8002468:	44bc      	add	ip, r7
 800246a:	4463      	add	r3, ip
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
        break;
 8002470:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d021      	beq.n	80024bc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	085a      	lsrs	r2, r3, #1
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	18d2      	adds	r2, r2, r3
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0019      	movs	r1, r3
 8002488:	0010      	movs	r0, r2
 800248a:	f7fd fe3d 	bl	8000108 <__udivsi3>
 800248e:	0003      	movs	r3, r0
 8002490:	b29b      	uxth	r3, r3
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	2b0f      	cmp	r3, #15
 8002498:	d909      	bls.n	80024ae <UART_SetConfig+0x4fe>
 800249a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d204      	bcs.n	80024ae <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	e006      	b.n	80024bc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80024ae:	231a      	movs	r3, #26
 80024b0:	2218      	movs	r2, #24
 80024b2:	4694      	mov	ip, r2
 80024b4:	44bc      	add	ip, r7
 80024b6:	4463      	add	r3, ip
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	2200      	movs	r2, #0
 80024c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2200      	movs	r2, #0
 80024c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80024c8:	231a      	movs	r3, #26
 80024ca:	2218      	movs	r2, #24
 80024cc:	4694      	mov	ip, r2
 80024ce:	44bc      	add	ip, r7
 80024d0:	4463      	add	r3, ip
 80024d2:	781b      	ldrb	r3, [r3, #0]
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b00e      	add	sp, #56	; 0x38
 80024da:	bdb0      	pop	{r4, r5, r7, pc}
 80024dc:	08002b74 	.word	0x08002b74
 80024e0:	40021000 	.word	0x40021000
 80024e4:	003d0900 	.word	0x003d0900
 80024e8:	00f42400 	.word	0x00f42400
 80024ec:	08002b98 	.word	0x08002b98

080024f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2201      	movs	r2, #1
 80024fe:	4013      	ands	r3, r2
 8002500:	d00b      	beq.n	800251a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a4a      	ldr	r2, [pc, #296]	; (8002634 <UART_AdvFeatureConfig+0x144>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d00b      	beq.n	800253c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a43      	ldr	r2, [pc, #268]	; (8002638 <UART_AdvFeatureConfig+0x148>)
 800252c:	4013      	ands	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2204      	movs	r2, #4
 8002542:	4013      	ands	r3, r2
 8002544:	d00b      	beq.n	800255e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a3b      	ldr	r2, [pc, #236]	; (800263c <UART_AdvFeatureConfig+0x14c>)
 800254e:	4013      	ands	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	2208      	movs	r2, #8
 8002564:	4013      	ands	r3, r2
 8002566:	d00b      	beq.n	8002580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a34      	ldr	r2, [pc, #208]	; (8002640 <UART_AdvFeatureConfig+0x150>)
 8002570:	4013      	ands	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	2210      	movs	r2, #16
 8002586:	4013      	ands	r3, r2
 8002588:	d00b      	beq.n	80025a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a2c      	ldr	r2, [pc, #176]	; (8002644 <UART_AdvFeatureConfig+0x154>)
 8002592:	4013      	ands	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2220      	movs	r2, #32
 80025a8:	4013      	ands	r3, r2
 80025aa:	d00b      	beq.n	80025c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4a25      	ldr	r2, [pc, #148]	; (8002648 <UART_AdvFeatureConfig+0x158>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2240      	movs	r2, #64	; 0x40
 80025ca:	4013      	ands	r3, r2
 80025cc:	d01d      	beq.n	800260a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <UART_AdvFeatureConfig+0x15c>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	035b      	lsls	r3, r3, #13
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10b      	bne.n	800260a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <UART_AdvFeatureConfig+0x160>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	4013      	ands	r3, r2
 8002612:	d00b      	beq.n	800262c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <UART_AdvFeatureConfig+0x164>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
  }
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}
 8002634:	fffdffff 	.word	0xfffdffff
 8002638:	fffeffff 	.word	0xfffeffff
 800263c:	fffbffff 	.word	0xfffbffff
 8002640:	ffff7fff 	.word	0xffff7fff
 8002644:	ffffefff 	.word	0xffffefff
 8002648:	ffffdfff 	.word	0xffffdfff
 800264c:	ffefffff 	.word	0xffefffff
 8002650:	ff9fffff 	.word	0xff9fffff
 8002654:	fff7ffff 	.word	0xfff7ffff

08002658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	2100      	movs	r1, #0
 8002666:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002668:	f7fe f9e0 	bl	8000a2c <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2208      	movs	r2, #8
 8002678:	4013      	ands	r3, r2
 800267a:	2b08      	cmp	r3, #8
 800267c:	d10c      	bne.n	8002698 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	0391      	lsls	r1, r2, #14
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <UART_CheckIdleState+0x8c>)
 8002688:	9200      	str	r2, [sp, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	f000 f82c 	bl	80026e8 <UART_WaitOnFlagUntilTimeout>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d001      	beq.n	8002698 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e021      	b.n	80026dc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2204      	movs	r2, #4
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d10c      	bne.n	80026c0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	03d1      	lsls	r1, r2, #15
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <UART_CheckIdleState+0x8c>)
 80026b0:	9200      	str	r2, [sp, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f000 f818 	bl	80026e8 <UART_WaitOnFlagUntilTimeout>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d001      	beq.n	80026c0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e00d      	b.n	80026dc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2274      	movs	r2, #116	; 0x74
 80026d6:	2100      	movs	r1, #0
 80026d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b004      	add	sp, #16
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	01ffffff 	.word	0x01ffffff

080026e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b094      	sub	sp, #80	; 0x50
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	1dfb      	adds	r3, r7, #7
 80026f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f8:	e0a3      	b.n	8002842 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fc:	3301      	adds	r3, #1
 80026fe:	d100      	bne.n	8002702 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002700:	e09f      	b.n	8002842 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7fe f993 	bl	8000a2c <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <UART_WaitOnFlagUntilTimeout+0x30>
 8002712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002714:	2b00      	cmp	r3, #0
 8002716:	d13d      	bne.n	8002794 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002718:	f3ef 8310 	mrs	r3, PRIMASK
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002720:	647b      	str	r3, [r7, #68]	; 0x44
 8002722:	2301      	movs	r3, #1
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	f383 8810 	msr	PRIMASK, r3
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	494c      	ldr	r1, [pc, #304]	; (800286c <UART_WaitOnFlagUntilTimeout+0x184>)
 800273a:	400a      	ands	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	f383 8810 	msr	PRIMASK, r3
}
 8002748:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800274a:	f3ef 8310 	mrs	r3, PRIMASK
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002752:	643b      	str	r3, [r7, #64]	; 0x40
 8002754:	2301      	movs	r3, #1
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	f383 8810 	msr	PRIMASK, r3
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2101      	movs	r1, #1
 800276c:	438a      	bics	r2, r1
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002776:	f383 8810 	msr	PRIMASK, r3
}
 800277a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2274      	movs	r2, #116	; 0x74
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e067      	b.n	8002864 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2204      	movs	r2, #4
 800279c:	4013      	ands	r3, r2
 800279e:	d050      	beq.n	8002842 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	401a      	ands	r2, r3
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d146      	bne.n	8002842 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2280      	movs	r2, #128	; 0x80
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027be:	f3ef 8310 	mrs	r3, PRIMASK
 80027c2:	613b      	str	r3, [r7, #16]
  return(result);
 80027c4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c8:	2301      	movs	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f383 8810 	msr	PRIMASK, r3
}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4923      	ldr	r1, [pc, #140]	; (800286c <UART_WaitOnFlagUntilTimeout+0x184>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f383 8810 	msr	PRIMASK, r3
}
 80027ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f0:	f3ef 8310 	mrs	r3, PRIMASK
 80027f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80027f6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027fa:	2301      	movs	r3, #1
 80027fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f383 8810 	msr	PRIMASK, r3
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	438a      	bics	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f383 8810 	msr	PRIMASK, r3
}
 8002820:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	2120      	movs	r1, #32
 8002834:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2274      	movs	r2, #116	; 0x74
 800283a:	2100      	movs	r1, #0
 800283c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e010      	b.n	8002864 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	4013      	ands	r3, r2
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	425a      	negs	r2, r3
 8002852:	4153      	adcs	r3, r2
 8002854:	b2db      	uxtb	r3, r3
 8002856:	001a      	movs	r2, r3
 8002858:	1dfb      	adds	r3, r7, #7
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d100      	bne.n	8002862 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002860:	e74b      	b.n	80026fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b014      	add	sp, #80	; 0x50
 800286a:	bd80      	pop	{r7, pc}
 800286c:	fffffe5f 	.word	0xfffffe5f

08002870 <atoi>:
 8002870:	b510      	push	{r4, lr}
 8002872:	220a      	movs	r2, #10
 8002874:	2100      	movs	r1, #0
 8002876:	f000 f93b 	bl	8002af0 <strtol>
 800287a:	bd10      	pop	{r4, pc}

0800287c <__errno>:
 800287c:	4b01      	ldr	r3, [pc, #4]	; (8002884 <__errno+0x8>)
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	4770      	bx	lr
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	2000000c 	.word	0x2000000c

08002888 <__libc_init_array>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	2600      	movs	r6, #0
 800288c:	4d0c      	ldr	r5, [pc, #48]	; (80028c0 <__libc_init_array+0x38>)
 800288e:	4c0d      	ldr	r4, [pc, #52]	; (80028c4 <__libc_init_array+0x3c>)
 8002890:	1b64      	subs	r4, r4, r5
 8002892:	10a4      	asrs	r4, r4, #2
 8002894:	42a6      	cmp	r6, r4
 8002896:	d109      	bne.n	80028ac <__libc_init_array+0x24>
 8002898:	2600      	movs	r6, #0
 800289a:	f000 f947 	bl	8002b2c <_init>
 800289e:	4d0a      	ldr	r5, [pc, #40]	; (80028c8 <__libc_init_array+0x40>)
 80028a0:	4c0a      	ldr	r4, [pc, #40]	; (80028cc <__libc_init_array+0x44>)
 80028a2:	1b64      	subs	r4, r4, r5
 80028a4:	10a4      	asrs	r4, r4, #2
 80028a6:	42a6      	cmp	r6, r4
 80028a8:	d105      	bne.n	80028b6 <__libc_init_array+0x2e>
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	00b3      	lsls	r3, r6, #2
 80028ae:	58eb      	ldr	r3, [r5, r3]
 80028b0:	4798      	blx	r3
 80028b2:	3601      	adds	r6, #1
 80028b4:	e7ee      	b.n	8002894 <__libc_init_array+0xc>
 80028b6:	00b3      	lsls	r3, r6, #2
 80028b8:	58eb      	ldr	r3, [r5, r3]
 80028ba:	4798      	blx	r3
 80028bc:	3601      	adds	r6, #1
 80028be:	e7f2      	b.n	80028a6 <__libc_init_array+0x1e>
 80028c0:	08002cc8 	.word	0x08002cc8
 80028c4:	08002cc8 	.word	0x08002cc8
 80028c8:	08002cc8 	.word	0x08002cc8
 80028cc:	08002ccc 	.word	0x08002ccc

080028d0 <malloc>:
 80028d0:	b510      	push	{r4, lr}
 80028d2:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <malloc+0x10>)
 80028d4:	0001      	movs	r1, r0
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	f000 f80c 	bl	80028f4 <_malloc_r>
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	2000000c 	.word	0x2000000c

080028e4 <memset>:
 80028e4:	0003      	movs	r3, r0
 80028e6:	1882      	adds	r2, r0, r2
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d100      	bne.n	80028ee <memset+0xa>
 80028ec:	4770      	bx	lr
 80028ee:	7019      	strb	r1, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	e7f9      	b.n	80028e8 <memset+0x4>

080028f4 <_malloc_r>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	2303      	movs	r3, #3
 80028f8:	1ccd      	adds	r5, r1, #3
 80028fa:	439d      	bics	r5, r3
 80028fc:	3508      	adds	r5, #8
 80028fe:	0006      	movs	r6, r0
 8002900:	2d0c      	cmp	r5, #12
 8002902:	d21f      	bcs.n	8002944 <_malloc_r+0x50>
 8002904:	250c      	movs	r5, #12
 8002906:	42a9      	cmp	r1, r5
 8002908:	d81e      	bhi.n	8002948 <_malloc_r+0x54>
 800290a:	0030      	movs	r0, r6
 800290c:	f000 f8fc 	bl	8002b08 <__malloc_lock>
 8002910:	4925      	ldr	r1, [pc, #148]	; (80029a8 <_malloc_r+0xb4>)
 8002912:	680a      	ldr	r2, [r1, #0]
 8002914:	0014      	movs	r4, r2
 8002916:	2c00      	cmp	r4, #0
 8002918:	d11a      	bne.n	8002950 <_malloc_r+0x5c>
 800291a:	4f24      	ldr	r7, [pc, #144]	; (80029ac <_malloc_r+0xb8>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <_malloc_r+0x38>
 8002922:	0021      	movs	r1, r4
 8002924:	0030      	movs	r0, r6
 8002926:	f000 f843 	bl	80029b0 <_sbrk_r>
 800292a:	6038      	str	r0, [r7, #0]
 800292c:	0029      	movs	r1, r5
 800292e:	0030      	movs	r0, r6
 8002930:	f000 f83e 	bl	80029b0 <_sbrk_r>
 8002934:	1c43      	adds	r3, r0, #1
 8002936:	d12b      	bne.n	8002990 <_malloc_r+0x9c>
 8002938:	230c      	movs	r3, #12
 800293a:	0030      	movs	r0, r6
 800293c:	6033      	str	r3, [r6, #0]
 800293e:	f000 f8eb 	bl	8002b18 <__malloc_unlock>
 8002942:	e003      	b.n	800294c <_malloc_r+0x58>
 8002944:	2d00      	cmp	r5, #0
 8002946:	dade      	bge.n	8002906 <_malloc_r+0x12>
 8002948:	230c      	movs	r3, #12
 800294a:	6033      	str	r3, [r6, #0]
 800294c:	2000      	movs	r0, #0
 800294e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	1b5b      	subs	r3, r3, r5
 8002954:	d419      	bmi.n	800298a <_malloc_r+0x96>
 8002956:	2b0b      	cmp	r3, #11
 8002958:	d903      	bls.n	8002962 <_malloc_r+0x6e>
 800295a:	6023      	str	r3, [r4, #0]
 800295c:	18e4      	adds	r4, r4, r3
 800295e:	6025      	str	r5, [r4, #0]
 8002960:	e003      	b.n	800296a <_malloc_r+0x76>
 8002962:	6863      	ldr	r3, [r4, #4]
 8002964:	42a2      	cmp	r2, r4
 8002966:	d10e      	bne.n	8002986 <_malloc_r+0x92>
 8002968:	600b      	str	r3, [r1, #0]
 800296a:	0030      	movs	r0, r6
 800296c:	f000 f8d4 	bl	8002b18 <__malloc_unlock>
 8002970:	0020      	movs	r0, r4
 8002972:	2207      	movs	r2, #7
 8002974:	300b      	adds	r0, #11
 8002976:	1d23      	adds	r3, r4, #4
 8002978:	4390      	bics	r0, r2
 800297a:	1ac2      	subs	r2, r0, r3
 800297c:	4298      	cmp	r0, r3
 800297e:	d0e6      	beq.n	800294e <_malloc_r+0x5a>
 8002980:	1a1b      	subs	r3, r3, r0
 8002982:	50a3      	str	r3, [r4, r2]
 8002984:	e7e3      	b.n	800294e <_malloc_r+0x5a>
 8002986:	6053      	str	r3, [r2, #4]
 8002988:	e7ef      	b.n	800296a <_malloc_r+0x76>
 800298a:	0022      	movs	r2, r4
 800298c:	6864      	ldr	r4, [r4, #4]
 800298e:	e7c2      	b.n	8002916 <_malloc_r+0x22>
 8002990:	2303      	movs	r3, #3
 8002992:	1cc4      	adds	r4, r0, #3
 8002994:	439c      	bics	r4, r3
 8002996:	42a0      	cmp	r0, r4
 8002998:	d0e1      	beq.n	800295e <_malloc_r+0x6a>
 800299a:	1a21      	subs	r1, r4, r0
 800299c:	0030      	movs	r0, r6
 800299e:	f000 f807 	bl	80029b0 <_sbrk_r>
 80029a2:	1c43      	adds	r3, r0, #1
 80029a4:	d1db      	bne.n	800295e <_malloc_r+0x6a>
 80029a6:	e7c7      	b.n	8002938 <_malloc_r+0x44>
 80029a8:	20000090 	.word	0x20000090
 80029ac:	20000094 	.word	0x20000094

080029b0 <_sbrk_r>:
 80029b0:	2300      	movs	r3, #0
 80029b2:	b570      	push	{r4, r5, r6, lr}
 80029b4:	4d06      	ldr	r5, [pc, #24]	; (80029d0 <_sbrk_r+0x20>)
 80029b6:	0004      	movs	r4, r0
 80029b8:	0008      	movs	r0, r1
 80029ba:	602b      	str	r3, [r5, #0]
 80029bc:	f7fd ff6a 	bl	8000894 <_sbrk>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d103      	bne.n	80029cc <_sbrk_r+0x1c>
 80029c4:	682b      	ldr	r3, [r5, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d000      	beq.n	80029cc <_sbrk_r+0x1c>
 80029ca:	6023      	str	r3, [r4, #0]
 80029cc:	bd70      	pop	{r4, r5, r6, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	20000120 	.word	0x20000120

080029d4 <_strtol_l.isra.0>:
 80029d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d6:	b087      	sub	sp, #28
 80029d8:	001e      	movs	r6, r3
 80029da:	9005      	str	r0, [sp, #20]
 80029dc:	9101      	str	r1, [sp, #4]
 80029de:	9202      	str	r2, [sp, #8]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d045      	beq.n	8002a70 <_strtol_l.isra.0+0x9c>
 80029e4:	0008      	movs	r0, r1
 80029e6:	2b24      	cmp	r3, #36	; 0x24
 80029e8:	d842      	bhi.n	8002a70 <_strtol_l.isra.0+0x9c>
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <_strtol_l.isra.0+0x114>)
 80029ec:	2208      	movs	r2, #8
 80029ee:	469c      	mov	ip, r3
 80029f0:	0003      	movs	r3, r0
 80029f2:	4661      	mov	r1, ip
 80029f4:	781c      	ldrb	r4, [r3, #0]
 80029f6:	1c45      	adds	r5, r0, #1
 80029f8:	5d09      	ldrb	r1, [r1, r4]
 80029fa:	0028      	movs	r0, r5
 80029fc:	000f      	movs	r7, r1
 80029fe:	4017      	ands	r7, r2
 8002a00:	4211      	tst	r1, r2
 8002a02:	d1f5      	bne.n	80029f0 <_strtol_l.isra.0+0x1c>
 8002a04:	2c2d      	cmp	r4, #45	; 0x2d
 8002a06:	d13a      	bne.n	8002a7e <_strtol_l.isra.0+0xaa>
 8002a08:	2701      	movs	r7, #1
 8002a0a:	782c      	ldrb	r4, [r5, #0]
 8002a0c:	1c9d      	adds	r5, r3, #2
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	d065      	beq.n	8002ade <_strtol_l.isra.0+0x10a>
 8002a12:	2e10      	cmp	r6, #16
 8002a14:	d109      	bne.n	8002a2a <_strtol_l.isra.0+0x56>
 8002a16:	2c30      	cmp	r4, #48	; 0x30
 8002a18:	d107      	bne.n	8002a2a <_strtol_l.isra.0+0x56>
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	782b      	ldrb	r3, [r5, #0]
 8002a1e:	4393      	bics	r3, r2
 8002a20:	2b58      	cmp	r3, #88	; 0x58
 8002a22:	d157      	bne.n	8002ad4 <_strtol_l.isra.0+0x100>
 8002a24:	2610      	movs	r6, #16
 8002a26:	786c      	ldrb	r4, [r5, #1]
 8002a28:	3502      	adds	r5, #2
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <_strtol_l.isra.0+0x118>)
 8002a2c:	0031      	movs	r1, r6
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	0018      	movs	r0, r3
 8002a32:	9303      	str	r3, [sp, #12]
 8002a34:	f7fd fbee 	bl	8000214 <__aeabi_uidivmod>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4684      	mov	ip, r0
 8002a3e:	0018      	movs	r0, r3
 8002a40:	9104      	str	r1, [sp, #16]
 8002a42:	4252      	negs	r2, r2
 8002a44:	0021      	movs	r1, r4
 8002a46:	3930      	subs	r1, #48	; 0x30
 8002a48:	2909      	cmp	r1, #9
 8002a4a:	d81d      	bhi.n	8002a88 <_strtol_l.isra.0+0xb4>
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	42a6      	cmp	r6, r4
 8002a50:	dd28      	ble.n	8002aa4 <_strtol_l.isra.0+0xd0>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db24      	blt.n	8002aa0 <_strtol_l.isra.0+0xcc>
 8002a56:	0013      	movs	r3, r2
 8002a58:	4584      	cmp	ip, r0
 8002a5a:	d306      	bcc.n	8002a6a <_strtol_l.isra.0+0x96>
 8002a5c:	d102      	bne.n	8002a64 <_strtol_l.isra.0+0x90>
 8002a5e:	9904      	ldr	r1, [sp, #16]
 8002a60:	42a1      	cmp	r1, r4
 8002a62:	db02      	blt.n	8002a6a <_strtol_l.isra.0+0x96>
 8002a64:	2301      	movs	r3, #1
 8002a66:	4370      	muls	r0, r6
 8002a68:	1820      	adds	r0, r4, r0
 8002a6a:	782c      	ldrb	r4, [r5, #0]
 8002a6c:	3501      	adds	r5, #1
 8002a6e:	e7e9      	b.n	8002a44 <_strtol_l.isra.0+0x70>
 8002a70:	f7ff ff04 	bl	800287c <__errno>
 8002a74:	2316      	movs	r3, #22
 8002a76:	6003      	str	r3, [r0, #0]
 8002a78:	2000      	movs	r0, #0
 8002a7a:	b007      	add	sp, #28
 8002a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a7e:	2c2b      	cmp	r4, #43	; 0x2b
 8002a80:	d1c5      	bne.n	8002a0e <_strtol_l.isra.0+0x3a>
 8002a82:	782c      	ldrb	r4, [r5, #0]
 8002a84:	1c9d      	adds	r5, r3, #2
 8002a86:	e7c2      	b.n	8002a0e <_strtol_l.isra.0+0x3a>
 8002a88:	0021      	movs	r1, r4
 8002a8a:	3941      	subs	r1, #65	; 0x41
 8002a8c:	2919      	cmp	r1, #25
 8002a8e:	d801      	bhi.n	8002a94 <_strtol_l.isra.0+0xc0>
 8002a90:	3c37      	subs	r4, #55	; 0x37
 8002a92:	e7dc      	b.n	8002a4e <_strtol_l.isra.0+0x7a>
 8002a94:	0021      	movs	r1, r4
 8002a96:	3961      	subs	r1, #97	; 0x61
 8002a98:	2919      	cmp	r1, #25
 8002a9a:	d803      	bhi.n	8002aa4 <_strtol_l.isra.0+0xd0>
 8002a9c:	3c57      	subs	r4, #87	; 0x57
 8002a9e:	e7d6      	b.n	8002a4e <_strtol_l.isra.0+0x7a>
 8002aa0:	0013      	movs	r3, r2
 8002aa2:	e7e2      	b.n	8002a6a <_strtol_l.isra.0+0x96>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da09      	bge.n	8002abc <_strtol_l.isra.0+0xe8>
 8002aa8:	2322      	movs	r3, #34	; 0x22
 8002aaa:	9a05      	ldr	r2, [sp, #20]
 8002aac:	9803      	ldr	r0, [sp, #12]
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	9b02      	ldr	r3, [sp, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0e1      	beq.n	8002a7a <_strtol_l.isra.0+0xa6>
 8002ab6:	1e6b      	subs	r3, r5, #1
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	e007      	b.n	8002acc <_strtol_l.isra.0+0xf8>
 8002abc:	2f00      	cmp	r7, #0
 8002abe:	d000      	beq.n	8002ac2 <_strtol_l.isra.0+0xee>
 8002ac0:	4240      	negs	r0, r0
 8002ac2:	9a02      	ldr	r2, [sp, #8]
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d0d8      	beq.n	8002a7a <_strtol_l.isra.0+0xa6>
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f4      	bne.n	8002ab6 <_strtol_l.isra.0+0xe2>
 8002acc:	9b02      	ldr	r3, [sp, #8]
 8002ace:	9a01      	ldr	r2, [sp, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e7d2      	b.n	8002a7a <_strtol_l.isra.0+0xa6>
 8002ad4:	2430      	movs	r4, #48	; 0x30
 8002ad6:	2e00      	cmp	r6, #0
 8002ad8:	d1a7      	bne.n	8002a2a <_strtol_l.isra.0+0x56>
 8002ada:	3608      	adds	r6, #8
 8002adc:	e7a5      	b.n	8002a2a <_strtol_l.isra.0+0x56>
 8002ade:	2c30      	cmp	r4, #48	; 0x30
 8002ae0:	d09b      	beq.n	8002a1a <_strtol_l.isra.0+0x46>
 8002ae2:	260a      	movs	r6, #10
 8002ae4:	e7a1      	b.n	8002a2a <_strtol_l.isra.0+0x56>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	08002bbd 	.word	0x08002bbd
 8002aec:	7fffffff 	.word	0x7fffffff

08002af0 <strtol>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	0013      	movs	r3, r2
 8002af4:	000a      	movs	r2, r1
 8002af6:	0001      	movs	r1, r0
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <strtol+0x14>)
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	f7ff ff6a 	bl	80029d4 <_strtol_l.isra.0>
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	2000000c 	.word	0x2000000c

08002b08 <__malloc_lock>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	4802      	ldr	r0, [pc, #8]	; (8002b14 <__malloc_lock+0xc>)
 8002b0c:	f000 f80c 	bl	8002b28 <__retarget_lock_acquire_recursive>
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	20000128 	.word	0x20000128

08002b18 <__malloc_unlock>:
 8002b18:	b510      	push	{r4, lr}
 8002b1a:	4802      	ldr	r0, [pc, #8]	; (8002b24 <__malloc_unlock+0xc>)
 8002b1c:	f000 f805 	bl	8002b2a <__retarget_lock_release_recursive>
 8002b20:	bd10      	pop	{r4, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	20000128 	.word	0x20000128

08002b28 <__retarget_lock_acquire_recursive>:
 8002b28:	4770      	bx	lr

08002b2a <__retarget_lock_release_recursive>:
 8002b2a:	4770      	bx	lr

08002b2c <_init>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr

08002b38 <_fini>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr
